{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/sim4edu/source/img/SchellingGrid.png","path":"img/SchellingGrid.png","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/img/ant.svg","path":"img/ant.svg","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/img/forklift.svg","path":"img/forklift.svg","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/img/drive-through-blue.svg","path":"img/drive-through-blue.svg","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/img/four-consecutive-machines.svg","path":"img/four-consecutive-machines.svg","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/img/globe-icon.svg","path":"img/globe-icon.svg","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/img/icon-16x16.png","path":"img/icon-16x16.png","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/img/icon-32x32.png","path":"img/icon-32x32.png","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/img/factory.svg","path":"img/factory.svg","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/img/sim4edu.svg","path":"img/sim4edu.svg","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/404.css","path":"css/404.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/area-page.css","path":"css/area-page.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/ant.css","path":"css/ant.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/basic-styles.css","path":"css/basic-styles.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/prio-menu.css","path":"css/prio-menu.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/normalize.css","path":"css/normalize.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/media-queries.css","path":"css/media-queries.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/start-page.css","path":"css/start-page.css","modified":0,"renderable":1},{"_id":"source/sims/1/Download.zip","path":"sims/1/Download.zip","modified":1,"renderable":0},{"_id":"source/sims/1/media/img/Arrival_RDM.svg","path":"sims/1/media/img/Arrival_RDM.svg","modified":1,"renderable":0},{"_id":"source/sims/1/media/img/Arrival_CRM.svg","path":"sims/1/media/img/Arrival_CRM.svg","modified":1,"renderable":0},{"_id":"source/sims/1/media/img/Departure_RDM.svg","path":"sims/1/media/img/Departure_RDM.svg","modified":1,"renderable":0},{"_id":"source/sims/1/media/img/CPM.svg","path":"sims/1/media/img/CPM.svg","modified":1,"renderable":0},{"_id":"source/sims/1/media/img/IDM.svg","path":"sims/1/media/img/IDM.svg","modified":1,"renderable":0},{"_id":"source/sims/1/media/img/ServiceEnd_CRM.svg","path":"sims/1/media/img/ServiceEnd_CRM.svg","modified":1,"renderable":0},{"_id":"source/sims/1/media/img/PDM.svg","path":"sims/1/media/img/PDM.svg","modified":1,"renderable":0},{"_id":"source/sims/1/media/img/ServiceStart_CRM.svg","path":"sims/1/media/img/ServiceStart_CRM.svg","modified":1,"renderable":0},{"_id":"source/sims/1/media/img/theme-image.svg","path":"sims/1/media/img/theme-image.svg","modified":1,"renderable":0},{"_id":"source/sims/1/media/img/CIM.svg","path":"sims/1/media/img/CIM.svg","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"ac2b4a8692d18552caaf7d707d77ead8ada75b50","modified":1561289804045},{"_id":"source/index.md","hash":"2e88f4a081367bdc0cc3ce1462747ba24cd66f9e","modified":1561289859892},{"_id":"themes/sim4edu/config.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559290815301},{"_id":"themes/sim4edu/.DS_Store","hash":"b1c21106aac92f75528ca00470174998e3fed6bf","modified":1561288746824},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1561289791016},{"_id":"source/_posts/hellowrld.md","hash":"7287e0fdbe9215ad3aed4619edee065eb53a377f","modified":1561291671193},{"_id":"source/sims/.DS_Store","hash":"5ea0233c0f1875fed0bbf2d94ed3e241d690820c","modified":1561292124928},{"_id":"source/sims/loadManager.js","hash":"2be2ad824b0245614c1cd3313db58e2f752d8911","modified":1555429474160},{"_id":"source/sims/loadManagerConfig.js","hash":"dda0aaab700d8f631d07fbf0e41037afb5400001","modified":1549708594110},{"_id":"source/oes/index.md","hash":"eb972353dc99c2b4423644b539f0c73e9e7fc943","modified":1559313794362},{"_id":"themes/sim4edu/layout/index.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559311238482},{"_id":"themes/sim4edu/layout/.DS_Store","hash":"7bc07c0b08c9b3f02f946e82918fdcd642b21ea3","modified":1559311958908},{"_id":"themes/sim4edu/layout/layout.ejs","hash":"061867b56f453e74bd8985da4105efbac906f0b7","modified":1559295282387},{"_id":"themes/sim4edu/layout/post.ejs","hash":"d08d3a3a07b30ed3935e85389eaa94744d33b80c","modified":1559310495639},{"_id":"themes/sim4edu/layout/page.ejs","hash":"409279400bbe776f4d5f13b8639184a2b2e526b4","modified":1559314037287},{"_id":"themes/sim4edu/source/.DS_Store","hash":"5e0d5b1442206564edd843034fb698c61bfa0f1f","modified":1559311953885},{"_id":"source/sims/2/CustomerArrival.js","hash":"1bc429cc6e8175942e095e408eb4b4522a9288f0","modified":1554836878779},{"_id":"source/sims/2/CustomerDeparture.js","hash":"c0e1240ce0377dffeb439c933640edfef8e10748","modified":1554836878780},{"_id":"source/sims/2/ServiceDesk.js","hash":"a3f1825d04e43e98195d7504b333d115c6c95014","modified":1554836878780},{"_id":"source/sims/2/Download.zip","hash":"94a866774fbb5cdfdf32ea784f855982fecfe79d","modified":1549708594008},{"_id":"source/sims/2/index.md","hash":"1e9049a0759dfcc1b9d9d2e78c8ac87c708dbd14","modified":1561291262405},{"_id":"source/sims/2/description.md","hash":"975bb95d847066eb972f4c82ca3da48c853df4de","modified":1561291231586},{"_id":"source/sims/2/metadata.js","hash":"8e9080bdb0d2d36674825361818bde0b571b7769","modified":1554836878781},{"_id":"source/sims/2/simulation-worker.js","hash":"ce9143b75f2195d627569671ec7759b5940f4fbe","modified":1549708594015},{"_id":"source/sims/2/simulation.js","hash":"6d747e57a4b0187cf948d8a94205e37022658f14","modified":1549708594015},{"_id":"source/sims/framework/description.css","hash":"5217dc9264c635274b8d0c11ccae353957c16141","modified":1555429474148},{"_id":"source/sims/framework/chartist.css","hash":"235d269058ae610b92b35db26e285fb1b1f6a600","modified":1549708594105},{"_id":"source/sims/framework/chartist.js","hash":"12653a9af6d351c53efbb702efcd7623e2c457da","modified":1549708594105},{"_id":"source/sims/framework/description.js","hash":"11b450309d5418725a626ce040479777939d19c1","modified":1555429474149},{"_id":"source/sims/framework/frontMatter.js","hash":"7b04e197bc9055abbd252ba8ef1f8eec6ddf707b","modified":1555429474150},{"_id":"source/sims/framework/gridDom-visualization.js","hash":"c96513d701187e75863f3e096728834418605a7f","modified":1549708594106},{"_id":"source/sims/framework/prism.css","hash":"a6a63ae36bcc123fdc65c4cd5226dd4685f060a0","modified":1549708594106},{"_id":"source/sims/framework/oneDimSVG-visualization.js","hash":"da3d8072fbb25c46e33190c28d46e48b9e5adb68","modified":1549708594106},{"_id":"source/sims/framework/prism.js","hash":"bddd301e72075526185604de120e74f5932ec423","modified":1549708594106},{"_id":"source/sims/framework/simulator-core.css","hash":"d8723c053a007e2456fffa6921adb15070a94d13","modified":1555429474154},{"_id":"source/sims/framework/space-core.js","hash":"ef77ac6527aa1fd4b576ab0c56d864ef6ab5dd4b","modified":1549708594109},{"_id":"themes/sim4edu/layout/partial/header.ejs","hash":"c24676babd29daec6e77f77432478a9eaf502710","modified":1559293436190},{"_id":"themes/sim4edu/layout/partial/head.ejs","hash":"899beb7acb0e34b46ca020317b069ed8526d59b8","modified":1559315071508},{"_id":"themes/sim4edu/layout/partial/footer.ejs","hash":"0245d4632c04232974d5e023353ecec1afd46343","modified":1559311389824},{"_id":"themes/sim4edu/source/img/SchellingGrid.png","hash":"c67caafb092394722430eb8f778cd4ac0b05d75f","modified":1549708593974},{"_id":"themes/sim4edu/source/img/ant.svg","hash":"735cad67de657f4d99301eee9affd1cfc0e44d41","modified":1549708593974},{"_id":"themes/sim4edu/source/img/forklift.svg","hash":"7350284e976df8b2a5de6f17acca1b2120da0728","modified":1549708593975},{"_id":"themes/sim4edu/source/img/drive-through-blue.svg","hash":"cfb074b5088ac3d6791d8dbb19aa438f89cecdf6","modified":1555429474196},{"_id":"themes/sim4edu/source/img/four-consecutive-machines.svg","hash":"215a5a104d7cd02674c4583370d7024664381897","modified":1549708593975},{"_id":"themes/sim4edu/source/img/globe-icon.svg","hash":"3a3151388af058fb610c3b852fa7ba5627817172","modified":1554836878776},{"_id":"themes/sim4edu/source/img/icon-16x16.png","hash":"12cfecca0fe8eb39a73ace721a6092db0d772ad8","modified":1549708593976},{"_id":"themes/sim4edu/source/img/icon-32x32.png","hash":"331245709227a902470dde340c8278a3a35beb2c","modified":1549708593976},{"_id":"themes/sim4edu/source/img/factory.svg","hash":"fd8c17caf14313b42e2956ebc71f4111014f8e11","modified":1551350454658},{"_id":"themes/sim4edu/source/img/sim4edu.svg","hash":"2f265fbcec08098b2ecd7795da79a9822103fc05","modified":1554836878776},{"_id":"themes/sim4edu/source/css/.DS_Store","hash":"99b4191896c2ead406c20e9abe70c4d31ed3e951","modified":1559311785855},{"_id":"themes/sim4edu/source/css/404.css","hash":"7b651ef33a0a3ffcfb37a83b1a3e4318f1fbfdb0","modified":1558099195978},{"_id":"themes/sim4edu/source/css/area-page.css","hash":"96fbfb33972cb4051a1e362f2c27bdbc1f3e3d1e","modified":1558102403737},{"_id":"themes/sim4edu/source/css/ant.css","hash":"e4eac28cfdc09816b9cbfb60474954f5d5fc7120","modified":1555429474087},{"_id":"themes/sim4edu/source/css/basic-styles.css","hash":"706eb0b0e4fc1607c7eb1189b719361c68a265ad","modified":1558101640248},{"_id":"themes/sim4edu/source/css/prio-menu.css","hash":"afea89d355ae0dc379e6b51756aa7b5ce5c78ead","modified":1561289623900},{"_id":"themes/sim4edu/source/css/normalize.css","hash":"14ab02667c294e38d2a37fd4d282596184cfe8ad","modified":1558072883902},{"_id":"themes/sim4edu/source/css/media-queries.css","hash":"e2edbdab2e3a4d77908a6ecc21f118ad16c422d4","modified":1558602449287},{"_id":"themes/sim4edu/source/css/start-page.css","hash":"9688aee262254f9a1a4ae4c95e506d5e9015db56","modified":1558086482099},{"_id":"source/sims/framework/simulation-worker-core.js","hash":"0dd9f01cbb90271f4b8a3f20d3f05826cd7e60f3","modified":1555429474153},{"_id":"source/sims/2/media/img/Arrival_RDM.svg","hash":"c64a1de5f62bda6df0220aff3e093db4c160e36c","modified":1549708594010},{"_id":"source/sims/2/media/img/CPM.svg","hash":"8c2d848411f5151bd62618264a76ed69a669e0e5","modified":1549708594011},{"_id":"source/sims/2/media/img/Departure_RDM.svg","hash":"5ec2754e81f9c973deb0aceabb0307b53fd93fe0","modified":1549708594012},{"_id":"source/sims/2/media/img/Arrival_CRM.svg","hash":"505f3f2f28be766efd364eabc2aa0e43a62d37ff","modified":1549708594009},{"_id":"source/sims/2/media/img/ServiceStart_CRM.svg","hash":"f597c456728a70fff82a2baefcd322308f56f47a","modified":1549708594014},{"_id":"source/sims/2/media/img/IDM.svg","hash":"7abc51ba37f6d56cb03f33994d7c5a7f424ebeb4","modified":1549708594012},{"_id":"source/sims/2/media/img/ServiceEnd_CRM.svg","hash":"2798fdebe54462d1d0408da44087aec2ef72905a","modified":1549708594013},{"_id":"source/sims/2/media/img/PDM.svg","hash":"572034d358dfc07c8558a0e60f3024bbe725c22d","modified":1549708594013},{"_id":"source/sims/2/media/img/theme-image.svg","hash":"e022c0469f062c1e771d6cda1d7fd6124dc00d07","modified":1549708594014},{"_id":"source/sims/2/media/img/CIM.svg","hash":"cb78a79592fe7e04d229264ecfb547ed16662f76","modified":1549708594010},{"_id":"source/sims/framework/simulator-core.js","hash":"d36e32932532277ada3ac722d376d6c4e17dd7fe","modified":1555429474159},{"_id":"source/sims/1/CustomerArrival.js","hash":"1bc429cc6e8175942e095e408eb4b4522a9288f0","modified":1554836878779},{"_id":"source/sims/1/CustomerDeparture.js","hash":"c0e1240ce0377dffeb439c933640edfef8e10748","modified":1554836878780},{"_id":"source/sims/1/ServiceDesk.js","hash":"a3f1825d04e43e98195d7504b333d115c6c95014","modified":1554836878780},{"_id":"source/sims/1/description.html","hash":"4a181d2b0ef14993d1333d117ab91129997c841e","modified":1555429474117},{"_id":"source/sims/1/index.html","hash":"660fe635f6fbf87c1ef8a2aca4a44055f1126d8b","modified":1560855004036},{"_id":"source/sims/1/description.md","hash":"975bb95d847066eb972f4c82ca3da48c853df4de","modified":1561291231586},{"_id":"source/sims/1/Download.zip","hash":"94a866774fbb5cdfdf32ea784f855982fecfe79d","modified":1549708594008},{"_id":"source/sims/1/metadata.js","hash":"8e9080bdb0d2d36674825361818bde0b571b7769","modified":1554836878781},{"_id":"source/sims/1/index.md","hash":"1e9049a0759dfcc1b9d9d2e78c8ac87c708dbd14","modified":1561291262405},{"_id":"source/sims/1/simulation-worker.js","hash":"ce9143b75f2195d627569671ec7759b5940f4fbe","modified":1549708594015},{"_id":"source/sims/1/simulation.js","hash":"6d747e57a4b0187cf948d8a94205e37022658f14","modified":1549708594015},{"_id":"source/sims/1/media/img/Arrival_RDM.svg","hash":"c64a1de5f62bda6df0220aff3e093db4c160e36c","modified":1549708594010},{"_id":"source/sims/1/media/img/Arrival_CRM.svg","hash":"505f3f2f28be766efd364eabc2aa0e43a62d37ff","modified":1549708594009},{"_id":"source/sims/1/media/img/Departure_RDM.svg","hash":"5ec2754e81f9c973deb0aceabb0307b53fd93fe0","modified":1549708594012},{"_id":"source/sims/1/media/img/CPM.svg","hash":"8c2d848411f5151bd62618264a76ed69a669e0e5","modified":1549708594011},{"_id":"source/sims/1/media/img/IDM.svg","hash":"7abc51ba37f6d56cb03f33994d7c5a7f424ebeb4","modified":1549708594012},{"_id":"source/sims/1/media/img/ServiceEnd_CRM.svg","hash":"2798fdebe54462d1d0408da44087aec2ef72905a","modified":1549708594013},{"_id":"source/sims/1/media/img/PDM.svg","hash":"572034d358dfc07c8558a0e60f3024bbe725c22d","modified":1549708594013},{"_id":"source/sims/1/media/img/ServiceStart_CRM.svg","hash":"f597c456728a70fff82a2baefcd322308f56f47a","modified":1549708594014},{"_id":"source/sims/1/media/img/theme-image.svg","hash":"e022c0469f062c1e771d6cda1d7fd6124dc00d07","modified":1549708594014},{"_id":"source/sims/1/media/img/CIM.svg","hash":"cb78a79592fe7e04d229264ecfb547ed16662f76","modified":1549708594010}],"Category":[],"Data":[],"Page":[{"_content":"<main>\n<section class=\"description\"><h1>Web-Based Simulation for Science and Education</h1>\n<div>\n     <p>The <em>Simulation for Education (Sim4edu</em>) project website supports web-based simulation\n      with open source technologies for science and education. It provides both <b><i>simulation\n       technologies</i></b> and a <b><i>library of educational simulations</i></b>. Its goal is to support various\n      styles of modeling and simulation, including <em>discrete event</em> simulation,\n      <em>NetLogo</em>-style grid space models (and <em>Cellular Automata</em> models), and\n      <em>agent</em>-based simulation.</p>\n     <p>As opposed to traditional simulation technologies, <em>web-based</em> simulations,\n      typically implemented with JavaScript, can be executed in any web browser, not just on desktop\n      computers, but also on mobile devices like tablets and smartphones. This allows sharing\n      simulations by means of simple web links and makes them easily accessible to anyone anywhere.\n     </p>\n    </div>\n   </section>\n   <section class=\"sim-category\" id=\"ad-hoc-sim\">\n    <h1>Examples of ad-hoc simulation programs</h1>\n    <p>... not based on any simulation paradigm or framework.</p>\n    <dl>\n     <dt><a href=\"http://play.elevatorsaga.com\">Elevator Saga</a></dt>\n     <dd>Learning how to code by programming an elevator.</dd>\n     <dt><a href=\"http://www.natureincode.com/code/various/ants.html\">JavaScript Ants</a></dt>\n     <dd><img src=\"img/ant.svg\" style=\"float:right; margin: 0 6px 0 1em;\" width=\"50\" id=\"ant\" />A simulation about ants finding food and bringing it back to the nest. Once an ant finds food, she leaves a chemical trail behind while walking back to the nest. The chemical substance evaporates over time, and other ants simply follow the gradient of the substance until they find the food.</dd>\n     <dt><a href=\"http://www.traffic-simulation.de/\">Roundabout</a></dt>\n     <dd>Microsimulation of traffic flow.</dd>\n    </dl>\n   </section>\n   <section class=\"sim-category\" id=\"DES\">\n    <h1>Examples of Discrete Event Simulation (DES) </h1>\n    <p>... with fixed-increment time progression.</p>\n    <dl>\n     <dt><a href=\"sims/25/index.html\">Susceptible-Infected-Recovered (SIR) Disease Model</a></dt>\n     <dd>An epidemiological model about the infection dynamics of a contagious disease in a closed population.\n      See also <a href=\"https://insightmaker.com/insight/2944/SIR-Model\">a continuous SIR model</a>.</dd>\n    </dl>\n    <p>... with next-event time progression.</p>\n    <dl>\n     <dt><a href=\"sims/4/index.html\">Inventory Management</a></dt><dd><img src=\"img/forklift.svg\" style=\"float:right; margin: 4px 6px 0 1em;\" width=\"60\" />An inventory\n     management system with a continuous replenishment policy based on a reorder point.</dd>\n     <dt><a href=\"sims/10/index.html\">DriveThru</a></dt><dd><img src=\"img/drive-through-blue.svg\" style=\"float:right; margin: 0 6px 0 1em\"\n                                                                 title=\"Icon CC 3.0 BY Freepik (www.freepik.com) from www.flaticon.com\" width=\"70\" />The order processing activities of a drive through\n     restaurant are performed at three service points with queues: the <em>order taking</em> at the menu board, the <em>order preparation</em>\n     at the kitchen and the <em>order pickup</em> at the pickup window.</dd>\n     <dt><a href=\"sims/20/index.html\">Lengnick's Baseline Economy</a></dt><dd><img src=\"img/factory.svg\" style=\"float:right; margin: 0 6px 0 1em;\" width=\"60\" /> <!-- /LengnickBaselineEconomy-1 -->\n     Households play the roles of em&shy;ploy&shy;ees and con&shy;sumers, while firms play the roles of employers and producers.</dd>\n    </dl>\n    <p><a href=\"des-models/index.html\">More...</a></p>\n   </section>\n   <section class=\"sim-category\" id=\"grid-space\">\n    <h1>Examples of Grid Space Models</h1>\n    <p>... with fixed-increment time progression.</p>\n    <dl>\n     <dt><a href=\"sims/16/index.html\">Gossip Model</a></dt>\n\t    <dd>A Cellular Automata model about the problem of spreading gossip.</dd>\n     <dt><a href=\"sims/6/index.html\">Schelling Segregation Model</a></dt>\n\t    <dd><img src=\"img/SchellingGrid.png\" style=\"float:right; margin: 6px 6px 0 1em;\" width=\"46\" height=\"59\" />\n\t     A residential area is popu&shy;lated by resi&shy;dents belonging to different groups. Periodically, all\n      residents check if they are content with their neighborhood, based on their degree of\n      tolerating neighbors of a different group. If they are not, they move to a location where they\n      are content, or leave the area if they don't find such a location.</dd>\n    </dl>\n    <p><a href=\"gridspace-models/index.html\">More...</a></p>\n   </section>\n   <section class=\"sim-category\" id=\"contin\">\n    <h1>Examples of Continuous Simulation</h1>\n    <p>... with continuous state changes driven by fixed-increment time progression.</p>\n    <dl>\n      <dt><a href=\"sims/15/index.html\">Solar System</a></dt><dd>Implemented with CSS 3D animations.</dd>\n      <dt><a href=\"https://29a.ch/sandbox/2010/galaxy/\">Galaxy</a></dt><dd>A spiral galaxy with\n      5000 stars (by Jonas Wagner, 2010-08-18).</dd>\n     <dt><a href=\"https://insightmaker.com/insight/1954/The-World3-Model\">World3</a></dt>\n     <dd>A <em>System Dynamics</em> model of the interactions between population, industrial growth, food production\n      and limits in the ecosystems of the Earth. Reconstructed with <a href=\"https://insightmaker.com/\">Insight Maker</a>.</dd>\n    </dl>\n    <p><a href=\"continuous-models/index.html\">More...</a></p>\n   </section>\n  </main>\n  <aside><h1>News...</h1>\n   <ul>\n    <li>8-Apr-2019: We are looking for <strong>volunteer translators</strong> to Spanish, Brazilian, French or any language you'd like to support. \n\t Please <a href=\"mailto:G.Wagner@b-tu.de?subject=Sim4edu%20Translation&body=Hi%20guys!%0D%0AI'd%20like%20to%20help%20with%20translating%20Sim4edu%20to%20...\">contact us</a> \n\t if you can help  with this.</li>\n    <li>3-Apr-2019: The Sim4edu website and its OESjs simulations has been internationalized: now also available in\n     Chinese and in German (soon).</li>\n    <li>8-Jan-2019: OESjs 1.3e has been released: solving issues with Processing Network simulation and adding summary statistics to experiments.</li>\n    <li>19-Sep-2018: OESjs 1.3c has been released: additional user interfaces for inspecting code, initial events and experiments.</li>\n    <li>28-July-2018: OESjs 1.3b has been released. Now supporting a user interface for setting model variables.</li>\n    <li>9-May-2018: OESjs 1.3a has been released. It allows defining simulation experiments and runs faster due to running the simulator in its own (worker) thread.</li>\n    <li>4-May-2018: The Sim4edu website has moved to Netlify</li>\n   </ul>\n</aside>","source":"index.md","raw":"<main>\n<section class=\"description\"><h1>Web-Based Simulation for Science and Education</h1>\n<div>\n     <p>The <em>Simulation for Education (Sim4edu</em>) project website supports web-based simulation\n      with open source technologies for science and education. It provides both <b><i>simulation\n       technologies</i></b> and a <b><i>library of educational simulations</i></b>. Its goal is to support various\n      styles of modeling and simulation, including <em>discrete event</em> simulation,\n      <em>NetLogo</em>-style grid space models (and <em>Cellular Automata</em> models), and\n      <em>agent</em>-based simulation.</p>\n     <p>As opposed to traditional simulation technologies, <em>web-based</em> simulations,\n      typically implemented with JavaScript, can be executed in any web browser, not just on desktop\n      computers, but also on mobile devices like tablets and smartphones. This allows sharing\n      simulations by means of simple web links and makes them easily accessible to anyone anywhere.\n     </p>\n    </div>\n   </section>\n   <section class=\"sim-category\" id=\"ad-hoc-sim\">\n    <h1>Examples of ad-hoc simulation programs</h1>\n    <p>... not based on any simulation paradigm or framework.</p>\n    <dl>\n     <dt><a href=\"http://play.elevatorsaga.com\">Elevator Saga</a></dt>\n     <dd>Learning how to code by programming an elevator.</dd>\n     <dt><a href=\"http://www.natureincode.com/code/various/ants.html\">JavaScript Ants</a></dt>\n     <dd><img src=\"img/ant.svg\" style=\"float:right; margin: 0 6px 0 1em;\" width=\"50\" id=\"ant\" />A simulation about ants finding food and bringing it back to the nest. Once an ant finds food, she leaves a chemical trail behind while walking back to the nest. The chemical substance evaporates over time, and other ants simply follow the gradient of the substance until they find the food.</dd>\n     <dt><a href=\"http://www.traffic-simulation.de/\">Roundabout</a></dt>\n     <dd>Microsimulation of traffic flow.</dd>\n    </dl>\n   </section>\n   <section class=\"sim-category\" id=\"DES\">\n    <h1>Examples of Discrete Event Simulation (DES) </h1>\n    <p>... with fixed-increment time progression.</p>\n    <dl>\n     <dt><a href=\"sims/25/index.html\">Susceptible-Infected-Recovered (SIR) Disease Model</a></dt>\n     <dd>An epidemiological model about the infection dynamics of a contagious disease in a closed population.\n      See also <a href=\"https://insightmaker.com/insight/2944/SIR-Model\">a continuous SIR model</a>.</dd>\n    </dl>\n    <p>... with next-event time progression.</p>\n    <dl>\n     <dt><a href=\"sims/4/index.html\">Inventory Management</a></dt><dd><img src=\"img/forklift.svg\" style=\"float:right; margin: 4px 6px 0 1em;\" width=\"60\" />An inventory\n     management system with a continuous replenishment policy based on a reorder point.</dd>\n     <dt><a href=\"sims/10/index.html\">DriveThru</a></dt><dd><img src=\"img/drive-through-blue.svg\" style=\"float:right; margin: 0 6px 0 1em\"\n                                                                 title=\"Icon CC 3.0 BY Freepik (www.freepik.com) from www.flaticon.com\" width=\"70\" />The order processing activities of a drive through\n     restaurant are performed at three service points with queues: the <em>order taking</em> at the menu board, the <em>order preparation</em>\n     at the kitchen and the <em>order pickup</em> at the pickup window.</dd>\n     <dt><a href=\"sims/20/index.html\">Lengnick's Baseline Economy</a></dt><dd><img src=\"img/factory.svg\" style=\"float:right; margin: 0 6px 0 1em;\" width=\"60\" /> <!-- /LengnickBaselineEconomy-1 -->\n     Households play the roles of em&shy;ploy&shy;ees and con&shy;sumers, while firms play the roles of employers and producers.</dd>\n    </dl>\n    <p><a href=\"des-models/index.html\">More...</a></p>\n   </section>\n   <section class=\"sim-category\" id=\"grid-space\">\n    <h1>Examples of Grid Space Models</h1>\n    <p>... with fixed-increment time progression.</p>\n    <dl>\n     <dt><a href=\"sims/16/index.html\">Gossip Model</a></dt>\n\t    <dd>A Cellular Automata model about the problem of spreading gossip.</dd>\n     <dt><a href=\"sims/6/index.html\">Schelling Segregation Model</a></dt>\n\t    <dd><img src=\"img/SchellingGrid.png\" style=\"float:right; margin: 6px 6px 0 1em;\" width=\"46\" height=\"59\" />\n\t     A residential area is popu&shy;lated by resi&shy;dents belonging to different groups. Periodically, all\n      residents check if they are content with their neighborhood, based on their degree of\n      tolerating neighbors of a different group. If they are not, they move to a location where they\n      are content, or leave the area if they don't find such a location.</dd>\n    </dl>\n    <p><a href=\"gridspace-models/index.html\">More...</a></p>\n   </section>\n   <section class=\"sim-category\" id=\"contin\">\n    <h1>Examples of Continuous Simulation</h1>\n    <p>... with continuous state changes driven by fixed-increment time progression.</p>\n    <dl>\n      <dt><a href=\"sims/15/index.html\">Solar System</a></dt><dd>Implemented with CSS 3D animations.</dd>\n      <dt><a href=\"https://29a.ch/sandbox/2010/galaxy/\">Galaxy</a></dt><dd>A spiral galaxy with\n      5000 stars (by Jonas Wagner, 2010-08-18).</dd>\n     <dt><a href=\"https://insightmaker.com/insight/1954/The-World3-Model\">World3</a></dt>\n     <dd>A <em>System Dynamics</em> model of the interactions between population, industrial growth, food production\n      and limits in the ecosystems of the Earth. Reconstructed with <a href=\"https://insightmaker.com/\">Insight Maker</a>.</dd>\n    </dl>\n    <p><a href=\"continuous-models/index.html\">More...</a></p>\n   </section>\n  </main>\n  <aside><h1>News...</h1>\n   <ul>\n    <li>8-Apr-2019: We are looking for <strong>volunteer translators</strong> to Spanish, Brazilian, French or any language you'd like to support. \n\t Please <a href=\"mailto:G.Wagner@b-tu.de?subject=Sim4edu%20Translation&body=Hi%20guys!%0D%0AI'd%20like%20to%20help%20with%20translating%20Sim4edu%20to%20...\">contact us</a> \n\t if you can help  with this.</li>\n    <li>3-Apr-2019: The Sim4edu website and its OESjs simulations has been internationalized: now also available in\n     Chinese and in German (soon).</li>\n    <li>8-Jan-2019: OESjs 1.3e has been released: solving issues with Processing Network simulation and adding summary statistics to experiments.</li>\n    <li>19-Sep-2018: OESjs 1.3c has been released: additional user interfaces for inspecting code, initial events and experiments.</li>\n    <li>28-July-2018: OESjs 1.3b has been released. Now supporting a user interface for setting model variables.</li>\n    <li>9-May-2018: OESjs 1.3a has been released. It allows defining simulation experiments and runs faster due to running the simulator in its own (worker) thread.</li>\n    <li>4-May-2018: The Sim4edu website has moved to Netlify</li>\n   </ul>\n</aside>","date":"2019-06-23T11:37:39.892Z","updated":"2019-06-23T11:37:39.892Z","path":"index.html","title":"","comments":1,"layout":"page","_id":"cjx8wr3gi0000j1h5s4snxllt"},{"_content":"/**\n * Configuration file for the Load manager.\n * Configuration parameters :\n *  1) oes.loadManager.basePath = \"relative-path-to-oes-distribution-folder\"\n *       relative path to the location of the oes distribution folder (where the \n *       simulator core and all the module files are located). The path is relative \n *       to the location of the HTML file that loads the \"loadManager.js\" script file,\n *       so to the location of simulation.html and/or description.html file.\n *  2) oes.loadManager.codeLoadingMode = \"one-of: {frameworkDev, dev, deploy}\"\n *       default value is \"frameworkDev\", but for this case a loadManagerConfig.js/oes/\n *       file is not required and no configuration should be made anyway.\n *  3) oes.loadManager.simsUrlIdentifier = \"optional-sims-folder-identifier\";\n *       defaults to \"sims\", but for the \"dev\" mode the best idea is to keep it \"\" \n *       so the loadManager auto-detects this value.\n *\n * NOTE: for oes.loadManager.codeLoadingMode = \"frameworkDev\" this configuration file is not required!\n *\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Mircea Diaconescu\n * @license The MIT License (MIT)\n */\n\n// NOTE: configuration is different for various environment and needs \n//       to be updated accordingly.\n\n\n/******* Configuration for simulation development ****************/\noes.loadManager.basePath = \"../framework/\";\noes.loadManager.codeLoadingMode = \"deploy\";\noes.loadManager.simsUrlIdentifier = \"\";","source":"sims/loadManagerConfig.js","raw":"/**\n * Configuration file for the Load manager.\n * Configuration parameters :\n *  1) oes.loadManager.basePath = \"relative-path-to-oes-distribution-folder\"\n *       relative path to the location of the oes distribution folder (where the \n *       simulator core and all the module files are located). The path is relative \n *       to the location of the HTML file that loads the \"loadManager.js\" script file,\n *       so to the location of simulation.html and/or description.html file.\n *  2) oes.loadManager.codeLoadingMode = \"one-of: {frameworkDev, dev, deploy}\"\n *       default value is \"frameworkDev\", but for this case a loadManagerConfig.js/oes/\n *       file is not required and no configuration should be made anyway.\n *  3) oes.loadManager.simsUrlIdentifier = \"optional-sims-folder-identifier\";\n *       defaults to \"sims\", but for the \"dev\" mode the best idea is to keep it \"\" \n *       so the loadManager auto-detects this value.\n *\n * NOTE: for oes.loadManager.codeLoadingMode = \"frameworkDev\" this configuration file is not required!\n *\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Mircea Diaconescu\n * @license The MIT License (MIT)\n */\n\n// NOTE: configuration is different for various environment and needs \n//       to be updated accordingly.\n\n\n/******* Configuration for simulation development ****************/\noes.loadManager.basePath = \"../framework/\";\noes.loadManager.codeLoadingMode = \"deploy\";\noes.loadManager.simsUrlIdentifier = \"\";","date":"2019-06-23T11:48:49.556Z","updated":"2019-02-09T10:36:34.110Z","path":"sims/loadManagerConfig.js","layout":"false","title":"","comments":1,"_id":"cjx8wr3hc0002j1h5g0qpgq1b","content":"/**\n * Configuration file for the Load manager.\n * Configuration parameters :\n *  1) oes.loadManager.basePath = \"relative-path-to-oes-distribution-folder\"\n *       relative path to the location of the oes distribution folder (where the \n *       simulator core and all the module files are located). The path is relative \n *       to the location of the HTML file that loads the \"loadManager.js\" script file,\n *       so to the location of simulation.html and/or description.html file.\n *  2) oes.loadManager.codeLoadingMode = \"one-of: {frameworkDev, dev, deploy}\"\n *       default value is \"frameworkDev\", but for this case a loadManagerConfig.js/oes/\n *       file is not required and no configuration should be made anyway.\n *  3) oes.loadManager.simsUrlIdentifier = \"optional-sims-folder-identifier\";\n *       defaults to \"sims\", but for the \"dev\" mode the best idea is to keep it \"\" \n *       so the loadManager auto-detects this value.\n *\n * NOTE: for oes.loadManager.codeLoadingMode = \"frameworkDev\" this configuration file is not required!\n *\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Mircea Diaconescu\n * @license The MIT License (MIT)\n */\n\n// NOTE: configuration is different for various environment and needs \n//       to be updated accordingly.\n\n\n/******* Configuration for simulation development ****************/\noes.loadManager.basePath = \"../framework/\";\noes.loadManager.codeLoadingMode = \"deploy\";\noes.loadManager.simsUrlIdentifier = \"\";","site":{"data":{}},"excerpt":"","more":"/**\n * Configuration file for the Load manager.\n * Configuration parameters :\n *  1) oes.loadManager.basePath = \"relative-path-to-oes-distribution-folder\"\n *       relative path to the location of the oes distribution folder (where the \n *       simulator core and all the module files are located). The path is relative \n *       to the location of the HTML file that loads the \"loadManager.js\" script file,\n *       so to the location of simulation.html and/or description.html file.\n *  2) oes.loadManager.codeLoadingMode = \"one-of: {frameworkDev, dev, deploy}\"\n *       default value is \"frameworkDev\", but for this case a loadManagerConfig.js/oes/\n *       file is not required and no configuration should be made anyway.\n *  3) oes.loadManager.simsUrlIdentifier = \"optional-sims-folder-identifier\";\n *       defaults to \"sims\", but for the \"dev\" mode the best idea is to keep it \"\" \n *       so the loadManager auto-detects this value.\n *\n * NOTE: for oes.loadManager.codeLoadingMode = \"frameworkDev\" this configuration file is not required!\n *\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Mircea Diaconescu\n * @license The MIT License (MIT)\n */\n\n// NOTE: configuration is different for various environment and needs \n//       to be updated accordingly.\n\n\n/******* Configuration for simulation development ****************/\noes.loadManager.basePath = \"../framework/\";\noes.loadManager.codeLoadingMode = \"deploy\";\noes.loadManager.simsUrlIdentifier = \"\";"},{"title":"Object Event Modeling And Simulation","_content":"<aside>\n<h3>Papers</h3>\n\t <dl style=\"padding-left:0\"><dt>OEM</dt>\n\t\t<dd>Gerd Wagner. <a href=\"https://articles.jsime.org/1/1/\">Information and Process Modeling for Simulation – Part I: Objects and Events</a>. <em>Journal of Simulation Engineering</em> 1:1, 2018.</dd>\n\t\t<dt>OES</dt>\n\t\t<dd>Gerd Wagner. <a href=\"https://www.informs-sim.org/wsc17papers/includes/files/056.pdf\">An Abstract State Machine Semantics For Discrete Event Simulation</a>. <em>Proceedings of the 2017 Winter Simulation Conference</em>. In: W. K. V. Chan et al (Eds.). Piscataway, NJ: IEEE.</dd>\n\t\t<dt>A/OEM&amp;S</dt>\n\t\t<dd>Gerd Wagner and Luis G. Nardin. <a href=\"https://oxygen.informatik.tu-cottbus.de/publications/wagner/WSC2018-AgentConcepts.pdf\">Adding Agent Concepts to Object Event Modeling and Simulation</a>. <em>Proceedings of the 2018 Winter Simulation Conference</em>. In: M. Rabe et al (Eds.). Piscataway, NJ: IEEE.</dd>\n\t </dl>\n\t</aside>\n<p>Object Event Modeling and Simulation (OEM&amp;S) is a general <em>Discrete Event Simulation</em> paradigm combining <em>object-oriented</em> modeling with the <em>event scheduling</em> paradigm. \nIn OEM, the state structure of a system can be modeled with UML Class Diagrams defining both object and event types, and the system's dynamics can be modeled with conceptual process models (expressed, e.g., in BPMN) and process design models (expressed, e.g., in <a href=\"../reading/DPMN.pdf\">DPMN</a>).</p>\n\n<p><em>Agent/Object Event Simulation (A/OES)</em>, is an extension of basic OES by adding the concepts of <em>agents</em>, <em>perception</em>, <em>action</em> and <em>communication</em>.</p>\n\n<p>Sim4edu currently provides the <em>OESjs</em> simulation framework, which is a JavaScript implementation of the OES paradigm, or, more precisely, of its language OESL and its abstract simulator <em>Omega-Epsilon-Sigma </em>(ΩΕΣ) that supports both <em>next-event time progression</em>, as used in discrete event simulation, and <em>fixed-increment time progression</em>, as used in <em>NetLogo</em>-based social science simulations as well as in continuous state change simulations. The next simulator/framework on the roadmap of Sim4edu implements the <em>A/OES paradigm</em> for agent-based discrete event simulation and is called <em>A-OESjs</em>.</p>\n\n<p>A real-world <em>discrete event system</em> (or <em>discrete dynamic system</em>) consists of:</p>\n\n<ul>\n\t<li>objects (of certain types) whose states may be changed by</li>\n\t<li>events (of certain types) occurring at a point in time from a discrete set of time points.</li>\n</ul>\n\n<p>This means that in order to model a discrete event system using OES, we have to</p>\n\n<ol>\n\t<li>Describe its <em><strong>object types</strong></em> and <em><strong>event types</strong></em>.</li>\n\t<li>Specify, for any event type, which <em>causal regularity</em>, responsible for <em><strong>state changes</strong></em> of objects and <em><strong>follow-up events</strong></em>, is triggered by events of that type. Causal regularities are captured by <strong><em>event rules</em></strong>.</li>\n</ol>\n\n<p>The <em><strong>OES language</strong></em> (OESL) allows defining:</p>\n\n<ol>\n\t<li><em>Object types</em> in the form of classes (of an object-oriented language like UML or JavaScript),</li>\n\t<li><em>Event types</em> in the form of classes, and their <em>event rules</em> in the form of a special&nbsp;<em>onEvent</em> method in the corresponding event class.</li>\n</ol>\n\n<p>OESL is a historic successor of <a href=\"https://oxygen.informatik.tu-cottbus.de/aors/ERSL.html\">ERSL</a>, since the OES paradigm has been developed as a continuation of an earlier R&amp;D project called <a href=\"http://oxygen.informatik.tu-cottbus.de/aor/?q=node/24\"><em>Entity-Relationship Modeling and Simulation</em></a>. Likewise, A/OESL is a historic successor of <a href=\"https://oxygen.informatik.tu-cottbus.de/aors/AORSL.html\">AORSL</a>, since the A/OES paradigm has been developed as a continuation of an earlier R&amp;D project called <a href=\"http://oxygen.informatik.tu-cottbus.de/aor/\"><em>Agent-Object-Relationship Simulation</em></a>.</p>\n\n<p>In OES, two categories of simulated events are distinguished:</p>\n\n<ol>\n\t<li><em>Exogenous events </em>occur, periodically, due to factors that are external to the simulation model. Their re-occurrence pattern is modeled in the form of a <em><strong>recurrence</strong></em> function.</li>\n\t<li><em>Caused events</em> are simulated events that are caused by other simulated events.</li>\n</ol>\n\n<p>An OES <strong><em>scenario</em></strong> consists of:</p>\n\n<ul>\n\t<li>An <em>OES model</em> defining <em>object types</em> and <em>event types</em> (with <em>event rules</em>), as well as <em>output statistics</em>. It may include a <em>space model</em> definition.</li>\n\t<li><em>Simulation parameter</em> definitions, like the length of the simulation or a seed for the random number generator.</li>\n\t<li>An <em>initial state</em> definition.</li>\n</ul>\n\n<p>An OES <strong><em>model</em></strong> may include definitions of</p>\n\n<ul>\n\t<li><em>Object types</em></li>\n\t<li><em>Event types</em> with <em>event rules</em> defining the causation of state changes and follow-up events</li>\n\t<li>A <em>time model</em>: either discrete or continuous time</li>\n\t<li>A <em>space model</em> such as a grid space or a 2D/3D continuous space</li>\n\t<li><em>Statistics variables</em></li>\n\t<li><em>Global model variables</em> and/or <em>functions</em></li>\n</ul> \n\n<p>An OES scenario simulation can be configured with</p>\n\n<ul>\n\t<li>A <em>visualization</em> definition (like a 3D visualization of a 2D space model)</li>\n\t<li>A <em>user interaction</em> definition for making simulation games</li>\n\t<li>Various <em>user interface (UI)</em> definitions, e.g. a UI for defining the initial state or a UI for defining the form of visualization</li>\n</ul>\n</main>","source":"oes/index.md","raw":"---\ntitle: Object Event Modeling And Simulation\n---\n<aside>\n<h3>Papers</h3>\n\t <dl style=\"padding-left:0\"><dt>OEM</dt>\n\t\t<dd>Gerd Wagner. <a href=\"https://articles.jsime.org/1/1/\">Information and Process Modeling for Simulation – Part I: Objects and Events</a>. <em>Journal of Simulation Engineering</em> 1:1, 2018.</dd>\n\t\t<dt>OES</dt>\n\t\t<dd>Gerd Wagner. <a href=\"https://www.informs-sim.org/wsc17papers/includes/files/056.pdf\">An Abstract State Machine Semantics For Discrete Event Simulation</a>. <em>Proceedings of the 2017 Winter Simulation Conference</em>. In: W. K. V. Chan et al (Eds.). Piscataway, NJ: IEEE.</dd>\n\t\t<dt>A/OEM&amp;S</dt>\n\t\t<dd>Gerd Wagner and Luis G. Nardin. <a href=\"https://oxygen.informatik.tu-cottbus.de/publications/wagner/WSC2018-AgentConcepts.pdf\">Adding Agent Concepts to Object Event Modeling and Simulation</a>. <em>Proceedings of the 2018 Winter Simulation Conference</em>. In: M. Rabe et al (Eds.). Piscataway, NJ: IEEE.</dd>\n\t </dl>\n\t</aside>\n<p>Object Event Modeling and Simulation (OEM&amp;S) is a general <em>Discrete Event Simulation</em> paradigm combining <em>object-oriented</em> modeling with the <em>event scheduling</em> paradigm. \nIn OEM, the state structure of a system can be modeled with UML Class Diagrams defining both object and event types, and the system's dynamics can be modeled with conceptual process models (expressed, e.g., in BPMN) and process design models (expressed, e.g., in <a href=\"../reading/DPMN.pdf\">DPMN</a>).</p>\n\n<p><em>Agent/Object Event Simulation (A/OES)</em>, is an extension of basic OES by adding the concepts of <em>agents</em>, <em>perception</em>, <em>action</em> and <em>communication</em>.</p>\n\n<p>Sim4edu currently provides the <em>OESjs</em> simulation framework, which is a JavaScript implementation of the OES paradigm, or, more precisely, of its language OESL and its abstract simulator <em>Omega-Epsilon-Sigma </em>(ΩΕΣ) that supports both <em>next-event time progression</em>, as used in discrete event simulation, and <em>fixed-increment time progression</em>, as used in <em>NetLogo</em>-based social science simulations as well as in continuous state change simulations. The next simulator/framework on the roadmap of Sim4edu implements the <em>A/OES paradigm</em> for agent-based discrete event simulation and is called <em>A-OESjs</em>.</p>\n\n<p>A real-world <em>discrete event system</em> (or <em>discrete dynamic system</em>) consists of:</p>\n\n<ul>\n\t<li>objects (of certain types) whose states may be changed by</li>\n\t<li>events (of certain types) occurring at a point in time from a discrete set of time points.</li>\n</ul>\n\n<p>This means that in order to model a discrete event system using OES, we have to</p>\n\n<ol>\n\t<li>Describe its <em><strong>object types</strong></em> and <em><strong>event types</strong></em>.</li>\n\t<li>Specify, for any event type, which <em>causal regularity</em>, responsible for <em><strong>state changes</strong></em> of objects and <em><strong>follow-up events</strong></em>, is triggered by events of that type. Causal regularities are captured by <strong><em>event rules</em></strong>.</li>\n</ol>\n\n<p>The <em><strong>OES language</strong></em> (OESL) allows defining:</p>\n\n<ol>\n\t<li><em>Object types</em> in the form of classes (of an object-oriented language like UML or JavaScript),</li>\n\t<li><em>Event types</em> in the form of classes, and their <em>event rules</em> in the form of a special&nbsp;<em>onEvent</em> method in the corresponding event class.</li>\n</ol>\n\n<p>OESL is a historic successor of <a href=\"https://oxygen.informatik.tu-cottbus.de/aors/ERSL.html\">ERSL</a>, since the OES paradigm has been developed as a continuation of an earlier R&amp;D project called <a href=\"http://oxygen.informatik.tu-cottbus.de/aor/?q=node/24\"><em>Entity-Relationship Modeling and Simulation</em></a>. Likewise, A/OESL is a historic successor of <a href=\"https://oxygen.informatik.tu-cottbus.de/aors/AORSL.html\">AORSL</a>, since the A/OES paradigm has been developed as a continuation of an earlier R&amp;D project called <a href=\"http://oxygen.informatik.tu-cottbus.de/aor/\"><em>Agent-Object-Relationship Simulation</em></a>.</p>\n\n<p>In OES, two categories of simulated events are distinguished:</p>\n\n<ol>\n\t<li><em>Exogenous events </em>occur, periodically, due to factors that are external to the simulation model. Their re-occurrence pattern is modeled in the form of a <em><strong>recurrence</strong></em> function.</li>\n\t<li><em>Caused events</em> are simulated events that are caused by other simulated events.</li>\n</ol>\n\n<p>An OES <strong><em>scenario</em></strong> consists of:</p>\n\n<ul>\n\t<li>An <em>OES model</em> defining <em>object types</em> and <em>event types</em> (with <em>event rules</em>), as well as <em>output statistics</em>. It may include a <em>space model</em> definition.</li>\n\t<li><em>Simulation parameter</em> definitions, like the length of the simulation or a seed for the random number generator.</li>\n\t<li>An <em>initial state</em> definition.</li>\n</ul>\n\n<p>An OES <strong><em>model</em></strong> may include definitions of</p>\n\n<ul>\n\t<li><em>Object types</em></li>\n\t<li><em>Event types</em> with <em>event rules</em> defining the causation of state changes and follow-up events</li>\n\t<li>A <em>time model</em>: either discrete or continuous time</li>\n\t<li>A <em>space model</em> such as a grid space or a 2D/3D continuous space</li>\n\t<li><em>Statistics variables</em></li>\n\t<li><em>Global model variables</em> and/or <em>functions</em></li>\n</ul> \n\n<p>An OES scenario simulation can be configured with</p>\n\n<ul>\n\t<li>A <em>visualization</em> definition (like a 3D visualization of a 2D space model)</li>\n\t<li>A <em>user interaction</em> definition for making simulation games</li>\n\t<li>Various <em>user interface (UI)</em> definitions, e.g. a UI for defining the initial state or a UI for defining the form of visualization</li>\n</ul>\n</main>","date":"2019-05-31T14:43:14.362Z","updated":"2019-05-31T14:43:14.362Z","path":"oes/index.html","comments":1,"layout":"page","_id":"cjx8wr3hd0003j1h5l5m7rl69"},{"_content":"/**\n * Load manager is used to perform autoloading of the required resources for a simulation scenario.\n * It looks in the scenario file and detects which JS and CSS files need to be used, and automatically\n * creates the link and script elements.\n *\n * Mapping source: http://www.w3schools.com/colors/colors_names.asp\n *\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Mircea Diaconescu\n * @license The MIT License (MIT)\n */\nvar oes = oes || {};\nvar sim = sim || {};\nsim.model = sim.model || {};\nsim.model.space = sim.model.space || {};\n\noes.loadManager = {\n  // loadManager.js relative path\n  // NOTE: intended for internal use only!\n  _ownPath: \"./\",\n  // loadManager script file name (normally is \"loadManager.js\")\n  // NOTE: intended for internal use only!\n  _ownScriptFilename: \"loadManager.js\",\n  // the URL query params\n  queryParams: {},\n  // flag to enable the usage of scenario ID in the URL (mostly used for NodeJS/Heroku)\n  useScenarioId: false,\n  // the debug level of the loadManager (one of: \"info\", \"warning\" or \"error\")\n  // NOTE: default value is \"error\"\n  debugLevel: \"info\",\n  // sets the loading mode.\n  // Possible values: one of {\"deploy\", \"dev\", \"frameworkDev\"}\n  // NOTE: default value is \"frameworkDev\", and to change it, just set this parameter\n  //       to something else, by using a script element in the simulation.html file\n  //       immediately after the script element which loads the loadManager.js script file.\n  codeLoadingMode: \"frameworkDev\",\n  // flag to specify that this is a description page, not a simulation startup page.\n  // Possible values: one of {\"simulation\", \"description\"}.\n  // NOTE: default value is \"simulation\", and to change it, just set this parameter\n  //       to something else, by using a script element in the simulation.html file\n  //       immediately after the script element which loads the loadManager.js script file.\n  // the name or ID of the simulation model\n  modelNameOrId: \"\",\n  // the scenario ID\n  scenarioIdentifier: \"\",\n  // the part of the URL that is the start point for the simulation path\n  simsUrlIdentifier: \"sims\",\n  // the load protocol, e.g., file, http or https\n  pageProtocol: \"file\",\n  // the step for progress bar increment (computed later in preload)\n  progressIncStep: 0,\n  // specifies the base path for file loading.\n  // NOTE: every loading mode has its own local basePath which can be overridden\n  //       by using this parameter, which takes precedence over the local one.\n  basePath: \"\",\n  // a callback to be invoked when the load ends.\n  // NOTE: this can be overridden with whatever needs to be done at the end.\n  loadFinishedCallback: function (){},\n  components: {\n    // components for OES Framework development\n    // NOTE: used by OES team to develop the framework and example simulation scenarios\n    frameworkDev: {\n      basePath: \"../../../../\",\n      coreCssSrc: [\n        \"../cLASSjs/css/normalize.css\",\n        \"../cLASSjs/css/vIEW.css\",\n        \"css/OESjs.css\"\n      ],\n      coreJsSrc: [\n        \"../cLASSjs/lib/browserShims.js\",\n        \"../cLASSjs/lib/errorTypes.js\",\n        \"../cLASSjs/lib/util.js\",\n        \"../cLASSjs/lib/dom.js\",\n        \"../cLASSjs/src/eNUMERATION.js\",\n        \"../cLASSjs/src/cLASS.js\",\n        \"../cLASSjs/src/oBJECTvIEW.js\",\n\n        \"lib/dom-additions.js\",\n        \"lib/svg.js\",\n        \"lib/rand.js\",\n\n        \"src/v1/OES.js\",\n        \"src/v1/ClientLogger.js\",\n        \"src/v1/EventList.js\",\n        \"src/v1/statistics.js\",\n        \"src/v1/simulator.js\",\n        \"src/ui/simulatorUI.js\"],\n      coreSpace: [\n        \"src/space/space.js\",\n        \"src/space/ObjectInOneDimSpace.js\",\n        \"src/space/ObjectInTwoDimSpace.js\",\n        \"src/space/ObjectInThreeDimSpace.js\",\n        \"src/space/gridOfIntegers.js\",\n        \"src/space/gridOfObjects.js\",\n        \"src/space/overlayGrid.js\",\n        \"src/space/ObjectInGridSpace.js\"],\n      oneDimSvgVis: [\"lib/svg.js\", \"src/ui/space/oneDimSVG.js\"],\n      gridDomVis: [\"src/ui/space/gridDom.js\", \"src/ui/space/gridOfIntegersDom.js\", \"src/ui/space/gridOfObjectsDom.js\"],\n      babylonVis: [\"lib/babylon.2.4.min.js\", \"src/ui/cssColorNames.js\",\"src/ui/space/threeDimBabylon.js\"],\n      phaserVis: [\n        \"lib/phaser.min.js\",\n        \"lib/phaser-plugin-isometric.min.js\",\n        \"src/ui/space/widgets/Widget.js\",\n        \"src/ui/space/widgets/meter/Meter.js\",\n        \"src/ui/space/widgets/AlphanumericDisplay/AlphanumericDisplay.js\",\n        \"src/ui/space/twoDimPhaser.js\"],\n      chartistStatVis: [\n        \"css/chartist.min.css\",\n        \"css/chartist-plugin-legend.css\",\n        \"lib/chartist.min.js\",\n        \"lib/chartist-plugin-legend.js\"],\n      description: [\n        //\"../cLASSjs/css/normalize.css\",\n        \"css/normalize.min.css\",\n        \"css/description.css\",\n        \"src/ui/description.js\"\n      ]\n    },\n    // components for simulation development\n    // NOTE: used by simulation authors\n    dev: {\n      basePath: \"../framework/\",\n      coreCssSrc: [\"simulator-core.css\"],\n      coreJsSrc: [\"simulator-core.js\"],\n      coreSpace: [\"space-core.js\"],\n      oneDimSvgVis: [\"oneDimSVG-visualization.js\"],\n      gridDomVis: [\"gridDom-visualization.js\"],\n      babylonVis: [\"babylon-visualization.js\"],\n      phaserVis: [\"phaser-visualization.js\"],\n      chartistStatVis: [\"chartist.css\", \"chartist.js\"],\n      description: [\"description.css\", \"description.js\"]\n    },\n    // components for production mode\n    // NOTE: simulations are deployed on a web server\n    deploy: {\n      basePath: window.location.href + \"../framework/\",\n      /* coreCssSrc: [\"simulator-core.css\"], */\n      coreCssSrc: [],\n      /* coreJsSrc: [\"simulator-core.js\"], */\n      coreJsSrc: [],\n      coreSpace: [\"space-core.js\"],\n      oneDimSvgVis: [\"oneDimSVG-visualization.js\"],\n      gridDomVis: [\"gridDom-visualization.js\"],\n      babylonVis:[\n        \"https://cdnjs.cloudflare.com/ajax/libs/babylonjs/2.4.1/babylon.js\",\n        \"babylon-visualization-core.js\"],\n      phaserVis: [\n        \"https://cdnjs.cloudflare.com/ajax/libs/phaser/2.6.2/phaser.min.js\",\n        \"phaser-visualization-core.js\"\n      ],\n      /* chartistStatVis: [\"chartist.css\", \"chartist.js\"], */\n      chartistStatVis: [],\n      description: [\"description.css\", \"description.js\"]\n    }\n  }\n};\n\n/**\n * Display the configuration settings in the browser console.\n * NOTE: this method is mostly used for debug reasons, and does not\n *       have real functionality as part of the loadManager.\n */\noes.loadManager.showConfigInConsole = function() {\n  var compSrc = oes.loadManager.components[oes.loadManager.codeLoadingMode],\n    // oes.loadManager.basePath has priority´, allowing to override the location.\n    basePath = oes.loadManager.basePath || compSrc.basePath;\n\n  if(oes.loadManager.debugLevel !== \"info\") return;\n  console.log(\"################ loadManager configuration ################\");\n  console.log(\"codeLoadingMode = '\" + oes.loadManager.codeLoadingMode + \"'\");\n  console.log(\"pageProtocol = '\" + oes.loadManager.pageProtocol + \"'\");\n  console.log(\"basePath = '\" + basePath + \"'\");\n  console.log(\"modelNameOrId = '\" + oes.loadManager.modelNameOrId + \"'\");\n  console.log(\"useScenarioId = \" + oes.loadManager.useScenarioId);\n  console.log(\"_ownPath = '\" + (oes.loadManager._ownPath || \"./\" )+ \"'\");\n  console.log(\"_ownScriptFilename = '\" + (oes.loadManager._ownScriptFilename || \"./\" )+ \"'\");\n  console.log(\"queryParams = \" + JSON.stringify(oes.loadManager.queryParams));\n  console.log(\"fullURL = '\" + window.location.href + \"'\");\n  console.log(\"###########################################################\");\n};\n\n/**\n * Detect the codeLoadingMode (one of \"frameworkDev\", \"dev\" and \"deploy)\n */\noes.loadManager.setup = function(callback) {\n  var url = window.location.href, lmPath =\"\";\n  var scripts = document.getElementsByTagName(\"script\");\n  var scriptName = oes.loadManager._ownScriptFilename;\n  var index = -1, queryParams = [];\n  index = url.indexOf(\"?\");\n  if (index > -1) {\n    queryParams = url.substring(index+1).split(\"&\");\n    url = url.substring(0, index);\n    queryParams.forEach( function (qParam) {\n      var p = \"\", v = \"\", pv = [];\n      pv = qParam.split(\"=\");\n      p = pv[0];\n      v = pv[1];\n      if (v === \"true\" || v === \"false\") v = Boolean(v);\n      else if (!isNaN(v)) v = Number(v);\n      oes.loadManager.queryParams[p] = v.valueOf();\n    });\n  }\n  callback = typeof callback === \"function\" ? callback : function (){};\n  // create and display the progress bar HTML piece\n  oes.loadManager.createProgressBar();\n  //detect protocol from page URL\n  oes.loadManager.pageProtocol = url.split(\"://\")[0];\n  // detect the relative path for the loadManager.js\n  lmPath = scripts[scripts.length-1].src;\n  if (!lmPath.endsWith(scriptName)) {\n    index = lmPath.lastIndexOf(\"/\");\n    if (index === -1) scriptName = oes.loadManager._ownScriptFilename = lmPath;\n    else scriptName = oes.loadManager._ownScriptFilename = lmPath.substring(index);\n  }\n  index = lmPath.indexOf(scriptName);\n  lmPath = oes.loadManager._ownPath = lmPath.substring(0, index) || \"./\";\n  // try to load the loadManagerConfig.js file, which is the configuration file\n  // for the load manager containing various settings, and can also override default\n  // values for the loadManager, if this is required on special cases\n  oes.loadManager.loadFile(\"loadManagerConfig.js\", oes.loadManager._ownPath, function() {\n    /** success loading config file, so this is either \"dev\" or \"deploy\"\n     * NOTE: the configuration file must explicitly sets the codeLoadingMode parameter!\n     **/\n    // update progress bar\n    oes.loadManager.updateProgressBar(10);\n    // finished, now call the callback\n    callback();\n  }, function () {\n    // failed, so threat this as \"frameworkDev\n    // NOTE: this is the default value anyway, but it is here\n    //       for clarity reasons, and easy code debugging\n    oes.loadManager.codeLoadingMode = \"frameworkDev\";\n    // update progress bar\n    oes.loadManager.updateProgressBar(10);\n    // finished, now call the callback\n    callback();\n  });\n};\n\n/**\n * Preload all the needed files to run the specific simulation scenario.\n * It loads the minimum required, then analyze the scenario file and finally\n * load all the required CSS and JS files to be able to run the simulation.\n */\noes.loadManager.preload = function (callback) {\n  var compSrc = oes.loadManager.components[oes.loadManager.codeLoadingMode],\n    // oes.loadManager.basePath has priority´, allowing to override the location.\n    basePath = oes.loadManager.basePath || compSrc.basePath,\n    callback = typeof callback === \"function\" ? callback : function(){},\n    scenarioFilePath = \"./\";\n  oes.loadManager.showConfigInConsole();\n  if (oes.loadManager.useScenarioId) scenarioFilePath = \"./\" + oes.loadManager.modelNameOrId + \"/\";\n  oes.loadManager.progressIncStep = 40 / (compSrc.coreCssSrc.length + compSrc.coreJsSrc.length);\n  // load simulator CSS core\n  oes.loadManager.loadFileBatch(compSrc.coreCssSrc, basePath, function () {\n    // add the script element for simulation.js\n    oes.loadManager.progressIncStep = oes.loadManager.getProgressBarValue() / 2 ;\n    oes.loadManager.loadFile(\"simulation.js\", scenarioFilePath, function (scenarioScriptEl) {\n      oes.loadManager.loadScenarioPrerequisites( basePath, function () {\n        // remove the script element containing simulation.js\n        // because this needs to be latest to avoid any dependency errors\n        document.head.removeChild( scenarioScriptEl);\n        // clear the browser console.\n        //oes.loadManager.clearConsole();\n        // add the script element for simulation.js\n        oes.loadManager.loadFile(\"simulation.js\", scenarioFilePath, function () {\n          setTimeout( function () {\n            // invoke success callback method\n            callback();\n            // call frontend initialization\n            oes.setupFrontEndSimEnv();\n            // callback at the end of pre-loading\n            oes.loadManager.loadFinishedCallback();\n          }, 1000);\n        });\n      });\n    });\n  });\n};\n\n/**\n * Investigate the simulation.js file and detects which of the additional\n * simulator components need to be loaded.\n * @param basePath\n *    specifies the root folder.\n * @param callback\n *    an optional callback function to be invoked at the end of the load.\n */\noes.loadManager.loadScenarioPrerequisites = function (basePath, callback) {\n  var compSrc = oes.loadManager.components[oes.loadManager.codeLoadingMode];\n  var compToLoad = [], modelFilesToLoad = [];\n  var isGridSpace = false, detectedVisualisation = false;\n  var modelFilePath = \"\";\n  // no callback provided, define an empty function\n  callback = callback || function () {};\n  // the scenario file not loaded ?...\n  if (!sim.scenario) throw \"The 'simulation.js' file could not be loaded or it contains errors!\";\n  // model related dependencies\n  if (sim.model) {\n    // detect space type\n    if (sim.model.space && sim.model.space.type) {\n      compToLoad = compToLoad.concat(compSrc.coreSpace);\n      // if \"grid\" is part of sim.model.space.type param, then we have a grid space\n      if (sim.model.space.type.toLowerCase().indexOf(\"grid\") !== -1) isGridSpace = true;\n    }\n    // detect statistics\n    if (sim.model.statistics) {\n      compToLoad = compToLoad.concat( compSrc.chartistStatVis);\n    }\n    // detect object type model files\n    if (sim.model.objectTypeFilesInSubfolders &&\n        Array.isArray(sim.model.objectTypeFilesInSubfolders))\n      sim.model.objectTypeFilesInSubfolders.forEach( function (file) {\n        if (file.endsWith(\".js\")) modelFilesToLoad.push(file);\n        else modelFilesToLoad.push(file + \".js\");\n      });\n    else if (sim.model.objectTypes && Array.isArray(sim.model.objectTypes))\n      sim.model.objectTypes.forEach( function (objTypeName) {\n        modelFilesToLoad.push(objTypeName + \".js\");\n      });\n    // detect event type model files\n    if (sim.model.eventTypeFilesInSubfolders &&\n        Array.isArray(sim.model.eventTypeFilesInSubfolders))\n      sim.model.eventTypeFilesInSubfolders.forEach( function (file) {\n        if (file.endsWith(\".js\")) modelFilesToLoad.push(file);\n        else modelFilesToLoad.push(file + \".js\");\n      });\n    else if (sim.model.eventTypes && Array.isArray(sim.model.eventTypes)){\n      sim.model.eventTypes.forEach(\n          function (evtTypeName) {modelFilesToLoad.push(evtTypeName + \".js\");});\n    }\n    // detect activity type model files\n    if (sim.model.activityTypeFilesInSubfolders && Array.isArray(sim.model.activityTypeFilesInSubfolders))\n      sim.model.activityTypeFilesInSubfolders.forEach( function (file) {\n        if (file.endsWith(\".js\")) modelFilesToLoad.push(file);\n        else modelFilesToLoad.push(file + \".js\");\n      });\n    else if (sim.model.activityTypes && Array.isArray(sim.model.activityTypes))\n      sim.model.activityTypes.forEach( function (activityTypeName) {\n        modelFilesToLoad.push(activityTypeName + \".js\");\n      });\n  }\n  // observation UI related modules\n  if (sim.config.observationUI.spaceView.type) {\n    if (!sim.model.space.type) {\n      // the space core needs to be loaded\n      compToLoad = compToLoad.concat(compSrc.coreSpace);\n    }\n    // detect visualization module\n    if (sim.config.observationUI.spaceView.type && sim.config.visualize) {\n      switch (sim.config.observationUI.spaceView.type) {\n        case \"oneDimSVG\":\n          compToLoad = compToLoad.concat(compSrc.oneDimSvgVis);\n          detectedVisualisation = true;\n          break;\n        case \"Isometric2D\":\n          compToLoad = compToLoad.concat(compSrc.phaserVis);\n          detectedVisualisation = true;\n          break;\n        case \"threeDim\":\n          compToLoad = compToLoad.concat(compSrc.babylonVis);\n          detectedVisualisation = true;\n          break;\n      }\n    }\n  }\n  // for grid space, if spaceView.type is defined,\n  // then use gridDom as default visualization\n  if (isGridSpace && !detectedVisualisation && sim.config.visualize)\n    compToLoad = compToLoad.concat( compSrc.gridDomVis);\n  oes.loadManager.progressIncStep = 30 / (compToLoad.length + modelFilesToLoad.length);\n  // load prerequisites\n  if (oes.loadManager.useScenarioId) modelFilePath = \"./\" + oes.loadManager.modelNameOrId + \"/\";\n  console.log(modelFilePath)\n  oes.loadManager.loadFileBatch( compToLoad, basePath, function () {\n    // load additional model files\n    oes.loadManager.loadFileBatch( modelFilesToLoad, modelFilePath, callback);\n  });\n};\n\n/**\n * Takes care of loading a specific JS or CSS file. This means to create\n * the script or link element within the DOM header.\n * @param pathAndFilename\n *    the file to be \"loaded\" - absolute or relative path.\n * @param basePath\n *    specifies the root folder.\n * @param callback\n *    an optional callback function to be invoked at the end of the load.\n *    Callback parameter is the created script or link element reference.\n * @param errCallback\n *    an optional callback function to be invoked if errors occurred\n *    during the load.\n */\noes.loadManager.loadFile = function (pathAndFilename, basePath, callback, errCallback) {\n  var loadEl = null;\n  var jsFileExt = /(.js)$/i, cssFileExt = /(.css)$/i;\n  var origFName = pathAndFilename;\n  \n  var appendQueryParams = function (pfn) {\n    if (oes.loadManager.queryParams[\"local\"]) {\n      if (pfn.indexOf(\"?\") > -1) pfn += \"&local=true\";\n      else pfn += \"?local=true\";\n    }\n    return pfn\n  };\n  // if a full URL is provided, the base path is ignored\n  if (pathAndFilename.indexOf(\"://\") === -1)\n    pathAndFilename = basePath + pathAndFilename;\n  // no callback(s) provided, define an empty function\n  callback = typeof callback === \"function\" ? callback : function () {};\n  errCallback = typeof errCallback === \"function\" ? errCallback\n    : function () {};\n  if (jsFileExt.test(pathAndFilename)) {\n    loadEl = document.createElement('script');\n    loadEl.src = appendQueryParams(pathAndFilename);\n  } else if (cssFileExt.test(pathAndFilename)) {\n    loadEl = document.createElement('link');\n    loadEl.rel = 'stylesheet';\n    loadEl.type = 'text/css';\n    loadEl.href = appendQueryParams(pathAndFilename);\n  } else {\n    throw \"oes.loadManager.loadFile: only 'js' and 'css' files are supported! The required '\"\n      + pathAndFilename + \"' file has a wrong extension!\";\n  }\n  if (loadEl) {\n    loadEl.onload = function () {\n      oes.loadManager.updateProgressBar( oes.loadManager.progressIncStep, true);\n      callback(loadEl);\n    };\n    loadEl.onerror = function (e) {\n      // not finding the loadManagerConfig.js file is not an error...\n      if (pathAndFilename.indexOf(\"loadManagerConfig.js\") === -1) {\n        console.log(\"loadManager: failed to load file '\" + pathAndFilename + \"'!\");\n      }\n      document.head.removeChild(loadEl);\n      oes.loadManager.progressBarUpdateInfo(\"The file: '\" + pathAndFilename + \"' was not found!\", true);\n      errCallback(e);\n    };\n    document.head.appendChild( loadEl);\n    oes.loadManager.progressBarUpdateInfo(\"Loading: \" + origFName);\n  }\n};\n\n/**\n * Load a batch of CSS and JS files\n * The loading is done in a synchronous mode - that means files are loaded in order.\n * NOTE: check if makes sense to use an async loading (does this breaks the simulation ?)\n *\n * @param filesToLoad\n *    a list of files to be \"loaded\".\n * @param basePath\n *    specifies the root folder.\n * @param callback\n *    an optional callback function to be invoked at the end of the load.\n */\noes.loadManager.loadFileBatch = function( filesToLoad, basePath, callback) {\n  // no callback provided, define an empty function\n  callback = callback || function () {};\n  if(filesToLoad.length < 1) callback();\n  else {\n    setTimeout(function() { // very light delay so that the progress bar is visible\n      oes.loadManager.loadFile(filesToLoad.splice(0, 1)[0], basePath, function() {\n        oes.loadManager.loadFileBatch(filesToLoad, basePath, callback);\n      });\n    }, 0);\n\n  }\n};\n\n/**\n * Clear the browser console. THis is required since during the preload time,\n * some files contains partial missing references. While these are not fatal\n * errors, they appear in the console, and lets the feeling that something\n * is bad, while is not really...\n * NOTE: use this method only if you know what you are doing.\n */\noes.loadManager.clearConsole = function () {\n  /******************************************************************\n   ***** Experimental code used to clear browser console *****\n   * NOTE: this code may require some special attention, but for now\n   *       it is used to delete the residual errors shown in the\n   *       browser console as the result of having loaded the\n   *       simulation.js\n   *       to detect model files and features, but without having\n   *       yet loaded all the resource files (since are unknown at this moment).\n   ******************************************************************/\n  console.API;\n  if (typeof console._commandLineAPI !== 'undefined')\n    console.API = console._commandLineAPI; //chrome\n  else if (typeof console._inspectorCommandLineAPI !== 'undefined')\n    console.API = console._inspectorCommandLineAPI; //Safari\n  else if (typeof console.clear !== 'undefined')\n    console.API = console;\n  console.API.clear();\n  // display debug information\n  oes.loadManager.showConfigInConsole();\n};\n\n/**\n * Create the load progress bar.\n */\noes.loadManager.createProgressBar = function () {\n  var progressContainer = document.createElement(\"div\"),\n    progress = document.createElement(\"progress\"),\n    progressTitle = document.createElement(\"p\"),\n    progressInfo = document.createElement(\"p\");\n  var lmScripts = document.querySelectorAll(\"body > script\");\n  // the value for 100%\n  progress.max = 100;\n  // initial value\n  progress.value = 0;\n  // style the progress bar\n  progress.style.width = \"25em\";\n  progress.style.height = \"1.7em\";\n  // set text for progress title element\n  progressTitle.innerHTML = \"Please wait, we are loading the simulation data...\";\n  // set properties for progress info element\n  progressInfo.id=\"load-progress-info\";\n  // set required properties for the progress container\n  progressContainer.id = \"load-progress-container\";\n  progressContainer.appendChild( progressTitle);\n  progressContainer.appendChild( progress);\n  progressContainer.appendChild( progressInfo);\n  // style the progress container\n  progressContainer.style.margin = \"3em 1em\";\n  progressContainer.style.textAlign = \"center\";\n  // append the progress bar before the script element\n  // that loads/initializes the load manager\n  if (lmScripts[0])\n    document.body.insertBefore(progressContainer, lmScripts[0]);\n  else\n    document.body.appendChild(progressContainer);\n};\n\n/**\n * Remove the progress bar from the DOM\n */\noes.loadManager.removeProgressbar = function () {\n  var progressContainer = document.getElementById(\"load-progress-container\");\n  if (progressContainer) \n    progressContainer.parentNode.removeChild(progressContainer);\n};\n\n/**\n * Update the status of the progress bar.\n * @param value the actual progress value (0 to 100)\n * @param incrementOnly a flag indicating that the value is an increment for the current value\n */\noes.loadManager.updateProgressBar = function (value, incrementOnly) {\n  var progress = document.querySelector(\"#load-progress-container > progress\");\n  if (progress) {\n    if (typeof value === \"number\") {\n      if (incrementOnly === true)\n        progress.value = Math.min(progress.value + value, 100);\n      else progress.value = Math.min( Math.max(value, 0), 100);\n    }\n  }\n\n};\n\n/**\n * Get the current value for the progress bar\n */\noes.loadManager.getProgressBarValue = function () {\n  var progress = document.querySelector(\"#load-progress-container > progress\");\n  if (progress) return progress.value;\n  else return -1;\n};\n/**\n * Get the current value for the progress bar\n * @param message the message to display\n * @param isError specifies if the message is an error message\n */\noes.loadManager.progressBarUpdateInfo = function (message, isError) {\n  var infoEl = document.querySelector(\"#load-progress-info\");\n  if (!infoEl) return;\n  else if (isError === true) infoEl.style.color = \"red\";\n  else infoEl.style.color = null;\n  infoEl.innerHTML = message;\n};\n\n// trigger preload when DOM loading is complete\nwindow.addEventListener(\"load\", function () {\n  // Setup the load manager, and when ready,\n  // start loading the CSS and JS files.\n  // Finally, remove the progress bar HTML content.\n  oes.loadManager.setup( function () {\n    oes.loadManager.preload( oes.loadManager.removeProgressbar);\n  });\n});\n","source":"sims/loadManager.js","raw":"/**\n * Load manager is used to perform autoloading of the required resources for a simulation scenario.\n * It looks in the scenario file and detects which JS and CSS files need to be used, and automatically\n * creates the link and script elements.\n *\n * Mapping source: http://www.w3schools.com/colors/colors_names.asp\n *\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Mircea Diaconescu\n * @license The MIT License (MIT)\n */\nvar oes = oes || {};\nvar sim = sim || {};\nsim.model = sim.model || {};\nsim.model.space = sim.model.space || {};\n\noes.loadManager = {\n  // loadManager.js relative path\n  // NOTE: intended for internal use only!\n  _ownPath: \"./\",\n  // loadManager script file name (normally is \"loadManager.js\")\n  // NOTE: intended for internal use only!\n  _ownScriptFilename: \"loadManager.js\",\n  // the URL query params\n  queryParams: {},\n  // flag to enable the usage of scenario ID in the URL (mostly used for NodeJS/Heroku)\n  useScenarioId: false,\n  // the debug level of the loadManager (one of: \"info\", \"warning\" or \"error\")\n  // NOTE: default value is \"error\"\n  debugLevel: \"info\",\n  // sets the loading mode.\n  // Possible values: one of {\"deploy\", \"dev\", \"frameworkDev\"}\n  // NOTE: default value is \"frameworkDev\", and to change it, just set this parameter\n  //       to something else, by using a script element in the simulation.html file\n  //       immediately after the script element which loads the loadManager.js script file.\n  codeLoadingMode: \"frameworkDev\",\n  // flag to specify that this is a description page, not a simulation startup page.\n  // Possible values: one of {\"simulation\", \"description\"}.\n  // NOTE: default value is \"simulation\", and to change it, just set this parameter\n  //       to something else, by using a script element in the simulation.html file\n  //       immediately after the script element which loads the loadManager.js script file.\n  // the name or ID of the simulation model\n  modelNameOrId: \"\",\n  // the scenario ID\n  scenarioIdentifier: \"\",\n  // the part of the URL that is the start point for the simulation path\n  simsUrlIdentifier: \"sims\",\n  // the load protocol, e.g., file, http or https\n  pageProtocol: \"file\",\n  // the step for progress bar increment (computed later in preload)\n  progressIncStep: 0,\n  // specifies the base path for file loading.\n  // NOTE: every loading mode has its own local basePath which can be overridden\n  //       by using this parameter, which takes precedence over the local one.\n  basePath: \"\",\n  // a callback to be invoked when the load ends.\n  // NOTE: this can be overridden with whatever needs to be done at the end.\n  loadFinishedCallback: function (){},\n  components: {\n    // components for OES Framework development\n    // NOTE: used by OES team to develop the framework and example simulation scenarios\n    frameworkDev: {\n      basePath: \"../../../../\",\n      coreCssSrc: [\n        \"../cLASSjs/css/normalize.css\",\n        \"../cLASSjs/css/vIEW.css\",\n        \"css/OESjs.css\"\n      ],\n      coreJsSrc: [\n        \"../cLASSjs/lib/browserShims.js\",\n        \"../cLASSjs/lib/errorTypes.js\",\n        \"../cLASSjs/lib/util.js\",\n        \"../cLASSjs/lib/dom.js\",\n        \"../cLASSjs/src/eNUMERATION.js\",\n        \"../cLASSjs/src/cLASS.js\",\n        \"../cLASSjs/src/oBJECTvIEW.js\",\n\n        \"lib/dom-additions.js\",\n        \"lib/svg.js\",\n        \"lib/rand.js\",\n\n        \"src/v1/OES.js\",\n        \"src/v1/ClientLogger.js\",\n        \"src/v1/EventList.js\",\n        \"src/v1/statistics.js\",\n        \"src/v1/simulator.js\",\n        \"src/ui/simulatorUI.js\"],\n      coreSpace: [\n        \"src/space/space.js\",\n        \"src/space/ObjectInOneDimSpace.js\",\n        \"src/space/ObjectInTwoDimSpace.js\",\n        \"src/space/ObjectInThreeDimSpace.js\",\n        \"src/space/gridOfIntegers.js\",\n        \"src/space/gridOfObjects.js\",\n        \"src/space/overlayGrid.js\",\n        \"src/space/ObjectInGridSpace.js\"],\n      oneDimSvgVis: [\"lib/svg.js\", \"src/ui/space/oneDimSVG.js\"],\n      gridDomVis: [\"src/ui/space/gridDom.js\", \"src/ui/space/gridOfIntegersDom.js\", \"src/ui/space/gridOfObjectsDom.js\"],\n      babylonVis: [\"lib/babylon.2.4.min.js\", \"src/ui/cssColorNames.js\",\"src/ui/space/threeDimBabylon.js\"],\n      phaserVis: [\n        \"lib/phaser.min.js\",\n        \"lib/phaser-plugin-isometric.min.js\",\n        \"src/ui/space/widgets/Widget.js\",\n        \"src/ui/space/widgets/meter/Meter.js\",\n        \"src/ui/space/widgets/AlphanumericDisplay/AlphanumericDisplay.js\",\n        \"src/ui/space/twoDimPhaser.js\"],\n      chartistStatVis: [\n        \"css/chartist.min.css\",\n        \"css/chartist-plugin-legend.css\",\n        \"lib/chartist.min.js\",\n        \"lib/chartist-plugin-legend.js\"],\n      description: [\n        //\"../cLASSjs/css/normalize.css\",\n        \"css/normalize.min.css\",\n        \"css/description.css\",\n        \"src/ui/description.js\"\n      ]\n    },\n    // components for simulation development\n    // NOTE: used by simulation authors\n    dev: {\n      basePath: \"../framework/\",\n      coreCssSrc: [\"simulator-core.css\"],\n      coreJsSrc: [\"simulator-core.js\"],\n      coreSpace: [\"space-core.js\"],\n      oneDimSvgVis: [\"oneDimSVG-visualization.js\"],\n      gridDomVis: [\"gridDom-visualization.js\"],\n      babylonVis: [\"babylon-visualization.js\"],\n      phaserVis: [\"phaser-visualization.js\"],\n      chartistStatVis: [\"chartist.css\", \"chartist.js\"],\n      description: [\"description.css\", \"description.js\"]\n    },\n    // components for production mode\n    // NOTE: simulations are deployed on a web server\n    deploy: {\n      basePath: window.location.href + \"../framework/\",\n      /* coreCssSrc: [\"simulator-core.css\"], */\n      coreCssSrc: [],\n      /* coreJsSrc: [\"simulator-core.js\"], */\n      coreJsSrc: [],\n      coreSpace: [\"space-core.js\"],\n      oneDimSvgVis: [\"oneDimSVG-visualization.js\"],\n      gridDomVis: [\"gridDom-visualization.js\"],\n      babylonVis:[\n        \"https://cdnjs.cloudflare.com/ajax/libs/babylonjs/2.4.1/babylon.js\",\n        \"babylon-visualization-core.js\"],\n      phaserVis: [\n        \"https://cdnjs.cloudflare.com/ajax/libs/phaser/2.6.2/phaser.min.js\",\n        \"phaser-visualization-core.js\"\n      ],\n      /* chartistStatVis: [\"chartist.css\", \"chartist.js\"], */\n      chartistStatVis: [],\n      description: [\"description.css\", \"description.js\"]\n    }\n  }\n};\n\n/**\n * Display the configuration settings in the browser console.\n * NOTE: this method is mostly used for debug reasons, and does not\n *       have real functionality as part of the loadManager.\n */\noes.loadManager.showConfigInConsole = function() {\n  var compSrc = oes.loadManager.components[oes.loadManager.codeLoadingMode],\n    // oes.loadManager.basePath has priority´, allowing to override the location.\n    basePath = oes.loadManager.basePath || compSrc.basePath;\n\n  if(oes.loadManager.debugLevel !== \"info\") return;\n  console.log(\"################ loadManager configuration ################\");\n  console.log(\"codeLoadingMode = '\" + oes.loadManager.codeLoadingMode + \"'\");\n  console.log(\"pageProtocol = '\" + oes.loadManager.pageProtocol + \"'\");\n  console.log(\"basePath = '\" + basePath + \"'\");\n  console.log(\"modelNameOrId = '\" + oes.loadManager.modelNameOrId + \"'\");\n  console.log(\"useScenarioId = \" + oes.loadManager.useScenarioId);\n  console.log(\"_ownPath = '\" + (oes.loadManager._ownPath || \"./\" )+ \"'\");\n  console.log(\"_ownScriptFilename = '\" + (oes.loadManager._ownScriptFilename || \"./\" )+ \"'\");\n  console.log(\"queryParams = \" + JSON.stringify(oes.loadManager.queryParams));\n  console.log(\"fullURL = '\" + window.location.href + \"'\");\n  console.log(\"###########################################################\");\n};\n\n/**\n * Detect the codeLoadingMode (one of \"frameworkDev\", \"dev\" and \"deploy)\n */\noes.loadManager.setup = function(callback) {\n  var url = window.location.href, lmPath =\"\";\n  var scripts = document.getElementsByTagName(\"script\");\n  var scriptName = oes.loadManager._ownScriptFilename;\n  var index = -1, queryParams = [];\n  index = url.indexOf(\"?\");\n  if (index > -1) {\n    queryParams = url.substring(index+1).split(\"&\");\n    url = url.substring(0, index);\n    queryParams.forEach( function (qParam) {\n      var p = \"\", v = \"\", pv = [];\n      pv = qParam.split(\"=\");\n      p = pv[0];\n      v = pv[1];\n      if (v === \"true\" || v === \"false\") v = Boolean(v);\n      else if (!isNaN(v)) v = Number(v);\n      oes.loadManager.queryParams[p] = v.valueOf();\n    });\n  }\n  callback = typeof callback === \"function\" ? callback : function (){};\n  // create and display the progress bar HTML piece\n  oes.loadManager.createProgressBar();\n  //detect protocol from page URL\n  oes.loadManager.pageProtocol = url.split(\"://\")[0];\n  // detect the relative path for the loadManager.js\n  lmPath = scripts[scripts.length-1].src;\n  if (!lmPath.endsWith(scriptName)) {\n    index = lmPath.lastIndexOf(\"/\");\n    if (index === -1) scriptName = oes.loadManager._ownScriptFilename = lmPath;\n    else scriptName = oes.loadManager._ownScriptFilename = lmPath.substring(index);\n  }\n  index = lmPath.indexOf(scriptName);\n  lmPath = oes.loadManager._ownPath = lmPath.substring(0, index) || \"./\";\n  // try to load the loadManagerConfig.js file, which is the configuration file\n  // for the load manager containing various settings, and can also override default\n  // values for the loadManager, if this is required on special cases\n  oes.loadManager.loadFile(\"loadManagerConfig.js\", oes.loadManager._ownPath, function() {\n    /** success loading config file, so this is either \"dev\" or \"deploy\"\n     * NOTE: the configuration file must explicitly sets the codeLoadingMode parameter!\n     **/\n    // update progress bar\n    oes.loadManager.updateProgressBar(10);\n    // finished, now call the callback\n    callback();\n  }, function () {\n    // failed, so threat this as \"frameworkDev\n    // NOTE: this is the default value anyway, but it is here\n    //       for clarity reasons, and easy code debugging\n    oes.loadManager.codeLoadingMode = \"frameworkDev\";\n    // update progress bar\n    oes.loadManager.updateProgressBar(10);\n    // finished, now call the callback\n    callback();\n  });\n};\n\n/**\n * Preload all the needed files to run the specific simulation scenario.\n * It loads the minimum required, then analyze the scenario file and finally\n * load all the required CSS and JS files to be able to run the simulation.\n */\noes.loadManager.preload = function (callback) {\n  var compSrc = oes.loadManager.components[oes.loadManager.codeLoadingMode],\n    // oes.loadManager.basePath has priority´, allowing to override the location.\n    basePath = oes.loadManager.basePath || compSrc.basePath,\n    callback = typeof callback === \"function\" ? callback : function(){},\n    scenarioFilePath = \"./\";\n  oes.loadManager.showConfigInConsole();\n  if (oes.loadManager.useScenarioId) scenarioFilePath = \"./\" + oes.loadManager.modelNameOrId + \"/\";\n  oes.loadManager.progressIncStep = 40 / (compSrc.coreCssSrc.length + compSrc.coreJsSrc.length);\n  // load simulator CSS core\n  oes.loadManager.loadFileBatch(compSrc.coreCssSrc, basePath, function () {\n    // add the script element for simulation.js\n    oes.loadManager.progressIncStep = oes.loadManager.getProgressBarValue() / 2 ;\n    oes.loadManager.loadFile(\"simulation.js\", scenarioFilePath, function (scenarioScriptEl) {\n      oes.loadManager.loadScenarioPrerequisites( basePath, function () {\n        // remove the script element containing simulation.js\n        // because this needs to be latest to avoid any dependency errors\n        document.head.removeChild( scenarioScriptEl);\n        // clear the browser console.\n        //oes.loadManager.clearConsole();\n        // add the script element for simulation.js\n        oes.loadManager.loadFile(\"simulation.js\", scenarioFilePath, function () {\n          setTimeout( function () {\n            // invoke success callback method\n            callback();\n            // call frontend initialization\n            oes.setupFrontEndSimEnv();\n            // callback at the end of pre-loading\n            oes.loadManager.loadFinishedCallback();\n          }, 1000);\n        });\n      });\n    });\n  });\n};\n\n/**\n * Investigate the simulation.js file and detects which of the additional\n * simulator components need to be loaded.\n * @param basePath\n *    specifies the root folder.\n * @param callback\n *    an optional callback function to be invoked at the end of the load.\n */\noes.loadManager.loadScenarioPrerequisites = function (basePath, callback) {\n  var compSrc = oes.loadManager.components[oes.loadManager.codeLoadingMode];\n  var compToLoad = [], modelFilesToLoad = [];\n  var isGridSpace = false, detectedVisualisation = false;\n  var modelFilePath = \"\";\n  // no callback provided, define an empty function\n  callback = callback || function () {};\n  // the scenario file not loaded ?...\n  if (!sim.scenario) throw \"The 'simulation.js' file could not be loaded or it contains errors!\";\n  // model related dependencies\n  if (sim.model) {\n    // detect space type\n    if (sim.model.space && sim.model.space.type) {\n      compToLoad = compToLoad.concat(compSrc.coreSpace);\n      // if \"grid\" is part of sim.model.space.type param, then we have a grid space\n      if (sim.model.space.type.toLowerCase().indexOf(\"grid\") !== -1) isGridSpace = true;\n    }\n    // detect statistics\n    if (sim.model.statistics) {\n      compToLoad = compToLoad.concat( compSrc.chartistStatVis);\n    }\n    // detect object type model files\n    if (sim.model.objectTypeFilesInSubfolders &&\n        Array.isArray(sim.model.objectTypeFilesInSubfolders))\n      sim.model.objectTypeFilesInSubfolders.forEach( function (file) {\n        if (file.endsWith(\".js\")) modelFilesToLoad.push(file);\n        else modelFilesToLoad.push(file + \".js\");\n      });\n    else if (sim.model.objectTypes && Array.isArray(sim.model.objectTypes))\n      sim.model.objectTypes.forEach( function (objTypeName) {\n        modelFilesToLoad.push(objTypeName + \".js\");\n      });\n    // detect event type model files\n    if (sim.model.eventTypeFilesInSubfolders &&\n        Array.isArray(sim.model.eventTypeFilesInSubfolders))\n      sim.model.eventTypeFilesInSubfolders.forEach( function (file) {\n        if (file.endsWith(\".js\")) modelFilesToLoad.push(file);\n        else modelFilesToLoad.push(file + \".js\");\n      });\n    else if (sim.model.eventTypes && Array.isArray(sim.model.eventTypes)){\n      sim.model.eventTypes.forEach(\n          function (evtTypeName) {modelFilesToLoad.push(evtTypeName + \".js\");});\n    }\n    // detect activity type model files\n    if (sim.model.activityTypeFilesInSubfolders && Array.isArray(sim.model.activityTypeFilesInSubfolders))\n      sim.model.activityTypeFilesInSubfolders.forEach( function (file) {\n        if (file.endsWith(\".js\")) modelFilesToLoad.push(file);\n        else modelFilesToLoad.push(file + \".js\");\n      });\n    else if (sim.model.activityTypes && Array.isArray(sim.model.activityTypes))\n      sim.model.activityTypes.forEach( function (activityTypeName) {\n        modelFilesToLoad.push(activityTypeName + \".js\");\n      });\n  }\n  // observation UI related modules\n  if (sim.config.observationUI.spaceView.type) {\n    if (!sim.model.space.type) {\n      // the space core needs to be loaded\n      compToLoad = compToLoad.concat(compSrc.coreSpace);\n    }\n    // detect visualization module\n    if (sim.config.observationUI.spaceView.type && sim.config.visualize) {\n      switch (sim.config.observationUI.spaceView.type) {\n        case \"oneDimSVG\":\n          compToLoad = compToLoad.concat(compSrc.oneDimSvgVis);\n          detectedVisualisation = true;\n          break;\n        case \"Isometric2D\":\n          compToLoad = compToLoad.concat(compSrc.phaserVis);\n          detectedVisualisation = true;\n          break;\n        case \"threeDim\":\n          compToLoad = compToLoad.concat(compSrc.babylonVis);\n          detectedVisualisation = true;\n          break;\n      }\n    }\n  }\n  // for grid space, if spaceView.type is defined,\n  // then use gridDom as default visualization\n  if (isGridSpace && !detectedVisualisation && sim.config.visualize)\n    compToLoad = compToLoad.concat( compSrc.gridDomVis);\n  oes.loadManager.progressIncStep = 30 / (compToLoad.length + modelFilesToLoad.length);\n  // load prerequisites\n  if (oes.loadManager.useScenarioId) modelFilePath = \"./\" + oes.loadManager.modelNameOrId + \"/\";\n  console.log(modelFilePath)\n  oes.loadManager.loadFileBatch( compToLoad, basePath, function () {\n    // load additional model files\n    oes.loadManager.loadFileBatch( modelFilesToLoad, modelFilePath, callback);\n  });\n};\n\n/**\n * Takes care of loading a specific JS or CSS file. This means to create\n * the script or link element within the DOM header.\n * @param pathAndFilename\n *    the file to be \"loaded\" - absolute or relative path.\n * @param basePath\n *    specifies the root folder.\n * @param callback\n *    an optional callback function to be invoked at the end of the load.\n *    Callback parameter is the created script or link element reference.\n * @param errCallback\n *    an optional callback function to be invoked if errors occurred\n *    during the load.\n */\noes.loadManager.loadFile = function (pathAndFilename, basePath, callback, errCallback) {\n  var loadEl = null;\n  var jsFileExt = /(.js)$/i, cssFileExt = /(.css)$/i;\n  var origFName = pathAndFilename;\n  \n  var appendQueryParams = function (pfn) {\n    if (oes.loadManager.queryParams[\"local\"]) {\n      if (pfn.indexOf(\"?\") > -1) pfn += \"&local=true\";\n      else pfn += \"?local=true\";\n    }\n    return pfn\n  };\n  // if a full URL is provided, the base path is ignored\n  if (pathAndFilename.indexOf(\"://\") === -1)\n    pathAndFilename = basePath + pathAndFilename;\n  // no callback(s) provided, define an empty function\n  callback = typeof callback === \"function\" ? callback : function () {};\n  errCallback = typeof errCallback === \"function\" ? errCallback\n    : function () {};\n  if (jsFileExt.test(pathAndFilename)) {\n    loadEl = document.createElement('script');\n    loadEl.src = appendQueryParams(pathAndFilename);\n  } else if (cssFileExt.test(pathAndFilename)) {\n    loadEl = document.createElement('link');\n    loadEl.rel = 'stylesheet';\n    loadEl.type = 'text/css';\n    loadEl.href = appendQueryParams(pathAndFilename);\n  } else {\n    throw \"oes.loadManager.loadFile: only 'js' and 'css' files are supported! The required '\"\n      + pathAndFilename + \"' file has a wrong extension!\";\n  }\n  if (loadEl) {\n    loadEl.onload = function () {\n      oes.loadManager.updateProgressBar( oes.loadManager.progressIncStep, true);\n      callback(loadEl);\n    };\n    loadEl.onerror = function (e) {\n      // not finding the loadManagerConfig.js file is not an error...\n      if (pathAndFilename.indexOf(\"loadManagerConfig.js\") === -1) {\n        console.log(\"loadManager: failed to load file '\" + pathAndFilename + \"'!\");\n      }\n      document.head.removeChild(loadEl);\n      oes.loadManager.progressBarUpdateInfo(\"The file: '\" + pathAndFilename + \"' was not found!\", true);\n      errCallback(e);\n    };\n    document.head.appendChild( loadEl);\n    oes.loadManager.progressBarUpdateInfo(\"Loading: \" + origFName);\n  }\n};\n\n/**\n * Load a batch of CSS and JS files\n * The loading is done in a synchronous mode - that means files are loaded in order.\n * NOTE: check if makes sense to use an async loading (does this breaks the simulation ?)\n *\n * @param filesToLoad\n *    a list of files to be \"loaded\".\n * @param basePath\n *    specifies the root folder.\n * @param callback\n *    an optional callback function to be invoked at the end of the load.\n */\noes.loadManager.loadFileBatch = function( filesToLoad, basePath, callback) {\n  // no callback provided, define an empty function\n  callback = callback || function () {};\n  if(filesToLoad.length < 1) callback();\n  else {\n    setTimeout(function() { // very light delay so that the progress bar is visible\n      oes.loadManager.loadFile(filesToLoad.splice(0, 1)[0], basePath, function() {\n        oes.loadManager.loadFileBatch(filesToLoad, basePath, callback);\n      });\n    }, 0);\n\n  }\n};\n\n/**\n * Clear the browser console. THis is required since during the preload time,\n * some files contains partial missing references. While these are not fatal\n * errors, they appear in the console, and lets the feeling that something\n * is bad, while is not really...\n * NOTE: use this method only if you know what you are doing.\n */\noes.loadManager.clearConsole = function () {\n  /******************************************************************\n   ***** Experimental code used to clear browser console *****\n   * NOTE: this code may require some special attention, but for now\n   *       it is used to delete the residual errors shown in the\n   *       browser console as the result of having loaded the\n   *       simulation.js\n   *       to detect model files and features, but without having\n   *       yet loaded all the resource files (since are unknown at this moment).\n   ******************************************************************/\n  console.API;\n  if (typeof console._commandLineAPI !== 'undefined')\n    console.API = console._commandLineAPI; //chrome\n  else if (typeof console._inspectorCommandLineAPI !== 'undefined')\n    console.API = console._inspectorCommandLineAPI; //Safari\n  else if (typeof console.clear !== 'undefined')\n    console.API = console;\n  console.API.clear();\n  // display debug information\n  oes.loadManager.showConfigInConsole();\n};\n\n/**\n * Create the load progress bar.\n */\noes.loadManager.createProgressBar = function () {\n  var progressContainer = document.createElement(\"div\"),\n    progress = document.createElement(\"progress\"),\n    progressTitle = document.createElement(\"p\"),\n    progressInfo = document.createElement(\"p\");\n  var lmScripts = document.querySelectorAll(\"body > script\");\n  // the value for 100%\n  progress.max = 100;\n  // initial value\n  progress.value = 0;\n  // style the progress bar\n  progress.style.width = \"25em\";\n  progress.style.height = \"1.7em\";\n  // set text for progress title element\n  progressTitle.innerHTML = \"Please wait, we are loading the simulation data...\";\n  // set properties for progress info element\n  progressInfo.id=\"load-progress-info\";\n  // set required properties for the progress container\n  progressContainer.id = \"load-progress-container\";\n  progressContainer.appendChild( progressTitle);\n  progressContainer.appendChild( progress);\n  progressContainer.appendChild( progressInfo);\n  // style the progress container\n  progressContainer.style.margin = \"3em 1em\";\n  progressContainer.style.textAlign = \"center\";\n  // append the progress bar before the script element\n  // that loads/initializes the load manager\n  if (lmScripts[0])\n    document.body.insertBefore(progressContainer, lmScripts[0]);\n  else\n    document.body.appendChild(progressContainer);\n};\n\n/**\n * Remove the progress bar from the DOM\n */\noes.loadManager.removeProgressbar = function () {\n  var progressContainer = document.getElementById(\"load-progress-container\");\n  if (progressContainer) \n    progressContainer.parentNode.removeChild(progressContainer);\n};\n\n/**\n * Update the status of the progress bar.\n * @param value the actual progress value (0 to 100)\n * @param incrementOnly a flag indicating that the value is an increment for the current value\n */\noes.loadManager.updateProgressBar = function (value, incrementOnly) {\n  var progress = document.querySelector(\"#load-progress-container > progress\");\n  if (progress) {\n    if (typeof value === \"number\") {\n      if (incrementOnly === true)\n        progress.value = Math.min(progress.value + value, 100);\n      else progress.value = Math.min( Math.max(value, 0), 100);\n    }\n  }\n\n};\n\n/**\n * Get the current value for the progress bar\n */\noes.loadManager.getProgressBarValue = function () {\n  var progress = document.querySelector(\"#load-progress-container > progress\");\n  if (progress) return progress.value;\n  else return -1;\n};\n/**\n * Get the current value for the progress bar\n * @param message the message to display\n * @param isError specifies if the message is an error message\n */\noes.loadManager.progressBarUpdateInfo = function (message, isError) {\n  var infoEl = document.querySelector(\"#load-progress-info\");\n  if (!infoEl) return;\n  else if (isError === true) infoEl.style.color = \"red\";\n  else infoEl.style.color = null;\n  infoEl.innerHTML = message;\n};\n\n// trigger preload when DOM loading is complete\nwindow.addEventListener(\"load\", function () {\n  // Setup the load manager, and when ready,\n  // start loading the CSS and JS files.\n  // Finally, remove the progress bar HTML content.\n  oes.loadManager.setup( function () {\n    oes.loadManager.preload( oes.loadManager.removeProgressbar);\n  });\n});\n","date":"2019-06-23T11:48:49.555Z","updated":"2019-04-16T15:44:34.160Z","path":"sims/loadManager.js","layout":"false","title":"","comments":1,"_id":"cjx8wr3ht000bj1h5a8uced7w","content":"/**\n * Load manager is used to perform autoloading of the required resources for a simulation scenario.\n * It looks in the scenario file and detects which JS and CSS files need to be used, and automatically\n * creates the link and script elements.\n *\n * Mapping source: http://www.w3schools.com/colors/colors_names.asp\n *\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Mircea Diaconescu\n * @license The MIT License (MIT)\n */\nvar oes = oes || {};\nvar sim = sim || {};\nsim.model = sim.model || {};\nsim.model.space = sim.model.space || {};\n\noes.loadManager = {\n  // loadManager.js relative path\n  // NOTE: intended for internal use only!\n  _ownPath: \"./\",\n  // loadManager script file name (normally is \"loadManager.js\")\n  // NOTE: intended for internal use only!\n  _ownScriptFilename: \"loadManager.js\",\n  // the URL query params\n  queryParams: {},\n  // flag to enable the usage of scenario ID in the URL (mostly used for NodeJS/Heroku)\n  useScenarioId: false,\n  // the debug level of the loadManager (one of: \"info\", \"warning\" or \"error\")\n  // NOTE: default value is \"error\"\n  debugLevel: \"info\",\n  // sets the loading mode.\n  // Possible values: one of {\"deploy\", \"dev\", \"frameworkDev\"}\n  // NOTE: default value is \"frameworkDev\", and to change it, just set this parameter\n  //       to something else, by using a script element in the simulation.html file\n  //       immediately after the script element which loads the loadManager.js script file.\n  codeLoadingMode: \"frameworkDev\",\n  // flag to specify that this is a description page, not a simulation startup page.\n  // Possible values: one of {\"simulation\", \"description\"}.\n  // NOTE: default value is \"simulation\", and to change it, just set this parameter\n  //       to something else, by using a script element in the simulation.html file\n  //       immediately after the script element which loads the loadManager.js script file.\n  // the name or ID of the simulation model\n  modelNameOrId: \"\",\n  // the scenario ID\n  scenarioIdentifier: \"\",\n  // the part of the URL that is the start point for the simulation path\n  simsUrlIdentifier: \"sims\",\n  // the load protocol, e.g., file, http or https\n  pageProtocol: \"file\",\n  // the step for progress bar increment (computed later in preload)\n  progressIncStep: 0,\n  // specifies the base path for file loading.\n  // NOTE: every loading mode has its own local basePath which can be overridden\n  //       by using this parameter, which takes precedence over the local one.\n  basePath: \"\",\n  // a callback to be invoked when the load ends.\n  // NOTE: this can be overridden with whatever needs to be done at the end.\n  loadFinishedCallback: function (){},\n  components: {\n    // components for OES Framework development\n    // NOTE: used by OES team to develop the framework and example simulation scenarios\n    frameworkDev: {\n      basePath: \"../../../../\",\n      coreCssSrc: [\n        \"../cLASSjs/css/normalize.css\",\n        \"../cLASSjs/css/vIEW.css\",\n        \"css/OESjs.css\"\n      ],\n      coreJsSrc: [\n        \"../cLASSjs/lib/browserShims.js\",\n        \"../cLASSjs/lib/errorTypes.js\",\n        \"../cLASSjs/lib/util.js\",\n        \"../cLASSjs/lib/dom.js\",\n        \"../cLASSjs/src/eNUMERATION.js\",\n        \"../cLASSjs/src/cLASS.js\",\n        \"../cLASSjs/src/oBJECTvIEW.js\",\n\n        \"lib/dom-additions.js\",\n        \"lib/svg.js\",\n        \"lib/rand.js\",\n\n        \"src/v1/OES.js\",\n        \"src/v1/ClientLogger.js\",\n        \"src/v1/EventList.js\",\n        \"src/v1/statistics.js\",\n        \"src/v1/simulator.js\",\n        \"src/ui/simulatorUI.js\"],\n      coreSpace: [\n        \"src/space/space.js\",\n        \"src/space/ObjectInOneDimSpace.js\",\n        \"src/space/ObjectInTwoDimSpace.js\",\n        \"src/space/ObjectInThreeDimSpace.js\",\n        \"src/space/gridOfIntegers.js\",\n        \"src/space/gridOfObjects.js\",\n        \"src/space/overlayGrid.js\",\n        \"src/space/ObjectInGridSpace.js\"],\n      oneDimSvgVis: [\"lib/svg.js\", \"src/ui/space/oneDimSVG.js\"],\n      gridDomVis: [\"src/ui/space/gridDom.js\", \"src/ui/space/gridOfIntegersDom.js\", \"src/ui/space/gridOfObjectsDom.js\"],\n      babylonVis: [\"lib/babylon.2.4.min.js\", \"src/ui/cssColorNames.js\",\"src/ui/space/threeDimBabylon.js\"],\n      phaserVis: [\n        \"lib/phaser.min.js\",\n        \"lib/phaser-plugin-isometric.min.js\",\n        \"src/ui/space/widgets/Widget.js\",\n        \"src/ui/space/widgets/meter/Meter.js\",\n        \"src/ui/space/widgets/AlphanumericDisplay/AlphanumericDisplay.js\",\n        \"src/ui/space/twoDimPhaser.js\"],\n      chartistStatVis: [\n        \"css/chartist.min.css\",\n        \"css/chartist-plugin-legend.css\",\n        \"lib/chartist.min.js\",\n        \"lib/chartist-plugin-legend.js\"],\n      description: [\n        //\"../cLASSjs/css/normalize.css\",\n        \"css/normalize.min.css\",\n        \"css/description.css\",\n        \"src/ui/description.js\"\n      ]\n    },\n    // components for simulation development\n    // NOTE: used by simulation authors\n    dev: {\n      basePath: \"../framework/\",\n      coreCssSrc: [\"simulator-core.css\"],\n      coreJsSrc: [\"simulator-core.js\"],\n      coreSpace: [\"space-core.js\"],\n      oneDimSvgVis: [\"oneDimSVG-visualization.js\"],\n      gridDomVis: [\"gridDom-visualization.js\"],\n      babylonVis: [\"babylon-visualization.js\"],\n      phaserVis: [\"phaser-visualization.js\"],\n      chartistStatVis: [\"chartist.css\", \"chartist.js\"],\n      description: [\"description.css\", \"description.js\"]\n    },\n    // components for production mode\n    // NOTE: simulations are deployed on a web server\n    deploy: {\n      basePath: window.location.href + \"../framework/\",\n      /* coreCssSrc: [\"simulator-core.css\"], */\n      coreCssSrc: [],\n      /* coreJsSrc: [\"simulator-core.js\"], */\n      coreJsSrc: [],\n      coreSpace: [\"space-core.js\"],\n      oneDimSvgVis: [\"oneDimSVG-visualization.js\"],\n      gridDomVis: [\"gridDom-visualization.js\"],\n      babylonVis:[\n        \"https://cdnjs.cloudflare.com/ajax/libs/babylonjs/2.4.1/babylon.js\",\n        \"babylon-visualization-core.js\"],\n      phaserVis: [\n        \"https://cdnjs.cloudflare.com/ajax/libs/phaser/2.6.2/phaser.min.js\",\n        \"phaser-visualization-core.js\"\n      ],\n      /* chartistStatVis: [\"chartist.css\", \"chartist.js\"], */\n      chartistStatVis: [],\n      description: [\"description.css\", \"description.js\"]\n    }\n  }\n};\n\n/**\n * Display the configuration settings in the browser console.\n * NOTE: this method is mostly used for debug reasons, and does not\n *       have real functionality as part of the loadManager.\n */\noes.loadManager.showConfigInConsole = function() {\n  var compSrc = oes.loadManager.components[oes.loadManager.codeLoadingMode],\n    // oes.loadManager.basePath has priority´, allowing to override the location.\n    basePath = oes.loadManager.basePath || compSrc.basePath;\n\n  if(oes.loadManager.debugLevel !== \"info\") return;\n  console.log(\"################ loadManager configuration ################\");\n  console.log(\"codeLoadingMode = '\" + oes.loadManager.codeLoadingMode + \"'\");\n  console.log(\"pageProtocol = '\" + oes.loadManager.pageProtocol + \"'\");\n  console.log(\"basePath = '\" + basePath + \"'\");\n  console.log(\"modelNameOrId = '\" + oes.loadManager.modelNameOrId + \"'\");\n  console.log(\"useScenarioId = \" + oes.loadManager.useScenarioId);\n  console.log(\"_ownPath = '\" + (oes.loadManager._ownPath || \"./\" )+ \"'\");\n  console.log(\"_ownScriptFilename = '\" + (oes.loadManager._ownScriptFilename || \"./\" )+ \"'\");\n  console.log(\"queryParams = \" + JSON.stringify(oes.loadManager.queryParams));\n  console.log(\"fullURL = '\" + window.location.href + \"'\");\n  console.log(\"###########################################################\");\n};\n\n/**\n * Detect the codeLoadingMode (one of \"frameworkDev\", \"dev\" and \"deploy)\n */\noes.loadManager.setup = function(callback) {\n  var url = window.location.href, lmPath =\"\";\n  var scripts = document.getElementsByTagName(\"script\");\n  var scriptName = oes.loadManager._ownScriptFilename;\n  var index = -1, queryParams = [];\n  index = url.indexOf(\"?\");\n  if (index > -1) {\n    queryParams = url.substring(index+1).split(\"&\");\n    url = url.substring(0, index);\n    queryParams.forEach( function (qParam) {\n      var p = \"\", v = \"\", pv = [];\n      pv = qParam.split(\"=\");\n      p = pv[0];\n      v = pv[1];\n      if (v === \"true\" || v === \"false\") v = Boolean(v);\n      else if (!isNaN(v)) v = Number(v);\n      oes.loadManager.queryParams[p] = v.valueOf();\n    });\n  }\n  callback = typeof callback === \"function\" ? callback : function (){};\n  // create and display the progress bar HTML piece\n  oes.loadManager.createProgressBar();\n  //detect protocol from page URL\n  oes.loadManager.pageProtocol = url.split(\"://\")[0];\n  // detect the relative path for the loadManager.js\n  lmPath = scripts[scripts.length-1].src;\n  if (!lmPath.endsWith(scriptName)) {\n    index = lmPath.lastIndexOf(\"/\");\n    if (index === -1) scriptName = oes.loadManager._ownScriptFilename = lmPath;\n    else scriptName = oes.loadManager._ownScriptFilename = lmPath.substring(index);\n  }\n  index = lmPath.indexOf(scriptName);\n  lmPath = oes.loadManager._ownPath = lmPath.substring(0, index) || \"./\";\n  // try to load the loadManagerConfig.js file, which is the configuration file\n  // for the load manager containing various settings, and can also override default\n  // values for the loadManager, if this is required on special cases\n  oes.loadManager.loadFile(\"loadManagerConfig.js\", oes.loadManager._ownPath, function() {\n    /** success loading config file, so this is either \"dev\" or \"deploy\"\n     * NOTE: the configuration file must explicitly sets the codeLoadingMode parameter!\n     **/\n    // update progress bar\n    oes.loadManager.updateProgressBar(10);\n    // finished, now call the callback\n    callback();\n  }, function () {\n    // failed, so threat this as \"frameworkDev\n    // NOTE: this is the default value anyway, but it is here\n    //       for clarity reasons, and easy code debugging\n    oes.loadManager.codeLoadingMode = \"frameworkDev\";\n    // update progress bar\n    oes.loadManager.updateProgressBar(10);\n    // finished, now call the callback\n    callback();\n  });\n};\n\n/**\n * Preload all the needed files to run the specific simulation scenario.\n * It loads the minimum required, then analyze the scenario file and finally\n * load all the required CSS and JS files to be able to run the simulation.\n */\noes.loadManager.preload = function (callback) {\n  var compSrc = oes.loadManager.components[oes.loadManager.codeLoadingMode],\n    // oes.loadManager.basePath has priority´, allowing to override the location.\n    basePath = oes.loadManager.basePath || compSrc.basePath,\n    callback = typeof callback === \"function\" ? callback : function(){},\n    scenarioFilePath = \"./\";\n  oes.loadManager.showConfigInConsole();\n  if (oes.loadManager.useScenarioId) scenarioFilePath = \"./\" + oes.loadManager.modelNameOrId + \"/\";\n  oes.loadManager.progressIncStep = 40 / (compSrc.coreCssSrc.length + compSrc.coreJsSrc.length);\n  // load simulator CSS core\n  oes.loadManager.loadFileBatch(compSrc.coreCssSrc, basePath, function () {\n    // add the script element for simulation.js\n    oes.loadManager.progressIncStep = oes.loadManager.getProgressBarValue() / 2 ;\n    oes.loadManager.loadFile(\"simulation.js\", scenarioFilePath, function (scenarioScriptEl) {\n      oes.loadManager.loadScenarioPrerequisites( basePath, function () {\n        // remove the script element containing simulation.js\n        // because this needs to be latest to avoid any dependency errors\n        document.head.removeChild( scenarioScriptEl);\n        // clear the browser console.\n        //oes.loadManager.clearConsole();\n        // add the script element for simulation.js\n        oes.loadManager.loadFile(\"simulation.js\", scenarioFilePath, function () {\n          setTimeout( function () {\n            // invoke success callback method\n            callback();\n            // call frontend initialization\n            oes.setupFrontEndSimEnv();\n            // callback at the end of pre-loading\n            oes.loadManager.loadFinishedCallback();\n          }, 1000);\n        });\n      });\n    });\n  });\n};\n\n/**\n * Investigate the simulation.js file and detects which of the additional\n * simulator components need to be loaded.\n * @param basePath\n *    specifies the root folder.\n * @param callback\n *    an optional callback function to be invoked at the end of the load.\n */\noes.loadManager.loadScenarioPrerequisites = function (basePath, callback) {\n  var compSrc = oes.loadManager.components[oes.loadManager.codeLoadingMode];\n  var compToLoad = [], modelFilesToLoad = [];\n  var isGridSpace = false, detectedVisualisation = false;\n  var modelFilePath = \"\";\n  // no callback provided, define an empty function\n  callback = callback || function () {};\n  // the scenario file not loaded ?...\n  if (!sim.scenario) throw \"The 'simulation.js' file could not be loaded or it contains errors!\";\n  // model related dependencies\n  if (sim.model) {\n    // detect space type\n    if (sim.model.space && sim.model.space.type) {\n      compToLoad = compToLoad.concat(compSrc.coreSpace);\n      // if \"grid\" is part of sim.model.space.type param, then we have a grid space\n      if (sim.model.space.type.toLowerCase().indexOf(\"grid\") !== -1) isGridSpace = true;\n    }\n    // detect statistics\n    if (sim.model.statistics) {\n      compToLoad = compToLoad.concat( compSrc.chartistStatVis);\n    }\n    // detect object type model files\n    if (sim.model.objectTypeFilesInSubfolders &&\n        Array.isArray(sim.model.objectTypeFilesInSubfolders))\n      sim.model.objectTypeFilesInSubfolders.forEach( function (file) {\n        if (file.endsWith(\".js\")) modelFilesToLoad.push(file);\n        else modelFilesToLoad.push(file + \".js\");\n      });\n    else if (sim.model.objectTypes && Array.isArray(sim.model.objectTypes))\n      sim.model.objectTypes.forEach( function (objTypeName) {\n        modelFilesToLoad.push(objTypeName + \".js\");\n      });\n    // detect event type model files\n    if (sim.model.eventTypeFilesInSubfolders &&\n        Array.isArray(sim.model.eventTypeFilesInSubfolders))\n      sim.model.eventTypeFilesInSubfolders.forEach( function (file) {\n        if (file.endsWith(\".js\")) modelFilesToLoad.push(file);\n        else modelFilesToLoad.push(file + \".js\");\n      });\n    else if (sim.model.eventTypes && Array.isArray(sim.model.eventTypes)){\n      sim.model.eventTypes.forEach(\n          function (evtTypeName) {modelFilesToLoad.push(evtTypeName + \".js\");});\n    }\n    // detect activity type model files\n    if (sim.model.activityTypeFilesInSubfolders && Array.isArray(sim.model.activityTypeFilesInSubfolders))\n      sim.model.activityTypeFilesInSubfolders.forEach( function (file) {\n        if (file.endsWith(\".js\")) modelFilesToLoad.push(file);\n        else modelFilesToLoad.push(file + \".js\");\n      });\n    else if (sim.model.activityTypes && Array.isArray(sim.model.activityTypes))\n      sim.model.activityTypes.forEach( function (activityTypeName) {\n        modelFilesToLoad.push(activityTypeName + \".js\");\n      });\n  }\n  // observation UI related modules\n  if (sim.config.observationUI.spaceView.type) {\n    if (!sim.model.space.type) {\n      // the space core needs to be loaded\n      compToLoad = compToLoad.concat(compSrc.coreSpace);\n    }\n    // detect visualization module\n    if (sim.config.observationUI.spaceView.type && sim.config.visualize) {\n      switch (sim.config.observationUI.spaceView.type) {\n        case \"oneDimSVG\":\n          compToLoad = compToLoad.concat(compSrc.oneDimSvgVis);\n          detectedVisualisation = true;\n          break;\n        case \"Isometric2D\":\n          compToLoad = compToLoad.concat(compSrc.phaserVis);\n          detectedVisualisation = true;\n          break;\n        case \"threeDim\":\n          compToLoad = compToLoad.concat(compSrc.babylonVis);\n          detectedVisualisation = true;\n          break;\n      }\n    }\n  }\n  // for grid space, if spaceView.type is defined,\n  // then use gridDom as default visualization\n  if (isGridSpace && !detectedVisualisation && sim.config.visualize)\n    compToLoad = compToLoad.concat( compSrc.gridDomVis);\n  oes.loadManager.progressIncStep = 30 / (compToLoad.length + modelFilesToLoad.length);\n  // load prerequisites\n  if (oes.loadManager.useScenarioId) modelFilePath = \"./\" + oes.loadManager.modelNameOrId + \"/\";\n  console.log(modelFilePath)\n  oes.loadManager.loadFileBatch( compToLoad, basePath, function () {\n    // load additional model files\n    oes.loadManager.loadFileBatch( modelFilesToLoad, modelFilePath, callback);\n  });\n};\n\n/**\n * Takes care of loading a specific JS or CSS file. This means to create\n * the script or link element within the DOM header.\n * @param pathAndFilename\n *    the file to be \"loaded\" - absolute or relative path.\n * @param basePath\n *    specifies the root folder.\n * @param callback\n *    an optional callback function to be invoked at the end of the load.\n *    Callback parameter is the created script or link element reference.\n * @param errCallback\n *    an optional callback function to be invoked if errors occurred\n *    during the load.\n */\noes.loadManager.loadFile = function (pathAndFilename, basePath, callback, errCallback) {\n  var loadEl = null;\n  var jsFileExt = /(.js)$/i, cssFileExt = /(.css)$/i;\n  var origFName = pathAndFilename;\n  \n  var appendQueryParams = function (pfn) {\n    if (oes.loadManager.queryParams[\"local\"]) {\n      if (pfn.indexOf(\"?\") > -1) pfn += \"&local=true\";\n      else pfn += \"?local=true\";\n    }\n    return pfn\n  };\n  // if a full URL is provided, the base path is ignored\n  if (pathAndFilename.indexOf(\"://\") === -1)\n    pathAndFilename = basePath + pathAndFilename;\n  // no callback(s) provided, define an empty function\n  callback = typeof callback === \"function\" ? callback : function () {};\n  errCallback = typeof errCallback === \"function\" ? errCallback\n    : function () {};\n  if (jsFileExt.test(pathAndFilename)) {\n    loadEl = document.createElement('script');\n    loadEl.src = appendQueryParams(pathAndFilename);\n  } else if (cssFileExt.test(pathAndFilename)) {\n    loadEl = document.createElement('link');\n    loadEl.rel = 'stylesheet';\n    loadEl.type = 'text/css';\n    loadEl.href = appendQueryParams(pathAndFilename);\n  } else {\n    throw \"oes.loadManager.loadFile: only 'js' and 'css' files are supported! The required '\"\n      + pathAndFilename + \"' file has a wrong extension!\";\n  }\n  if (loadEl) {\n    loadEl.onload = function () {\n      oes.loadManager.updateProgressBar( oes.loadManager.progressIncStep, true);\n      callback(loadEl);\n    };\n    loadEl.onerror = function (e) {\n      // not finding the loadManagerConfig.js file is not an error...\n      if (pathAndFilename.indexOf(\"loadManagerConfig.js\") === -1) {\n        console.log(\"loadManager: failed to load file '\" + pathAndFilename + \"'!\");\n      }\n      document.head.removeChild(loadEl);\n      oes.loadManager.progressBarUpdateInfo(\"The file: '\" + pathAndFilename + \"' was not found!\", true);\n      errCallback(e);\n    };\n    document.head.appendChild( loadEl);\n    oes.loadManager.progressBarUpdateInfo(\"Loading: \" + origFName);\n  }\n};\n\n/**\n * Load a batch of CSS and JS files\n * The loading is done in a synchronous mode - that means files are loaded in order.\n * NOTE: check if makes sense to use an async loading (does this breaks the simulation ?)\n *\n * @param filesToLoad\n *    a list of files to be \"loaded\".\n * @param basePath\n *    specifies the root folder.\n * @param callback\n *    an optional callback function to be invoked at the end of the load.\n */\noes.loadManager.loadFileBatch = function( filesToLoad, basePath, callback) {\n  // no callback provided, define an empty function\n  callback = callback || function () {};\n  if(filesToLoad.length < 1) callback();\n  else {\n    setTimeout(function() { // very light delay so that the progress bar is visible\n      oes.loadManager.loadFile(filesToLoad.splice(0, 1)[0], basePath, function() {\n        oes.loadManager.loadFileBatch(filesToLoad, basePath, callback);\n      });\n    }, 0);\n\n  }\n};\n\n/**\n * Clear the browser console. THis is required since during the preload time,\n * some files contains partial missing references. While these are not fatal\n * errors, they appear in the console, and lets the feeling that something\n * is bad, while is not really...\n * NOTE: use this method only if you know what you are doing.\n */\noes.loadManager.clearConsole = function () {\n  /******************************************************************\n   ***** Experimental code used to clear browser console *****\n   * NOTE: this code may require some special attention, but for now\n   *       it is used to delete the residual errors shown in the\n   *       browser console as the result of having loaded the\n   *       simulation.js\n   *       to detect model files and features, but without having\n   *       yet loaded all the resource files (since are unknown at this moment).\n   ******************************************************************/\n  console.API;\n  if (typeof console._commandLineAPI !== 'undefined')\n    console.API = console._commandLineAPI; //chrome\n  else if (typeof console._inspectorCommandLineAPI !== 'undefined')\n    console.API = console._inspectorCommandLineAPI; //Safari\n  else if (typeof console.clear !== 'undefined')\n    console.API = console;\n  console.API.clear();\n  // display debug information\n  oes.loadManager.showConfigInConsole();\n};\n\n/**\n * Create the load progress bar.\n */\noes.loadManager.createProgressBar = function () {\n  var progressContainer = document.createElement(\"div\"),\n    progress = document.createElement(\"progress\"),\n    progressTitle = document.createElement(\"p\"),\n    progressInfo = document.createElement(\"p\");\n  var lmScripts = document.querySelectorAll(\"body > script\");\n  // the value for 100%\n  progress.max = 100;\n  // initial value\n  progress.value = 0;\n  // style the progress bar\n  progress.style.width = \"25em\";\n  progress.style.height = \"1.7em\";\n  // set text for progress title element\n  progressTitle.innerHTML = \"Please wait, we are loading the simulation data...\";\n  // set properties for progress info element\n  progressInfo.id=\"load-progress-info\";\n  // set required properties for the progress container\n  progressContainer.id = \"load-progress-container\";\n  progressContainer.appendChild( progressTitle);\n  progressContainer.appendChild( progress);\n  progressContainer.appendChild( progressInfo);\n  // style the progress container\n  progressContainer.style.margin = \"3em 1em\";\n  progressContainer.style.textAlign = \"center\";\n  // append the progress bar before the script element\n  // that loads/initializes the load manager\n  if (lmScripts[0])\n    document.body.insertBefore(progressContainer, lmScripts[0]);\n  else\n    document.body.appendChild(progressContainer);\n};\n\n/**\n * Remove the progress bar from the DOM\n */\noes.loadManager.removeProgressbar = function () {\n  var progressContainer = document.getElementById(\"load-progress-container\");\n  if (progressContainer) \n    progressContainer.parentNode.removeChild(progressContainer);\n};\n\n/**\n * Update the status of the progress bar.\n * @param value the actual progress value (0 to 100)\n * @param incrementOnly a flag indicating that the value is an increment for the current value\n */\noes.loadManager.updateProgressBar = function (value, incrementOnly) {\n  var progress = document.querySelector(\"#load-progress-container > progress\");\n  if (progress) {\n    if (typeof value === \"number\") {\n      if (incrementOnly === true)\n        progress.value = Math.min(progress.value + value, 100);\n      else progress.value = Math.min( Math.max(value, 0), 100);\n    }\n  }\n\n};\n\n/**\n * Get the current value for the progress bar\n */\noes.loadManager.getProgressBarValue = function () {\n  var progress = document.querySelector(\"#load-progress-container > progress\");\n  if (progress) return progress.value;\n  else return -1;\n};\n/**\n * Get the current value for the progress bar\n * @param message the message to display\n * @param isError specifies if the message is an error message\n */\noes.loadManager.progressBarUpdateInfo = function (message, isError) {\n  var infoEl = document.querySelector(\"#load-progress-info\");\n  if (!infoEl) return;\n  else if (isError === true) infoEl.style.color = \"red\";\n  else infoEl.style.color = null;\n  infoEl.innerHTML = message;\n};\n\n// trigger preload when DOM loading is complete\nwindow.addEventListener(\"load\", function () {\n  // Setup the load manager, and when ready,\n  // start loading the CSS and JS files.\n  // Finally, remove the progress bar HTML content.\n  oes.loadManager.setup( function () {\n    oes.loadManager.preload( oes.loadManager.removeProgressbar);\n  });\n});\n","site":{"data":{}},"excerpt":"","more":"/**\n * Load manager is used to perform autoloading of the required resources for a simulation scenario.\n * It looks in the scenario file and detects which JS and CSS files need to be used, and automatically\n * creates the link and script elements.\n *\n * Mapping source: http://www.w3schools.com/colors/colors_names.asp\n *\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Mircea Diaconescu\n * @license The MIT License (MIT)\n */\nvar oes = oes || {};\nvar sim = sim || {};\nsim.model = sim.model || {};\nsim.model.space = sim.model.space || {};\n\noes.loadManager = {\n  // loadManager.js relative path\n  // NOTE: intended for internal use only!\n  _ownPath: \"./\",\n  // loadManager script file name (normally is \"loadManager.js\")\n  // NOTE: intended for internal use only!\n  _ownScriptFilename: \"loadManager.js\",\n  // the URL query params\n  queryParams: {},\n  // flag to enable the usage of scenario ID in the URL (mostly used for NodeJS/Heroku)\n  useScenarioId: false,\n  // the debug level of the loadManager (one of: \"info\", \"warning\" or \"error\")\n  // NOTE: default value is \"error\"\n  debugLevel: \"info\",\n  // sets the loading mode.\n  // Possible values: one of {\"deploy\", \"dev\", \"frameworkDev\"}\n  // NOTE: default value is \"frameworkDev\", and to change it, just set this parameter\n  //       to something else, by using a script element in the simulation.html file\n  //       immediately after the script element which loads the loadManager.js script file.\n  codeLoadingMode: \"frameworkDev\",\n  // flag to specify that this is a description page, not a simulation startup page.\n  // Possible values: one of {\"simulation\", \"description\"}.\n  // NOTE: default value is \"simulation\", and to change it, just set this parameter\n  //       to something else, by using a script element in the simulation.html file\n  //       immediately after the script element which loads the loadManager.js script file.\n  // the name or ID of the simulation model\n  modelNameOrId: \"\",\n  // the scenario ID\n  scenarioIdentifier: \"\",\n  // the part of the URL that is the start point for the simulation path\n  simsUrlIdentifier: \"sims\",\n  // the load protocol, e.g., file, http or https\n  pageProtocol: \"file\",\n  // the step for progress bar increment (computed later in preload)\n  progressIncStep: 0,\n  // specifies the base path for file loading.\n  // NOTE: every loading mode has its own local basePath which can be overridden\n  //       by using this parameter, which takes precedence over the local one.\n  basePath: \"\",\n  // a callback to be invoked when the load ends.\n  // NOTE: this can be overridden with whatever needs to be done at the end.\n  loadFinishedCallback: function (){},\n  components: {\n    // components for OES Framework development\n    // NOTE: used by OES team to develop the framework and example simulation scenarios\n    frameworkDev: {\n      basePath: \"../../../../\",\n      coreCssSrc: [\n        \"../cLASSjs/css/normalize.css\",\n        \"../cLASSjs/css/vIEW.css\",\n        \"css/OESjs.css\"\n      ],\n      coreJsSrc: [\n        \"../cLASSjs/lib/browserShims.js\",\n        \"../cLASSjs/lib/errorTypes.js\",\n        \"../cLASSjs/lib/util.js\",\n        \"../cLASSjs/lib/dom.js\",\n        \"../cLASSjs/src/eNUMERATION.js\",\n        \"../cLASSjs/src/cLASS.js\",\n        \"../cLASSjs/src/oBJECTvIEW.js\",\n\n        \"lib/dom-additions.js\",\n        \"lib/svg.js\",\n        \"lib/rand.js\",\n\n        \"src/v1/OES.js\",\n        \"src/v1/ClientLogger.js\",\n        \"src/v1/EventList.js\",\n        \"src/v1/statistics.js\",\n        \"src/v1/simulator.js\",\n        \"src/ui/simulatorUI.js\"],\n      coreSpace: [\n        \"src/space/space.js\",\n        \"src/space/ObjectInOneDimSpace.js\",\n        \"src/space/ObjectInTwoDimSpace.js\",\n        \"src/space/ObjectInThreeDimSpace.js\",\n        \"src/space/gridOfIntegers.js\",\n        \"src/space/gridOfObjects.js\",\n        \"src/space/overlayGrid.js\",\n        \"src/space/ObjectInGridSpace.js\"],\n      oneDimSvgVis: [\"lib/svg.js\", \"src/ui/space/oneDimSVG.js\"],\n      gridDomVis: [\"src/ui/space/gridDom.js\", \"src/ui/space/gridOfIntegersDom.js\", \"src/ui/space/gridOfObjectsDom.js\"],\n      babylonVis: [\"lib/babylon.2.4.min.js\", \"src/ui/cssColorNames.js\",\"src/ui/space/threeDimBabylon.js\"],\n      phaserVis: [\n        \"lib/phaser.min.js\",\n        \"lib/phaser-plugin-isometric.min.js\",\n        \"src/ui/space/widgets/Widget.js\",\n        \"src/ui/space/widgets/meter/Meter.js\",\n        \"src/ui/space/widgets/AlphanumericDisplay/AlphanumericDisplay.js\",\n        \"src/ui/space/twoDimPhaser.js\"],\n      chartistStatVis: [\n        \"css/chartist.min.css\",\n        \"css/chartist-plugin-legend.css\",\n        \"lib/chartist.min.js\",\n        \"lib/chartist-plugin-legend.js\"],\n      description: [\n        //\"../cLASSjs/css/normalize.css\",\n        \"css/normalize.min.css\",\n        \"css/description.css\",\n        \"src/ui/description.js\"\n      ]\n    },\n    // components for simulation development\n    // NOTE: used by simulation authors\n    dev: {\n      basePath: \"../framework/\",\n      coreCssSrc: [\"simulator-core.css\"],\n      coreJsSrc: [\"simulator-core.js\"],\n      coreSpace: [\"space-core.js\"],\n      oneDimSvgVis: [\"oneDimSVG-visualization.js\"],\n      gridDomVis: [\"gridDom-visualization.js\"],\n      babylonVis: [\"babylon-visualization.js\"],\n      phaserVis: [\"phaser-visualization.js\"],\n      chartistStatVis: [\"chartist.css\", \"chartist.js\"],\n      description: [\"description.css\", \"description.js\"]\n    },\n    // components for production mode\n    // NOTE: simulations are deployed on a web server\n    deploy: {\n      basePath: window.location.href + \"../framework/\",\n      /* coreCssSrc: [\"simulator-core.css\"], */\n      coreCssSrc: [],\n      /* coreJsSrc: [\"simulator-core.js\"], */\n      coreJsSrc: [],\n      coreSpace: [\"space-core.js\"],\n      oneDimSvgVis: [\"oneDimSVG-visualization.js\"],\n      gridDomVis: [\"gridDom-visualization.js\"],\n      babylonVis:[\n        \"https://cdnjs.cloudflare.com/ajax/libs/babylonjs/2.4.1/babylon.js\",\n        \"babylon-visualization-core.js\"],\n      phaserVis: [\n        \"https://cdnjs.cloudflare.com/ajax/libs/phaser/2.6.2/phaser.min.js\",\n        \"phaser-visualization-core.js\"\n      ],\n      /* chartistStatVis: [\"chartist.css\", \"chartist.js\"], */\n      chartistStatVis: [],\n      description: [\"description.css\", \"description.js\"]\n    }\n  }\n};\n\n/**\n * Display the configuration settings in the browser console.\n * NOTE: this method is mostly used for debug reasons, and does not\n *       have real functionality as part of the loadManager.\n */\noes.loadManager.showConfigInConsole = function() {\n  var compSrc = oes.loadManager.components[oes.loadManager.codeLoadingMode],\n    // oes.loadManager.basePath has priority´, allowing to override the location.\n    basePath = oes.loadManager.basePath || compSrc.basePath;\n\n  if(oes.loadManager.debugLevel !== \"info\") return;\n  console.log(\"################ loadManager configuration ################\");\n  console.log(\"codeLoadingMode = '\" + oes.loadManager.codeLoadingMode + \"'\");\n  console.log(\"pageProtocol = '\" + oes.loadManager.pageProtocol + \"'\");\n  console.log(\"basePath = '\" + basePath + \"'\");\n  console.log(\"modelNameOrId = '\" + oes.loadManager.modelNameOrId + \"'\");\n  console.log(\"useScenarioId = \" + oes.loadManager.useScenarioId);\n  console.log(\"_ownPath = '\" + (oes.loadManager._ownPath || \"./\" )+ \"'\");\n  console.log(\"_ownScriptFilename = '\" + (oes.loadManager._ownScriptFilename || \"./\" )+ \"'\");\n  console.log(\"queryParams = \" + JSON.stringify(oes.loadManager.queryParams));\n  console.log(\"fullURL = '\" + window.location.href + \"'\");\n  console.log(\"###########################################################\");\n};\n\n/**\n * Detect the codeLoadingMode (one of \"frameworkDev\", \"dev\" and \"deploy)\n */\noes.loadManager.setup = function(callback) {\n  var url = window.location.href, lmPath =\"\";\n  var scripts = document.getElementsByTagName(\"script\");\n  var scriptName = oes.loadManager._ownScriptFilename;\n  var index = -1, queryParams = [];\n  index = url.indexOf(\"?\");\n  if (index > -1) {\n    queryParams = url.substring(index+1).split(\"&\");\n    url = url.substring(0, index);\n    queryParams.forEach( function (qParam) {\n      var p = \"\", v = \"\", pv = [];\n      pv = qParam.split(\"=\");\n      p = pv[0];\n      v = pv[1];\n      if (v === \"true\" || v === \"false\") v = Boolean(v);\n      else if (!isNaN(v)) v = Number(v);\n      oes.loadManager.queryParams[p] = v.valueOf();\n    });\n  }\n  callback = typeof callback === \"function\" ? callback : function (){};\n  // create and display the progress bar HTML piece\n  oes.loadManager.createProgressBar();\n  //detect protocol from page URL\n  oes.loadManager.pageProtocol = url.split(\"://\")[0];\n  // detect the relative path for the loadManager.js\n  lmPath = scripts[scripts.length-1].src;\n  if (!lmPath.endsWith(scriptName)) {\n    index = lmPath.lastIndexOf(\"/\");\n    if (index === -1) scriptName = oes.loadManager._ownScriptFilename = lmPath;\n    else scriptName = oes.loadManager._ownScriptFilename = lmPath.substring(index);\n  }\n  index = lmPath.indexOf(scriptName);\n  lmPath = oes.loadManager._ownPath = lmPath.substring(0, index) || \"./\";\n  // try to load the loadManagerConfig.js file, which is the configuration file\n  // for the load manager containing various settings, and can also override default\n  // values for the loadManager, if this is required on special cases\n  oes.loadManager.loadFile(\"loadManagerConfig.js\", oes.loadManager._ownPath, function() {\n    /** success loading config file, so this is either \"dev\" or \"deploy\"\n     * NOTE: the configuration file must explicitly sets the codeLoadingMode parameter!\n     **/\n    // update progress bar\n    oes.loadManager.updateProgressBar(10);\n    // finished, now call the callback\n    callback();\n  }, function () {\n    // failed, so threat this as \"frameworkDev\n    // NOTE: this is the default value anyway, but it is here\n    //       for clarity reasons, and easy code debugging\n    oes.loadManager.codeLoadingMode = \"frameworkDev\";\n    // update progress bar\n    oes.loadManager.updateProgressBar(10);\n    // finished, now call the callback\n    callback();\n  });\n};\n\n/**\n * Preload all the needed files to run the specific simulation scenario.\n * It loads the minimum required, then analyze the scenario file and finally\n * load all the required CSS and JS files to be able to run the simulation.\n */\noes.loadManager.preload = function (callback) {\n  var compSrc = oes.loadManager.components[oes.loadManager.codeLoadingMode],\n    // oes.loadManager.basePath has priority´, allowing to override the location.\n    basePath = oes.loadManager.basePath || compSrc.basePath,\n    callback = typeof callback === \"function\" ? callback : function(){},\n    scenarioFilePath = \"./\";\n  oes.loadManager.showConfigInConsole();\n  if (oes.loadManager.useScenarioId) scenarioFilePath = \"./\" + oes.loadManager.modelNameOrId + \"/\";\n  oes.loadManager.progressIncStep = 40 / (compSrc.coreCssSrc.length + compSrc.coreJsSrc.length);\n  // load simulator CSS core\n  oes.loadManager.loadFileBatch(compSrc.coreCssSrc, basePath, function () {\n    // add the script element for simulation.js\n    oes.loadManager.progressIncStep = oes.loadManager.getProgressBarValue() / 2 ;\n    oes.loadManager.loadFile(\"simulation.js\", scenarioFilePath, function (scenarioScriptEl) {\n      oes.loadManager.loadScenarioPrerequisites( basePath, function () {\n        // remove the script element containing simulation.js\n        // because this needs to be latest to avoid any dependency errors\n        document.head.removeChild( scenarioScriptEl);\n        // clear the browser console.\n        //oes.loadManager.clearConsole();\n        // add the script element for simulation.js\n        oes.loadManager.loadFile(\"simulation.js\", scenarioFilePath, function () {\n          setTimeout( function () {\n            // invoke success callback method\n            callback();\n            // call frontend initialization\n            oes.setupFrontEndSimEnv();\n            // callback at the end of pre-loading\n            oes.loadManager.loadFinishedCallback();\n          }, 1000);\n        });\n      });\n    });\n  });\n};\n\n/**\n * Investigate the simulation.js file and detects which of the additional\n * simulator components need to be loaded.\n * @param basePath\n *    specifies the root folder.\n * @param callback\n *    an optional callback function to be invoked at the end of the load.\n */\noes.loadManager.loadScenarioPrerequisites = function (basePath, callback) {\n  var compSrc = oes.loadManager.components[oes.loadManager.codeLoadingMode];\n  var compToLoad = [], modelFilesToLoad = [];\n  var isGridSpace = false, detectedVisualisation = false;\n  var modelFilePath = \"\";\n  // no callback provided, define an empty function\n  callback = callback || function () {};\n  // the scenario file not loaded ?...\n  if (!sim.scenario) throw \"The 'simulation.js' file could not be loaded or it contains errors!\";\n  // model related dependencies\n  if (sim.model) {\n    // detect space type\n    if (sim.model.space && sim.model.space.type) {\n      compToLoad = compToLoad.concat(compSrc.coreSpace);\n      // if \"grid\" is part of sim.model.space.type param, then we have a grid space\n      if (sim.model.space.type.toLowerCase().indexOf(\"grid\") !== -1) isGridSpace = true;\n    }\n    // detect statistics\n    if (sim.model.statistics) {\n      compToLoad = compToLoad.concat( compSrc.chartistStatVis);\n    }\n    // detect object type model files\n    if (sim.model.objectTypeFilesInSubfolders &&\n        Array.isArray(sim.model.objectTypeFilesInSubfolders))\n      sim.model.objectTypeFilesInSubfolders.forEach( function (file) {\n        if (file.endsWith(\".js\")) modelFilesToLoad.push(file);\n        else modelFilesToLoad.push(file + \".js\");\n      });\n    else if (sim.model.objectTypes && Array.isArray(sim.model.objectTypes))\n      sim.model.objectTypes.forEach( function (objTypeName) {\n        modelFilesToLoad.push(objTypeName + \".js\");\n      });\n    // detect event type model files\n    if (sim.model.eventTypeFilesInSubfolders &&\n        Array.isArray(sim.model.eventTypeFilesInSubfolders))\n      sim.model.eventTypeFilesInSubfolders.forEach( function (file) {\n        if (file.endsWith(\".js\")) modelFilesToLoad.push(file);\n        else modelFilesToLoad.push(file + \".js\");\n      });\n    else if (sim.model.eventTypes && Array.isArray(sim.model.eventTypes)){\n      sim.model.eventTypes.forEach(\n          function (evtTypeName) {modelFilesToLoad.push(evtTypeName + \".js\");});\n    }\n    // detect activity type model files\n    if (sim.model.activityTypeFilesInSubfolders && Array.isArray(sim.model.activityTypeFilesInSubfolders))\n      sim.model.activityTypeFilesInSubfolders.forEach( function (file) {\n        if (file.endsWith(\".js\")) modelFilesToLoad.push(file);\n        else modelFilesToLoad.push(file + \".js\");\n      });\n    else if (sim.model.activityTypes && Array.isArray(sim.model.activityTypes))\n      sim.model.activityTypes.forEach( function (activityTypeName) {\n        modelFilesToLoad.push(activityTypeName + \".js\");\n      });\n  }\n  // observation UI related modules\n  if (sim.config.observationUI.spaceView.type) {\n    if (!sim.model.space.type) {\n      // the space core needs to be loaded\n      compToLoad = compToLoad.concat(compSrc.coreSpace);\n    }\n    // detect visualization module\n    if (sim.config.observationUI.spaceView.type && sim.config.visualize) {\n      switch (sim.config.observationUI.spaceView.type) {\n        case \"oneDimSVG\":\n          compToLoad = compToLoad.concat(compSrc.oneDimSvgVis);\n          detectedVisualisation = true;\n          break;\n        case \"Isometric2D\":\n          compToLoad = compToLoad.concat(compSrc.phaserVis);\n          detectedVisualisation = true;\n          break;\n        case \"threeDim\":\n          compToLoad = compToLoad.concat(compSrc.babylonVis);\n          detectedVisualisation = true;\n          break;\n      }\n    }\n  }\n  // for grid space, if spaceView.type is defined,\n  // then use gridDom as default visualization\n  if (isGridSpace && !detectedVisualisation && sim.config.visualize)\n    compToLoad = compToLoad.concat( compSrc.gridDomVis);\n  oes.loadManager.progressIncStep = 30 / (compToLoad.length + modelFilesToLoad.length);\n  // load prerequisites\n  if (oes.loadManager.useScenarioId) modelFilePath = \"./\" + oes.loadManager.modelNameOrId + \"/\";\n  console.log(modelFilePath)\n  oes.loadManager.loadFileBatch( compToLoad, basePath, function () {\n    // load additional model files\n    oes.loadManager.loadFileBatch( modelFilesToLoad, modelFilePath, callback);\n  });\n};\n\n/**\n * Takes care of loading a specific JS or CSS file. This means to create\n * the script or link element within the DOM header.\n * @param pathAndFilename\n *    the file to be \"loaded\" - absolute or relative path.\n * @param basePath\n *    specifies the root folder.\n * @param callback\n *    an optional callback function to be invoked at the end of the load.\n *    Callback parameter is the created script or link element reference.\n * @param errCallback\n *    an optional callback function to be invoked if errors occurred\n *    during the load.\n */\noes.loadManager.loadFile = function (pathAndFilename, basePath, callback, errCallback) {\n  var loadEl = null;\n  var jsFileExt = /(.js)$/i, cssFileExt = /(.css)$/i;\n  var origFName = pathAndFilename;\n  \n  var appendQueryParams = function (pfn) {\n    if (oes.loadManager.queryParams[\"local\"]) {\n      if (pfn.indexOf(\"?\") > -1) pfn += \"&local=true\";\n      else pfn += \"?local=true\";\n    }\n    return pfn\n  };\n  // if a full URL is provided, the base path is ignored\n  if (pathAndFilename.indexOf(\"://\") === -1)\n    pathAndFilename = basePath + pathAndFilename;\n  // no callback(s) provided, define an empty function\n  callback = typeof callback === \"function\" ? callback : function () {};\n  errCallback = typeof errCallback === \"function\" ? errCallback\n    : function () {};\n  if (jsFileExt.test(pathAndFilename)) {\n    loadEl = document.createElement('script');\n    loadEl.src = appendQueryParams(pathAndFilename);\n  } else if (cssFileExt.test(pathAndFilename)) {\n    loadEl = document.createElement('link');\n    loadEl.rel = 'stylesheet';\n    loadEl.type = 'text/css';\n    loadEl.href = appendQueryParams(pathAndFilename);\n  } else {\n    throw \"oes.loadManager.loadFile: only 'js' and 'css' files are supported! The required '\"\n      + pathAndFilename + \"' file has a wrong extension!\";\n  }\n  if (loadEl) {\n    loadEl.onload = function () {\n      oes.loadManager.updateProgressBar( oes.loadManager.progressIncStep, true);\n      callback(loadEl);\n    };\n    loadEl.onerror = function (e) {\n      // not finding the loadManagerConfig.js file is not an error...\n      if (pathAndFilename.indexOf(\"loadManagerConfig.js\") === -1) {\n        console.log(\"loadManager: failed to load file '\" + pathAndFilename + \"'!\");\n      }\n      document.head.removeChild(loadEl);\n      oes.loadManager.progressBarUpdateInfo(\"The file: '\" + pathAndFilename + \"' was not found!\", true);\n      errCallback(e);\n    };\n    document.head.appendChild( loadEl);\n    oes.loadManager.progressBarUpdateInfo(\"Loading: \" + origFName);\n  }\n};\n\n/**\n * Load a batch of CSS and JS files\n * The loading is done in a synchronous mode - that means files are loaded in order.\n * NOTE: check if makes sense to use an async loading (does this breaks the simulation ?)\n *\n * @param filesToLoad\n *    a list of files to be \"loaded\".\n * @param basePath\n *    specifies the root folder.\n * @param callback\n *    an optional callback function to be invoked at the end of the load.\n */\noes.loadManager.loadFileBatch = function( filesToLoad, basePath, callback) {\n  // no callback provided, define an empty function\n  callback = callback || function () {};\n  if(filesToLoad.length < 1) callback();\n  else {\n    setTimeout(function() { // very light delay so that the progress bar is visible\n      oes.loadManager.loadFile(filesToLoad.splice(0, 1)[0], basePath, function() {\n        oes.loadManager.loadFileBatch(filesToLoad, basePath, callback);\n      });\n    }, 0);\n\n  }\n};\n\n/**\n * Clear the browser console. THis is required since during the preload time,\n * some files contains partial missing references. While these are not fatal\n * errors, they appear in the console, and lets the feeling that something\n * is bad, while is not really...\n * NOTE: use this method only if you know what you are doing.\n */\noes.loadManager.clearConsole = function () {\n  /******************************************************************\n   ***** Experimental code used to clear browser console *****\n   * NOTE: this code may require some special attention, but for now\n   *       it is used to delete the residual errors shown in the\n   *       browser console as the result of having loaded the\n   *       simulation.js\n   *       to detect model files and features, but without having\n   *       yet loaded all the resource files (since are unknown at this moment).\n   ******************************************************************/\n  console.API;\n  if (typeof console._commandLineAPI !== 'undefined')\n    console.API = console._commandLineAPI; //chrome\n  else if (typeof console._inspectorCommandLineAPI !== 'undefined')\n    console.API = console._inspectorCommandLineAPI; //Safari\n  else if (typeof console.clear !== 'undefined')\n    console.API = console;\n  console.API.clear();\n  // display debug information\n  oes.loadManager.showConfigInConsole();\n};\n\n/**\n * Create the load progress bar.\n */\noes.loadManager.createProgressBar = function () {\n  var progressContainer = document.createElement(\"div\"),\n    progress = document.createElement(\"progress\"),\n    progressTitle = document.createElement(\"p\"),\n    progressInfo = document.createElement(\"p\");\n  var lmScripts = document.querySelectorAll(\"body > script\");\n  // the value for 100%\n  progress.max = 100;\n  // initial value\n  progress.value = 0;\n  // style the progress bar\n  progress.style.width = \"25em\";\n  progress.style.height = \"1.7em\";\n  // set text for progress title element\n  progressTitle.innerHTML = \"Please wait, we are loading the simulation data...\";\n  // set properties for progress info element\n  progressInfo.id=\"load-progress-info\";\n  // set required properties for the progress container\n  progressContainer.id = \"load-progress-container\";\n  progressContainer.appendChild( progressTitle);\n  progressContainer.appendChild( progress);\n  progressContainer.appendChild( progressInfo);\n  // style the progress container\n  progressContainer.style.margin = \"3em 1em\";\n  progressContainer.style.textAlign = \"center\";\n  // append the progress bar before the script element\n  // that loads/initializes the load manager\n  if (lmScripts[0])\n    document.body.insertBefore(progressContainer, lmScripts[0]);\n  else\n    document.body.appendChild(progressContainer);\n};\n\n/**\n * Remove the progress bar from the DOM\n */\noes.loadManager.removeProgressbar = function () {\n  var progressContainer = document.getElementById(\"load-progress-container\");\n  if (progressContainer) \n    progressContainer.parentNode.removeChild(progressContainer);\n};\n\n/**\n * Update the status of the progress bar.\n * @param value the actual progress value (0 to 100)\n * @param incrementOnly a flag indicating that the value is an increment for the current value\n */\noes.loadManager.updateProgressBar = function (value, incrementOnly) {\n  var progress = document.querySelector(\"#load-progress-container > progress\");\n  if (progress) {\n    if (typeof value === \"number\") {\n      if (incrementOnly === true)\n        progress.value = Math.min(progress.value + value, 100);\n      else progress.value = Math.min( Math.max(value, 0), 100);\n    }\n  }\n\n};\n\n/**\n * Get the current value for the progress bar\n */\noes.loadManager.getProgressBarValue = function () {\n  var progress = document.querySelector(\"#load-progress-container > progress\");\n  if (progress) return progress.value;\n  else return -1;\n};\n/**\n * Get the current value for the progress bar\n * @param message the message to display\n * @param isError specifies if the message is an error message\n */\noes.loadManager.progressBarUpdateInfo = function (message, isError) {\n  var infoEl = document.querySelector(\"#load-progress-info\");\n  if (!infoEl) return;\n  else if (isError === true) infoEl.style.color = \"red\";\n  else infoEl.style.color = null;\n  infoEl.innerHTML = message;\n};\n\n// trigger preload when DOM loading is complete\nwindow.addEventListener(\"load\", function () {\n  // Setup the load manager, and when ready,\n  // start loading the CSS and JS files.\n  // Finally, remove the progress bar HTML content.\n  oes.loadManager.setup( function () {\n    oes.loadManager.preload( oes.loadManager.removeProgressbar);\n  });\n});\n"},{"_content":"/*! normalize.css v3.0.2 | MIT License | git.io/normalize */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}\nbody {\n  color: black;\n  margin: 1em auto;\n}\n@media screen {\n  body {\n    background-color: #f8f8f8;\n    font: 1rem 'Arial', sans-serif;\n    line-height: 1.1;  /* HTML5 Boilerplate */\n    max-width: 768px;\n    padding: 8px;\n  }\n}\n@media print {\n  body {\n    font: 10pt 'TimesNewRoman', serif;\n    background-color: white;\n  }\n}\n\ndiv#frontMatter > p:first-child {\n  margin-top: 0.2em;\n  margin-bottom: 0.3em;\n}\ndiv#frontMatter > h1 {\n  margin-top: 0;\n  margin-bottom: 0.33em;\n}\ndiv#frontMatter > h1 > div {  /* hyperlink */\n  display: inline-block;\n  margin-left: 2em;\n  font-size: 45%;\n  width: 6em;\n}\ndiv#frontMatter > h1 > a {  /* hyperlink */\n  display: inline-block;\n  margin-left: 2em;\n  font-size: 45%;\n  width: 6em;\n}\n#model-name {\n  margin-top: 0;\n  margin-bottom: 0.33em;\n}\ndiv#frontMatter>section>h1, body>section>h1 {\n  font-size: 1.2em;\n  margin-bottom: 0.33em;\n}\nbody>section>section>h1 {\n  font-size: 1.1em;\n}\n/* Collapse section content */\n.collapsed > *:not(:first-child) {\n  display:none;\n}\nbody > section > h1 {\n  background-color: azure;\n  margin-bottom: 0.2em;\n}\nbody > section > h1 > span {\n  margin-right: 0.5em;\n}\nbody section p {\n  margin-top: 0em;\n  margin-bottom: 0.33em;\n\n  -webkit-hyphens: auto;\n  -webkit-hyphenate-limit-before: 3;\n  -webkit-hyphenate-limit-after: 3;\n  -webkit-hyphenate-limit-chars: 6 3 3;\n  -webkit-hyphenate-limit-lines: 2;\n  -webkit-hyphenate-limit-last: always;\n  -webkit-hyphenate-limit-zone: 8%;\n\n  -moz-hyphens: auto;\n  -moz-hyphenate-limit-chars: 6 3 3;\n  -moz-hyphenate-limit-lines: 2;\n  -moz-hyphenate-limit-last: always;\n  -moz-hyphenate-limit-zone: 8%;\n\n  -ms-hyphens: auto;\n  -ms-hyphenate-limit-chars: 6 3 3;\n  -ms-hyphenate-limit-lines: 2;\n  -ms-hyphenate-limit-last: always;\n  -ms-hyphenate-limit-zone: 8%;\n\n  hyphens: auto;\n  hyphenate-limit-chars: 6 3 3;\n  hyphenate-limit-lines: 2;\n  hyphenate-limit-last: always;\n  hyphenate-limit-zone: 8%;\n}\n\nli {\n  margin-bottom: 0.33em;\n}\ntable {\n  border: thin solid black;\n  margin: 1em auto;\n  border-collapse: collapse;\n  empty-cells: show;\n  counter-increment: tables;\n}\ntable td, table th {\n  border: thin solid black;\n  padding: 0.2em;\n}\ntable > caption {\n  page-break-before: avoid;\n  font-style: italic;\n  text-align: center;\n  text-indent: 1.6em;\n  margin-bottom: 1em;\n}\nfigure {\n  margin: 1em auto;\n  text-align: center;\n}\nfigure.right {\n  float: right;\n  margin-left: 1em;\n  margin-bottom: 1em;\n}\nfigure > figcaption {\n  font-size: smaller;\n  text-align: center;\n  margin-top: 1em;\n}\n\np#metaData {\n  font-size: smaller;\n}\nsup.expl-req {\n  background-color: lime;\n}\n/* Show explanation with smaller font */\ndiv.expl {\n  display: none;\n  font-size: smaller;\n  margin-top: 0.2em;\n  background-color: palegreen;\n}\nkbd {\n  padding-left: 3px;\n  padding-right: 3px;\n  background-color: gainsboro;\n}","source":"sims/framework/description.css","raw":"/*! normalize.css v3.0.2 | MIT License | git.io/normalize */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}\nbody {\n  color: black;\n  margin: 1em auto;\n}\n@media screen {\n  body {\n    background-color: #f8f8f8;\n    font: 1rem 'Arial', sans-serif;\n    line-height: 1.1;  /* HTML5 Boilerplate */\n    max-width: 768px;\n    padding: 8px;\n  }\n}\n@media print {\n  body {\n    font: 10pt 'TimesNewRoman', serif;\n    background-color: white;\n  }\n}\n\ndiv#frontMatter > p:first-child {\n  margin-top: 0.2em;\n  margin-bottom: 0.3em;\n}\ndiv#frontMatter > h1 {\n  margin-top: 0;\n  margin-bottom: 0.33em;\n}\ndiv#frontMatter > h1 > div {  /* hyperlink */\n  display: inline-block;\n  margin-left: 2em;\n  font-size: 45%;\n  width: 6em;\n}\ndiv#frontMatter > h1 > a {  /* hyperlink */\n  display: inline-block;\n  margin-left: 2em;\n  font-size: 45%;\n  width: 6em;\n}\n#model-name {\n  margin-top: 0;\n  margin-bottom: 0.33em;\n}\ndiv#frontMatter>section>h1, body>section>h1 {\n  font-size: 1.2em;\n  margin-bottom: 0.33em;\n}\nbody>section>section>h1 {\n  font-size: 1.1em;\n}\n/* Collapse section content */\n.collapsed > *:not(:first-child) {\n  display:none;\n}\nbody > section > h1 {\n  background-color: azure;\n  margin-bottom: 0.2em;\n}\nbody > section > h1 > span {\n  margin-right: 0.5em;\n}\nbody section p {\n  margin-top: 0em;\n  margin-bottom: 0.33em;\n\n  -webkit-hyphens: auto;\n  -webkit-hyphenate-limit-before: 3;\n  -webkit-hyphenate-limit-after: 3;\n  -webkit-hyphenate-limit-chars: 6 3 3;\n  -webkit-hyphenate-limit-lines: 2;\n  -webkit-hyphenate-limit-last: always;\n  -webkit-hyphenate-limit-zone: 8%;\n\n  -moz-hyphens: auto;\n  -moz-hyphenate-limit-chars: 6 3 3;\n  -moz-hyphenate-limit-lines: 2;\n  -moz-hyphenate-limit-last: always;\n  -moz-hyphenate-limit-zone: 8%;\n\n  -ms-hyphens: auto;\n  -ms-hyphenate-limit-chars: 6 3 3;\n  -ms-hyphenate-limit-lines: 2;\n  -ms-hyphenate-limit-last: always;\n  -ms-hyphenate-limit-zone: 8%;\n\n  hyphens: auto;\n  hyphenate-limit-chars: 6 3 3;\n  hyphenate-limit-lines: 2;\n  hyphenate-limit-last: always;\n  hyphenate-limit-zone: 8%;\n}\n\nli {\n  margin-bottom: 0.33em;\n}\ntable {\n  border: thin solid black;\n  margin: 1em auto;\n  border-collapse: collapse;\n  empty-cells: show;\n  counter-increment: tables;\n}\ntable td, table th {\n  border: thin solid black;\n  padding: 0.2em;\n}\ntable > caption {\n  page-break-before: avoid;\n  font-style: italic;\n  text-align: center;\n  text-indent: 1.6em;\n  margin-bottom: 1em;\n}\nfigure {\n  margin: 1em auto;\n  text-align: center;\n}\nfigure.right {\n  float: right;\n  margin-left: 1em;\n  margin-bottom: 1em;\n}\nfigure > figcaption {\n  font-size: smaller;\n  text-align: center;\n  margin-top: 1em;\n}\n\np#metaData {\n  font-size: smaller;\n}\nsup.expl-req {\n  background-color: lime;\n}\n/* Show explanation with smaller font */\ndiv.expl {\n  display: none;\n  font-size: smaller;\n  margin-top: 0.2em;\n  background-color: palegreen;\n}\nkbd {\n  padding-left: 3px;\n  padding-right: 3px;\n  background-color: gainsboro;\n}","date":"2019-04-16T15:44:34.148Z","updated":"2019-04-16T15:44:34.148Z","path":"sims/framework/description.css","layout":"false","title":"","comments":1,"_id":"cjx8wr3hu000dj1h5cbyf59v2","content":"/*! normalize.css v3.0.2 | MIT License | git.io/normalize */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}\nbody {\n  color: black;\n  margin: 1em auto;\n}\n@media screen {\n  body {\n    background-color: #f8f8f8;\n    font: 1rem 'Arial', sans-serif;\n    line-height: 1.1;  /* HTML5 Boilerplate */\n    max-width: 768px;\n    padding: 8px;\n  }\n}\n@media print {\n  body {\n    font: 10pt 'TimesNewRoman', serif;\n    background-color: white;\n  }\n}\n\ndiv#frontMatter > p:first-child {\n  margin-top: 0.2em;\n  margin-bottom: 0.3em;\n}\ndiv#frontMatter > h1 {\n  margin-top: 0;\n  margin-bottom: 0.33em;\n}\ndiv#frontMatter > h1 > div {  /* hyperlink */\n  display: inline-block;\n  margin-left: 2em;\n  font-size: 45%;\n  width: 6em;\n}\ndiv#frontMatter > h1 > a {  /* hyperlink */\n  display: inline-block;\n  margin-left: 2em;\n  font-size: 45%;\n  width: 6em;\n}\n#model-name {\n  margin-top: 0;\n  margin-bottom: 0.33em;\n}\ndiv#frontMatter>section>h1, body>section>h1 {\n  font-size: 1.2em;\n  margin-bottom: 0.33em;\n}\nbody>section>section>h1 {\n  font-size: 1.1em;\n}\n/* Collapse section content */\n.collapsed > *:not(:first-child) {\n  display:none;\n}\nbody > section > h1 {\n  background-color: azure;\n  margin-bottom: 0.2em;\n}\nbody > section > h1 > span {\n  margin-right: 0.5em;\n}\nbody section p {\n  margin-top: 0em;\n  margin-bottom: 0.33em;\n\n  -webkit-hyphens: auto;\n  -webkit-hyphenate-limit-before: 3;\n  -webkit-hyphenate-limit-after: 3;\n  -webkit-hyphenate-limit-chars: 6 3 3;\n  -webkit-hyphenate-limit-lines: 2;\n  -webkit-hyphenate-limit-last: always;\n  -webkit-hyphenate-limit-zone: 8%;\n\n  -moz-hyphens: auto;\n  -moz-hyphenate-limit-chars: 6 3 3;\n  -moz-hyphenate-limit-lines: 2;\n  -moz-hyphenate-limit-last: always;\n  -moz-hyphenate-limit-zone: 8%;\n\n  -ms-hyphens: auto;\n  -ms-hyphenate-limit-chars: 6 3 3;\n  -ms-hyphenate-limit-lines: 2;\n  -ms-hyphenate-limit-last: always;\n  -ms-hyphenate-limit-zone: 8%;\n\n  hyphens: auto;\n  hyphenate-limit-chars: 6 3 3;\n  hyphenate-limit-lines: 2;\n  hyphenate-limit-last: always;\n  hyphenate-limit-zone: 8%;\n}\n\nli {\n  margin-bottom: 0.33em;\n}\ntable {\n  border: thin solid black;\n  margin: 1em auto;\n  border-collapse: collapse;\n  empty-cells: show;\n  counter-increment: tables;\n}\ntable td, table th {\n  border: thin solid black;\n  padding: 0.2em;\n}\ntable > caption {\n  page-break-before: avoid;\n  font-style: italic;\n  text-align: center;\n  text-indent: 1.6em;\n  margin-bottom: 1em;\n}\nfigure {\n  margin: 1em auto;\n  text-align: center;\n}\nfigure.right {\n  float: right;\n  margin-left: 1em;\n  margin-bottom: 1em;\n}\nfigure > figcaption {\n  font-size: smaller;\n  text-align: center;\n  margin-top: 1em;\n}\n\np#metaData {\n  font-size: smaller;\n}\nsup.expl-req {\n  background-color: lime;\n}\n/* Show explanation with smaller font */\ndiv.expl {\n  display: none;\n  font-size: smaller;\n  margin-top: 0.2em;\n  background-color: palegreen;\n}\nkbd {\n  padding-left: 3px;\n  padding-right: 3px;\n  background-color: gainsboro;\n}","site":{"data":{}},"excerpt":"","more":"/*! normalize.css v3.0.2 | MIT License | git.io/normalize */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}\nbody {\n  color: black;\n  margin: 1em auto;\n}\n@media screen {\n  body {\n    background-color: #f8f8f8;\n    font: 1rem 'Arial', sans-serif;\n    line-height: 1.1;  /* HTML5 Boilerplate */\n    max-width: 768px;\n    padding: 8px;\n  }\n}\n@media print {\n  body {\n    font: 10pt 'TimesNewRoman', serif;\n    background-color: white;\n  }\n}\n\ndiv#frontMatter > p:first-child {\n  margin-top: 0.2em;\n  margin-bottom: 0.3em;\n}\ndiv#frontMatter > h1 {\n  margin-top: 0;\n  margin-bottom: 0.33em;\n}\ndiv#frontMatter > h1 > div {  /* hyperlink */\n  display: inline-block;\n  margin-left: 2em;\n  font-size: 45%;\n  width: 6em;\n}\ndiv#frontMatter > h1 > a {  /* hyperlink */\n  display: inline-block;\n  margin-left: 2em;\n  font-size: 45%;\n  width: 6em;\n}\n#model-name {\n  margin-top: 0;\n  margin-bottom: 0.33em;\n}\ndiv#frontMatter>section>h1, body>section>h1 {\n  font-size: 1.2em;\n  margin-bottom: 0.33em;\n}\nbody>section>section>h1 {\n  font-size: 1.1em;\n}\n/* Collapse section content */\n.collapsed > *:not(:first-child) {\n  display:none;\n}\nbody > section > h1 {\n  background-color: azure;\n  margin-bottom: 0.2em;\n}\nbody > section > h1 > span {\n  margin-right: 0.5em;\n}\nbody section p {\n  margin-top: 0em;\n  margin-bottom: 0.33em;\n\n  -webkit-hyphens: auto;\n  -webkit-hyphenate-limit-before: 3;\n  -webkit-hyphenate-limit-after: 3;\n  -webkit-hyphenate-limit-chars: 6 3 3;\n  -webkit-hyphenate-limit-lines: 2;\n  -webkit-hyphenate-limit-last: always;\n  -webkit-hyphenate-limit-zone: 8%;\n\n  -moz-hyphens: auto;\n  -moz-hyphenate-limit-chars: 6 3 3;\n  -moz-hyphenate-limit-lines: 2;\n  -moz-hyphenate-limit-last: always;\n  -moz-hyphenate-limit-zone: 8%;\n\n  -ms-hyphens: auto;\n  -ms-hyphenate-limit-chars: 6 3 3;\n  -ms-hyphenate-limit-lines: 2;\n  -ms-hyphenate-limit-last: always;\n  -ms-hyphenate-limit-zone: 8%;\n\n  hyphens: auto;\n  hyphenate-limit-chars: 6 3 3;\n  hyphenate-limit-lines: 2;\n  hyphenate-limit-last: always;\n  hyphenate-limit-zone: 8%;\n}\n\nli {\n  margin-bottom: 0.33em;\n}\ntable {\n  border: thin solid black;\n  margin: 1em auto;\n  border-collapse: collapse;\n  empty-cells: show;\n  counter-increment: tables;\n}\ntable td, table th {\n  border: thin solid black;\n  padding: 0.2em;\n}\ntable > caption {\n  page-break-before: avoid;\n  font-style: italic;\n  text-align: center;\n  text-indent: 1.6em;\n  margin-bottom: 1em;\n}\nfigure {\n  margin: 1em auto;\n  text-align: center;\n}\nfigure.right {\n  float: right;\n  margin-left: 1em;\n  margin-bottom: 1em;\n}\nfigure > figcaption {\n  font-size: smaller;\n  text-align: center;\n  margin-top: 1em;\n}\n\np#metaData {\n  font-size: smaller;\n}\nsup.expl-req {\n  background-color: lime;\n}\n/* Show explanation with smaller font */\ndiv.expl {\n  display: none;\n  font-size: smaller;\n  margin-top: 0.2em;\n  background-color: palegreen;\n}\nkbd {\n  padding-left: 3px;\n  padding-right: 3px;\n  background-color: gainsboro;\n}"},{"_content":"/**\n * Translation of sims/:simno/index.html files\n */\noes.ui.i18n = oes.ui.i18n || {};\nsim.scenario.i18n = sim.scenario.i18n || {};\n\nvar i18n = {\n  supportedLangFamilies: [\"en\", \"de\", \"zh\"],\n  docLocale: document.documentElement.lang\n};\ni18n.accessURL = new URL( window.location.href);\ni18n.accessLang = i18n.accessURL.searchParams.get(\"lang\");\ni18n.t = function (txt) {\n  var trans1 = oes.ui.i18n.translations,\n      trans2 = sim.scenario.i18n.translations;\n  if (trans1 && txt in trans1) return trans1[txt];\n  else if (trans2 && txt in trans2) return trans2[txt];\n  else return txt;\n};\n\n/**\n * Load a script\n * @param {Array} arr - An array of arrays of values to be combined\n */\ni18n.loadScript = function (filePath) {\n  return new Promise( function (resolve, reject) {\n    var scriptElem = document.createElement('script');\n    scriptElem.onload = resolve;\n    scriptElem.onerror = reject || function (e) {\n      console.log(\"Failed loading file '\" + filePath + \"'!\");\n      scriptElem.remove();\n    };\n    // trigger the file loading\n    scriptElem.src = filePath;\n    // append element to head\n    document.head.appendChild( scriptElem );\n  });\n};\n\n/**\n * Create the Front Matter: the UI page header and title (with a link to the description page).\n */\n(function () {\n  var metaDataPath=\"\", metaDataFileURL=\"\", descrFileURL=\"\",\n      accessURL = i18n.accessURL.href,  // e.g., \"https://sim4edu.com/sims/2\"\n      pos = accessURL.indexOf(\"/sims\"),\n      firstPart = accessURL.substring( 0, pos),\n      secondPart = accessURL.substring( pos);\n  var filterDivEl = document.createElement(\"div\"),  // for filtering the text content\n      frontMatterEl = document.querySelector(\"#frontMatter\"),\n      pageTitleEl = document.querySelector(\"#frontMatter h1\"),\n      mainEl = document.querySelector(\"body > main\");\n  if (secondPart.indexOf(\"?\") > -1) {\n    secondPart = secondPart.substring( 0, secondPart.indexOf(\"?\"));\n  }\n  if (!pageTitleEl) {\n    pageTitleEl = document.createElement(\"h1\");\n    if (!frontMatterEl) {\n      frontMatterEl = document.createElement(\"div\");\n      frontMatterEl.id = \"frontMatter\";\n      mainEl.insertBefore( frontMatterEl, mainEl.firstElementChild);\n    }\n    frontMatterEl.insertBefore( pageTitleEl, frontMatterEl.firstElementChild);\n  }\n  if (i18n.accessLang) {\n    i18n.accessLang = i18n.accessLang.substring(0,2);  // use language family\n    if (i18n.accessLang !== \"en\" && i18n.supportedLangFamilies.includes( i18n.accessLang)) {\n      document.documentElement.lang = i18n.accessLang;  // indicate the delivered language\n      if (secondPart.indexOf(\".\") > 0) {\n         metaDataPath = secondPart.replace(/(\\w+)\\.(\\w+)/, \"metadata.js\");\n      } else {\n        metaDataPath = secondPart + \"/metadata.js\";\n      }\n      metaDataFileURL = firstPart +\"/\"+ i18n.accessLang + metaDataPath;\n      descrFileURL = metaDataFileURL.replace(/(\\w+)\\.(\\w+)/, \"description.html\");\n      i18n.loadScript( metaDataFileURL).\n      then( function () {\n        var filePath = firstPart +\"/\"+ i18n.accessLang + \"/i18n-translations.js\";\n        return i18n.loadScript( filePath);\n      }).then( function () {\n        var filePath = metaDataFileURL.replace(/(\\w+)\\.(\\w+)/, \"i18n-translations.js\");\n        return i18n.loadScript( filePath);\n      }).catch( function (err) {\n        if (!sim.scenario.i18n.translations) {\n          console.log(\"No model-specific translation file found in \"+\n              metaDataPath.replace(/(\\w+)\\.(\\w+)/, \"\"));\n        }\n        if (!oes.ui.i18n.translations) {\n          console.log(\"No translation file found for \"+ i18n.accessLang);\n        }\n      }).then( function () {\n        var simTitle = String( sim.scenario.title || sim.model.title),\n            modelBtnElems = document.getElementById(\"model-menu\").children,\n            i=0;\n        if (simTitle.length > 38) pageTitleEl.style.fontSize = \"1.4em\";\n        document.getElementById(\"sim4eduinfo\").innerHTML = i18n.t(\"sim4eduinfo\");\n        pageTitleEl.innerHTML = \"<span>\"+ simTitle +\"</span>\";\n        if (pageTitleEl.querySelectorAll(\"a\").length === 0) {\n          pageTitleEl.innerHTML += \"<a href='../../\"+ i18n.accessLang +\n              secondPart.replace(/(\\w+)\\.(\\w+)/, \"description.html\") + \"'>\"+ i18n.t(\"Read more...\") +\"</a>\";\n          filterDivEl.innerHTML = sim.scenario.shortDescription || sim.model.shortDescription;\n          pageTitleEl.title = filterDivEl.textContent;\n        }\n        for (i=0; i < modelBtnElems.length; i++) {\n          modelBtnElems[i].textContent = i18n.t( modelBtnElems[i].textContent);\n        }\n      });\n    }\n  } else {  // no translation\n    if (!pageTitleEl.textContent) {\n      pageTitleEl.innerHTML = \"<span>\"+ String( sim.scenario.title || sim.model.title) +\"</span>\";\n    }\n    if (pageTitleEl.querySelectorAll(\"a\").length === 0) {\n      pageTitleEl.innerHTML += \"<div><a href='description.html'>Read more...</a></div>\";\n    }\n    filterDivEl.innerHTML = sim.scenario.shortDescription || sim.model.shortDescription;\n    pageTitleEl.title = filterDivEl.textContent;\n  }\n})();\n","source":"sims/framework/frontMatter.js","raw":"/**\n * Translation of sims/:simno/index.html files\n */\noes.ui.i18n = oes.ui.i18n || {};\nsim.scenario.i18n = sim.scenario.i18n || {};\n\nvar i18n = {\n  supportedLangFamilies: [\"en\", \"de\", \"zh\"],\n  docLocale: document.documentElement.lang\n};\ni18n.accessURL = new URL( window.location.href);\ni18n.accessLang = i18n.accessURL.searchParams.get(\"lang\");\ni18n.t = function (txt) {\n  var trans1 = oes.ui.i18n.translations,\n      trans2 = sim.scenario.i18n.translations;\n  if (trans1 && txt in trans1) return trans1[txt];\n  else if (trans2 && txt in trans2) return trans2[txt];\n  else return txt;\n};\n\n/**\n * Load a script\n * @param {Array} arr - An array of arrays of values to be combined\n */\ni18n.loadScript = function (filePath) {\n  return new Promise( function (resolve, reject) {\n    var scriptElem = document.createElement('script');\n    scriptElem.onload = resolve;\n    scriptElem.onerror = reject || function (e) {\n      console.log(\"Failed loading file '\" + filePath + \"'!\");\n      scriptElem.remove();\n    };\n    // trigger the file loading\n    scriptElem.src = filePath;\n    // append element to head\n    document.head.appendChild( scriptElem );\n  });\n};\n\n/**\n * Create the Front Matter: the UI page header and title (with a link to the description page).\n */\n(function () {\n  var metaDataPath=\"\", metaDataFileURL=\"\", descrFileURL=\"\",\n      accessURL = i18n.accessURL.href,  // e.g., \"https://sim4edu.com/sims/2\"\n      pos = accessURL.indexOf(\"/sims\"),\n      firstPart = accessURL.substring( 0, pos),\n      secondPart = accessURL.substring( pos);\n  var filterDivEl = document.createElement(\"div\"),  // for filtering the text content\n      frontMatterEl = document.querySelector(\"#frontMatter\"),\n      pageTitleEl = document.querySelector(\"#frontMatter h1\"),\n      mainEl = document.querySelector(\"body > main\");\n  if (secondPart.indexOf(\"?\") > -1) {\n    secondPart = secondPart.substring( 0, secondPart.indexOf(\"?\"));\n  }\n  if (!pageTitleEl) {\n    pageTitleEl = document.createElement(\"h1\");\n    if (!frontMatterEl) {\n      frontMatterEl = document.createElement(\"div\");\n      frontMatterEl.id = \"frontMatter\";\n      mainEl.insertBefore( frontMatterEl, mainEl.firstElementChild);\n    }\n    frontMatterEl.insertBefore( pageTitleEl, frontMatterEl.firstElementChild);\n  }\n  if (i18n.accessLang) {\n    i18n.accessLang = i18n.accessLang.substring(0,2);  // use language family\n    if (i18n.accessLang !== \"en\" && i18n.supportedLangFamilies.includes( i18n.accessLang)) {\n      document.documentElement.lang = i18n.accessLang;  // indicate the delivered language\n      if (secondPart.indexOf(\".\") > 0) {\n         metaDataPath = secondPart.replace(/(\\w+)\\.(\\w+)/, \"metadata.js\");\n      } else {\n        metaDataPath = secondPart + \"/metadata.js\";\n      }\n      metaDataFileURL = firstPart +\"/\"+ i18n.accessLang + metaDataPath;\n      descrFileURL = metaDataFileURL.replace(/(\\w+)\\.(\\w+)/, \"description.html\");\n      i18n.loadScript( metaDataFileURL).\n      then( function () {\n        var filePath = firstPart +\"/\"+ i18n.accessLang + \"/i18n-translations.js\";\n        return i18n.loadScript( filePath);\n      }).then( function () {\n        var filePath = metaDataFileURL.replace(/(\\w+)\\.(\\w+)/, \"i18n-translations.js\");\n        return i18n.loadScript( filePath);\n      }).catch( function (err) {\n        if (!sim.scenario.i18n.translations) {\n          console.log(\"No model-specific translation file found in \"+\n              metaDataPath.replace(/(\\w+)\\.(\\w+)/, \"\"));\n        }\n        if (!oes.ui.i18n.translations) {\n          console.log(\"No translation file found for \"+ i18n.accessLang);\n        }\n      }).then( function () {\n        var simTitle = String( sim.scenario.title || sim.model.title),\n            modelBtnElems = document.getElementById(\"model-menu\").children,\n            i=0;\n        if (simTitle.length > 38) pageTitleEl.style.fontSize = \"1.4em\";\n        document.getElementById(\"sim4eduinfo\").innerHTML = i18n.t(\"sim4eduinfo\");\n        pageTitleEl.innerHTML = \"<span>\"+ simTitle +\"</span>\";\n        if (pageTitleEl.querySelectorAll(\"a\").length === 0) {\n          pageTitleEl.innerHTML += \"<a href='../../\"+ i18n.accessLang +\n              secondPart.replace(/(\\w+)\\.(\\w+)/, \"description.html\") + \"'>\"+ i18n.t(\"Read more...\") +\"</a>\";\n          filterDivEl.innerHTML = sim.scenario.shortDescription || sim.model.shortDescription;\n          pageTitleEl.title = filterDivEl.textContent;\n        }\n        for (i=0; i < modelBtnElems.length; i++) {\n          modelBtnElems[i].textContent = i18n.t( modelBtnElems[i].textContent);\n        }\n      });\n    }\n  } else {  // no translation\n    if (!pageTitleEl.textContent) {\n      pageTitleEl.innerHTML = \"<span>\"+ String( sim.scenario.title || sim.model.title) +\"</span>\";\n    }\n    if (pageTitleEl.querySelectorAll(\"a\").length === 0) {\n      pageTitleEl.innerHTML += \"<div><a href='description.html'>Read more...</a></div>\";\n    }\n    filterDivEl.innerHTML = sim.scenario.shortDescription || sim.model.shortDescription;\n    pageTitleEl.title = filterDivEl.textContent;\n  }\n})();\n","date":"2019-04-16T15:44:34.150Z","updated":"2019-04-16T15:44:34.150Z","path":"sims/framework/frontMatter.js","layout":"false","title":"","comments":1,"_id":"cjx8wr3hw000ej1h5a3w5uqwb"},{"_content":"var oes=oes||{};oes.ui=oes.ui||{},oes.ui.space=oes.ui.space||{},oes.ui.space.grid={i:{},o:{objectViews:{}},gridCellSize:3,gridCellValueColors:[\"white\",\"blue\",\"red\",\"green\",\"brown\",\"grey\"]},oes.ui.space.grid.setup=function(e){var o=sim.model.space.xMax,i=sim.model.space.yMax,r=null,s=0,t=0,n=0,c=dom.createElement(\"table\",{id:\"visCanvas\"}),l=document.createElement(\"style\");for(sim.config.observationUI&&sim.config.observationUI.spaceView&&(n=sim.config.observationUI.spaceView.gridCellSize),n=n||oes.ui.space.grid.gridCellSize,\"function\"==typeof n&&(n=parseInt(n())),oes.ui.space.grid.gridCellSize=parseInt(n),l.innerHTML=\"table#visCanvas td {width:\"+n+\"px; height:\"+n+\"px; font-size:\"+(n-4)+\"px; line-height:\"+n+\"px;}\",document.head.appendChild(l),e?e.appendChild(c):document.body.appendChild(c),sim.visualEl=c,s=0;s<i;s++)for(r=c.insertRow(),t=0;t<o;t++)r.insertCell()},oes.ui.space.grid.reset=function(){var e=sim.model.space.xMax,o=sim.model.space.yMax,i=null,r=0,s=0;for(sim.visualEl.innerHTML=\"\",r=0;r<o;r++)for(i=sim.visualEl.insertRow(),s=0;s<e;s++)i.insertCell()},oes.ui.space.grid.i.dom={},oes.ui.space.grid.i.dom.renderIntegerGrid=function(){var e=0,o=0,i=0,r=sim.model.space.xMax,s=sim.model.space.yMax,t=null,n=sim.visualEl.rows,c=sim.config.observationUI.gridCellValueColors||oes.ui.space.grid.gridCellValueColors;for(e=0;e<s;e++)for(t=n[e].cells,o=0;o<r;o++)i=15&sim.space.grid[(s-e-1)*r+o],i>0?t[o].style.backgroundColor=c[i]:t[o].removeAttribute(\"style\"),(i=(240&sim.space.grid[(s-e-1)*r+o])/16)>0&&(t[o].textContent=String(i))},oes.ui.space.grid.o.dom={getGridCellColor:function(){}},oes.ui.space.grid.o.dom.setupObjectGrid=function(){var e=null,o=0,i=0,r=sim.model.space.xMax,s=sim.model.space.yMax,t=null,n=null,c=null;if(oes.ui.space.grid.setup(),oes.ui.space.grid.o.dom.getGridCellColor=oes.ui.space.grid.o.dom.processColor(sim.config.observationUI.spaceView.gridCellColor),sim.config.observationUI&&(e=sim.config.observationUI,e.objectViews,oes.ui.space.grid.o.dom.createObjectViews(),e.spaceView&&e.spaceView.showGridCellInfoOnFlyOver||(oes.ui.space.grid.o.dom.showGridCellsInfoOnFlyOver=function(){}),sim.config.observationUI.spaceView.showGridCellInfoOnFlyOver))for(n=function(e,o){return function(){var i=sim.space.grid[e][o],r=sim.visualEl.rows[o].cells[e],s=r.getAttribute(\"data-objectId\");r.title=s?oes.ui.space.grid.o.dom.getFlyOverInfoForObject(sim.objects[s]):oes.ui.space.grid.o.dom.getFlyOverInfoForGridCell(i)}},c=function(e,o){return function(){sim.space.grid[e][o];sim.visualEl.rows[o].cells[e].removeAttribute(\"title\")}},o=0;o<s;o++)for(i=0;i<r;i++)t=sim.visualEl.rows[o].cells[i],t.addEventListener(\"mouseenter\",n(i,o)),t.addEventListener(\"mouseout\",c(i,o))},oes.ui.space.grid.o.dom.renderObjectGrid=function(){var e=0,o=0,i=sim.model.space.xMax,r=sim.model.space.yMax,s=null,t=null,n=null,c=sim.visualEl.rows,l=\"\";for(e=0;e<r;e++)for(s=c[e].cells,o=0;o<i;o++)t=sim.space.grid[o][e],n=s[o],l=oes.ui.space.grid.o.dom.getGridCellColor(t),l?n.style.backgroundColor=l:n.removeAttribute(\"style\");oes.ui.space.grid.o.dom.renderObjects()},oes.ui.space.grid.o.dom.processColor=function(e){var o=0,i=[],r=[],s=0;if(!e)return function(){return\"rgb(191, 191, 191)\"};if(\"string\"==typeof e)return function(){return e};if(\"function\"==typeof e)return function(o){return e(o)};for(r[0]=e.H||e.R||0,r[1]=e.S||e.G||0,r[2]=e.L||e.B||0,r[3]=i[3]=e.A||1,o=e.A||0===e.A?4:3,s=0;s<o;s++)\"function\"==typeof r[s]?i[s]=function(e){return function(o){return 3===e?r[e](o):parseInt(r[e](o))}}(s):\"string\"==typeof r[s]?i[s]=function(e){return function(o){return 3===e?o[r[e]]:parseInt(o[r[e]])}}(s):Array.isArray(r[s])?i[s]=function(e){var o=r[e][0],i=r[e][1];return function(r){return void 0!==r[o]&&\"function\"==typeof i?3===e?i(r[o],r):parseInt(i(r[o],r)):0}}(s):\"number\"==typeof r[s]?i[s]=function(e){return function(){return 3===e?r[e]:parseInt(r[e])}}(s):console.log(\"oes.ui.space.grid.o.dom.processColor: Unsuported color computation method.\",e,r[s]);return void 0!==e.H&&void 0!==e.S&&void 0!==e.L?function(e){return\"hsl(\"+i[0](e)+\",\"+i[1](e)+\"%,\"+i[2](e)+\"%)\"}:void 0!==e.R&&void 0!==e.G&&void 0!==e.B?(\"function\"!=typeof i[3]&&(i[3]=function(){return 1}),function(e){return\"rgba(\"+i[0](e)+\",\"+i[1](e)+\",\"+i[2](e)+\",\"+i[3](e)+\")\"}):function(){return\"rgb(191, 191, 191)\"}},oes.ui.space.grid.o.dom.getFlyOverInfoForGridCell=function(e){var o=\"\";return Object.keys(e).forEach(function(i){\"objects\"!==i&&(o+=i+\": \"+e[i]+\"\\n\")}),o},oes.ui.space.grid.o.dom.createObjectViews=function(){var e=null;sim.config.observationUI&&sim.config.observationUI.objectViews&&(e=sim.config.observationUI.objectViews,Object.keys(sim.objects).forEach(function(o){var i=sim.objects[o],r=e[o]||e[i.constructor.Name];r&&(oes.ui.space.grid.o.objectViews[String(i.id)]=oes.ui.space.grid.o.dom.createObjectView(i,r,sim.model.space.gridCellMaxOccupancy))}))},oes.ui.space.grid.o.dom.createObjectView=function(e,o,i){var r=o.content||\"\",s=oes.ui.space.grid.o.dom.processColor,t=null,n=null,c=sim.model.space.yMax,l=sim.visualEl.rows,u=l[c-e.pos[1]].cells[e.pos[0]-1],a=null,d={};return\"function\"==typeof r&&(r=r(e)),1===i?(a=u,a.innerHTML=r):(a=dom.createElement(\"div\",{content:r,classValues:\"object-view\"}),u.appendChild(a)),a.setAttribute(\"data-objectId\",e.id),o.backgroundColor&&(t=s(o.backgroundColor)),o.color&&(n=s(o.color)),parseInt(o.roundedCorners)>0&&(a.style.borderRadius=o.roundedCorners),d.domEl=a,d.computeBackgroundColor=t,d.computeColor=n,o.showObjectInfoOnFlyOver&&(a.addEventListener(\"mouseenter\",function(){var e=sim.objects[a.getAttribute(\"data-objectId\")];e&&(d.showFlyOverInfo=!0,a.title=oes.ui.space.grid.o.dom.getFlyOverInfoForObject(e))}),a.addEventListener(\"mouseout\",function(){d.showFlyOverInfo=!1,a.removeAttribute(\"title\")})),d},oes.ui.space.grid.o.dom.getFlyOverInfoForObject=function(e){var o=\"type: \"+e.constructor.Name+\"\\n\";return Object.keys(e).forEach(function(i){o+=i+\": \"+e[i]+\"\\n\"}),o},oes.ui.space.grid.o.dom.renderObjects=function(){var e=oes.ui.space.grid.o.objectViews,o=sim.objects,i=oes.ui.space.grid.o.dom.getFlyOverInfoForObject;Object.keys(oes.ui.space.grid.o.objectViews).forEach(function(r){var s=e[r],t=o[r];s.domEl.style.backgroundColor=s.computeBackgroundColor(t),s.domEl.style.color=s.computeColor(t),s.showFlyOverInfo&&(s.domEl.title=i(t))})};","source":"sims/framework/gridDom-visualization.js","raw":"var oes=oes||{};oes.ui=oes.ui||{},oes.ui.space=oes.ui.space||{},oes.ui.space.grid={i:{},o:{objectViews:{}},gridCellSize:3,gridCellValueColors:[\"white\",\"blue\",\"red\",\"green\",\"brown\",\"grey\"]},oes.ui.space.grid.setup=function(e){var o=sim.model.space.xMax,i=sim.model.space.yMax,r=null,s=0,t=0,n=0,c=dom.createElement(\"table\",{id:\"visCanvas\"}),l=document.createElement(\"style\");for(sim.config.observationUI&&sim.config.observationUI.spaceView&&(n=sim.config.observationUI.spaceView.gridCellSize),n=n||oes.ui.space.grid.gridCellSize,\"function\"==typeof n&&(n=parseInt(n())),oes.ui.space.grid.gridCellSize=parseInt(n),l.innerHTML=\"table#visCanvas td {width:\"+n+\"px; height:\"+n+\"px; font-size:\"+(n-4)+\"px; line-height:\"+n+\"px;}\",document.head.appendChild(l),e?e.appendChild(c):document.body.appendChild(c),sim.visualEl=c,s=0;s<i;s++)for(r=c.insertRow(),t=0;t<o;t++)r.insertCell()},oes.ui.space.grid.reset=function(){var e=sim.model.space.xMax,o=sim.model.space.yMax,i=null,r=0,s=0;for(sim.visualEl.innerHTML=\"\",r=0;r<o;r++)for(i=sim.visualEl.insertRow(),s=0;s<e;s++)i.insertCell()},oes.ui.space.grid.i.dom={},oes.ui.space.grid.i.dom.renderIntegerGrid=function(){var e=0,o=0,i=0,r=sim.model.space.xMax,s=sim.model.space.yMax,t=null,n=sim.visualEl.rows,c=sim.config.observationUI.gridCellValueColors||oes.ui.space.grid.gridCellValueColors;for(e=0;e<s;e++)for(t=n[e].cells,o=0;o<r;o++)i=15&sim.space.grid[(s-e-1)*r+o],i>0?t[o].style.backgroundColor=c[i]:t[o].removeAttribute(\"style\"),(i=(240&sim.space.grid[(s-e-1)*r+o])/16)>0&&(t[o].textContent=String(i))},oes.ui.space.grid.o.dom={getGridCellColor:function(){}},oes.ui.space.grid.o.dom.setupObjectGrid=function(){var e=null,o=0,i=0,r=sim.model.space.xMax,s=sim.model.space.yMax,t=null,n=null,c=null;if(oes.ui.space.grid.setup(),oes.ui.space.grid.o.dom.getGridCellColor=oes.ui.space.grid.o.dom.processColor(sim.config.observationUI.spaceView.gridCellColor),sim.config.observationUI&&(e=sim.config.observationUI,e.objectViews,oes.ui.space.grid.o.dom.createObjectViews(),e.spaceView&&e.spaceView.showGridCellInfoOnFlyOver||(oes.ui.space.grid.o.dom.showGridCellsInfoOnFlyOver=function(){}),sim.config.observationUI.spaceView.showGridCellInfoOnFlyOver))for(n=function(e,o){return function(){var i=sim.space.grid[e][o],r=sim.visualEl.rows[o].cells[e],s=r.getAttribute(\"data-objectId\");r.title=s?oes.ui.space.grid.o.dom.getFlyOverInfoForObject(sim.objects[s]):oes.ui.space.grid.o.dom.getFlyOverInfoForGridCell(i)}},c=function(e,o){return function(){sim.space.grid[e][o];sim.visualEl.rows[o].cells[e].removeAttribute(\"title\")}},o=0;o<s;o++)for(i=0;i<r;i++)t=sim.visualEl.rows[o].cells[i],t.addEventListener(\"mouseenter\",n(i,o)),t.addEventListener(\"mouseout\",c(i,o))},oes.ui.space.grid.o.dom.renderObjectGrid=function(){var e=0,o=0,i=sim.model.space.xMax,r=sim.model.space.yMax,s=null,t=null,n=null,c=sim.visualEl.rows,l=\"\";for(e=0;e<r;e++)for(s=c[e].cells,o=0;o<i;o++)t=sim.space.grid[o][e],n=s[o],l=oes.ui.space.grid.o.dom.getGridCellColor(t),l?n.style.backgroundColor=l:n.removeAttribute(\"style\");oes.ui.space.grid.o.dom.renderObjects()},oes.ui.space.grid.o.dom.processColor=function(e){var o=0,i=[],r=[],s=0;if(!e)return function(){return\"rgb(191, 191, 191)\"};if(\"string\"==typeof e)return function(){return e};if(\"function\"==typeof e)return function(o){return e(o)};for(r[0]=e.H||e.R||0,r[1]=e.S||e.G||0,r[2]=e.L||e.B||0,r[3]=i[3]=e.A||1,o=e.A||0===e.A?4:3,s=0;s<o;s++)\"function\"==typeof r[s]?i[s]=function(e){return function(o){return 3===e?r[e](o):parseInt(r[e](o))}}(s):\"string\"==typeof r[s]?i[s]=function(e){return function(o){return 3===e?o[r[e]]:parseInt(o[r[e]])}}(s):Array.isArray(r[s])?i[s]=function(e){var o=r[e][0],i=r[e][1];return function(r){return void 0!==r[o]&&\"function\"==typeof i?3===e?i(r[o],r):parseInt(i(r[o],r)):0}}(s):\"number\"==typeof r[s]?i[s]=function(e){return function(){return 3===e?r[e]:parseInt(r[e])}}(s):console.log(\"oes.ui.space.grid.o.dom.processColor: Unsuported color computation method.\",e,r[s]);return void 0!==e.H&&void 0!==e.S&&void 0!==e.L?function(e){return\"hsl(\"+i[0](e)+\",\"+i[1](e)+\"%,\"+i[2](e)+\"%)\"}:void 0!==e.R&&void 0!==e.G&&void 0!==e.B?(\"function\"!=typeof i[3]&&(i[3]=function(){return 1}),function(e){return\"rgba(\"+i[0](e)+\",\"+i[1](e)+\",\"+i[2](e)+\",\"+i[3](e)+\")\"}):function(){return\"rgb(191, 191, 191)\"}},oes.ui.space.grid.o.dom.getFlyOverInfoForGridCell=function(e){var o=\"\";return Object.keys(e).forEach(function(i){\"objects\"!==i&&(o+=i+\": \"+e[i]+\"\\n\")}),o},oes.ui.space.grid.o.dom.createObjectViews=function(){var e=null;sim.config.observationUI&&sim.config.observationUI.objectViews&&(e=sim.config.observationUI.objectViews,Object.keys(sim.objects).forEach(function(o){var i=sim.objects[o],r=e[o]||e[i.constructor.Name];r&&(oes.ui.space.grid.o.objectViews[String(i.id)]=oes.ui.space.grid.o.dom.createObjectView(i,r,sim.model.space.gridCellMaxOccupancy))}))},oes.ui.space.grid.o.dom.createObjectView=function(e,o,i){var r=o.content||\"\",s=oes.ui.space.grid.o.dom.processColor,t=null,n=null,c=sim.model.space.yMax,l=sim.visualEl.rows,u=l[c-e.pos[1]].cells[e.pos[0]-1],a=null,d={};return\"function\"==typeof r&&(r=r(e)),1===i?(a=u,a.innerHTML=r):(a=dom.createElement(\"div\",{content:r,classValues:\"object-view\"}),u.appendChild(a)),a.setAttribute(\"data-objectId\",e.id),o.backgroundColor&&(t=s(o.backgroundColor)),o.color&&(n=s(o.color)),parseInt(o.roundedCorners)>0&&(a.style.borderRadius=o.roundedCorners),d.domEl=a,d.computeBackgroundColor=t,d.computeColor=n,o.showObjectInfoOnFlyOver&&(a.addEventListener(\"mouseenter\",function(){var e=sim.objects[a.getAttribute(\"data-objectId\")];e&&(d.showFlyOverInfo=!0,a.title=oes.ui.space.grid.o.dom.getFlyOverInfoForObject(e))}),a.addEventListener(\"mouseout\",function(){d.showFlyOverInfo=!1,a.removeAttribute(\"title\")})),d},oes.ui.space.grid.o.dom.getFlyOverInfoForObject=function(e){var o=\"type: \"+e.constructor.Name+\"\\n\";return Object.keys(e).forEach(function(i){o+=i+\": \"+e[i]+\"\\n\"}),o},oes.ui.space.grid.o.dom.renderObjects=function(){var e=oes.ui.space.grid.o.objectViews,o=sim.objects,i=oes.ui.space.grid.o.dom.getFlyOverInfoForObject;Object.keys(oes.ui.space.grid.o.objectViews).forEach(function(r){var s=e[r],t=o[r];s.domEl.style.backgroundColor=s.computeBackgroundColor(t),s.domEl.style.color=s.computeColor(t),s.showFlyOverInfo&&(s.domEl.title=i(t))})};","date":"2019-03-31T11:16:41.917Z","updated":"2019-02-09T10:36:34.106Z","path":"sims/framework/gridDom-visualization.js","layout":"false","title":"","comments":1,"_id":"cjx8wr3hx000fj1h53dea62x6"},{"_content":"/* PrismJS 1.15.0\nhttps://prismjs.com/download.html#themes=prism&languages=clike+javascript */\n/**\n * prism.js default theme for JavaScript, CSS and HTML\n * Based on dabblet (http://dabblet.com)\n * @author Lea Verou\n */\n\ncode[class*=\"language-\"],\npre[class*=\"language-\"] {\n\tcolor: black;\n\tbackground: none;\n\ttext-shadow: 0 1px white;\n\tfont-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n\ttext-align: left;\n\twhite-space: pre;\n\tword-spacing: normal;\n\tword-break: normal;\n\tword-wrap: normal;\n\tline-height: 1.5;\n\n\t-moz-tab-size: 4;\n\t-o-tab-size: 4;\n\ttab-size: 4;\n\n\t-webkit-hyphens: none;\n\t-moz-hyphens: none;\n\t-ms-hyphens: none;\n\thyphens: none;\n}\n\npre[class*=\"language-\"]::-moz-selection, pre[class*=\"language-\"] ::-moz-selection,\ncode[class*=\"language-\"]::-moz-selection, code[class*=\"language-\"] ::-moz-selection {\n\ttext-shadow: none;\n\tbackground: #b3d4fc;\n}\n\npre[class*=\"language-\"]::selection, pre[class*=\"language-\"] ::selection,\ncode[class*=\"language-\"]::selection, code[class*=\"language-\"] ::selection {\n\ttext-shadow: none;\n\tbackground: #b3d4fc;\n}\n\n@media print {\n\tcode[class*=\"language-\"],\n\tpre[class*=\"language-\"] {\n\t\ttext-shadow: none;\n\t}\n}\n\n/* Code blocks */\npre[class*=\"language-\"] {\n\tpadding: 1em;\n\tmargin: .5em 0;\n\toverflow: auto;\n}\n\n:not(pre) > code[class*=\"language-\"],\npre[class*=\"language-\"] {\n\tbackground: #f5f2f0;\n}\n\n/* Inline code */\n:not(pre) > code[class*=\"language-\"] {\n\tpadding: .1em;\n\tborder-radius: .3em;\n\twhite-space: normal;\n}\n\n.token.comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n\tcolor: slategray;\n}\n\n.token.punctuation {\n\tcolor: #999;\n}\n\n.namespace {\n\topacity: .7;\n}\n\n.token.property,\n.token.tag,\n.token.boolean,\n.token.number,\n.token.constant,\n.token.symbol,\n.token.deleted {\n\tcolor: #905;\n}\n\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.builtin,\n.token.inserted {\n\tcolor: #690;\n}\n\n.token.operator,\n.token.entity,\n.token.url,\n.language-css .token.string,\n.style .token.string {\n\tcolor: #9a6e3a;\n\tbackground: hsla(0, 0%, 100%, .5);\n}\n\n.token.atrule,\n.token.attr-value,\n.token.keyword {\n\tcolor: #07a;\n}\n\n.token.function,\n.token.class-name {\n\tcolor: #DD4A68;\n}\n\n.token.regex,\n.token.important,\n.token.variable {\n\tcolor: #e90;\n}\n\n.token.important,\n.token.bold {\n\tfont-weight: bold;\n}\n.token.italic {\n\tfont-style: italic;\n}\n\n.token.entity {\n\tcursor: help;\n}\n\n","source":"sims/framework/prism.css","raw":"/* PrismJS 1.15.0\nhttps://prismjs.com/download.html#themes=prism&languages=clike+javascript */\n/**\n * prism.js default theme for JavaScript, CSS and HTML\n * Based on dabblet (http://dabblet.com)\n * @author Lea Verou\n */\n\ncode[class*=\"language-\"],\npre[class*=\"language-\"] {\n\tcolor: black;\n\tbackground: none;\n\ttext-shadow: 0 1px white;\n\tfont-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n\ttext-align: left;\n\twhite-space: pre;\n\tword-spacing: normal;\n\tword-break: normal;\n\tword-wrap: normal;\n\tline-height: 1.5;\n\n\t-moz-tab-size: 4;\n\t-o-tab-size: 4;\n\ttab-size: 4;\n\n\t-webkit-hyphens: none;\n\t-moz-hyphens: none;\n\t-ms-hyphens: none;\n\thyphens: none;\n}\n\npre[class*=\"language-\"]::-moz-selection, pre[class*=\"language-\"] ::-moz-selection,\ncode[class*=\"language-\"]::-moz-selection, code[class*=\"language-\"] ::-moz-selection {\n\ttext-shadow: none;\n\tbackground: #b3d4fc;\n}\n\npre[class*=\"language-\"]::selection, pre[class*=\"language-\"] ::selection,\ncode[class*=\"language-\"]::selection, code[class*=\"language-\"] ::selection {\n\ttext-shadow: none;\n\tbackground: #b3d4fc;\n}\n\n@media print {\n\tcode[class*=\"language-\"],\n\tpre[class*=\"language-\"] {\n\t\ttext-shadow: none;\n\t}\n}\n\n/* Code blocks */\npre[class*=\"language-\"] {\n\tpadding: 1em;\n\tmargin: .5em 0;\n\toverflow: auto;\n}\n\n:not(pre) > code[class*=\"language-\"],\npre[class*=\"language-\"] {\n\tbackground: #f5f2f0;\n}\n\n/* Inline code */\n:not(pre) > code[class*=\"language-\"] {\n\tpadding: .1em;\n\tborder-radius: .3em;\n\twhite-space: normal;\n}\n\n.token.comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n\tcolor: slategray;\n}\n\n.token.punctuation {\n\tcolor: #999;\n}\n\n.namespace {\n\topacity: .7;\n}\n\n.token.property,\n.token.tag,\n.token.boolean,\n.token.number,\n.token.constant,\n.token.symbol,\n.token.deleted {\n\tcolor: #905;\n}\n\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.builtin,\n.token.inserted {\n\tcolor: #690;\n}\n\n.token.operator,\n.token.entity,\n.token.url,\n.language-css .token.string,\n.style .token.string {\n\tcolor: #9a6e3a;\n\tbackground: hsla(0, 0%, 100%, .5);\n}\n\n.token.atrule,\n.token.attr-value,\n.token.keyword {\n\tcolor: #07a;\n}\n\n.token.function,\n.token.class-name {\n\tcolor: #DD4A68;\n}\n\n.token.regex,\n.token.important,\n.token.variable {\n\tcolor: #e90;\n}\n\n.token.important,\n.token.bold {\n\tfont-weight: bold;\n}\n.token.italic {\n\tfont-style: italic;\n}\n\n.token.entity {\n\tcursor: help;\n}\n\n","date":"2019-03-31T11:16:41.919Z","updated":"2019-02-09T10:36:34.106Z","path":"sims/framework/prism.css","layout":"false","title":"","comments":1,"_id":"cjx8wr3hz000gj1h5cy4vdkpq"},{"_content":"var svg={NS:\"http://www.w3.org/2000/svg\",XLINK_NS:\"http://www.w3.org/1999/xlink\",createSVG:function(e){var t=document.createElementNS(svg.NS,\"svg\");return t.setAttribute(\"version\",\"1.1\"),e.id&&(t.id=e.id),e.class&&(t.class=e.class),e.width&&t.setAttribute(\"width\",e.width),e.height&&t.setAttribute(\"height\",e.height),e.viewBox&&t.setAttribute(\"viewBox\",e.viewBox),t},createDefs:function(){return document.createElementNS(svg.NS,\"defs\")},setOptionalAttr:function(e,t){void 0===t&&(t={}),t.id&&(e.id=t.id),t.class&&(e.class=t.class),e.setAttribute(\"stroke\",t.stroke||\"black\"),e.setAttribute(\"stroke-width\",t.strokeWidth||\"1\"),e.setAttribute(\"fill\",t.fill||\"white\")},createRect:function(e,t,i,s,r){var n=document.createElementNS(svg.NS,\"rect\");return n.setAttribute(\"x\",e),n.setAttribute(\"y\",t),n.setAttribute(\"width\",i),n.setAttribute(\"height\",s),svg.setOptionalAttr(n,r),n},createCircle:function(e,t,i,s){var r=document.createElementNS(svg.NS,\"circle\");return r.setAttribute(\"cx\",e),r.setAttribute(\"cy\",t),r.setAttribute(\"r\",i),svg.setOptionalAttr(r,s),r},createLine:function(e,t,i,s,r){var n=document.createElementNS(svg.NS,\"line\");return n.setAttribute(\"x1\",e),n.setAttribute(\"y1\",t),n.setAttribute(\"x2\",i),n.setAttribute(\"y2\",s),svg.setOptionalAttr(n,r),n},createPath:function(e,t){var i=document.createElementNS(svg.NS,\"path\");return i.setAttribute(\"d\",e),svg.setOptionalAttr(i,t),i},createGroup:function(e){var t=document.createElementNS(svg.NS,\"g\");return svg.setOptionalAttr(t,e),t},createText:function(e,t,i,s){var r=document.createElementNS(svg.NS,\"text\");return r.textContent=i,r.setAttribute(\"x\",e),r.setAttribute(\"y\",t),s&&(r.style=s),r},createShape:function(e,t,i,s){var r=document.createElementNS(svg.NS,e);return Object.keys(t).forEach(function(e){var i;i=\"function\"==typeof t[e]?t[e](s):t[e],r.setAttribute(e,i)}),i&&r.setAttribute(\"style\",i),r},createShapeFromDefRec:function(e,t){var i=document.createElementNS(svg.NS,e.shapeName),s=e.shapeAttributes;return Object.keys(s).forEach(function(e){var r;switch(r=\"function\"==typeof s[e]?s[e](t):s[e],e){case\"textContent\":i.textContent=r;break;case\"file\":i.setAttributeNS(svg.XLINK_NS,\"href\",r);break;default:i.setAttribute(e,r)}}),e.style&&i.setAttribute(\"style\",e.style),i},createImageFillPattern:function(e,t,i){var s=document.createElementNS(svg.NS,\"pattern\"),r=document.createElementNS(svg.NS,\"image\");return i||(i={}),r.setAttributeNS(svg.XLINK_NS,\"href\",t),r.setAttribute(\"width\",i.width||20),r.setAttribute(\"height\",i.height||20),s.appendChild(r),s.id=e,s.setAttribute(\"patternUnits\",\"userSpaceOnUse\"),s.setAttribute(\"width\",i.width||20),s.setAttribute(\"height\",i.height||20),i.x&&s.setAttribute(\"x\",i.x),i.y&&s.setAttribute(\"y\",i.y),s}},oes=oes||{};oes.ui=oes.ui||{},oes.ui.space=oes.ui.space||{},oes.ui.space.oneDim={SVG:{objectViewDefaultSize:10,objectViewDefaultColors:[\"blue\",\"green\",\"yellow\",\"red\"]}},oes.ui.space.oneDim.SVG.convertPos2SvgCoordinates=function(e){var t=e%sim.spaceView.circumference/sim.spaceView.r,i=sim.spaceView.r*Math.cos(t),s=sim.spaceView.r*Math.sin(t);return[i+sim.spaceView.cx,sim.spaceView.cy-s]},oes.ui.space.oneDim.SVG.renderInitialObjectView=function(e){var t=this.convertPos2SvgCoordinates(e.pos[0]),i=this.objectViewDefaultColors[e.id-1],s=this.objectViewDefaultSize;sim.objectViews[String(e.id)]=svg.createCircle(t[0],t[1],s,{fill:i}),sim.visualEl.appendChild(sim.objectViews[String(e.id)])},oes.ui.space.oneDim.SVG.updateObjectView=function(e){var t=this.convertPos2SvgCoordinates(e.pos[0]);sim.objectViews[String(e.id)].setAttribute(\"cx\",t[0]),sim.objectViews[String(e.id)].setAttribute(\"cy\",t[1])},oes.ui.space.oneDim.SVG.setup=function(e){var t=null,i=0,s=null,r=0;t=e||document.body,sim.config.observationUI&&sim.config.observationUI.spaceView&&(sim.config.observationUI.spaceView.trackDiameter?i=sim.config.observationUI.spaceView.trackDiameter:(s=getComputedStyle(t,null),i=Math.floor(parseInt(s.getPropertyValue(\"width\"))/2))),r=Math.floor(i/2),sim.spaceView={cx:r+50,cy:r+20,r:r},sim.spaceView.circumference=2*Math.PI*sim.spaceView.r,sim.visualEl=svg.createSVG({width:i+100,height:i+50}),sim.visualEl.appendChild(svg.createCircle(sim.spaceView.cx,sim.spaceView.cy,sim.spaceView.r,{stroke:\"lightgrey\",strokeWidth:\"20\"})),t.appendChild(sim.visualEl),Object.keys(ObjectInOneDimSpace.instances).forEach(function(e){var t=ObjectInOneDimSpace.instances[e];oes.ui.space.oneDim.SVG.renderInitialObjectView(t)})},oes.ui.space.oneDim.SVG.reset=function(){},oes.ui.space.oneDim.SVG.renderSimState=function(){var e=Object.keys(ObjectInOneDimSpace.instances),t=0,i=null,s=\"\";for(t=0;t<e.length;t++)s=e[t],i=ObjectInOneDimSpace.instances[s],oes.ui.space.oneDim.SVG.updateObjectView(i)};","source":"sims/framework/oneDimSVG-visualization.js","raw":"var svg={NS:\"http://www.w3.org/2000/svg\",XLINK_NS:\"http://www.w3.org/1999/xlink\",createSVG:function(e){var t=document.createElementNS(svg.NS,\"svg\");return t.setAttribute(\"version\",\"1.1\"),e.id&&(t.id=e.id),e.class&&(t.class=e.class),e.width&&t.setAttribute(\"width\",e.width),e.height&&t.setAttribute(\"height\",e.height),e.viewBox&&t.setAttribute(\"viewBox\",e.viewBox),t},createDefs:function(){return document.createElementNS(svg.NS,\"defs\")},setOptionalAttr:function(e,t){void 0===t&&(t={}),t.id&&(e.id=t.id),t.class&&(e.class=t.class),e.setAttribute(\"stroke\",t.stroke||\"black\"),e.setAttribute(\"stroke-width\",t.strokeWidth||\"1\"),e.setAttribute(\"fill\",t.fill||\"white\")},createRect:function(e,t,i,s,r){var n=document.createElementNS(svg.NS,\"rect\");return n.setAttribute(\"x\",e),n.setAttribute(\"y\",t),n.setAttribute(\"width\",i),n.setAttribute(\"height\",s),svg.setOptionalAttr(n,r),n},createCircle:function(e,t,i,s){var r=document.createElementNS(svg.NS,\"circle\");return r.setAttribute(\"cx\",e),r.setAttribute(\"cy\",t),r.setAttribute(\"r\",i),svg.setOptionalAttr(r,s),r},createLine:function(e,t,i,s,r){var n=document.createElementNS(svg.NS,\"line\");return n.setAttribute(\"x1\",e),n.setAttribute(\"y1\",t),n.setAttribute(\"x2\",i),n.setAttribute(\"y2\",s),svg.setOptionalAttr(n,r),n},createPath:function(e,t){var i=document.createElementNS(svg.NS,\"path\");return i.setAttribute(\"d\",e),svg.setOptionalAttr(i,t),i},createGroup:function(e){var t=document.createElementNS(svg.NS,\"g\");return svg.setOptionalAttr(t,e),t},createText:function(e,t,i,s){var r=document.createElementNS(svg.NS,\"text\");return r.textContent=i,r.setAttribute(\"x\",e),r.setAttribute(\"y\",t),s&&(r.style=s),r},createShape:function(e,t,i,s){var r=document.createElementNS(svg.NS,e);return Object.keys(t).forEach(function(e){var i;i=\"function\"==typeof t[e]?t[e](s):t[e],r.setAttribute(e,i)}),i&&r.setAttribute(\"style\",i),r},createShapeFromDefRec:function(e,t){var i=document.createElementNS(svg.NS,e.shapeName),s=e.shapeAttributes;return Object.keys(s).forEach(function(e){var r;switch(r=\"function\"==typeof s[e]?s[e](t):s[e],e){case\"textContent\":i.textContent=r;break;case\"file\":i.setAttributeNS(svg.XLINK_NS,\"href\",r);break;default:i.setAttribute(e,r)}}),e.style&&i.setAttribute(\"style\",e.style),i},createImageFillPattern:function(e,t,i){var s=document.createElementNS(svg.NS,\"pattern\"),r=document.createElementNS(svg.NS,\"image\");return i||(i={}),r.setAttributeNS(svg.XLINK_NS,\"href\",t),r.setAttribute(\"width\",i.width||20),r.setAttribute(\"height\",i.height||20),s.appendChild(r),s.id=e,s.setAttribute(\"patternUnits\",\"userSpaceOnUse\"),s.setAttribute(\"width\",i.width||20),s.setAttribute(\"height\",i.height||20),i.x&&s.setAttribute(\"x\",i.x),i.y&&s.setAttribute(\"y\",i.y),s}},oes=oes||{};oes.ui=oes.ui||{},oes.ui.space=oes.ui.space||{},oes.ui.space.oneDim={SVG:{objectViewDefaultSize:10,objectViewDefaultColors:[\"blue\",\"green\",\"yellow\",\"red\"]}},oes.ui.space.oneDim.SVG.convertPos2SvgCoordinates=function(e){var t=e%sim.spaceView.circumference/sim.spaceView.r,i=sim.spaceView.r*Math.cos(t),s=sim.spaceView.r*Math.sin(t);return[i+sim.spaceView.cx,sim.spaceView.cy-s]},oes.ui.space.oneDim.SVG.renderInitialObjectView=function(e){var t=this.convertPos2SvgCoordinates(e.pos[0]),i=this.objectViewDefaultColors[e.id-1],s=this.objectViewDefaultSize;sim.objectViews[String(e.id)]=svg.createCircle(t[0],t[1],s,{fill:i}),sim.visualEl.appendChild(sim.objectViews[String(e.id)])},oes.ui.space.oneDim.SVG.updateObjectView=function(e){var t=this.convertPos2SvgCoordinates(e.pos[0]);sim.objectViews[String(e.id)].setAttribute(\"cx\",t[0]),sim.objectViews[String(e.id)].setAttribute(\"cy\",t[1])},oes.ui.space.oneDim.SVG.setup=function(e){var t=null,i=0,s=null,r=0;t=e||document.body,sim.config.observationUI&&sim.config.observationUI.spaceView&&(sim.config.observationUI.spaceView.trackDiameter?i=sim.config.observationUI.spaceView.trackDiameter:(s=getComputedStyle(t,null),i=Math.floor(parseInt(s.getPropertyValue(\"width\"))/2))),r=Math.floor(i/2),sim.spaceView={cx:r+50,cy:r+20,r:r},sim.spaceView.circumference=2*Math.PI*sim.spaceView.r,sim.visualEl=svg.createSVG({width:i+100,height:i+50}),sim.visualEl.appendChild(svg.createCircle(sim.spaceView.cx,sim.spaceView.cy,sim.spaceView.r,{stroke:\"lightgrey\",strokeWidth:\"20\"})),t.appendChild(sim.visualEl),Object.keys(ObjectInOneDimSpace.instances).forEach(function(e){var t=ObjectInOneDimSpace.instances[e];oes.ui.space.oneDim.SVG.renderInitialObjectView(t)})},oes.ui.space.oneDim.SVG.reset=function(){},oes.ui.space.oneDim.SVG.renderSimState=function(){var e=Object.keys(ObjectInOneDimSpace.instances),t=0,i=null,s=\"\";for(t=0;t<e.length;t++)s=e[t],i=ObjectInOneDimSpace.instances[s],oes.ui.space.oneDim.SVG.updateObjectView(i)};","date":"2019-03-31T11:16:41.909Z","updated":"2019-02-09T10:36:34.106Z","path":"sims/framework/oneDimSVG-visualization.js","layout":"false","title":"","comments":1,"_id":"cjx8wr3i0000hj1h5pt9ya6rp"},{"_content":"oes.space={grid:{directions:[\"N\",\"NE\",\"E\",\"SE\",\"S\",\"SW\",\"W\",\"NW\"],getRandomDirection:function(){return this.directions[rand.uniformInt(0,7)]},i:{},o:{}},oneDim:{},twoDim:{},threeDim:{},dimensions:{\"1D\":1,\"1D-Grid\":1,IntegerGrid:2,ObjectGrid:2,\"2D\":2,\"3D\":3,\"3D-Grid\":3}},oes.space.initialize=function(){var e=sim.model.space;switch(e.geometry||(e.geometry=\"TOROIDAL\"),e.type){case\"1D\":break;case\"IntegerGrid\":oes.space.grid.forAllCells=oes.space.grid.i.forAllCells,oes.space.grid.i.initialize(e.xMax,e.yMax);break;case\"ObjectGrid\":oes.space.grid.forAllCells=oes.space.grid.o.forAllCells,oes.space.grid.o.initialize(e.xMax,e.yMax);break;case\"2D\":e.overlayGridCellSize&&(sim.space.overlayGrid.cellSize=e.overlayGridCellSize,oes.space.overlayGrid.initialize(e.xMax,e.yMax,sim.space.overlayGrid.cellSize))}},oes.space.grid.i.initialize=function(e,i){sim.space.grid=new Uint8Array(e*i)},oes.space.grid.i.forAllCells=function(e){var i=sim.model.space.xMax,s=sim.model.space.yMax,r=0,a=0;for(r=1;r<=s;r++)for(a=1;a<=i;a++)e(a,r,sim.space.grid[(r-1)*i+a-1])},oes.space.grid.i.getCellValue=function(e,i){var s=sim.model.space.xMax;return sim.space.grid[(i-1)*s+e-1]},oes.space.grid.i.setCellValue=function(e,i,s){var r=sim.model.space.xMax;sim.space.grid[(i-1)*r+e-1]=s},oes.space.grid.i.isFreeCell=function(e,i){var s=sim.model.space.xMax;return 0===sim.space.grid[(i-1)*s+e-1]},oes.space.grid.i.isSetBit0=function(e,i){var s=sim.model.space.xMax;return 1&sim.space.grid[(i-1)*s+e-1]},oes.space.grid.i.setBit0=function(e,i){var s=sim.model.space.xMax;sim.space.grid[(i-1)*s+e-1]|=1},oes.space.grid.i.unsetBit0=function(e,i){var s=sim.model.space.xMax;sim.space.grid[(i-1)*s+e-1]&=-2},oes.space.grid.i.getNmrOfNeighborCellsWithBit0=function(e,i){var s,r,a,o,t=sim.model.space.xMax,c=sim.model.space.yMax,l=0;return a=i<c?i+1:1,s=e<t?e+1:1,o=i>1?i-1:c,r=e>0?e-1:t,l+=1&sim.space.grid[(a-1)*t+e-1],l+=1&sim.space.grid[(a-1)*t+s-1],l+=1&sim.space.grid[(i-1)*t+s-1],l+=1&sim.space.grid[(o-1)*t+s-1],l+=1&sim.space.grid[(o-1)*t+e-1],l+=1&sim.space.grid[(o-1)*t+r-1],l+=1&sim.space.grid[(i-1)*t+r-1],l+=1&sim.space.grid[(a-1)*t+r-1]},oes.space.grid.i.findFreeCell=function(e){for(var i=(sim.space.grid,sim.model.space.xMax),s=sim.model.space.yMax,r=e?e[0]:rand.uniformInt(1,i),a=e?e[1]:rand.uniformInt(1,s),o=0,t=0;sim.space.grid[(a-1)*i+r-1]>0;)if(r=r<i?r+1:1,o+=1,o>=i-1&&(a=a<s?a+1:1,o=0,t+=1),t>=s-1)throw\"Attempt to over-populate grid!\";return[r,a]},oes.space.grid.i.move=function(e,i){var s=sim.model.space.xMax,r=e[0],a=e[1],o=sim.space.grid[(a-1)*s+r-1];sim.space.grid[(a-1)*s+r-1]=0,r=i[0],a=i[1],sim.space.grid[(a-1)*s+r-1]=o},oes.space.grid.o.initialize=function(e,i){var s=null,r=0,a=0,o=null;if(oes.space.grid.getCell=oes.space.grid.o.getCell,oes.space.grid.move=oes.space.grid.o.move,sim.space.grid=s=new Array(e),\"object\"==typeof sim.model.space.gridCellProperties)for(sim.model.space.gridCellProperties.objects={range:Object,initialValue:{}},sim.model.space.gridCellProperties.pos={range:Array,label:\"Position\"},o=new cLASS({Name:\"GridCell\",properties:sim.model.space.gridCellProperties,methods:{addObject:function(e){e.pos=this.pos,this.objects[String(e.id)]=e},removeObject:function(e){delete this.objects[String(e.id)]}}}),r=0;r<e;r++)for(s[r]=new Array(i),a=0;a<i;a++)s[r][a]=new o({pos:[r+1,i-a]})},oes.space.grid.o.forAllCells=function(e){var i=sim.model.space.xMax,s=sim.model.space.yMax,r=0,a=0,o=null;for(r=1;r<=i;r++)for(a=1;a<=s;a++)o=oes.space.grid.o.getCell(r,a),e(r,a,o)},oes.space.grid.o.move=function(e,i){},oes.space.grid.o.getCell=function(e,i){return sim.space.grid[e-1][sim.model.space.yMax-i]},oes.space.overlayGrid={},oes.space.overlayGrid.initialize=function(e,i,s){var r=0,a=0;s=s||1,r=parseInt(e/s),a=parseInt(i/s),oes.space.grid.o.initialize(r,a)},oes.space.overlayGrid.forAllCells=function(e){var i=sim.model.space.overlayGridCellSize,s=parseInt(sim.model.space.xMax/i),r=parseInt(sim.model.space.yMax/i),a=0,o=0;for(a=0;a<s;a++)for(o=0;o<r;o++)e(a+1,o+1,sim.space.grid[a][o])},oes.space.overlayGrid.getCell=function(e,i){var s=sim.space.overlayGrid.cellSize||1,r=parseInt(sim.model.space.yMax/s);return e=parseInt(e/s),i=parseInt(i/s),sim.space.grid[e][r-i-1]},oes.ObjectInGridSpace=new cLASS({Name:\"ObjectInGridSpace\",supertypeName:\"oBJECT\",properties:{pos:{range:Array,initialValue:[0,0],label:\"Position\"}},methods:{moveToCell:function(e,i){var s=sim.model.space.xMax,r=sim.model.space.yMax,a=this.pos[0],o=this.pos[1];\"EUCLIDEAN\"===sim.model.space.geometry?(e<1?e=1:e>s&&(e=s),i<1?i=1:i>r&&(i=r)):(e<1?e=s+e:e>s&&(e%=s),i<1?i=r+i:i>r&&(i%=r)),delete sim.space.grid[a][o].objects[String(this.id)],this.pos[0]=e,this.pos[1]=i,sim.space.grid[e][i].objects[String(this.id)]=this},moveToCellIfFree:function(e,i){return 0===Object.keys(sim.space.grid[e][i].objects).length&&(this.moveToCell(e,i),!0)},moveInDirection:function(e){var i=oes.space.grid.getTranslationPosition(this.pos[0],this.pos[1],e);this.moveToCell(i[0],i[1])},moveInRandomDirection:function(){var e=oes.space.grid.directions[rand.uniformInt(0,7)];this.moveInDirection(e)}}});var ObjectInOneDimSpace=new cLASS({Name:\"ObjectInOneDimSpace\",supertypeName:\"oBJECT\",properties:{pos:{range:cLASS.Array(\"Decimal\",2)},vel:{range:cLASS.Array(\"Decimal\",2)},acc:{range:cLASS.Array(\"Decimal\",2)}},methods:{computeNextVelocity:function(){return this.vel[0]+this.acc[0]*sim.timeIncrement},computeNextPosition:function(){return this.pos[0]+this.vel[0]*sim.timeIncrement}}});oes.ObjectInTwoDimSpace=new cLASS({Name:\"ObjectInTwoDimSpace\",supertypeName:\"oBJECT\",properties:{pos:{range:Array,initialValue:[0,0],label:\"Position\"},width:{range:\"Decimal\",initialValue:0,label:\"Width\"},height:{range:\"Decimal\",initialValue:0,label:\"Height\"}},methods:{}});","source":"sims/framework/space-core.js","raw":"oes.space={grid:{directions:[\"N\",\"NE\",\"E\",\"SE\",\"S\",\"SW\",\"W\",\"NW\"],getRandomDirection:function(){return this.directions[rand.uniformInt(0,7)]},i:{},o:{}},oneDim:{},twoDim:{},threeDim:{},dimensions:{\"1D\":1,\"1D-Grid\":1,IntegerGrid:2,ObjectGrid:2,\"2D\":2,\"3D\":3,\"3D-Grid\":3}},oes.space.initialize=function(){var e=sim.model.space;switch(e.geometry||(e.geometry=\"TOROIDAL\"),e.type){case\"1D\":break;case\"IntegerGrid\":oes.space.grid.forAllCells=oes.space.grid.i.forAllCells,oes.space.grid.i.initialize(e.xMax,e.yMax);break;case\"ObjectGrid\":oes.space.grid.forAllCells=oes.space.grid.o.forAllCells,oes.space.grid.o.initialize(e.xMax,e.yMax);break;case\"2D\":e.overlayGridCellSize&&(sim.space.overlayGrid.cellSize=e.overlayGridCellSize,oes.space.overlayGrid.initialize(e.xMax,e.yMax,sim.space.overlayGrid.cellSize))}},oes.space.grid.i.initialize=function(e,i){sim.space.grid=new Uint8Array(e*i)},oes.space.grid.i.forAllCells=function(e){var i=sim.model.space.xMax,s=sim.model.space.yMax,r=0,a=0;for(r=1;r<=s;r++)for(a=1;a<=i;a++)e(a,r,sim.space.grid[(r-1)*i+a-1])},oes.space.grid.i.getCellValue=function(e,i){var s=sim.model.space.xMax;return sim.space.grid[(i-1)*s+e-1]},oes.space.grid.i.setCellValue=function(e,i,s){var r=sim.model.space.xMax;sim.space.grid[(i-1)*r+e-1]=s},oes.space.grid.i.isFreeCell=function(e,i){var s=sim.model.space.xMax;return 0===sim.space.grid[(i-1)*s+e-1]},oes.space.grid.i.isSetBit0=function(e,i){var s=sim.model.space.xMax;return 1&sim.space.grid[(i-1)*s+e-1]},oes.space.grid.i.setBit0=function(e,i){var s=sim.model.space.xMax;sim.space.grid[(i-1)*s+e-1]|=1},oes.space.grid.i.unsetBit0=function(e,i){var s=sim.model.space.xMax;sim.space.grid[(i-1)*s+e-1]&=-2},oes.space.grid.i.getNmrOfNeighborCellsWithBit0=function(e,i){var s,r,a,o,t=sim.model.space.xMax,c=sim.model.space.yMax,l=0;return a=i<c?i+1:1,s=e<t?e+1:1,o=i>1?i-1:c,r=e>0?e-1:t,l+=1&sim.space.grid[(a-1)*t+e-1],l+=1&sim.space.grid[(a-1)*t+s-1],l+=1&sim.space.grid[(i-1)*t+s-1],l+=1&sim.space.grid[(o-1)*t+s-1],l+=1&sim.space.grid[(o-1)*t+e-1],l+=1&sim.space.grid[(o-1)*t+r-1],l+=1&sim.space.grid[(i-1)*t+r-1],l+=1&sim.space.grid[(a-1)*t+r-1]},oes.space.grid.i.findFreeCell=function(e){for(var i=(sim.space.grid,sim.model.space.xMax),s=sim.model.space.yMax,r=e?e[0]:rand.uniformInt(1,i),a=e?e[1]:rand.uniformInt(1,s),o=0,t=0;sim.space.grid[(a-1)*i+r-1]>0;)if(r=r<i?r+1:1,o+=1,o>=i-1&&(a=a<s?a+1:1,o=0,t+=1),t>=s-1)throw\"Attempt to over-populate grid!\";return[r,a]},oes.space.grid.i.move=function(e,i){var s=sim.model.space.xMax,r=e[0],a=e[1],o=sim.space.grid[(a-1)*s+r-1];sim.space.grid[(a-1)*s+r-1]=0,r=i[0],a=i[1],sim.space.grid[(a-1)*s+r-1]=o},oes.space.grid.o.initialize=function(e,i){var s=null,r=0,a=0,o=null;if(oes.space.grid.getCell=oes.space.grid.o.getCell,oes.space.grid.move=oes.space.grid.o.move,sim.space.grid=s=new Array(e),\"object\"==typeof sim.model.space.gridCellProperties)for(sim.model.space.gridCellProperties.objects={range:Object,initialValue:{}},sim.model.space.gridCellProperties.pos={range:Array,label:\"Position\"},o=new cLASS({Name:\"GridCell\",properties:sim.model.space.gridCellProperties,methods:{addObject:function(e){e.pos=this.pos,this.objects[String(e.id)]=e},removeObject:function(e){delete this.objects[String(e.id)]}}}),r=0;r<e;r++)for(s[r]=new Array(i),a=0;a<i;a++)s[r][a]=new o({pos:[r+1,i-a]})},oes.space.grid.o.forAllCells=function(e){var i=sim.model.space.xMax,s=sim.model.space.yMax,r=0,a=0,o=null;for(r=1;r<=i;r++)for(a=1;a<=s;a++)o=oes.space.grid.o.getCell(r,a),e(r,a,o)},oes.space.grid.o.move=function(e,i){},oes.space.grid.o.getCell=function(e,i){return sim.space.grid[e-1][sim.model.space.yMax-i]},oes.space.overlayGrid={},oes.space.overlayGrid.initialize=function(e,i,s){var r=0,a=0;s=s||1,r=parseInt(e/s),a=parseInt(i/s),oes.space.grid.o.initialize(r,a)},oes.space.overlayGrid.forAllCells=function(e){var i=sim.model.space.overlayGridCellSize,s=parseInt(sim.model.space.xMax/i),r=parseInt(sim.model.space.yMax/i),a=0,o=0;for(a=0;a<s;a++)for(o=0;o<r;o++)e(a+1,o+1,sim.space.grid[a][o])},oes.space.overlayGrid.getCell=function(e,i){var s=sim.space.overlayGrid.cellSize||1,r=parseInt(sim.model.space.yMax/s);return e=parseInt(e/s),i=parseInt(i/s),sim.space.grid[e][r-i-1]},oes.ObjectInGridSpace=new cLASS({Name:\"ObjectInGridSpace\",supertypeName:\"oBJECT\",properties:{pos:{range:Array,initialValue:[0,0],label:\"Position\"}},methods:{moveToCell:function(e,i){var s=sim.model.space.xMax,r=sim.model.space.yMax,a=this.pos[0],o=this.pos[1];\"EUCLIDEAN\"===sim.model.space.geometry?(e<1?e=1:e>s&&(e=s),i<1?i=1:i>r&&(i=r)):(e<1?e=s+e:e>s&&(e%=s),i<1?i=r+i:i>r&&(i%=r)),delete sim.space.grid[a][o].objects[String(this.id)],this.pos[0]=e,this.pos[1]=i,sim.space.grid[e][i].objects[String(this.id)]=this},moveToCellIfFree:function(e,i){return 0===Object.keys(sim.space.grid[e][i].objects).length&&(this.moveToCell(e,i),!0)},moveInDirection:function(e){var i=oes.space.grid.getTranslationPosition(this.pos[0],this.pos[1],e);this.moveToCell(i[0],i[1])},moveInRandomDirection:function(){var e=oes.space.grid.directions[rand.uniformInt(0,7)];this.moveInDirection(e)}}});var ObjectInOneDimSpace=new cLASS({Name:\"ObjectInOneDimSpace\",supertypeName:\"oBJECT\",properties:{pos:{range:cLASS.Array(\"Decimal\",2)},vel:{range:cLASS.Array(\"Decimal\",2)},acc:{range:cLASS.Array(\"Decimal\",2)}},methods:{computeNextVelocity:function(){return this.vel[0]+this.acc[0]*sim.timeIncrement},computeNextPosition:function(){return this.pos[0]+this.vel[0]*sim.timeIncrement}}});oes.ObjectInTwoDimSpace=new cLASS({Name:\"ObjectInTwoDimSpace\",supertypeName:\"oBJECT\",properties:{pos:{range:Array,initialValue:[0,0],label:\"Position\"},width:{range:\"Decimal\",initialValue:0,label:\"Width\"},height:{range:\"Decimal\",initialValue:0,label:\"Height\"}},methods:{}});","date":"2019-03-31T11:16:41.923Z","updated":"2019-02-09T10:36:34.109Z","path":"sims/framework/space-core.js","layout":"false","title":"","comments":1,"_id":"cjx8wr3i1000ij1h54wvxj20z"},{"_content":".ct-double-octave:after,.ct-major-eleventh:after,.ct-major-second:after,.ct-major-seventh:after,.ct-major-sixth:after,.ct-major-tenth:after,.ct-major-third:after,.ct-major-twelfth:after,.ct-minor-second:after,.ct-minor-seventh:after,.ct-minor-sixth:after,.ct-minor-third:after,.ct-octave:after,.ct-perfect-fifth:after,.ct-perfect-fourth:after,.ct-square:after{content:\"\";clear:both}.ct-label{fill:rgba(0,0,0,.4);color:rgba(0,0,0,.4);font-size:.75rem;line-height:1}.ct-chart-bar .ct-label,.ct-chart-line .ct-label{display:block;display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex}.ct-label.ct-horizontal.ct-start{-webkit-box-align:flex-end;-webkit-align-items:flex-end;-ms-flex-align:flex-end;align-items:flex-end;-webkit-box-pack:flex-start;-webkit-justify-content:flex-start;-ms-flex-pack:flex-start;justify-content:flex-start;text-align:left;text-anchor:start}.ct-label.ct-horizontal.ct-end{-webkit-box-align:flex-start;-webkit-align-items:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-box-pack:flex-start;-webkit-justify-content:flex-start;-ms-flex-pack:flex-start;justify-content:flex-start;text-align:left;text-anchor:start}.ct-label.ct-vertical.ct-start{-webkit-box-align:flex-end;-webkit-align-items:flex-end;-ms-flex-align:flex-end;align-items:flex-end;-webkit-box-pack:flex-end;-webkit-justify-content:flex-end;-ms-flex-pack:flex-end;justify-content:flex-end;text-align:right;text-anchor:end}.ct-label.ct-vertical.ct-end{-webkit-box-align:flex-end;-webkit-align-items:flex-end;-ms-flex-align:flex-end;align-items:flex-end;-webkit-box-pack:flex-start;-webkit-justify-content:flex-start;-ms-flex-pack:flex-start;justify-content:flex-start;text-align:left;text-anchor:start}.ct-chart-bar .ct-label.ct-horizontal.ct-start{-webkit-box-align:flex-end;-webkit-align-items:flex-end;-ms-flex-align:flex-end;align-items:flex-end;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;text-align:center;text-anchor:start}.ct-chart-bar .ct-label.ct-horizontal.ct-end{-webkit-box-align:flex-start;-webkit-align-items:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;text-align:center;text-anchor:start}.ct-chart-bar.ct-horizontal-bars .ct-label.ct-horizontal.ct-start{-webkit-box-align:flex-end;-webkit-align-items:flex-end;-ms-flex-align:flex-end;align-items:flex-end;-webkit-box-pack:flex-start;-webkit-justify-content:flex-start;-ms-flex-pack:flex-start;justify-content:flex-start;text-align:left;text-anchor:start}.ct-chart-bar.ct-horizontal-bars .ct-label.ct-horizontal.ct-end{-webkit-box-align:flex-start;-webkit-align-items:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-box-pack:flex-start;-webkit-justify-content:flex-start;-ms-flex-pack:flex-start;justify-content:flex-start;text-align:left;text-anchor:start}.ct-chart-bar.ct-horizontal-bars .ct-label.ct-vertical.ct-start{-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:flex-end;-webkit-justify-content:flex-end;-ms-flex-pack:flex-end;justify-content:flex-end;text-align:right;text-anchor:end}.ct-chart-bar.ct-horizontal-bars .ct-label.ct-vertical.ct-end{-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:flex-start;-webkit-justify-content:flex-start;-ms-flex-pack:flex-start;justify-content:flex-start;text-align:left;text-anchor:end}.ct-grid{stroke:rgba(0,0,0,.2);stroke-width:1px;stroke-dasharray:2px}.ct-point{stroke-width:10px;stroke-linecap:round}.ct-line{fill:none;stroke-width:4px}.ct-area{stroke:none;fill-opacity:.1}.ct-bar{fill:none;stroke-width:10px}.ct-slice-donut{fill:none;stroke-width:60px}.ct-series-a .ct-bar,.ct-series-a .ct-line,.ct-series-a .ct-point,.ct-series-a .ct-slice-donut{stroke:#d70206}.ct-series-a .ct-area,.ct-series-a .ct-slice-pie{fill:#d70206}.ct-series-b .ct-bar,.ct-series-b .ct-line,.ct-series-b .ct-point,.ct-series-b .ct-slice-donut{stroke:#f05b4f}.ct-series-b .ct-area,.ct-series-b .ct-slice-pie{fill:#f05b4f}.ct-series-c .ct-bar,.ct-series-c .ct-line,.ct-series-c .ct-point,.ct-series-c .ct-slice-donut{stroke:#f4c63d}.ct-series-c .ct-area,.ct-series-c .ct-slice-pie{fill:#f4c63d}.ct-series-d .ct-bar,.ct-series-d .ct-line,.ct-series-d .ct-point,.ct-series-d .ct-slice-donut{stroke:#d17905}.ct-series-d .ct-area,.ct-series-d .ct-slice-pie{fill:#d17905}.ct-series-e .ct-bar,.ct-series-e .ct-line,.ct-series-e .ct-point,.ct-series-e .ct-slice-donut{stroke:#453d3f}.ct-series-e .ct-area,.ct-series-e .ct-slice-pie{fill:#453d3f}.ct-series-f .ct-bar,.ct-series-f .ct-line,.ct-series-f .ct-point,.ct-series-f .ct-slice-donut{stroke:#59922b}.ct-series-f .ct-area,.ct-series-f .ct-slice-pie{fill:#59922b}.ct-series-g .ct-bar,.ct-series-g .ct-line,.ct-series-g .ct-point,.ct-series-g .ct-slice-donut{stroke:#0544d3}.ct-series-g .ct-area,.ct-series-g .ct-slice-pie{fill:#0544d3}.ct-series-h .ct-bar,.ct-series-h .ct-line,.ct-series-h .ct-point,.ct-series-h .ct-slice-donut{stroke:#6b0392}.ct-series-h .ct-area,.ct-series-h .ct-slice-pie{fill:#6b0392}.ct-series-i .ct-bar,.ct-series-i .ct-line,.ct-series-i .ct-point,.ct-series-i .ct-slice-donut{stroke:#f05b4f}.ct-series-i .ct-area,.ct-series-i .ct-slice-pie{fill:#f05b4f}.ct-series-j .ct-bar,.ct-series-j .ct-line,.ct-series-j .ct-point,.ct-series-j .ct-slice-donut{stroke:#dda458}.ct-series-j .ct-area,.ct-series-j .ct-slice-pie{fill:#dda458}.ct-series-k .ct-bar,.ct-series-k .ct-line,.ct-series-k .ct-point,.ct-series-k .ct-slice-donut{stroke:#eacf7d}.ct-series-k .ct-area,.ct-series-k .ct-slice-pie{fill:#eacf7d}.ct-series-l .ct-bar,.ct-series-l .ct-line,.ct-series-l .ct-point,.ct-series-l .ct-slice-donut{stroke:#86797d}.ct-series-l .ct-area,.ct-series-l .ct-slice-pie{fill:#86797d}.ct-series-m .ct-bar,.ct-series-m .ct-line,.ct-series-m .ct-point,.ct-series-m .ct-slice-donut{stroke:#b2c326}.ct-series-m .ct-area,.ct-series-m .ct-slice-pie{fill:#b2c326}.ct-series-n .ct-bar,.ct-series-n .ct-line,.ct-series-n .ct-point,.ct-series-n .ct-slice-donut{stroke:#6188e2}.ct-series-n .ct-area,.ct-series-n .ct-slice-pie{fill:#6188e2}.ct-series-o .ct-bar,.ct-series-o .ct-line,.ct-series-o .ct-point,.ct-series-o .ct-slice-donut{stroke:#a748ca}.ct-series-o .ct-area,.ct-series-o .ct-slice-pie{fill:#a748ca}.ct-square{display:block;position:relative;width:100%}.ct-square:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:100%}.ct-square:after{display:table}.ct-square>svg{display:block;position:absolute;top:0;left:0}.ct-minor-second{display:block;position:relative;width:100%}.ct-minor-second:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:93.75%}.ct-minor-second:after{display:table}.ct-minor-second>svg{display:block;position:absolute;top:0;left:0}.ct-major-second{display:block;position:relative;width:100%}.ct-major-second:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:88.8888888889%}.ct-major-second:after{display:table}.ct-major-second>svg{display:block;position:absolute;top:0;left:0}.ct-minor-third{display:block;position:relative;width:100%}.ct-minor-third:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:83.3333333333%}.ct-minor-third:after{display:table}.ct-minor-third>svg{display:block;position:absolute;top:0;left:0}.ct-major-third{display:block;position:relative;width:100%}.ct-major-third:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:80%}.ct-major-third:after{display:table}.ct-major-third>svg{display:block;position:absolute;top:0;left:0}.ct-perfect-fourth{display:block;position:relative;width:100%}.ct-perfect-fourth:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:75%}.ct-perfect-fourth:after{display:table}.ct-perfect-fourth>svg{display:block;position:absolute;top:0;left:0}.ct-perfect-fifth{display:block;position:relative;width:100%}.ct-perfect-fifth:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:66.6666666667%}.ct-perfect-fifth:after{display:table}.ct-perfect-fifth>svg{display:block;position:absolute;top:0;left:0}.ct-minor-sixth{display:block;position:relative;width:100%}.ct-minor-sixth:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:62.5%}.ct-minor-sixth:after{display:table}.ct-minor-sixth>svg{display:block;position:absolute;top:0;left:0}.ct-golden-section{display:block;position:relative;width:100%}.ct-golden-section:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:61.804697157%}.ct-golden-section:after{content:\"\";display:table;clear:both}.ct-golden-section>svg{display:block;position:absolute;top:0;left:0}.ct-major-sixth{display:block;position:relative;width:100%}.ct-major-sixth:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:60%}.ct-major-sixth:after{display:table}.ct-major-sixth>svg{display:block;position:absolute;top:0;left:0}.ct-minor-seventh{display:block;position:relative;width:100%}.ct-minor-seventh:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:56.25%}.ct-minor-seventh:after{display:table}.ct-minor-seventh>svg{display:block;position:absolute;top:0;left:0}.ct-major-seventh{display:block;position:relative;width:100%}.ct-major-seventh:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:53.3333333333%}.ct-major-seventh:after{display:table}.ct-major-seventh>svg{display:block;position:absolute;top:0;left:0}.ct-octave{display:block;position:relative;width:100%}.ct-octave:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:50%}.ct-octave:after{display:table}.ct-octave>svg{display:block;position:absolute;top:0;left:0}.ct-major-tenth{display:block;position:relative;width:100%}.ct-major-tenth:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:40%}.ct-major-tenth:after{display:table}.ct-major-tenth>svg{display:block;position:absolute;top:0;left:0}.ct-major-eleventh{display:block;position:relative;width:100%}.ct-major-eleventh:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:37.5%}.ct-major-eleventh:after{display:table}.ct-major-eleventh>svg{display:block;position:absolute;top:0;left:0}.ct-major-twelfth{display:block;position:relative;width:100%}.ct-major-twelfth:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:33.3333333333%}.ct-major-twelfth:after{display:table}.ct-major-twelfth>svg{display:block;position:absolute;top:0;left:0}.ct-double-octave{display:block;position:relative;width:100%}.ct-double-octave:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:25%}.ct-double-octave:after{display:table}.ct-double-octave>svg{display:block;position:absolute;top:0;left:0}.ct-legend[class=^\"\"]{clear:both;display:inline-block}.ct-series-0{color:#d70206}.ct-series-1{color:#f05b4f}.ct-series-2{color:#f4c63d}.ct-series-3{color:#d17905}.ct-series-4{color:#453d3f}.ct-series-5{color:#59922b}.ct-series-6{color:#0544d3}.ct-series-7{color:#6b0392}.ct-series-8{color:#f05b4f}.ct-series-9{color:#dda458}.ct-series-10{color:#eacf7d}.ct-series-11{color:#86797d}.ct-series-12{color:#b2c326}","source":"sims/framework/chartist.css","raw":".ct-double-octave:after,.ct-major-eleventh:after,.ct-major-second:after,.ct-major-seventh:after,.ct-major-sixth:after,.ct-major-tenth:after,.ct-major-third:after,.ct-major-twelfth:after,.ct-minor-second:after,.ct-minor-seventh:after,.ct-minor-sixth:after,.ct-minor-third:after,.ct-octave:after,.ct-perfect-fifth:after,.ct-perfect-fourth:after,.ct-square:after{content:\"\";clear:both}.ct-label{fill:rgba(0,0,0,.4);color:rgba(0,0,0,.4);font-size:.75rem;line-height:1}.ct-chart-bar .ct-label,.ct-chart-line .ct-label{display:block;display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex}.ct-label.ct-horizontal.ct-start{-webkit-box-align:flex-end;-webkit-align-items:flex-end;-ms-flex-align:flex-end;align-items:flex-end;-webkit-box-pack:flex-start;-webkit-justify-content:flex-start;-ms-flex-pack:flex-start;justify-content:flex-start;text-align:left;text-anchor:start}.ct-label.ct-horizontal.ct-end{-webkit-box-align:flex-start;-webkit-align-items:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-box-pack:flex-start;-webkit-justify-content:flex-start;-ms-flex-pack:flex-start;justify-content:flex-start;text-align:left;text-anchor:start}.ct-label.ct-vertical.ct-start{-webkit-box-align:flex-end;-webkit-align-items:flex-end;-ms-flex-align:flex-end;align-items:flex-end;-webkit-box-pack:flex-end;-webkit-justify-content:flex-end;-ms-flex-pack:flex-end;justify-content:flex-end;text-align:right;text-anchor:end}.ct-label.ct-vertical.ct-end{-webkit-box-align:flex-end;-webkit-align-items:flex-end;-ms-flex-align:flex-end;align-items:flex-end;-webkit-box-pack:flex-start;-webkit-justify-content:flex-start;-ms-flex-pack:flex-start;justify-content:flex-start;text-align:left;text-anchor:start}.ct-chart-bar .ct-label.ct-horizontal.ct-start{-webkit-box-align:flex-end;-webkit-align-items:flex-end;-ms-flex-align:flex-end;align-items:flex-end;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;text-align:center;text-anchor:start}.ct-chart-bar .ct-label.ct-horizontal.ct-end{-webkit-box-align:flex-start;-webkit-align-items:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;text-align:center;text-anchor:start}.ct-chart-bar.ct-horizontal-bars .ct-label.ct-horizontal.ct-start{-webkit-box-align:flex-end;-webkit-align-items:flex-end;-ms-flex-align:flex-end;align-items:flex-end;-webkit-box-pack:flex-start;-webkit-justify-content:flex-start;-ms-flex-pack:flex-start;justify-content:flex-start;text-align:left;text-anchor:start}.ct-chart-bar.ct-horizontal-bars .ct-label.ct-horizontal.ct-end{-webkit-box-align:flex-start;-webkit-align-items:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-box-pack:flex-start;-webkit-justify-content:flex-start;-ms-flex-pack:flex-start;justify-content:flex-start;text-align:left;text-anchor:start}.ct-chart-bar.ct-horizontal-bars .ct-label.ct-vertical.ct-start{-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:flex-end;-webkit-justify-content:flex-end;-ms-flex-pack:flex-end;justify-content:flex-end;text-align:right;text-anchor:end}.ct-chart-bar.ct-horizontal-bars .ct-label.ct-vertical.ct-end{-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:flex-start;-webkit-justify-content:flex-start;-ms-flex-pack:flex-start;justify-content:flex-start;text-align:left;text-anchor:end}.ct-grid{stroke:rgba(0,0,0,.2);stroke-width:1px;stroke-dasharray:2px}.ct-point{stroke-width:10px;stroke-linecap:round}.ct-line{fill:none;stroke-width:4px}.ct-area{stroke:none;fill-opacity:.1}.ct-bar{fill:none;stroke-width:10px}.ct-slice-donut{fill:none;stroke-width:60px}.ct-series-a .ct-bar,.ct-series-a .ct-line,.ct-series-a .ct-point,.ct-series-a .ct-slice-donut{stroke:#d70206}.ct-series-a .ct-area,.ct-series-a .ct-slice-pie{fill:#d70206}.ct-series-b .ct-bar,.ct-series-b .ct-line,.ct-series-b .ct-point,.ct-series-b .ct-slice-donut{stroke:#f05b4f}.ct-series-b .ct-area,.ct-series-b .ct-slice-pie{fill:#f05b4f}.ct-series-c .ct-bar,.ct-series-c .ct-line,.ct-series-c .ct-point,.ct-series-c .ct-slice-donut{stroke:#f4c63d}.ct-series-c .ct-area,.ct-series-c .ct-slice-pie{fill:#f4c63d}.ct-series-d .ct-bar,.ct-series-d .ct-line,.ct-series-d .ct-point,.ct-series-d .ct-slice-donut{stroke:#d17905}.ct-series-d .ct-area,.ct-series-d .ct-slice-pie{fill:#d17905}.ct-series-e .ct-bar,.ct-series-e .ct-line,.ct-series-e .ct-point,.ct-series-e .ct-slice-donut{stroke:#453d3f}.ct-series-e .ct-area,.ct-series-e .ct-slice-pie{fill:#453d3f}.ct-series-f .ct-bar,.ct-series-f .ct-line,.ct-series-f .ct-point,.ct-series-f .ct-slice-donut{stroke:#59922b}.ct-series-f .ct-area,.ct-series-f .ct-slice-pie{fill:#59922b}.ct-series-g .ct-bar,.ct-series-g .ct-line,.ct-series-g .ct-point,.ct-series-g .ct-slice-donut{stroke:#0544d3}.ct-series-g .ct-area,.ct-series-g .ct-slice-pie{fill:#0544d3}.ct-series-h .ct-bar,.ct-series-h .ct-line,.ct-series-h .ct-point,.ct-series-h .ct-slice-donut{stroke:#6b0392}.ct-series-h .ct-area,.ct-series-h .ct-slice-pie{fill:#6b0392}.ct-series-i .ct-bar,.ct-series-i .ct-line,.ct-series-i .ct-point,.ct-series-i .ct-slice-donut{stroke:#f05b4f}.ct-series-i .ct-area,.ct-series-i .ct-slice-pie{fill:#f05b4f}.ct-series-j .ct-bar,.ct-series-j .ct-line,.ct-series-j .ct-point,.ct-series-j .ct-slice-donut{stroke:#dda458}.ct-series-j .ct-area,.ct-series-j .ct-slice-pie{fill:#dda458}.ct-series-k .ct-bar,.ct-series-k .ct-line,.ct-series-k .ct-point,.ct-series-k .ct-slice-donut{stroke:#eacf7d}.ct-series-k .ct-area,.ct-series-k .ct-slice-pie{fill:#eacf7d}.ct-series-l .ct-bar,.ct-series-l .ct-line,.ct-series-l .ct-point,.ct-series-l .ct-slice-donut{stroke:#86797d}.ct-series-l .ct-area,.ct-series-l .ct-slice-pie{fill:#86797d}.ct-series-m .ct-bar,.ct-series-m .ct-line,.ct-series-m .ct-point,.ct-series-m .ct-slice-donut{stroke:#b2c326}.ct-series-m .ct-area,.ct-series-m .ct-slice-pie{fill:#b2c326}.ct-series-n .ct-bar,.ct-series-n .ct-line,.ct-series-n .ct-point,.ct-series-n .ct-slice-donut{stroke:#6188e2}.ct-series-n .ct-area,.ct-series-n .ct-slice-pie{fill:#6188e2}.ct-series-o .ct-bar,.ct-series-o .ct-line,.ct-series-o .ct-point,.ct-series-o .ct-slice-donut{stroke:#a748ca}.ct-series-o .ct-area,.ct-series-o .ct-slice-pie{fill:#a748ca}.ct-square{display:block;position:relative;width:100%}.ct-square:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:100%}.ct-square:after{display:table}.ct-square>svg{display:block;position:absolute;top:0;left:0}.ct-minor-second{display:block;position:relative;width:100%}.ct-minor-second:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:93.75%}.ct-minor-second:after{display:table}.ct-minor-second>svg{display:block;position:absolute;top:0;left:0}.ct-major-second{display:block;position:relative;width:100%}.ct-major-second:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:88.8888888889%}.ct-major-second:after{display:table}.ct-major-second>svg{display:block;position:absolute;top:0;left:0}.ct-minor-third{display:block;position:relative;width:100%}.ct-minor-third:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:83.3333333333%}.ct-minor-third:after{display:table}.ct-minor-third>svg{display:block;position:absolute;top:0;left:0}.ct-major-third{display:block;position:relative;width:100%}.ct-major-third:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:80%}.ct-major-third:after{display:table}.ct-major-third>svg{display:block;position:absolute;top:0;left:0}.ct-perfect-fourth{display:block;position:relative;width:100%}.ct-perfect-fourth:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:75%}.ct-perfect-fourth:after{display:table}.ct-perfect-fourth>svg{display:block;position:absolute;top:0;left:0}.ct-perfect-fifth{display:block;position:relative;width:100%}.ct-perfect-fifth:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:66.6666666667%}.ct-perfect-fifth:after{display:table}.ct-perfect-fifth>svg{display:block;position:absolute;top:0;left:0}.ct-minor-sixth{display:block;position:relative;width:100%}.ct-minor-sixth:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:62.5%}.ct-minor-sixth:after{display:table}.ct-minor-sixth>svg{display:block;position:absolute;top:0;left:0}.ct-golden-section{display:block;position:relative;width:100%}.ct-golden-section:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:61.804697157%}.ct-golden-section:after{content:\"\";display:table;clear:both}.ct-golden-section>svg{display:block;position:absolute;top:0;left:0}.ct-major-sixth{display:block;position:relative;width:100%}.ct-major-sixth:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:60%}.ct-major-sixth:after{display:table}.ct-major-sixth>svg{display:block;position:absolute;top:0;left:0}.ct-minor-seventh{display:block;position:relative;width:100%}.ct-minor-seventh:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:56.25%}.ct-minor-seventh:after{display:table}.ct-minor-seventh>svg{display:block;position:absolute;top:0;left:0}.ct-major-seventh{display:block;position:relative;width:100%}.ct-major-seventh:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:53.3333333333%}.ct-major-seventh:after{display:table}.ct-major-seventh>svg{display:block;position:absolute;top:0;left:0}.ct-octave{display:block;position:relative;width:100%}.ct-octave:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:50%}.ct-octave:after{display:table}.ct-octave>svg{display:block;position:absolute;top:0;left:0}.ct-major-tenth{display:block;position:relative;width:100%}.ct-major-tenth:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:40%}.ct-major-tenth:after{display:table}.ct-major-tenth>svg{display:block;position:absolute;top:0;left:0}.ct-major-eleventh{display:block;position:relative;width:100%}.ct-major-eleventh:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:37.5%}.ct-major-eleventh:after{display:table}.ct-major-eleventh>svg{display:block;position:absolute;top:0;left:0}.ct-major-twelfth{display:block;position:relative;width:100%}.ct-major-twelfth:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:33.3333333333%}.ct-major-twelfth:after{display:table}.ct-major-twelfth>svg{display:block;position:absolute;top:0;left:0}.ct-double-octave{display:block;position:relative;width:100%}.ct-double-octave:before{display:block;float:left;content:\"\";width:0;height:0;padding-bottom:25%}.ct-double-octave:after{display:table}.ct-double-octave>svg{display:block;position:absolute;top:0;left:0}.ct-legend[class=^\"\"]{clear:both;display:inline-block}.ct-series-0{color:#d70206}.ct-series-1{color:#f05b4f}.ct-series-2{color:#f4c63d}.ct-series-3{color:#d17905}.ct-series-4{color:#453d3f}.ct-series-5{color:#59922b}.ct-series-6{color:#0544d3}.ct-series-7{color:#6b0392}.ct-series-8{color:#f05b4f}.ct-series-9{color:#dda458}.ct-series-10{color:#eacf7d}.ct-series-11{color:#86797d}.ct-series-12{color:#b2c326}","date":"2019-03-31T11:16:41.915Z","updated":"2019-02-09T10:36:34.105Z","path":"sims/framework/chartist.css","layout":"false","title":"","comments":1,"_id":"cjx8wr3i4000jj1h5u3a7cnoh"},{"_content":"var oes = oes || {ui: {explanation:{}}};\n/**\n * Insert a new node/element after another one\n */\ndom = {\n  insertAfter: function (newNode, referenceNode) {\n    referenceNode.parentNode.insertBefore( newNode, referenceNode.nextSibling);\n  }\n};\n/**\n * Convert HTML to Text\n * @param {string} htmlElemContent\n * @return {string}\n */\ndom.convertHtml2Text = function (htmlElemContent) {\n  var blockElem = document.createElement(\"div\");\n  blockElem.innerHTML = htmlElemContent;\n  return blockElem.textContent;\n};\noes.ui.translate = function (txt) {\n  var trans = oes.ui.i18n && oes.ui.i18n.translations;\n  if (typeof trans === \"object\" && txt in trans) return trans[txt];\n  else return txt;\n}\n\noes.ui.explanation[\"expl-CM\"] = \"The <dfn>conceptual model</dfn>, also called <i>domain model</i>, \" +\n    \"describes the real-world <i>system under investigation</i> by identifying the relevant \" +\n    \"types of objects and events, and describing their dynamics, allowing to understand \" +\n    \"what's going on in the system.\";\noes.ui.explanation[\"expl-CIM\"] = \"<p>A <dfn>conceptual information model</dfn> describes the subject matter \" +\n    \"vocabulary used, e.g., in the system narrative, in a semi-formal way. Such a vocabulary \" +\n    \"essentially consists of names for</p> \" +\n    \"<ul><li><strong>types</strong>, corresponding to <i>classes</i> in OO modeling, or <i>unary \" +\n    \"predicates</i> in formal logic,</li> \" +\n    \"<li><strong>properties</strong> corresponding to <i>binary predicates</i> in formal logic,</li>\" +\n    \"<li><strong>associations</strong> corresponding to <i>n-ary predicates</i> (with <i>n</i> > 1) in formal logic.</li></ul> \" +\n    \"<p>The main categories of types are <i>object types</i> and <i>event types</i>. A simple form of \" +\n    \"conceptual information model is obtained by providing a list of each of them, while a more elaborated \" +\n    \"model, preferably in the form of a UML class diagram, also defines properties and associations, \" +\n    \"including the <strong>participation</strong> of objects (of certain types) in events (of certain types).</p>\";\noes.ui.explanation[\"expl-CPM\"] = \"<p>A <dfn>conceptual process model</dfn> should include the event types \"+\n    \"identified in the conceptual information model, and describe in which temporal sequences events may occur, \"+\n\t  \"based on conditional and parallel branching. We can do this by describing, for each of these event types, \"+\n\t  \"the <b><i>causal regularity</i></b> associated with it \" +\n    \"in the form of an <b><i>event rule</i></b> that defines the <b><i>state changes</i></b> and \" +\n    \"<b><i>follow-up events</i></b> caused by events of that type.</li></ol>\" +\n    \"For simplicity, we may merge those types of events, which can be considered to temporally \" +\n    \"coincide. This is the case whenever an event unconditionally causes an immediately succeeding follow-up \" +\n    \"event.</p><p>A conceptual process model can be defined in the form of an <b><i>event rule table</i></b> \" +\n    \"or in the form of BPMN process diagrams that visualize the event rules.</p>\";\noes.ui.explanation[\"expl-DM\"] = \"The simulation <dfn>design model</dfn> defines a computational design for a simulation \" +\n    \"based on a conceptual model. Unlike the conceptual model, the design is tailored towards the purpose \" +\n    \"of the simulation project (e.g., for answering certain research questions in a social system analysis \" +\n    \"project or in a technical system engineering project, or for teaching certain facts about a system \" +\n    \"in an educational simulation project). Although the design model is independent of a specific technology \" +\n    \"platform, it is typically based on object-oriented modeling (e.g., with UML diagrams). It can be \" +\n    \"implemented in different ways with any specific technology choice, typically using an object-oriented \" +\n    \"programming approach.\";\noes.ui.explanation[\"expl-IDM\"] = \"<p>An <dfn>information design model</dfn> is normally derived from a conceptual \" +\n    \"information model by <b><i>choosing the design-relevant types</i></b> of objects and events and enrich \" +\n    \"them with design details, while dropping other object types and event types not deemed relevant for \" +\n    \"the simulation design. Adding design details includes specifying <b><i>property ranges</i></b> as well \" +\n    \"as adding multiplicity and other types of <b><i>constraints</i></b>.</p>\" +\n    \"<p>In addition to these general information modeling issues, there are also a few issues, which \" +\n    \"are specific for simulation modeling:</p>\" +\n    \"<ol><li>If the simulation is to deal with <b><i>objects in space</i></b>, the design model must be \" +\n    \"based on a choice of <b><i>space model</i></b>: one-dimensional (1D) discrete space, two-dimensional \" +\n    \"(2D) discrete space (also called <i>grid space</i>), three-dimensional (3D) discrete space, \" +\n    \"and 1D/2D/3D continuous space. The chosen space model implies a corresponding form of spatial \" +\n    \"<i>positions</i> (or <i>locations</i>): a 1-, 2- or 3-tuple of integers or decimal numbers.</li>\" +\n    \"<li>The information design model must distinguish between <b><i>exogenous</i></b> and \" +\n    \"<b><i>caused</i></b> (or <i>endogenous</i>) event types. For any exogenous event type, the \" +\n    \"<b><i>recurrence</i></b> of events of that type must be specified, typically in the form of a \" +\n    \"random variable, but in some cases it may be a constant (like 'on each Monday'). The recurrence \" +\n    \"defines the elapsed time between two consecutive events of the given type (their inter-occurrence \" +\n    \"time). It can be specified within the event class concerned in the form of a special method \" +\n    \"with the predefined name 'recurrence'.</li>\" +\n    \"<li>Certain simulation variables may be subject to random variation, so they can \" +\n    \"be considered to be <b><i>random variables</i></b> with an underlying probability distribution that \" +\n    \"is sampled by a corresponding method stereotyped «rv» for categorizing it as a <i>random variate</i> \" +\n    \"sampling method. The underlying probability distribution can be indicated in the model diagram by \" +\n    \"appending a symbolic expression, denoting a distribution (with parameter values), to the method \" +\n    \"definition clause. For instance, <i>U(1,6)</i> may denote the uniform distribution with lower bound 1 \" +\n    \"and upper bound 6, while <i>Exp(1.5)</i> may denote the exponential distribution with event rate 1.5.</li> \" +\n    \"</ol>\";\noes.ui.explanation[\"expl-PDM\"] = \"In the <dfn>process design model</dfn>, we refine the conceptual process model. \" +\n    \"We can do this by identifying those types of events that account for the causation of relevant state \" +\n    \"changes and follow-up events by triggering a causal regularity. Any event type modeled in the \" +\n    \"information model could potentially trigger a causal regularity. For simplicity, however, we may \" +\n    \"omit those types of events, which can be considered to temporally coincide with events of another type.\";\n\n/* No longer used - can be DROPPED */\noes.ui.createBackToSimulationLinks = function () {\n  var backLinkEl = document.createElement(\"a\"),\n      divEl = document.createElement(\"div\"),\n      pEl = document.createElement(\"p\");\n  backLinkEl.href = \"index.html\";\n  backLinkEl.textContent = oes.ui.translate(\"Back to simulation\");\n  divEl.className = \"backLink\";\n  divEl.appendChild( backLinkEl);\n  document.getElementById(\"title\").appendChild( divEl);\n  pEl.appendChild( backLinkEl.cloneNode(true));\n  // add the \"Back to simulation\" links to beginning and end of page\n  //document.body.insertBefore(pEl, document.body.firstChild);\n  document.body.appendChild( pEl);\n};\n\noes.ui.setupDescription = function () {\n  var el=null, refEl=null, pageTitleEl=null, mainSectElems=null, mainSectEl=null,\n      trans = oes.ui.translate, txt=\"\",\n      explReqElems=null, explReqEl=null, explEl=null, i=0,\n      frontMatterEl = document.querySelector(\"body > div#frontMatter\"),\n      sysNarr = document.getElementById(\"systemNarrative\"),  // optional\n      shortDescrEl = document.getElementById(\"shortDescription\");  // mandatory\n  var docLocale = document.documentElement.lang,\n      simName = String( sim.scenario.name || sim.model.name),\n      simTitle = String( sim.scenario.title || sim.model.title),\n      created = new Date( sim.model.created),\n      modified = new Date( sim.model.modified),\n      license = sim.model.license, licenseLinks=[],\n      contributions = sim.model.contributors ?\n          \", \"+ trans(\"with contributions by\") +\" \"+ sim.model.contributors : \"\",\n      artworkCredits = !sim.config.artworkCredits ? \"\" :\n          \" | <a href='#' title='\"+ sim.config.artworkCredits + \"'>\"+ trans(\"Artwork Credits\") +\"</a>\";\n  var dateTimeFmt = new Intl.DateTimeFormat( docLocale);\n  licenseLinks[\"CC BY\"] = \"https://creativecommons.org/licenses/by/4.0/\";\n  licenseLinks[\"CC BY-SA\"] = \"https://creativecommons.org/licenses/by-sa/4.0/\";\n  licenseLinks[\"CC BY-NC\"] = \"https://creativecommons.org/licenses/by-nc/4.0/\";\n  if (licenseLinks[license]) {\n    license = \"<a href='\"+ licenseLinks[license] +\"'>\"+ license +\"</a>\";\n  }\n  // Set HTML title\n  if (!document.title){\n    document.title = String(sim.scenario.name || sim.model.name) + \"Object Event Simulation\";\n  }\n  // create page heading\n  pageTitleEl = document.querySelector(\"#frontMatter h1\");\n  if (!pageTitleEl) {\n    pageTitleEl = document.createElement(\"h1\");\n    frontMatterEl.insertBefore( pageTitleEl, frontMatterEl.firstElementChild);\n    pageTitleEl.innerHTML = \"<span>\"+ simTitle +\"</span>\";\n  }\n  if (simTitle.length > 38) pageTitleEl.style.fontSize = \"140%\";\n  el = document.createElement(\"div\");\n  el.innerHTML = trans(\"Model name\") +\": \" + simName + \", \" +\n      trans(\"available on\") +\" <a href='https://sim4edu.com'>Simulation-for-Education</a>.\";\n  dom.insertAfter( el, pageTitleEl);\n  refEl = el;\n  if (sim.model.source) {\n    el = document.createElement(\"p\");\n    el.innerHTML = trans(\"Based on\") +\" \"+ sim.model.source;\n    dom.insertAfter( el, refEl);\n    refEl = el;\n  }\n  el = document.createElement(\"p\");\n  el.id = \"metaData\";\n  el.innerHTML = trans(\"Copyright\") +\" \"+ sim.model.creator + \" (\"+ license + \"), \" +\n      trans(\"created on\") +\" \"+ dateTimeFmt.format( created) +\" \"+ trans(\"with the\") + \" \" +\n      trans(\"<i>Object Event Simulation (OES)</i> framework\") +\" <a href='https://www.sim4edu.com/downloads'>OESjs</a>, \"+\n      trans(\"last modified on\") +\" \"+ dateTimeFmt.format( modified) + contributions +\n      artworkCredits + \" | <a href='https://sim4edu.com/credits.html'>\" + trans(\"OESjs Credits\") +\"</a>\";\n  dom.insertAfter( el, refEl);\n  // create Model Description\n  el = document.createElement(\"h1\");\n  el.textContent = trans(\"Model Description\");\n  shortDescrEl.appendChild(el);\n  if (sim.model.shortDescription.includes(\"<p>\")) el = document.createElement(\"div\");\n  else el = document.createElement(\"p\");\n  el.innerHTML = sim.model.shortDescription;\n  shortDescrEl.appendChild(el);\n  // create System Narrative\n  if (sim.model.systemNarrative) {\n    if (sysNarr) sysNarr.innerHTML = sim.model.systemNarrative;\n    else {\n      sysNarr = document.createElement(\"section\");\n      el = document.createElement(\"h1\");\n      el.textContent = trans(\"System Narrative\");\n      sysNarr.appendChild(el);\n      if (sim.model.systemNarrative.includes(\"<p>\")) el = document.createElement(\"div\");\n      else el = document.createElement(\"p\");\n      el.innerHTML = sim.model.systemNarrative;\n      sysNarr.appendChild(el);\n      // body.firstElementChild = header\n      document.body.firstElementChild.insertBefore( sysNarr, shortDescrEl);\n    }\n  }\n  mainSectElems = document.querySelectorAll(\".collapsed\");\n  for (i=0; i < mainSectElems.length; i++) {\n    mainSectEl = mainSectElems[i];\n    explReqEl = mainSectEl.querySelector(\"sup.expl-req\");  // explanation request \"?\"\n    if (explReqEl) {\n      explEl = mainSectEl.querySelector(\"div.expl\");\n      txt = (oes.ui.i18n && oes.ui.i18n.translations && oes.ui.i18n.translations[explEl.id]) ||\n\t      oes.ui.explanation[explEl.id];\n      explReqEl.title = dom.convertHtml2Text( txt);\n    }\n    mainSectEl.firstElementChild.addEventListener(\"click\", function (e) {\n      var sectionEl = e.target.tagName===\"SPAN\"||e.target.tagName===\"SUP\" ?\n              e.target.parentNode.parentNode : e.target.parentNode;\n      var explReqEl = sectionEl.querySelector(\"sup.expl-req\"),\n          explEl = sectionEl.querySelector(\"div.expl\");\n      var transl = oes.ui.i18n && oes.ui.i18n.translations;\n      // toggle display of content by switching class\n      if (sectionEl.classList.contains(\"collapsed\")) {\n        sectionEl.classList.remove(\"collapsed\");\n        sectionEl.firstElementChild.firstElementChild.textContent = \"▼\";\n        if (explReqEl) explReqEl.title = \"\";\n      } else {\n        sectionEl.classList.add(\"collapsed\");\n        sectionEl.firstElementChild.firstElementChild.textContent = \"►\";\n        if (explReqEl) {\n          explReqEl.title = dom.convertHtml2Text((transl && transl[explEl.id]) ||\n              oes.ui.explanation[explEl.id]);\n        }\n      }\n      //e.preventDefault();\n    });\n  }\n  // define event handlers for explanation requests\n  explReqElems = document.querySelectorAll(\"sup.expl-req\");\n  for (i=0; i < explReqElems.length; i++) {\n    explReqElems[i].addEventListener(\"mouseover\", function (e) {\n      var sectEl = e.target.parentNode.parentNode,\n          explEl = sectEl.querySelector(\"div.expl\");\n      var transl = oes.ui.i18n && oes.ui.i18n.translations,\n          explTxt = (transl && transl[explEl.id]) || oes.ui.explanation[explEl.id];\n      if (!sectEl.classList.contains(\"collapsed\")) {\n        if (!explEl.innerHTML) explEl.innerHTML = explTxt;\n        explEl.style.display = \"block\";\n      }\n    });\n    explReqElems[i].addEventListener(\"mouseout\", function (e) {\n      var explEl = e.target.parentNode.parentNode.querySelector(\"div.expl\");\n      explEl.style.display = \"none\";\n    });\n    /*\n    explReqElems[i].addEventListener(\"click\", function (e) {\n      var sectionEl = e.target.tagName === \"SPAN\" ?\n          e.target.parentNode.parentNode : e.target.parentNode;\n      // toggle display of content by switching class\n      if (sectionEl.classList.contains(\"collapsed\")) {\n        sectionEl.classList.remove(\"collapsed\");\n        sectionEl.firstElementChild.firstElementChild.textContent = \"−\";\n      }\n      else {\n        sectionEl.classList.add(\"collapsed\");\n        sectionEl.firstElementChild.firstElementChild.textContent = \"+\";\n      }\n      //e.preventDefault();\n    });\n    */\n  }\n};\n","source":"sims/framework/description.js","raw":"var oes = oes || {ui: {explanation:{}}};\n/**\n * Insert a new node/element after another one\n */\ndom = {\n  insertAfter: function (newNode, referenceNode) {\n    referenceNode.parentNode.insertBefore( newNode, referenceNode.nextSibling);\n  }\n};\n/**\n * Convert HTML to Text\n * @param {string} htmlElemContent\n * @return {string}\n */\ndom.convertHtml2Text = function (htmlElemContent) {\n  var blockElem = document.createElement(\"div\");\n  blockElem.innerHTML = htmlElemContent;\n  return blockElem.textContent;\n};\noes.ui.translate = function (txt) {\n  var trans = oes.ui.i18n && oes.ui.i18n.translations;\n  if (typeof trans === \"object\" && txt in trans) return trans[txt];\n  else return txt;\n}\n\noes.ui.explanation[\"expl-CM\"] = \"The <dfn>conceptual model</dfn>, also called <i>domain model</i>, \" +\n    \"describes the real-world <i>system under investigation</i> by identifying the relevant \" +\n    \"types of objects and events, and describing their dynamics, allowing to understand \" +\n    \"what's going on in the system.\";\noes.ui.explanation[\"expl-CIM\"] = \"<p>A <dfn>conceptual information model</dfn> describes the subject matter \" +\n    \"vocabulary used, e.g., in the system narrative, in a semi-formal way. Such a vocabulary \" +\n    \"essentially consists of names for</p> \" +\n    \"<ul><li><strong>types</strong>, corresponding to <i>classes</i> in OO modeling, or <i>unary \" +\n    \"predicates</i> in formal logic,</li> \" +\n    \"<li><strong>properties</strong> corresponding to <i>binary predicates</i> in formal logic,</li>\" +\n    \"<li><strong>associations</strong> corresponding to <i>n-ary predicates</i> (with <i>n</i> > 1) in formal logic.</li></ul> \" +\n    \"<p>The main categories of types are <i>object types</i> and <i>event types</i>. A simple form of \" +\n    \"conceptual information model is obtained by providing a list of each of them, while a more elaborated \" +\n    \"model, preferably in the form of a UML class diagram, also defines properties and associations, \" +\n    \"including the <strong>participation</strong> of objects (of certain types) in events (of certain types).</p>\";\noes.ui.explanation[\"expl-CPM\"] = \"<p>A <dfn>conceptual process model</dfn> should include the event types \"+\n    \"identified in the conceptual information model, and describe in which temporal sequences events may occur, \"+\n\t  \"based on conditional and parallel branching. We can do this by describing, for each of these event types, \"+\n\t  \"the <b><i>causal regularity</i></b> associated with it \" +\n    \"in the form of an <b><i>event rule</i></b> that defines the <b><i>state changes</i></b> and \" +\n    \"<b><i>follow-up events</i></b> caused by events of that type.</li></ol>\" +\n    \"For simplicity, we may merge those types of events, which can be considered to temporally \" +\n    \"coincide. This is the case whenever an event unconditionally causes an immediately succeeding follow-up \" +\n    \"event.</p><p>A conceptual process model can be defined in the form of an <b><i>event rule table</i></b> \" +\n    \"or in the form of BPMN process diagrams that visualize the event rules.</p>\";\noes.ui.explanation[\"expl-DM\"] = \"The simulation <dfn>design model</dfn> defines a computational design for a simulation \" +\n    \"based on a conceptual model. Unlike the conceptual model, the design is tailored towards the purpose \" +\n    \"of the simulation project (e.g., for answering certain research questions in a social system analysis \" +\n    \"project or in a technical system engineering project, or for teaching certain facts about a system \" +\n    \"in an educational simulation project). Although the design model is independent of a specific technology \" +\n    \"platform, it is typically based on object-oriented modeling (e.g., with UML diagrams). It can be \" +\n    \"implemented in different ways with any specific technology choice, typically using an object-oriented \" +\n    \"programming approach.\";\noes.ui.explanation[\"expl-IDM\"] = \"<p>An <dfn>information design model</dfn> is normally derived from a conceptual \" +\n    \"information model by <b><i>choosing the design-relevant types</i></b> of objects and events and enrich \" +\n    \"them with design details, while dropping other object types and event types not deemed relevant for \" +\n    \"the simulation design. Adding design details includes specifying <b><i>property ranges</i></b> as well \" +\n    \"as adding multiplicity and other types of <b><i>constraints</i></b>.</p>\" +\n    \"<p>In addition to these general information modeling issues, there are also a few issues, which \" +\n    \"are specific for simulation modeling:</p>\" +\n    \"<ol><li>If the simulation is to deal with <b><i>objects in space</i></b>, the design model must be \" +\n    \"based on a choice of <b><i>space model</i></b>: one-dimensional (1D) discrete space, two-dimensional \" +\n    \"(2D) discrete space (also called <i>grid space</i>), three-dimensional (3D) discrete space, \" +\n    \"and 1D/2D/3D continuous space. The chosen space model implies a corresponding form of spatial \" +\n    \"<i>positions</i> (or <i>locations</i>): a 1-, 2- or 3-tuple of integers or decimal numbers.</li>\" +\n    \"<li>The information design model must distinguish between <b><i>exogenous</i></b> and \" +\n    \"<b><i>caused</i></b> (or <i>endogenous</i>) event types. For any exogenous event type, the \" +\n    \"<b><i>recurrence</i></b> of events of that type must be specified, typically in the form of a \" +\n    \"random variable, but in some cases it may be a constant (like 'on each Monday'). The recurrence \" +\n    \"defines the elapsed time between two consecutive events of the given type (their inter-occurrence \" +\n    \"time). It can be specified within the event class concerned in the form of a special method \" +\n    \"with the predefined name 'recurrence'.</li>\" +\n    \"<li>Certain simulation variables may be subject to random variation, so they can \" +\n    \"be considered to be <b><i>random variables</i></b> with an underlying probability distribution that \" +\n    \"is sampled by a corresponding method stereotyped «rv» for categorizing it as a <i>random variate</i> \" +\n    \"sampling method. The underlying probability distribution can be indicated in the model diagram by \" +\n    \"appending a symbolic expression, denoting a distribution (with parameter values), to the method \" +\n    \"definition clause. For instance, <i>U(1,6)</i> may denote the uniform distribution with lower bound 1 \" +\n    \"and upper bound 6, while <i>Exp(1.5)</i> may denote the exponential distribution with event rate 1.5.</li> \" +\n    \"</ol>\";\noes.ui.explanation[\"expl-PDM\"] = \"In the <dfn>process design model</dfn>, we refine the conceptual process model. \" +\n    \"We can do this by identifying those types of events that account for the causation of relevant state \" +\n    \"changes and follow-up events by triggering a causal regularity. Any event type modeled in the \" +\n    \"information model could potentially trigger a causal regularity. For simplicity, however, we may \" +\n    \"omit those types of events, which can be considered to temporally coincide with events of another type.\";\n\n/* No longer used - can be DROPPED */\noes.ui.createBackToSimulationLinks = function () {\n  var backLinkEl = document.createElement(\"a\"),\n      divEl = document.createElement(\"div\"),\n      pEl = document.createElement(\"p\");\n  backLinkEl.href = \"index.html\";\n  backLinkEl.textContent = oes.ui.translate(\"Back to simulation\");\n  divEl.className = \"backLink\";\n  divEl.appendChild( backLinkEl);\n  document.getElementById(\"title\").appendChild( divEl);\n  pEl.appendChild( backLinkEl.cloneNode(true));\n  // add the \"Back to simulation\" links to beginning and end of page\n  //document.body.insertBefore(pEl, document.body.firstChild);\n  document.body.appendChild( pEl);\n};\n\noes.ui.setupDescription = function () {\n  var el=null, refEl=null, pageTitleEl=null, mainSectElems=null, mainSectEl=null,\n      trans = oes.ui.translate, txt=\"\",\n      explReqElems=null, explReqEl=null, explEl=null, i=0,\n      frontMatterEl = document.querySelector(\"body > div#frontMatter\"),\n      sysNarr = document.getElementById(\"systemNarrative\"),  // optional\n      shortDescrEl = document.getElementById(\"shortDescription\");  // mandatory\n  var docLocale = document.documentElement.lang,\n      simName = String( sim.scenario.name || sim.model.name),\n      simTitle = String( sim.scenario.title || sim.model.title),\n      created = new Date( sim.model.created),\n      modified = new Date( sim.model.modified),\n      license = sim.model.license, licenseLinks=[],\n      contributions = sim.model.contributors ?\n          \", \"+ trans(\"with contributions by\") +\" \"+ sim.model.contributors : \"\",\n      artworkCredits = !sim.config.artworkCredits ? \"\" :\n          \" | <a href='#' title='\"+ sim.config.artworkCredits + \"'>\"+ trans(\"Artwork Credits\") +\"</a>\";\n  var dateTimeFmt = new Intl.DateTimeFormat( docLocale);\n  licenseLinks[\"CC BY\"] = \"https://creativecommons.org/licenses/by/4.0/\";\n  licenseLinks[\"CC BY-SA\"] = \"https://creativecommons.org/licenses/by-sa/4.0/\";\n  licenseLinks[\"CC BY-NC\"] = \"https://creativecommons.org/licenses/by-nc/4.0/\";\n  if (licenseLinks[license]) {\n    license = \"<a href='\"+ licenseLinks[license] +\"'>\"+ license +\"</a>\";\n  }\n  // Set HTML title\n  if (!document.title){\n    document.title = String(sim.scenario.name || sim.model.name) + \"Object Event Simulation\";\n  }\n  // create page heading\n  pageTitleEl = document.querySelector(\"#frontMatter h1\");\n  if (!pageTitleEl) {\n    pageTitleEl = document.createElement(\"h1\");\n    frontMatterEl.insertBefore( pageTitleEl, frontMatterEl.firstElementChild);\n    pageTitleEl.innerHTML = \"<span>\"+ simTitle +\"</span>\";\n  }\n  if (simTitle.length > 38) pageTitleEl.style.fontSize = \"140%\";\n  el = document.createElement(\"div\");\n  el.innerHTML = trans(\"Model name\") +\": \" + simName + \", \" +\n      trans(\"available on\") +\" <a href='https://sim4edu.com'>Simulation-for-Education</a>.\";\n  dom.insertAfter( el, pageTitleEl);\n  refEl = el;\n  if (sim.model.source) {\n    el = document.createElement(\"p\");\n    el.innerHTML = trans(\"Based on\") +\" \"+ sim.model.source;\n    dom.insertAfter( el, refEl);\n    refEl = el;\n  }\n  el = document.createElement(\"p\");\n  el.id = \"metaData\";\n  el.innerHTML = trans(\"Copyright\") +\" \"+ sim.model.creator + \" (\"+ license + \"), \" +\n      trans(\"created on\") +\" \"+ dateTimeFmt.format( created) +\" \"+ trans(\"with the\") + \" \" +\n      trans(\"<i>Object Event Simulation (OES)</i> framework\") +\" <a href='https://www.sim4edu.com/downloads'>OESjs</a>, \"+\n      trans(\"last modified on\") +\" \"+ dateTimeFmt.format( modified) + contributions +\n      artworkCredits + \" | <a href='https://sim4edu.com/credits.html'>\" + trans(\"OESjs Credits\") +\"</a>\";\n  dom.insertAfter( el, refEl);\n  // create Model Description\n  el = document.createElement(\"h1\");\n  el.textContent = trans(\"Model Description\");\n  shortDescrEl.appendChild(el);\n  if (sim.model.shortDescription.includes(\"<p>\")) el = document.createElement(\"div\");\n  else el = document.createElement(\"p\");\n  el.innerHTML = sim.model.shortDescription;\n  shortDescrEl.appendChild(el);\n  // create System Narrative\n  if (sim.model.systemNarrative) {\n    if (sysNarr) sysNarr.innerHTML = sim.model.systemNarrative;\n    else {\n      sysNarr = document.createElement(\"section\");\n      el = document.createElement(\"h1\");\n      el.textContent = trans(\"System Narrative\");\n      sysNarr.appendChild(el);\n      if (sim.model.systemNarrative.includes(\"<p>\")) el = document.createElement(\"div\");\n      else el = document.createElement(\"p\");\n      el.innerHTML = sim.model.systemNarrative;\n      sysNarr.appendChild(el);\n      // body.firstElementChild = header\n      document.body.firstElementChild.insertBefore( sysNarr, shortDescrEl);\n    }\n  }\n  mainSectElems = document.querySelectorAll(\".collapsed\");\n  for (i=0; i < mainSectElems.length; i++) {\n    mainSectEl = mainSectElems[i];\n    explReqEl = mainSectEl.querySelector(\"sup.expl-req\");  // explanation request \"?\"\n    if (explReqEl) {\n      explEl = mainSectEl.querySelector(\"div.expl\");\n      txt = (oes.ui.i18n && oes.ui.i18n.translations && oes.ui.i18n.translations[explEl.id]) ||\n\t      oes.ui.explanation[explEl.id];\n      explReqEl.title = dom.convertHtml2Text( txt);\n    }\n    mainSectEl.firstElementChild.addEventListener(\"click\", function (e) {\n      var sectionEl = e.target.tagName===\"SPAN\"||e.target.tagName===\"SUP\" ?\n              e.target.parentNode.parentNode : e.target.parentNode;\n      var explReqEl = sectionEl.querySelector(\"sup.expl-req\"),\n          explEl = sectionEl.querySelector(\"div.expl\");\n      var transl = oes.ui.i18n && oes.ui.i18n.translations;\n      // toggle display of content by switching class\n      if (sectionEl.classList.contains(\"collapsed\")) {\n        sectionEl.classList.remove(\"collapsed\");\n        sectionEl.firstElementChild.firstElementChild.textContent = \"▼\";\n        if (explReqEl) explReqEl.title = \"\";\n      } else {\n        sectionEl.classList.add(\"collapsed\");\n        sectionEl.firstElementChild.firstElementChild.textContent = \"►\";\n        if (explReqEl) {\n          explReqEl.title = dom.convertHtml2Text((transl && transl[explEl.id]) ||\n              oes.ui.explanation[explEl.id]);\n        }\n      }\n      //e.preventDefault();\n    });\n  }\n  // define event handlers for explanation requests\n  explReqElems = document.querySelectorAll(\"sup.expl-req\");\n  for (i=0; i < explReqElems.length; i++) {\n    explReqElems[i].addEventListener(\"mouseover\", function (e) {\n      var sectEl = e.target.parentNode.parentNode,\n          explEl = sectEl.querySelector(\"div.expl\");\n      var transl = oes.ui.i18n && oes.ui.i18n.translations,\n          explTxt = (transl && transl[explEl.id]) || oes.ui.explanation[explEl.id];\n      if (!sectEl.classList.contains(\"collapsed\")) {\n        if (!explEl.innerHTML) explEl.innerHTML = explTxt;\n        explEl.style.display = \"block\";\n      }\n    });\n    explReqElems[i].addEventListener(\"mouseout\", function (e) {\n      var explEl = e.target.parentNode.parentNode.querySelector(\"div.expl\");\n      explEl.style.display = \"none\";\n    });\n    /*\n    explReqElems[i].addEventListener(\"click\", function (e) {\n      var sectionEl = e.target.tagName === \"SPAN\" ?\n          e.target.parentNode.parentNode : e.target.parentNode;\n      // toggle display of content by switching class\n      if (sectionEl.classList.contains(\"collapsed\")) {\n        sectionEl.classList.remove(\"collapsed\");\n        sectionEl.firstElementChild.firstElementChild.textContent = \"−\";\n      }\n      else {\n        sectionEl.classList.add(\"collapsed\");\n        sectionEl.firstElementChild.firstElementChild.textContent = \"+\";\n      }\n      //e.preventDefault();\n    });\n    */\n  }\n};\n","date":"2019-04-16T15:44:34.149Z","updated":"2019-04-16T15:44:34.149Z","path":"sims/framework/description.js","layout":"false","title":"","comments":1,"_id":"cjx8wr3i5000kj1h5ft8rujzl"},{"_content":"/* PrismJS 1.15.0\nhttps://prismjs.com/download.html#themes=prism&languages=clike+javascript */\nvar _self=\"undefined\"!=typeof window?window:\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},Prism=function(){var e=/\\blang(?:uage)?-([\\w-]+)\\b/i,t=0,n=_self.Prism={manual:_self.Prism&&_self.Prism.manual,disableWorkerMessageHandler:_self.Prism&&_self.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof r?new r(e.type,n.util.encode(e.content),e.alias):\"Array\"===n.util.type(e)?e.map(n.util.encode):e.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/\\u00a0/g,\" \")},type:function(e){return Object.prototype.toString.call(e).match(/\\[object (\\w+)\\]/)[1]},objId:function(e){return e.__id||Object.defineProperty(e,\"__id\",{value:++t}),e.__id},clone:function(e,t){var r=n.util.type(e);switch(t=t||{},r){case\"Object\":if(t[n.util.objId(e)])return t[n.util.objId(e)];var a={};t[n.util.objId(e)]=a;for(var l in e)e.hasOwnProperty(l)&&(a[l]=n.util.clone(e[l],t));return a;case\"Array\":if(t[n.util.objId(e)])return t[n.util.objId(e)];var a=[];return t[n.util.objId(e)]=a,e.forEach(function(e,r){a[r]=n.util.clone(e,t)}),a}return e}},languages:{extend:function(e,t){var r=n.util.clone(n.languages[e]);for(var a in t)r[a]=t[a];return r},insertBefore:function(e,t,r,a){a=a||n.languages;var l=a[e];if(2==arguments.length){r=arguments[1];for(var i in r)r.hasOwnProperty(i)&&(l[i]=r[i]);return l}var o={};for(var s in l)if(l.hasOwnProperty(s)){if(s==t)for(var i in r)r.hasOwnProperty(i)&&(o[i]=r[i]);o[s]=l[s]}var u=a[e];return a[e]=o,n.languages.DFS(n.languages,function(t,n){n===u&&t!=e&&(this[t]=o)}),o},DFS:function(e,t,r,a){a=a||{};for(var l in e)e.hasOwnProperty(l)&&(t.call(e,l,e[l],r||l),\"Object\"!==n.util.type(e[l])||a[n.util.objId(e[l])]?\"Array\"!==n.util.type(e[l])||a[n.util.objId(e[l])]||(a[n.util.objId(e[l])]=!0,n.languages.DFS(e[l],t,l,a)):(a[n.util.objId(e[l])]=!0,n.languages.DFS(e[l],t,null,a)))}},plugins:{},highlightAll:function(e,t){n.highlightAllUnder(document,e,t)},highlightAllUnder:function(e,t,r){var a={callback:r,selector:'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'};n.hooks.run(\"before-highlightall\",a);for(var l,i=a.elements||e.querySelectorAll(a.selector),o=0;l=i[o++];)n.highlightElement(l,t===!0,a.callback)},highlightElement:function(t,r,a){for(var l,i,o=t;o&&!e.test(o.className);)o=o.parentNode;o&&(l=(o.className.match(e)||[,\"\"])[1].toLowerCase(),i=n.languages[l]),t.className=t.className.replace(e,\"\").replace(/\\s+/g,\" \")+\" language-\"+l,t.parentNode&&(o=t.parentNode,/pre/i.test(o.nodeName)&&(o.className=o.className.replace(e,\"\").replace(/\\s+/g,\" \")+\" language-\"+l));var s=t.textContent,u={element:t,language:l,grammar:i,code:s};if(n.hooks.run(\"before-sanity-check\",u),!u.code||!u.grammar)return u.code&&(n.hooks.run(\"before-highlight\",u),u.element.textContent=u.code,n.hooks.run(\"after-highlight\",u)),n.hooks.run(\"complete\",u),void 0;if(n.hooks.run(\"before-highlight\",u),r&&_self.Worker){var g=new Worker(n.filename);g.onmessage=function(e){u.highlightedCode=e.data,n.hooks.run(\"before-insert\",u),u.element.innerHTML=u.highlightedCode,a&&a.call(u.element),n.hooks.run(\"after-highlight\",u),n.hooks.run(\"complete\",u)},g.postMessage(JSON.stringify({language:u.language,code:u.code,immediateClose:!0}))}else u.highlightedCode=n.highlight(u.code,u.grammar,u.language),n.hooks.run(\"before-insert\",u),u.element.innerHTML=u.highlightedCode,a&&a.call(t),n.hooks.run(\"after-highlight\",u),n.hooks.run(\"complete\",u)},highlight:function(e,t,a){var l={code:e,grammar:t,language:a};return n.hooks.run(\"before-tokenize\",l),l.tokens=n.tokenize(l.code,l.grammar),n.hooks.run(\"after-tokenize\",l),r.stringify(n.util.encode(l.tokens),l.language)},matchGrammar:function(e,t,r,a,l,i,o){var s=n.Token;for(var u in r)if(r.hasOwnProperty(u)&&r[u]){if(u==o)return;var g=r[u];g=\"Array\"===n.util.type(g)?g:[g];for(var c=0;c<g.length;++c){var h=g[c],f=h.inside,d=!!h.lookbehind,m=!!h.greedy,p=0,y=h.alias;if(m&&!h.pattern.global){var v=h.pattern.toString().match(/[imuy]*$/)[0];h.pattern=RegExp(h.pattern.source,v+\"g\")}h=h.pattern||h;for(var b=a,k=l;b<t.length;k+=t[b].length,++b){var w=t[b];if(t.length>e.length)return;if(!(w instanceof s)){if(m&&b!=t.length-1){h.lastIndex=k;var _=h.exec(e);if(!_)break;for(var j=_.index+(d?_[1].length:0),P=_.index+_[0].length,A=b,x=k,O=t.length;O>A&&(P>x||!t[A].type&&!t[A-1].greedy);++A)x+=t[A].length,j>=x&&(++b,k=x);if(t[b]instanceof s)continue;I=A-b,w=e.slice(k,x),_.index-=k}else{h.lastIndex=0;var _=h.exec(w),I=1}if(_){d&&(p=_[1]?_[1].length:0);var j=_.index+p,_=_[0].slice(p),P=j+_.length,N=w.slice(0,j),S=w.slice(P),C=[b,I];N&&(++b,k+=N.length,C.push(N));var E=new s(u,f?n.tokenize(_,f):_,y,_,m);if(C.push(E),S&&C.push(S),Array.prototype.splice.apply(t,C),1!=I&&n.matchGrammar(e,t,r,b,k,!0,u),i)break}else if(i)break}}}}},tokenize:function(e,t){var r=[e],a=t.rest;if(a){for(var l in a)t[l]=a[l];delete t.rest}return n.matchGrammar(e,r,t,0,0,!1),r},hooks:{all:{},add:function(e,t){var r=n.hooks.all;r[e]=r[e]||[],r[e].push(t)},run:function(e,t){var r=n.hooks.all[e];if(r&&r.length)for(var a,l=0;a=r[l++];)a(t)}}},r=n.Token=function(e,t,n,r,a){this.type=e,this.content=t,this.alias=n,this.length=0|(r||\"\").length,this.greedy=!!a};if(r.stringify=function(e,t,a){if(\"string\"==typeof e)return e;if(\"Array\"===n.util.type(e))return e.map(function(n){return r.stringify(n,t,e)}).join(\"\");var l={type:e.type,content:r.stringify(e.content,t,a),tag:\"span\",classes:[\"token\",e.type],attributes:{},language:t,parent:a};if(e.alias){var i=\"Array\"===n.util.type(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(l.classes,i)}n.hooks.run(\"wrap\",l);var o=Object.keys(l.attributes).map(function(e){return e+'=\"'+(l.attributes[e]||\"\").replace(/\"/g,\"&quot;\")+'\"'}).join(\" \");return\"<\"+l.tag+' class=\"'+l.classes.join(\" \")+'\"'+(o?\" \"+o:\"\")+\">\"+l.content+\"</\"+l.tag+\">\"},!_self.document)return _self.addEventListener?(n.disableWorkerMessageHandler||_self.addEventListener(\"message\",function(e){var t=JSON.parse(e.data),r=t.language,a=t.code,l=t.immediateClose;_self.postMessage(n.highlight(a,n.languages[r],r)),l&&_self.close()},!1),_self.Prism):_self.Prism;var a=document.currentScript||[].slice.call(document.getElementsByTagName(\"script\")).pop();return a&&(n.filename=a.src,n.manual||a.hasAttribute(\"data-manual\")||(\"loading\"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(n.highlightAll):window.setTimeout(n.highlightAll,16):document.addEventListener(\"DOMContentLoaded\",n.highlightAll))),_self.Prism}();\"undefined\"!=typeof module&&module.exports&&(module.exports=Prism),\"undefined\"!=typeof global&&(global.Prism=Prism);\nPrism.languages.clike={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"class-name\":{pattern:/((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\\\]/}},keyword:/\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\"boolean\":/\\b(?:true|false)\\b/,\"function\":/[a-z0-9_]+(?=\\()/i,number:/\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,operator:/--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,punctuation:/[{}[\\];(),.:]/};\nPrism.languages.javascript=Prism.languages.extend(\"clike\",{\"class-name\":[Prism.languages.clike[\"class-name\"],{pattern:/(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,lookbehind:!0}],keyword:[{pattern:/((?:^|})\\s*)(?:catch|finally)\\b/,lookbehind:!0},/\\b(?:as|async|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\\b/],number:/\\b(?:(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+)n?|\\d+n|NaN|Infinity)\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\"function\":/[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*\\(|\\.(?:apply|bind|call)\\()/,operator:/-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/}),Prism.languages.javascript[\"class-name\"][0].pattern=/(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/,Prism.languages.insertBefore(\"javascript\",\"keyword\",{regex:{pattern:/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[[^\\]\\r\\n]+]|\\\\.|[^\\/\\\\\\[\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})\\]]))/,lookbehind:!0,greedy:!0},\"function-variable\":{pattern:/[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:function\\b|(?:\\([^()]*\\)|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i,alias:\"function\"},constant:/\\b[A-Z][A-Z\\d_]*\\b/}),Prism.languages.insertBefore(\"javascript\",\"string\",{\"template-string\":{pattern:/`(?:\\\\[\\s\\S]|\\${[^}]+}|[^\\\\`])*`/,greedy:!0,inside:{interpolation:{pattern:/\\${[^}]+}/,inside:{\"interpolation-punctuation\":{pattern:/^\\${|}$/,alias:\"punctuation\"},rest:Prism.languages.javascript}},string:/[\\s\\S]+/}}}),Prism.languages.markup&&Prism.languages.insertBefore(\"markup\",\"tag\",{script:{pattern:/(<script[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,lookbehind:!0,inside:Prism.languages.javascript,alias:\"language-javascript\",greedy:!0}}),Prism.languages.js=Prism.languages.javascript;\n","source":"sims/framework/prism.js","raw":"/* PrismJS 1.15.0\nhttps://prismjs.com/download.html#themes=prism&languages=clike+javascript */\nvar _self=\"undefined\"!=typeof window?window:\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},Prism=function(){var e=/\\blang(?:uage)?-([\\w-]+)\\b/i,t=0,n=_self.Prism={manual:_self.Prism&&_self.Prism.manual,disableWorkerMessageHandler:_self.Prism&&_self.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof r?new r(e.type,n.util.encode(e.content),e.alias):\"Array\"===n.util.type(e)?e.map(n.util.encode):e.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/\\u00a0/g,\" \")},type:function(e){return Object.prototype.toString.call(e).match(/\\[object (\\w+)\\]/)[1]},objId:function(e){return e.__id||Object.defineProperty(e,\"__id\",{value:++t}),e.__id},clone:function(e,t){var r=n.util.type(e);switch(t=t||{},r){case\"Object\":if(t[n.util.objId(e)])return t[n.util.objId(e)];var a={};t[n.util.objId(e)]=a;for(var l in e)e.hasOwnProperty(l)&&(a[l]=n.util.clone(e[l],t));return a;case\"Array\":if(t[n.util.objId(e)])return t[n.util.objId(e)];var a=[];return t[n.util.objId(e)]=a,e.forEach(function(e,r){a[r]=n.util.clone(e,t)}),a}return e}},languages:{extend:function(e,t){var r=n.util.clone(n.languages[e]);for(var a in t)r[a]=t[a];return r},insertBefore:function(e,t,r,a){a=a||n.languages;var l=a[e];if(2==arguments.length){r=arguments[1];for(var i in r)r.hasOwnProperty(i)&&(l[i]=r[i]);return l}var o={};for(var s in l)if(l.hasOwnProperty(s)){if(s==t)for(var i in r)r.hasOwnProperty(i)&&(o[i]=r[i]);o[s]=l[s]}var u=a[e];return a[e]=o,n.languages.DFS(n.languages,function(t,n){n===u&&t!=e&&(this[t]=o)}),o},DFS:function(e,t,r,a){a=a||{};for(var l in e)e.hasOwnProperty(l)&&(t.call(e,l,e[l],r||l),\"Object\"!==n.util.type(e[l])||a[n.util.objId(e[l])]?\"Array\"!==n.util.type(e[l])||a[n.util.objId(e[l])]||(a[n.util.objId(e[l])]=!0,n.languages.DFS(e[l],t,l,a)):(a[n.util.objId(e[l])]=!0,n.languages.DFS(e[l],t,null,a)))}},plugins:{},highlightAll:function(e,t){n.highlightAllUnder(document,e,t)},highlightAllUnder:function(e,t,r){var a={callback:r,selector:'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'};n.hooks.run(\"before-highlightall\",a);for(var l,i=a.elements||e.querySelectorAll(a.selector),o=0;l=i[o++];)n.highlightElement(l,t===!0,a.callback)},highlightElement:function(t,r,a){for(var l,i,o=t;o&&!e.test(o.className);)o=o.parentNode;o&&(l=(o.className.match(e)||[,\"\"])[1].toLowerCase(),i=n.languages[l]),t.className=t.className.replace(e,\"\").replace(/\\s+/g,\" \")+\" language-\"+l,t.parentNode&&(o=t.parentNode,/pre/i.test(o.nodeName)&&(o.className=o.className.replace(e,\"\").replace(/\\s+/g,\" \")+\" language-\"+l));var s=t.textContent,u={element:t,language:l,grammar:i,code:s};if(n.hooks.run(\"before-sanity-check\",u),!u.code||!u.grammar)return u.code&&(n.hooks.run(\"before-highlight\",u),u.element.textContent=u.code,n.hooks.run(\"after-highlight\",u)),n.hooks.run(\"complete\",u),void 0;if(n.hooks.run(\"before-highlight\",u),r&&_self.Worker){var g=new Worker(n.filename);g.onmessage=function(e){u.highlightedCode=e.data,n.hooks.run(\"before-insert\",u),u.element.innerHTML=u.highlightedCode,a&&a.call(u.element),n.hooks.run(\"after-highlight\",u),n.hooks.run(\"complete\",u)},g.postMessage(JSON.stringify({language:u.language,code:u.code,immediateClose:!0}))}else u.highlightedCode=n.highlight(u.code,u.grammar,u.language),n.hooks.run(\"before-insert\",u),u.element.innerHTML=u.highlightedCode,a&&a.call(t),n.hooks.run(\"after-highlight\",u),n.hooks.run(\"complete\",u)},highlight:function(e,t,a){var l={code:e,grammar:t,language:a};return n.hooks.run(\"before-tokenize\",l),l.tokens=n.tokenize(l.code,l.grammar),n.hooks.run(\"after-tokenize\",l),r.stringify(n.util.encode(l.tokens),l.language)},matchGrammar:function(e,t,r,a,l,i,o){var s=n.Token;for(var u in r)if(r.hasOwnProperty(u)&&r[u]){if(u==o)return;var g=r[u];g=\"Array\"===n.util.type(g)?g:[g];for(var c=0;c<g.length;++c){var h=g[c],f=h.inside,d=!!h.lookbehind,m=!!h.greedy,p=0,y=h.alias;if(m&&!h.pattern.global){var v=h.pattern.toString().match(/[imuy]*$/)[0];h.pattern=RegExp(h.pattern.source,v+\"g\")}h=h.pattern||h;for(var b=a,k=l;b<t.length;k+=t[b].length,++b){var w=t[b];if(t.length>e.length)return;if(!(w instanceof s)){if(m&&b!=t.length-1){h.lastIndex=k;var _=h.exec(e);if(!_)break;for(var j=_.index+(d?_[1].length:0),P=_.index+_[0].length,A=b,x=k,O=t.length;O>A&&(P>x||!t[A].type&&!t[A-1].greedy);++A)x+=t[A].length,j>=x&&(++b,k=x);if(t[b]instanceof s)continue;I=A-b,w=e.slice(k,x),_.index-=k}else{h.lastIndex=0;var _=h.exec(w),I=1}if(_){d&&(p=_[1]?_[1].length:0);var j=_.index+p,_=_[0].slice(p),P=j+_.length,N=w.slice(0,j),S=w.slice(P),C=[b,I];N&&(++b,k+=N.length,C.push(N));var E=new s(u,f?n.tokenize(_,f):_,y,_,m);if(C.push(E),S&&C.push(S),Array.prototype.splice.apply(t,C),1!=I&&n.matchGrammar(e,t,r,b,k,!0,u),i)break}else if(i)break}}}}},tokenize:function(e,t){var r=[e],a=t.rest;if(a){for(var l in a)t[l]=a[l];delete t.rest}return n.matchGrammar(e,r,t,0,0,!1),r},hooks:{all:{},add:function(e,t){var r=n.hooks.all;r[e]=r[e]||[],r[e].push(t)},run:function(e,t){var r=n.hooks.all[e];if(r&&r.length)for(var a,l=0;a=r[l++];)a(t)}}},r=n.Token=function(e,t,n,r,a){this.type=e,this.content=t,this.alias=n,this.length=0|(r||\"\").length,this.greedy=!!a};if(r.stringify=function(e,t,a){if(\"string\"==typeof e)return e;if(\"Array\"===n.util.type(e))return e.map(function(n){return r.stringify(n,t,e)}).join(\"\");var l={type:e.type,content:r.stringify(e.content,t,a),tag:\"span\",classes:[\"token\",e.type],attributes:{},language:t,parent:a};if(e.alias){var i=\"Array\"===n.util.type(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(l.classes,i)}n.hooks.run(\"wrap\",l);var o=Object.keys(l.attributes).map(function(e){return e+'=\"'+(l.attributes[e]||\"\").replace(/\"/g,\"&quot;\")+'\"'}).join(\" \");return\"<\"+l.tag+' class=\"'+l.classes.join(\" \")+'\"'+(o?\" \"+o:\"\")+\">\"+l.content+\"</\"+l.tag+\">\"},!_self.document)return _self.addEventListener?(n.disableWorkerMessageHandler||_self.addEventListener(\"message\",function(e){var t=JSON.parse(e.data),r=t.language,a=t.code,l=t.immediateClose;_self.postMessage(n.highlight(a,n.languages[r],r)),l&&_self.close()},!1),_self.Prism):_self.Prism;var a=document.currentScript||[].slice.call(document.getElementsByTagName(\"script\")).pop();return a&&(n.filename=a.src,n.manual||a.hasAttribute(\"data-manual\")||(\"loading\"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(n.highlightAll):window.setTimeout(n.highlightAll,16):document.addEventListener(\"DOMContentLoaded\",n.highlightAll))),_self.Prism}();\"undefined\"!=typeof module&&module.exports&&(module.exports=Prism),\"undefined\"!=typeof global&&(global.Prism=Prism);\nPrism.languages.clike={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"class-name\":{pattern:/((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\\\]/}},keyword:/\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\"boolean\":/\\b(?:true|false)\\b/,\"function\":/[a-z0-9_]+(?=\\()/i,number:/\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,operator:/--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,punctuation:/[{}[\\];(),.:]/};\nPrism.languages.javascript=Prism.languages.extend(\"clike\",{\"class-name\":[Prism.languages.clike[\"class-name\"],{pattern:/(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,lookbehind:!0}],keyword:[{pattern:/((?:^|})\\s*)(?:catch|finally)\\b/,lookbehind:!0},/\\b(?:as|async|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\\b/],number:/\\b(?:(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+)n?|\\d+n|NaN|Infinity)\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\"function\":/[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*\\(|\\.(?:apply|bind|call)\\()/,operator:/-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/}),Prism.languages.javascript[\"class-name\"][0].pattern=/(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/,Prism.languages.insertBefore(\"javascript\",\"keyword\",{regex:{pattern:/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[[^\\]\\r\\n]+]|\\\\.|[^\\/\\\\\\[\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})\\]]))/,lookbehind:!0,greedy:!0},\"function-variable\":{pattern:/[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:function\\b|(?:\\([^()]*\\)|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i,alias:\"function\"},constant:/\\b[A-Z][A-Z\\d_]*\\b/}),Prism.languages.insertBefore(\"javascript\",\"string\",{\"template-string\":{pattern:/`(?:\\\\[\\s\\S]|\\${[^}]+}|[^\\\\`])*`/,greedy:!0,inside:{interpolation:{pattern:/\\${[^}]+}/,inside:{\"interpolation-punctuation\":{pattern:/^\\${|}$/,alias:\"punctuation\"},rest:Prism.languages.javascript}},string:/[\\s\\S]+/}}}),Prism.languages.markup&&Prism.languages.insertBefore(\"markup\",\"tag\",{script:{pattern:/(<script[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,lookbehind:!0,inside:Prism.languages.javascript,alias:\"language-javascript\",greedy:!0}}),Prism.languages.js=Prism.languages.javascript;\n","date":"2019-03-31T11:16:41.906Z","updated":"2019-02-09T10:36:34.106Z","path":"sims/framework/prism.js","layout":"false","title":"","comments":1,"_id":"cjx8wr3i6000lj1h5u8v2qgmw"},{"_content":"/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  font-family:sans-serif;\n  margin: 0;\n}\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type=\"button\"],\n[type=\"reset\"],\n[type=\"submit\"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type=\"button\"]::-moz-focus-inner,\n[type=\"reset\"]::-moz-focus-inner,\n[type=\"submit\"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type=\"button\"]:-moz-focusring,\n[type=\"reset\"]:-moz-focusring,\n[type=\"submit\"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type=\"checkbox\"],\n[type=\"radio\"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type=\"number\"]::-webkit-inner-spin-button,\n[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type=\"search\"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n\n/* ==========================================================================\n   Custom styles\n   ========================================================================== */\n\nbody {\n  padding: 8px;\n}\nbutton {\n  border-radius: 3px;  \n  background: ghostwhite;\n}\nbutton[disabled] {\n    color: lightgrey;\n    background: whitesmoke;\n}\nbutton[disabled]:hover {\n  cursor: default;\n}\nnoscript > p { font-size: 1.2em; color: red;}\n\n.oBJECTvIEW h2 {\n  font-size: 110%;\n  margin-top: 0.2em;\n}\ntable { \n  border-collapse:collapse;\n  margin: 1em 0;\n  empty-cells: show;\n}  \ntable, td, th { \n  border: thin solid black;\n  padding: 5px;\n}  \nthead, th {\n  background: aliceblue;\n}\n\n/****************************************\n Fixed-height tables with scrollable body\n assuming scrollbar width is 16px\n\n Issues: (1) does not scroll horizontally\n (2) renders thead underneath tbody\n\n ****************************************/\n/*\ntable.RecTbl {\n  display: table;\n  width: 100%;\n}\ntable.RecTbl thead {\n  display: table;\n  table-layout: fixed;\n  width: calc(100% - 16px);\n}\ntable.RecTbl tbody {\n  display: block;\n  width: calc(100% - 16px);\n  height: 10em;\n  overflow: auto;\n  overflow-y: scroll;\n}\ntable.RecTbl tr {\n  display: table;\n  table-layout: fixed;\n  width: 100%;\n  text-align: left;\n}\n*/\n\n/* Center the class name of a record table widget */\ntable.RecTbl > thead > tr:first-child  {\n  text-align: center;\n}\n\nmenu {\n  width: 14em;\n  text-align: center;\n  border: 1px solid black;\n  padding: 8px;\n  border-radius: 5px;\n}\nmenu li {\n  list-style: none;\n  height: 1.5em;\n  margin: 2px auto;\n}\nmenu li button {\n  width: 14em;\n}\n/*** Modal Window and Draggable Modal Window ***/\n#overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 1000;\n  background-color:rgba(0,0,0, 0.5);  /* 50% opacity */\n  animation: overlay-with-modal .3s forwards ease;\n}\n@keyframes overlay-with-modal {\n  from {transform:scale(0.5); background-color:rgba(0,0,0, 0);}\n  to {transform:scale(1); background-color:rgba(0,0,0, 0.5);}\n}\n.modal {\n  width: 40em;\n  max-width: 100%;\n  max-height: 100%;\n  overflow: auto;\n  position: absolute;\n  top: 50%; left: 50%;\n  transform: translate(-50%, -50%);  /* for centering */\n  background-color: #eee;\n}\n.modal > h1 {\n  margin: 0;\n  padding: 0.5em;\n  color: #eee;\n  background-color: blue;\n  font-size: 120%;\n  height: 2em;\n}\n.modal > h1 > span.title {\n  display: inline-block;\n  padding-top: 0.4em;\n}\n.modal > h1 > span.closeButton {\n  color: #eee;\n  float: right;\n  font-size: 180%;\n  font-weight: bold;\n}\n.modal .modal-body {\n  padding: 0.5em;\n}\n.modal label {\n  line-height: 1.5;\n}\n.modal.action-required > h1{\n  background-color: green;\n}\n.modal.error > h1{\n  background-color: deeppink;\n}\n.modal .closeButton:hover,\n.modal .closeButton:focus {\n  cursor: pointer;\n}\n[draggable=true] {\n  outline: 1px solid black;\n  cursor: move;\n  overflow: auto;\n  resize: both;\n}\n/*********************************************/\nform :invalid {\n  box-shadow: none;  /* neutralizing FF */\n  outline: dotted red;      \n}\nform > h1 {  /* form title */\n  font-size: 120%;\n}\nform > div:first-child  {\n  margin-top: 0.5em;\n}\nform > div:not(:last-child)  {\n  margin-bottom: 0.5em;\n}\nform > div > label {\n  position: relative;\n}\nform > div.I-O-field > label {\n  width: 40em;\n  display: block;     /* by default, one labeled control per line*/\n}\nform div.field-group > label {\n  display: inline-block;\n  width: 20em;\n  margin-right: 1em;\n}\nform div.field-group > label > output {\n  position: absolute;\n  left: 12em;\n}\nform div.field-group > table.RecTbl {\n  display: inline-block;\n  margin: 0;\n  vertical-align: top;\n}\nform output {\n  min-width: 2em;\n  background-color: gainsboro;\n}\nform div.field-group > label > input,\nform div.field-group > label > output {\n  margin-left: 0.7em;\n  margin-right: 0.1em;\n}\nform div.I-O-field > label > input[type=\"text\"],\nform div.I-O-field > label > input[type=\"number\"],\nform div.yes-no-field > label > input[type=\"checkbox\"],\nform div.select > label > select,\nform div.I-O-field > label > output {\n  position: absolute;\n  left: 12em;\n}\nform div.I-O-field > label > input[type=\"text\"],\nform div.I-O-field > label > input[type=\"number\"] {\n  width: 7em;\n}\n/*\nform div.yes-no-field > label > input[type=\"checkbox\"] {\n  position: absolute;\n  left: 2em;\n}\n*/\nform div.action-group {\n  margin-top: 0.5em;\n}\nform div > button {\n  margin-right: 0.5em;  \n}\n\nform fieldset {\n  margin-bottom: 1em;  \n}\nform fieldset > label {\n  margin-right: 1em;\n}\nform fieldset > label > input[type=\"radio\"],\n    form > fieldset > label > input[type=\"checkbox\"] {\n  margin-right: 0.5em;  \n}\n\n/* Record List Widget */\ntd[contenteditable] {\n  background-color: hsl( 120, 100%, 95%); /* 120 = green */\n}\n/* PrismJS 1.15.0\nhttps://prismjs.com/download.html#themes=prism&languages=clike+javascript */\n/**\n * prism.js default theme for JavaScript, CSS and HTML\n * Based on dabblet (http://dabblet.com)\n * @author Lea Verou\n */\n\ncode[class*=\"language-\"],\npre[class*=\"language-\"] {\n\tcolor: black;\n\tbackground: none;\n\ttext-shadow: 0 1px white;\n\tfont-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n\ttext-align: left;\n\twhite-space: pre;\n\tword-spacing: normal;\n\tword-break: normal;\n\tword-wrap: normal;\n\tline-height: 1.5;\n\n\t-moz-tab-size: 4;\n\t-o-tab-size: 4;\n\ttab-size: 4;\n\n\t-webkit-hyphens: none;\n\t-moz-hyphens: none;\n\t-ms-hyphens: none;\n\thyphens: none;\n}\n\npre[class*=\"language-\"]::-moz-selection, pre[class*=\"language-\"] ::-moz-selection,\ncode[class*=\"language-\"]::-moz-selection, code[class*=\"language-\"] ::-moz-selection {\n\ttext-shadow: none;\n\tbackground: #b3d4fc;\n}\n\npre[class*=\"language-\"]::selection, pre[class*=\"language-\"] ::selection,\ncode[class*=\"language-\"]::selection, code[class*=\"language-\"] ::selection {\n\ttext-shadow: none;\n\tbackground: #b3d4fc;\n}\n\n@media print {\n\tcode[class*=\"language-\"],\n\tpre[class*=\"language-\"] {\n\t\ttext-shadow: none;\n\t}\n}\n\n/* Code blocks */\npre[class*=\"language-\"] {\n\tpadding: 1em;\n\tmargin: .5em 0;\n\toverflow: auto;\n}\n\n:not(pre) > code[class*=\"language-\"],\npre[class*=\"language-\"] {\n\tbackground: #f5f2f0;\n}\n\n/* Inline code */\n:not(pre) > code[class*=\"language-\"] {\n\tpadding: .1em;\n\tborder-radius: .3em;\n\twhite-space: normal;\n}\n\n.token.comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n\tcolor: slategray;\n}\n\n.token.punctuation {\n\tcolor: #999;\n}\n\n.namespace {\n\topacity: .7;\n}\n\n.token.property,\n.token.tag,\n.token.boolean,\n.token.number,\n.token.constant,\n.token.symbol,\n.token.deleted {\n\tcolor: #905;\n}\n\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.builtin,\n.token.inserted {\n\tcolor: #690;\n}\n\n.token.operator,\n.token.entity,\n.token.url,\n.language-css .token.string,\n.style .token.string {\n\tcolor: #9a6e3a;\n\tbackground: hsla(0, 0%, 100%, .5);\n}\n\n.token.atrule,\n.token.attr-value,\n.token.keyword {\n\tcolor: #07a;\n}\n\n.token.function,\n.token.class-name {\n\tcolor: #DD4A68;\n}\n\n.token.regex,\n.token.important,\n.token.variable {\n\tcolor: #e90;\n}\n\n.token.important,\n.token.bold {\n\tfont-weight: bold;\n}\n.token.italic {\n\tfont-style: italic;\n}\n\n.token.entity {\n\tcursor: help;\n}\n\n\n/* In addition to vIEW.css */\n\n#sim4eduinfo {\n    display: inline-block;\n    font-size: 90%;\n    margin-top: 0;\n    margin-bottom: 0;\n}\n#model-menu {\n    display: inline-block;\n    font-size: 90%;\n    margin-top: 0;\n    margin-bottom: 0.67em;\n}\n#model-menu button {\n    display: inline-block;\n    padding-left: 2px;\n    padding-right: 2px;\n    margin-right: 0.5em;\n}\nbutton:hover,\nbutton:focus {\n    cursor: pointer;\n}\n#model-menu button#spaceSizeDefBtn {\n    margin-left: 1em;\n    background-color: azure;\n}\n#model-menu form {\n    /* position: relative; */\n    vertical-align: top;\n    margin-right: 0.5em;\n    border: 1px solid;\n    padding: 2px;\n}\n#model-menu form div.field-group > label {\n    width: auto;\n}\n#showCodeForm p {\n    margin: 0;\n}\n#showCodeForm div {\n    margin-top: 0.3em;\n}\nform span.closeButton {\n    float: right;\n    font-size: 120%;\n    margin-top: -0.2em;\n}\nform span.closeButton:hover,\nform span.closeButton:focus {\n    color: red;\n    cursor: pointer;\n}\n\n#frontMatter > h1 {\n    margin: 0.2em 0;\n}\n#frontMatter h1 > a {\n    display: inline-block;\n    margin-left: 2em;\n    font-size: 45%;\n    width: 5em;\n}\n#scenario {\n    border-left: 0.5em solid gainsboro;\n}\n#scenario > h2 {\n    margin-top: 0;\n    background-color: gainsboro;\n    color: whitesmoke;\n}\n#scenario > div {\n    margin-left: 6px;\n}\nbody > footer {\n    margin-top: 3em;\n    font-size: smaller;\n}\n#errors {\n    padding-left: 5px;\n    outline: red solid;\n}\n.error {\n    color: #C0392B;\n}\n\ndiv[id=\"progress-container\"] {\n    margin: 3em 1em;\n    text-align: center;\n}\ndiv[id=\"progress-container\"] > h1 {\n    font-size: 100%;\n}\nprogress {\n    width: 25em;\n    height: 1.7em;\n}\n\n/* Vertical margin for UI blocks */\n.uiBlock {\n    margin: 1em 0;\n}\n\n/* overrides vIEW CSS rules */\nform[id=\"scenario\"] div.field-group > label,\nform[id=\"sim\"] div.field-group > label {\n    width: auto;\n}\nform[id=\"scenario\"] div.field-group > label:not(:first-child),\nform[id=\"sim\"] div.field-group > label:not(:first-child)\n{\n    margin-left: 1em;\n}\nform[id=\"scenario\"] div.field-group > label > output,\nform[id=\"sim\"] div.field-group > label > output\n{\n    position: static; left: 0;\n}\n\n/* Styles for simulation experiment statistics */\ntable.expStatistics tbody td {\n    text-align: right;\n}\n\n/* Styles for DOM-Grid */\ntable#visCanvas {\n  table-layout: fixed;\n}\n/* table[id=\"space-view\"] corresponds to table#space-view, but helps to avoid cascade/specificity issues */\ntable[id=\"visCanvas\"] td {\n  padding: 1px;\n  text-align: center;\n  vertical-align: middle;\n}\n\ntable[id=\"space-view\"] td div.object-view {\n  display: block;\n  padding: 0;\n  margin: 0;\n  border-radius: 0;\n  min-width: 3px;\n  min-height: 3px;\n  width: 100%;\n  height: 100%;\n  font-size: 90%;\n}\n\n/*canvas {\n  margin: 0.5em 0;\n  width: 100% !important;\n}*/\n.expandablePanel {\n  border: 3px solid grey;\n  padding: 5px;\n  margin: 1em 0;\n}\n.expandablePanel > h2 {\n  font-size: 1.2em;\n  color: grey;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n.expandablePanel > h2 > button {\n  font-size: smaller;\n  margin-right: 1em;\n}\n.expandablePanel > div.xpanel-content > div.xpanel-main {\n  display: flex;\n  justify-content: space-evenly;\n  flex-wrap: wrap;\n}\n\nform[id=\"expost-statistics\"] {\n    outline: solid grey;\n    padding: 5px;\n    margin: 1em 0;\n}\nform[id=\"expost-statistics\"] h2 {\n    font-size: 110%;\n    margin-bottom: 0.4em;\n}\nform[id=\"expost-statistics\"] h3 {\n    font-size: 100%;\n    margin-top: 0.3em;\n    margin-bottom: 0.2em;\n}\ndiv[id=\"time-series-chart\"] {\n    width: 100%;\n    height: 450px;\n}\n\n#InitialStateObjectsUI table.PopTable {\n    max-height: 7em;\n    overflow: auto;\n}\n\n/* ==========================================================================\n   Print styles for printing the SVG chart\n   ========================================================================== */\n\n@media print {\n\t@page {size: landscape;}\n\t\n    body {visibility: hidden;}\n\t#time-series-chart {\n\t\tvisibility:visible;\n\t\tposition:absolute; top:0px; left:0px;\n\t}\n}","source":"sims/framework/simulator-core.css","raw":"/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  font-family:sans-serif;\n  margin: 0;\n}\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type=\"button\"],\n[type=\"reset\"],\n[type=\"submit\"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type=\"button\"]::-moz-focus-inner,\n[type=\"reset\"]::-moz-focus-inner,\n[type=\"submit\"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type=\"button\"]:-moz-focusring,\n[type=\"reset\"]:-moz-focusring,\n[type=\"submit\"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type=\"checkbox\"],\n[type=\"radio\"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type=\"number\"]::-webkit-inner-spin-button,\n[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type=\"search\"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n\n/* ==========================================================================\n   Custom styles\n   ========================================================================== */\n\nbody {\n  padding: 8px;\n}\nbutton {\n  border-radius: 3px;  \n  background: ghostwhite;\n}\nbutton[disabled] {\n    color: lightgrey;\n    background: whitesmoke;\n}\nbutton[disabled]:hover {\n  cursor: default;\n}\nnoscript > p { font-size: 1.2em; color: red;}\n\n.oBJECTvIEW h2 {\n  font-size: 110%;\n  margin-top: 0.2em;\n}\ntable { \n  border-collapse:collapse;\n  margin: 1em 0;\n  empty-cells: show;\n}  \ntable, td, th { \n  border: thin solid black;\n  padding: 5px;\n}  \nthead, th {\n  background: aliceblue;\n}\n\n/****************************************\n Fixed-height tables with scrollable body\n assuming scrollbar width is 16px\n\n Issues: (1) does not scroll horizontally\n (2) renders thead underneath tbody\n\n ****************************************/\n/*\ntable.RecTbl {\n  display: table;\n  width: 100%;\n}\ntable.RecTbl thead {\n  display: table;\n  table-layout: fixed;\n  width: calc(100% - 16px);\n}\ntable.RecTbl tbody {\n  display: block;\n  width: calc(100% - 16px);\n  height: 10em;\n  overflow: auto;\n  overflow-y: scroll;\n}\ntable.RecTbl tr {\n  display: table;\n  table-layout: fixed;\n  width: 100%;\n  text-align: left;\n}\n*/\n\n/* Center the class name of a record table widget */\ntable.RecTbl > thead > tr:first-child  {\n  text-align: center;\n}\n\nmenu {\n  width: 14em;\n  text-align: center;\n  border: 1px solid black;\n  padding: 8px;\n  border-radius: 5px;\n}\nmenu li {\n  list-style: none;\n  height: 1.5em;\n  margin: 2px auto;\n}\nmenu li button {\n  width: 14em;\n}\n/*** Modal Window and Draggable Modal Window ***/\n#overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 1000;\n  background-color:rgba(0,0,0, 0.5);  /* 50% opacity */\n  animation: overlay-with-modal .3s forwards ease;\n}\n@keyframes overlay-with-modal {\n  from {transform:scale(0.5); background-color:rgba(0,0,0, 0);}\n  to {transform:scale(1); background-color:rgba(0,0,0, 0.5);}\n}\n.modal {\n  width: 40em;\n  max-width: 100%;\n  max-height: 100%;\n  overflow: auto;\n  position: absolute;\n  top: 50%; left: 50%;\n  transform: translate(-50%, -50%);  /* for centering */\n  background-color: #eee;\n}\n.modal > h1 {\n  margin: 0;\n  padding: 0.5em;\n  color: #eee;\n  background-color: blue;\n  font-size: 120%;\n  height: 2em;\n}\n.modal > h1 > span.title {\n  display: inline-block;\n  padding-top: 0.4em;\n}\n.modal > h1 > span.closeButton {\n  color: #eee;\n  float: right;\n  font-size: 180%;\n  font-weight: bold;\n}\n.modal .modal-body {\n  padding: 0.5em;\n}\n.modal label {\n  line-height: 1.5;\n}\n.modal.action-required > h1{\n  background-color: green;\n}\n.modal.error > h1{\n  background-color: deeppink;\n}\n.modal .closeButton:hover,\n.modal .closeButton:focus {\n  cursor: pointer;\n}\n[draggable=true] {\n  outline: 1px solid black;\n  cursor: move;\n  overflow: auto;\n  resize: both;\n}\n/*********************************************/\nform :invalid {\n  box-shadow: none;  /* neutralizing FF */\n  outline: dotted red;      \n}\nform > h1 {  /* form title */\n  font-size: 120%;\n}\nform > div:first-child  {\n  margin-top: 0.5em;\n}\nform > div:not(:last-child)  {\n  margin-bottom: 0.5em;\n}\nform > div > label {\n  position: relative;\n}\nform > div.I-O-field > label {\n  width: 40em;\n  display: block;     /* by default, one labeled control per line*/\n}\nform div.field-group > label {\n  display: inline-block;\n  width: 20em;\n  margin-right: 1em;\n}\nform div.field-group > label > output {\n  position: absolute;\n  left: 12em;\n}\nform div.field-group > table.RecTbl {\n  display: inline-block;\n  margin: 0;\n  vertical-align: top;\n}\nform output {\n  min-width: 2em;\n  background-color: gainsboro;\n}\nform div.field-group > label > input,\nform div.field-group > label > output {\n  margin-left: 0.7em;\n  margin-right: 0.1em;\n}\nform div.I-O-field > label > input[type=\"text\"],\nform div.I-O-field > label > input[type=\"number\"],\nform div.yes-no-field > label > input[type=\"checkbox\"],\nform div.select > label > select,\nform div.I-O-field > label > output {\n  position: absolute;\n  left: 12em;\n}\nform div.I-O-field > label > input[type=\"text\"],\nform div.I-O-field > label > input[type=\"number\"] {\n  width: 7em;\n}\n/*\nform div.yes-no-field > label > input[type=\"checkbox\"] {\n  position: absolute;\n  left: 2em;\n}\n*/\nform div.action-group {\n  margin-top: 0.5em;\n}\nform div > button {\n  margin-right: 0.5em;  \n}\n\nform fieldset {\n  margin-bottom: 1em;  \n}\nform fieldset > label {\n  margin-right: 1em;\n}\nform fieldset > label > input[type=\"radio\"],\n    form > fieldset > label > input[type=\"checkbox\"] {\n  margin-right: 0.5em;  \n}\n\n/* Record List Widget */\ntd[contenteditable] {\n  background-color: hsl( 120, 100%, 95%); /* 120 = green */\n}\n/* PrismJS 1.15.0\nhttps://prismjs.com/download.html#themes=prism&languages=clike+javascript */\n/**\n * prism.js default theme for JavaScript, CSS and HTML\n * Based on dabblet (http://dabblet.com)\n * @author Lea Verou\n */\n\ncode[class*=\"language-\"],\npre[class*=\"language-\"] {\n\tcolor: black;\n\tbackground: none;\n\ttext-shadow: 0 1px white;\n\tfont-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n\ttext-align: left;\n\twhite-space: pre;\n\tword-spacing: normal;\n\tword-break: normal;\n\tword-wrap: normal;\n\tline-height: 1.5;\n\n\t-moz-tab-size: 4;\n\t-o-tab-size: 4;\n\ttab-size: 4;\n\n\t-webkit-hyphens: none;\n\t-moz-hyphens: none;\n\t-ms-hyphens: none;\n\thyphens: none;\n}\n\npre[class*=\"language-\"]::-moz-selection, pre[class*=\"language-\"] ::-moz-selection,\ncode[class*=\"language-\"]::-moz-selection, code[class*=\"language-\"] ::-moz-selection {\n\ttext-shadow: none;\n\tbackground: #b3d4fc;\n}\n\npre[class*=\"language-\"]::selection, pre[class*=\"language-\"] ::selection,\ncode[class*=\"language-\"]::selection, code[class*=\"language-\"] ::selection {\n\ttext-shadow: none;\n\tbackground: #b3d4fc;\n}\n\n@media print {\n\tcode[class*=\"language-\"],\n\tpre[class*=\"language-\"] {\n\t\ttext-shadow: none;\n\t}\n}\n\n/* Code blocks */\npre[class*=\"language-\"] {\n\tpadding: 1em;\n\tmargin: .5em 0;\n\toverflow: auto;\n}\n\n:not(pre) > code[class*=\"language-\"],\npre[class*=\"language-\"] {\n\tbackground: #f5f2f0;\n}\n\n/* Inline code */\n:not(pre) > code[class*=\"language-\"] {\n\tpadding: .1em;\n\tborder-radius: .3em;\n\twhite-space: normal;\n}\n\n.token.comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n\tcolor: slategray;\n}\n\n.token.punctuation {\n\tcolor: #999;\n}\n\n.namespace {\n\topacity: .7;\n}\n\n.token.property,\n.token.tag,\n.token.boolean,\n.token.number,\n.token.constant,\n.token.symbol,\n.token.deleted {\n\tcolor: #905;\n}\n\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.builtin,\n.token.inserted {\n\tcolor: #690;\n}\n\n.token.operator,\n.token.entity,\n.token.url,\n.language-css .token.string,\n.style .token.string {\n\tcolor: #9a6e3a;\n\tbackground: hsla(0, 0%, 100%, .5);\n}\n\n.token.atrule,\n.token.attr-value,\n.token.keyword {\n\tcolor: #07a;\n}\n\n.token.function,\n.token.class-name {\n\tcolor: #DD4A68;\n}\n\n.token.regex,\n.token.important,\n.token.variable {\n\tcolor: #e90;\n}\n\n.token.important,\n.token.bold {\n\tfont-weight: bold;\n}\n.token.italic {\n\tfont-style: italic;\n}\n\n.token.entity {\n\tcursor: help;\n}\n\n\n/* In addition to vIEW.css */\n\n#sim4eduinfo {\n    display: inline-block;\n    font-size: 90%;\n    margin-top: 0;\n    margin-bottom: 0;\n}\n#model-menu {\n    display: inline-block;\n    font-size: 90%;\n    margin-top: 0;\n    margin-bottom: 0.67em;\n}\n#model-menu button {\n    display: inline-block;\n    padding-left: 2px;\n    padding-right: 2px;\n    margin-right: 0.5em;\n}\nbutton:hover,\nbutton:focus {\n    cursor: pointer;\n}\n#model-menu button#spaceSizeDefBtn {\n    margin-left: 1em;\n    background-color: azure;\n}\n#model-menu form {\n    /* position: relative; */\n    vertical-align: top;\n    margin-right: 0.5em;\n    border: 1px solid;\n    padding: 2px;\n}\n#model-menu form div.field-group > label {\n    width: auto;\n}\n#showCodeForm p {\n    margin: 0;\n}\n#showCodeForm div {\n    margin-top: 0.3em;\n}\nform span.closeButton {\n    float: right;\n    font-size: 120%;\n    margin-top: -0.2em;\n}\nform span.closeButton:hover,\nform span.closeButton:focus {\n    color: red;\n    cursor: pointer;\n}\n\n#frontMatter > h1 {\n    margin: 0.2em 0;\n}\n#frontMatter h1 > a {\n    display: inline-block;\n    margin-left: 2em;\n    font-size: 45%;\n    width: 5em;\n}\n#scenario {\n    border-left: 0.5em solid gainsboro;\n}\n#scenario > h2 {\n    margin-top: 0;\n    background-color: gainsboro;\n    color: whitesmoke;\n}\n#scenario > div {\n    margin-left: 6px;\n}\nbody > footer {\n    margin-top: 3em;\n    font-size: smaller;\n}\n#errors {\n    padding-left: 5px;\n    outline: red solid;\n}\n.error {\n    color: #C0392B;\n}\n\ndiv[id=\"progress-container\"] {\n    margin: 3em 1em;\n    text-align: center;\n}\ndiv[id=\"progress-container\"] > h1 {\n    font-size: 100%;\n}\nprogress {\n    width: 25em;\n    height: 1.7em;\n}\n\n/* Vertical margin for UI blocks */\n.uiBlock {\n    margin: 1em 0;\n}\n\n/* overrides vIEW CSS rules */\nform[id=\"scenario\"] div.field-group > label,\nform[id=\"sim\"] div.field-group > label {\n    width: auto;\n}\nform[id=\"scenario\"] div.field-group > label:not(:first-child),\nform[id=\"sim\"] div.field-group > label:not(:first-child)\n{\n    margin-left: 1em;\n}\nform[id=\"scenario\"] div.field-group > label > output,\nform[id=\"sim\"] div.field-group > label > output\n{\n    position: static; left: 0;\n}\n\n/* Styles for simulation experiment statistics */\ntable.expStatistics tbody td {\n    text-align: right;\n}\n\n/* Styles for DOM-Grid */\ntable#visCanvas {\n  table-layout: fixed;\n}\n/* table[id=\"space-view\"] corresponds to table#space-view, but helps to avoid cascade/specificity issues */\ntable[id=\"visCanvas\"] td {\n  padding: 1px;\n  text-align: center;\n  vertical-align: middle;\n}\n\ntable[id=\"space-view\"] td div.object-view {\n  display: block;\n  padding: 0;\n  margin: 0;\n  border-radius: 0;\n  min-width: 3px;\n  min-height: 3px;\n  width: 100%;\n  height: 100%;\n  font-size: 90%;\n}\n\n/*canvas {\n  margin: 0.5em 0;\n  width: 100% !important;\n}*/\n.expandablePanel {\n  border: 3px solid grey;\n  padding: 5px;\n  margin: 1em 0;\n}\n.expandablePanel > h2 {\n  font-size: 1.2em;\n  color: grey;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n.expandablePanel > h2 > button {\n  font-size: smaller;\n  margin-right: 1em;\n}\n.expandablePanel > div.xpanel-content > div.xpanel-main {\n  display: flex;\n  justify-content: space-evenly;\n  flex-wrap: wrap;\n}\n\nform[id=\"expost-statistics\"] {\n    outline: solid grey;\n    padding: 5px;\n    margin: 1em 0;\n}\nform[id=\"expost-statistics\"] h2 {\n    font-size: 110%;\n    margin-bottom: 0.4em;\n}\nform[id=\"expost-statistics\"] h3 {\n    font-size: 100%;\n    margin-top: 0.3em;\n    margin-bottom: 0.2em;\n}\ndiv[id=\"time-series-chart\"] {\n    width: 100%;\n    height: 450px;\n}\n\n#InitialStateObjectsUI table.PopTable {\n    max-height: 7em;\n    overflow: auto;\n}\n\n/* ==========================================================================\n   Print styles for printing the SVG chart\n   ========================================================================== */\n\n@media print {\n\t@page {size: landscape;}\n\t\n    body {visibility: hidden;}\n\t#time-series-chart {\n\t\tvisibility:visible;\n\t\tposition:absolute; top:0px; left:0px;\n\t}\n}","date":"2019-04-16T15:44:34.154Z","updated":"2019-04-16T15:44:34.154Z","path":"sims/framework/simulator-core.css","layout":"false","title":"","comments":1,"_id":"cjx8wr3ir000mj1h5p09gxkgj"},{"_content":"!function(t,e){\"function\"==typeof define&&define.amd?define([],function(){return t.Chartist=e()}):\"object\"==typeof exports?module.exports=e():t.Chartist=e()}(this,function(){var t={version:\"0.9.8\"};return function(t,e,i){\"use strict\";i.namespaces={svg:\"http://www.w3.org/2000/svg\",xmlns:\"http://www.w3.org/2000/xmlns/\",xhtml:\"http://www.w3.org/1999/xhtml\",xlink:\"http://www.w3.org/1999/xlink\",ct:\"http://gionkunz.github.com/chartist-js/ct\"},i.noop=function(t){return t},i.alphaNumerate=function(t){return String.fromCharCode(97+t%26)},i.extend=function(t){return t=t||{},Array.prototype.slice.call(arguments,1).forEach(function(e){for(var n in e)\"object\"!=typeof e[n]||null===e[n]||e[n]instanceof Array?t[n]=e[n]:t[n]=i.extend({},t[n],e[n])}),t},i.replaceAll=function(t,e,i){return t.replace(new RegExp(e,\"g\"),i)},i.ensureUnit=function(t,e){return\"number\"==typeof t&&(t+=e),t},i.quantity=function(t){if(\"string\"==typeof t){var e=/^(\\d+)\\s*(.*)$/g.exec(t);return{value:+e[1],unit:e[2]||void 0}}return{value:t}},i.querySelector=function(t){return t instanceof Node?t:e.querySelector(t)},i.times=function(t){return Array.apply(null,new Array(t))},i.sum=function(t,e){return t+(e||0)},i.mapMultiply=function(t){return function(e){return e*t}},i.mapAdd=function(t){return function(e){return e+t}},i.serialMap=function(t,e){var n=[],s=Math.max.apply(null,t.map(function(t){return t.length}));return i.times(s).forEach(function(i,s){var a=t.map(function(t){return t[s]});n[s]=e.apply(null,a)}),n},i.roundWithPrecision=function(t,e){var n=Math.pow(10,e||i.precision);return Math.round(t*n)/n},i.precision=8,i.escapingMap={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#039;\"},i.serialize=function(t){return null===t||void 0===t?t:(\"number\"==typeof t?t=\"\"+t:\"object\"==typeof t&&(t=JSON.stringify({data:t})),Object.keys(i.escapingMap).reduce(function(t,e){return i.replaceAll(t,e,i.escapingMap[e])},t))},i.deserialize=function(t){if(\"string\"!=typeof t)return t;t=Object.keys(i.escapingMap).reduce(function(t,e){return i.replaceAll(t,i.escapingMap[e],e)},t);try{t=JSON.parse(t),t=void 0!==t.data?t.data:t}catch(t){}return t},i.createSvg=function(t,e,n,s){var a;return e=e||\"100%\",n=n||\"100%\",Array.prototype.slice.call(t.querySelectorAll(\"svg\")).filter(function(t){return t.getAttributeNS(i.namespaces.xmlns,\"ct\")}).forEach(function(e){t.removeChild(e)}),a=new i.Svg(\"svg\").attr({width:e,height:n}).addClass(s).attr({style:\"width: \"+e+\"; height: \"+n+\";\"}),t.appendChild(a._node),a},i.normalizeData=function(t){if(t=t||{series:[],labels:[]},t.series=t.series||[],t.labels=t.labels||[],t.series.length>0&&0===t.labels.length){var e,n=i.getDataArray(t);e=n.every(function(t){return t instanceof Array})?Math.max.apply(null,n.map(function(t){return t.length})):n.length,t.labels=i.times(e).map(function(){return\"\"})}return t},i.reverseData=function(t){t.labels.reverse(),t.series.reverse();for(var e=0;e<t.series.length;e++)\"object\"==typeof t.series[e]&&void 0!==t.series[e].data?t.series[e].data.reverse():t.series[e]instanceof Array&&t.series[e].reverse()},i.getDataArray=function(t,e,n){function s(t){if(!i.isFalseyButZero(t)){if((t.data||t)instanceof Array)return(t.data||t).map(s);if(t.hasOwnProperty(\"value\"))return s(t.value);if(n){var e={};return\"string\"==typeof n?e[n]=i.getNumberOrUndefined(t):e.y=i.getNumberOrUndefined(t),e.x=t.hasOwnProperty(\"x\")?i.getNumberOrUndefined(t.x):e.x,e.y=t.hasOwnProperty(\"y\")?i.getNumberOrUndefined(t.y):e.y,e}return i.getNumberOrUndefined(t)}}return(e&&!t.reversed||!e&&t.reversed)&&(i.reverseData(t),t.reversed=!t.reversed),t.series.map(s)},i.normalizePadding=function(t,e){return e=e||0,\"number\"==typeof t?{top:t,right:t,bottom:t,left:t}:{top:\"number\"==typeof t.top?t.top:e,right:\"number\"==typeof t.right?t.right:e,bottom:\"number\"==typeof t.bottom?t.bottom:e,left:\"number\"==typeof t.left?t.left:e}},i.getMetaData=function(t,e){var n=t.data?t.data[e]:t[e];return n?i.serialize(n.meta):void 0},i.orderOfMagnitude=function(t){return Math.floor(Math.log(Math.abs(t))/Math.LN10)},i.projectLength=function(t,e,i){return e/i.range*t},i.getAvailableHeight=function(t,e){return Math.max((i.quantity(e.height).value||t.height())-(e.chartPadding.top+e.chartPadding.bottom)-e.axisX.offset,0)},i.getHighLow=function(t,e,n){function s(t){if(void 0!==t)if(t instanceof Array)for(var e=0;e<t.length;e++)s(t[e]);else{var i=n?+t[n]:+t;r&&i>a.high&&(a.high=i),o&&i<a.low&&(a.low=i)}}e=i.extend({},e,n?e[\"axis\"+n.toUpperCase()]:{});var a={high:void 0===e.high?-Number.MAX_VALUE:+e.high,low:void 0===e.low?Number.MAX_VALUE:+e.low},r=void 0===e.high,o=void 0===e.low;return(r||o)&&s(t),(e.referenceValue||0===e.referenceValue)&&(a.high=Math.max(e.referenceValue,a.high),a.low=Math.min(e.referenceValue,a.low)),a.high<=a.low&&(0===a.low?a.high=1:a.low<0?a.high=0:a.high>0?a.low=0:(a.high=1,a.low=0)),a},i.isNum=function(t){return!isNaN(t)&&isFinite(t)},i.isFalseyButZero=function(t){return!t&&0!==t},i.getNumberOrUndefined=function(t){return isNaN(+t)?void 0:+t},i.getMultiValue=function(t,e){return i.isNum(t)?+t:t?t[e||\"y\"]||0:0},i.rho=function(t){function e(t,i){return t%i==0?i:e(i,t%i)}function i(t){return t*t+1}if(1===t)return t;var n,s=2,a=2;if(t%2==0)return 2;do{s=i(s)%t,a=i(i(a))%t,n=e(Math.abs(s-a),t)}while(1===n);return n},i.getBounds=function(t,e,n,s){var a,r,o,l=0,c={high:e.high,low:e.low};c.valueRange=c.high-c.low,c.oom=i.orderOfMagnitude(c.valueRange),c.step=Math.pow(10,c.oom),c.min=Math.floor(c.low/c.step)*c.step,c.max=Math.ceil(c.high/c.step)*c.step,c.range=c.max-c.min,c.numberOfSteps=Math.round(c.range/c.step);var h=i.projectLength(t,c.step,c),u=h<n,d=s?i.rho(c.range):0;if(s&&i.projectLength(t,1,c)>=n)c.step=1;else if(s&&d<c.step&&i.projectLength(t,d,c)>=n)c.step=d;else for(;;){if(u&&i.projectLength(t,c.step,c)<=n)c.step*=2;else{if(u||!(i.projectLength(t,c.step/2,c)>=n))break;if(c.step/=2,s&&c.step%1!=0){c.step*=2;break}}if(l++>1e3)throw new Error(\"Exceeded maximum number of iterations while optimizing scale step!\")}for(c.step=Math.max(c.step,2.221e-16),r=c.min,o=c.max;r+c.step<=c.low;)r+=c.step;for(;o-c.step>=c.high;)o-=c.step;c.min=r,c.max=o,c.range=c.max-c.min;var p=[];for(a=c.min;a<=c.max;a+=c.step){i.roundWithPrecision(a)!==p[p.length-1]&&p.push(a)}return c.values=p,c},i.polarToCartesian=function(t,e,i,n){var s=(n-90)*Math.PI/180;return{x:t+i*Math.cos(s),y:e+i*Math.sin(s)}},i.createChartRect=function(t,e,n){var s=!(!e.axisX&&!e.axisY),a=s?e.axisY.offset:0,r=s?e.axisX.offset:0,o=t.width()||i.quantity(e.width).value||0,l=t.height()||i.quantity(e.height).value||0,c=i.normalizePadding(e.chartPadding,n);o=Math.max(o,a+c.left+c.right),l=Math.max(l,r+c.top+c.bottom);var h={padding:c,width:function(){return this.x2-this.x1},height:function(){return this.y1-this.y2}};return s?(\"start\"===e.axisX.position?(h.y2=c.top+r,h.y1=Math.max(l-c.bottom,h.y2+1)):(h.y2=c.top,h.y1=Math.max(l-c.bottom-r,h.y2+1)),\"start\"===e.axisY.position?(h.x1=c.left+a,h.x2=Math.max(o-c.right,h.x1+1)):(h.x1=c.left,h.x2=Math.max(o-c.right-a,h.x1+1))):(h.x1=c.left,h.x2=Math.max(o-c.right,h.x1+1),h.y2=c.top,h.y1=Math.max(l-c.bottom,h.y2+1)),h},i.createGrid=function(t,e,n,s,a,r,o,l){var c={};c[n.units.pos+\"1\"]=t,c[n.units.pos+\"2\"]=t,c[n.counterUnits.pos+\"1\"]=s,c[n.counterUnits.pos+\"2\"]=s+a;var h=r.elem(\"line\",c,o.join(\" \"));l.emit(\"draw\",i.extend({type:\"grid\",axis:n,index:e,group:r,element:h},c))},i.createLabel=function(t,e,n,s,a,r,o,l,c,h,u){var d,p={};if(p[a.units.pos]=t+o[a.units.pos],p[a.counterUnits.pos]=o[a.counterUnits.pos],p[a.units.len]=e,p[a.counterUnits.len]=Math.max(0,r-10),h){var f='<span class=\"'+c.join(\" \")+'\" style=\"'+a.units.len+\": \"+Math.round(p[a.units.len])+\"px; \"+a.counterUnits.len+\": \"+Math.round(p[a.counterUnits.len])+'px\">'+s[n]+\"</span>\";d=l.foreignObject(f,i.extend({style:\"overflow: visible;\"},p))}else d=l.elem(\"text\",p,c.join(\" \")).text(s[n]);u.emit(\"draw\",i.extend({type:\"label\",axis:a,index:n,group:l,element:d,text:s[n]},p))},i.getSeriesOption=function(t,e,i){if(t.name&&e.series&&e.series[t.name]){var n=e.series[t.name];return n.hasOwnProperty(i)?n[i]:e[i]}return e[i]},i.optionsProvider=function(e,n,s){function a(e){var a=o;if(o=i.extend({},c),n)for(l=0;l<n.length;l++){var r=t.matchMedia(n[l][0]);r.matches&&(o=i.extend(o,n[l][1]))}s&&e&&s.emit(\"optionsChanged\",{previousOptions:a,currentOptions:o})}function r(){h.forEach(function(t){t.removeListener(a)})}var o,l,c=i.extend({},e),h=[];if(!t.matchMedia)throw\"window.matchMedia not found! Make sure you're using a polyfill.\";if(n)for(l=0;l<n.length;l++){var u=t.matchMedia(n[l][0]);u.addListener(a),h.push(u)}return a(),{removeMediaQueryListeners:r,getCurrentOptions:function(){return i.extend({},o)}}},i.splitIntoSegments=function(t,e,n){var s={increasingX:!1,fillHoles:!1};n=i.extend({},s,n);for(var a=[],r=!0,o=0;o<t.length;o+=2)void 0===e[o/2].value?n.fillHoles||(r=!0):(n.increasingX&&o>=2&&t[o]<=t[o-2]&&(r=!0),r&&(a.push({pathCoordinates:[],valueData:[]}),r=!1),a[a.length-1].pathCoordinates.push(t[o],t[o+1]),a[a.length-1].valueData.push(e[o/2]));return a}}(window,document,t),function(t,e,i){\"use strict\";i.Interpolation={},i.Interpolation.none=function(t){var e={fillHoles:!1};return t=i.extend({},e,t),function(e,n){for(var s=new i.Svg.Path,a=!0,r=0;r<e.length;r+=2){var o=e[r],l=e[r+1],c=n[r/2];void 0!==c.value?(a?s.move(o,l,!1,c):s.line(o,l,!1,c),a=!1):t.fillHoles||(a=!0)}return s}},i.Interpolation.simple=function(t){var e={divisor:2,fillHoles:!1};t=i.extend({},e,t);var n=1/Math.max(1,t.divisor);return function(e,s){for(var a,r,o,l=new i.Svg.Path,c=0;c<e.length;c+=2){var h=e[c],u=e[c+1],d=(h-a)*n,p=s[c/2];void 0!==p.value?(void 0===o?l.move(h,u,!1,p):l.curve(a+d,r,h-d,u,h,u,!1,p),a=h,r=u,o=p):t.fillHoles||(a=h=o=void 0)}return l}},i.Interpolation.cardinal=function(t){var e={tension:1,fillHoles:!1};t=i.extend({},e,t);var n=Math.min(1,Math.max(0,t.tension)),s=1-n;return function e(a,r){var o=i.splitIntoSegments(a,r,{fillHoles:t.fillHoles});if(o.length){if(o.length>1){var l=[];return o.forEach(function(t){l.push(e(t.pathCoordinates,t.valueData))}),i.Svg.Path.join(l)}if(a=o[0].pathCoordinates,r=o[0].valueData,a.length<=4)return i.Interpolation.none()(a,r);for(var c=(new i.Svg.Path).move(a[0],a[1],!1,r[0]),h=0,u=a.length;u-2>h;h+=2){var d=[{x:+a[h-2],y:+a[h-1]},{x:+a[h],y:+a[h+1]},{x:+a[h+2],y:+a[h+3]},{x:+a[h+4],y:+a[h+5]}];u-4===h?d[3]=d[2]:h||(d[0]={x:+a[h],y:+a[h+1]}),c.curve(n*(-d[0].x+6*d[1].x+d[2].x)/6+s*d[2].x,n*(-d[0].y+6*d[1].y+d[2].y)/6+s*d[2].y,n*(d[1].x+6*d[2].x-d[3].x)/6+s*d[2].x,n*(d[1].y+6*d[2].y-d[3].y)/6+s*d[2].y,d[2].x,d[2].y,!1,r[(h+2)/2])}return c}return i.Interpolation.none()([])}},i.Interpolation.monotoneCubic=function(t){var e={fillHoles:!1};return t=i.extend({},e,t),function e(n,s){var a=i.splitIntoSegments(n,s,{fillHoles:t.fillHoles,increasingX:!0});if(a.length){if(a.length>1){var r=[];return a.forEach(function(t){r.push(e(t.pathCoordinates,t.valueData))}),i.Svg.Path.join(r)}if(n=a[0].pathCoordinates,s=a[0].valueData,n.length<=4)return i.Interpolation.none()(n,s);var o,l,c=[],h=[],u=n.length/2,d=[],p=[],f=[],m=[];for(o=0;o<u;o++)c[o]=n[2*o],h[o]=n[2*o+1];for(o=0;o<u-1;o++)f[o]=h[o+1]-h[o],m[o]=c[o+1]-c[o],p[o]=f[o]/m[o];for(d[0]=p[0],d[u-1]=p[u-2],o=1;o<u-1;o++)0===p[o]||0===p[o-1]||p[o-1]>0!=p[o]>0?d[o]=0:(d[o]=3*(m[o-1]+m[o])/((2*m[o]+m[o-1])/p[o-1]+(m[o]+2*m[o-1])/p[o]),isFinite(d[o])||(d[o]=0));for(l=(new i.Svg.Path).move(c[0],h[0],!1,s[0]),o=0;o<u-1;o++)l.curve(c[o]+m[o]/3,h[o]+d[o]*m[o]/3,c[o+1]-m[o]/3,h[o+1]-d[o+1]*m[o]/3,c[o+1],h[o+1],!1,s[o+1]);return l}return i.Interpolation.none()([])}},i.Interpolation.step=function(t){var e={postpone:!0,fillHoles:!1};return t=i.extend({},e,t),function(e,n){for(var s,a,r,o=new i.Svg.Path,l=0;l<e.length;l+=2){var c=e[l],h=e[l+1],u=n[l/2];void 0!==u.value?(void 0===r?o.move(c,h,!1,u):(t.postpone?o.line(c,a,!1,r):o.line(s,h,!1,u),o.line(c,h,!1,u)),s=c,a=h,r=u):t.fillHoles||(s=a=r=void 0)}return o}}}(window,document,t),function(t,e,i){\"use strict\";i.EventEmitter=function(){function t(t,e){n[t]=n[t]||[],n[t].push(e)}function e(t,e){n[t]&&(e?(n[t].splice(n[t].indexOf(e),1),0===n[t].length&&delete n[t]):delete n[t])}function i(t,e){n[t]&&n[t].forEach(function(t){t(e)}),n[\"*\"]&&n[\"*\"].forEach(function(i){i(t,e)})}var n=[];return{addEventHandler:t,removeEventHandler:e,emit:i}}}(window,document,t),function(t,e,i){\"use strict\";function n(t){var e=[];if(t.length)for(var i=0;i<t.length;i++)e.push(t[i]);return e}function s(t,e){var n=e||this.prototype||i.Class,s=Object.create(n);i.Class.cloneDefinitions(s,t);var a=function(){var t,e=s.constructor||function(){};return t=this===i?Object.create(s):this,e.apply(t,Array.prototype.slice.call(arguments,0)),t};return a.prototype=s,a.super=n,a.extend=this.extend,a}function a(){var t=n(arguments),e=t[0];return t.splice(1,t.length-1).forEach(function(t){Object.getOwnPropertyNames(t).forEach(function(i){delete e[i],Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(t,i))})}),e}i.Class={extend:s,cloneDefinitions:a}}(window,document,t),function(t,e,i){\"use strict\";function n(t,e,n){return t&&(this.data=t,this.eventEmitter.emit(\"data\",{type:\"update\",data:this.data})),e&&(this.options=i.extend({},n?this.options:this.defaultOptions,e),this.initializeTimeoutId||(this.optionsProvider.removeMediaQueryListeners(),this.optionsProvider=i.optionsProvider(this.options,this.responsiveOptions,this.eventEmitter))),this.initializeTimeoutId||this.createChart(this.optionsProvider.getCurrentOptions()),this}function s(){return this.initializeTimeoutId?t.clearTimeout(this.initializeTimeoutId):(t.removeEventListener(\"resize\",this.resizeListener),this.optionsProvider.removeMediaQueryListeners()),this}function a(t,e){return this.eventEmitter.addEventHandler(t,e),this}function r(t,e){return this.eventEmitter.removeEventHandler(t,e),this}function o(){t.addEventListener(\"resize\",this.resizeListener),this.optionsProvider=i.optionsProvider(this.options,this.responsiveOptions,this.eventEmitter),this.eventEmitter.addEventHandler(\"optionsChanged\",function(){this.update()}.bind(this)),this.options.plugins&&this.options.plugins.forEach(function(t){t instanceof Array?t[0](this,t[1]):t(this)}.bind(this)),this.eventEmitter.emit(\"data\",{type:\"initial\",data:this.data}),this.createChart(this.optionsProvider.getCurrentOptions()),this.initializeTimeoutId=void 0}function l(t,e,n,s,a){this.container=i.querySelector(t),this.data=e,this.defaultOptions=n,this.options=s,this.responsiveOptions=a,this.eventEmitter=i.EventEmitter(),this.supportsForeignObject=i.Svg.isSupported(\"Extensibility\"),this.supportsAnimations=i.Svg.isSupported(\"AnimationEventsAttribute\"),this.resizeListener=function(){this.update()}.bind(this),this.container&&(this.container.__chartist__&&this.container.__chartist__.detach(),this.container.__chartist__=this),this.initializeTimeoutId=setTimeout(o.bind(this),0)}i.Base=i.Class.extend({constructor:l,optionsProvider:void 0,container:void 0,svg:void 0,eventEmitter:void 0,createChart:function(){throw new Error(\"Base chart type can't be instantiated!\")},update:n,detach:s,on:a,off:r,version:i.version,supportsForeignObject:!1})}(window,document,t),function(t,e,i){\"use strict\";function n(t,n,s,a,r){t instanceof Element?this._node=t:(this._node=e.createElementNS(i.namespaces.svg,t),\"svg\"===t&&this.attr({\"xmlns:ct\":i.namespaces.ct})),n&&this.attr(n),s&&this.addClass(s),a&&(r&&a._node.firstChild?a._node.insertBefore(this._node,a._node.firstChild):a._node.appendChild(this._node))}function s(t,e){return\"string\"==typeof t?e?this._node.getAttributeNS(e,t):this._node.getAttribute(t):(Object.keys(t).forEach(function(e){if(void 0!==t[e])if(-1!==e.indexOf(\":\")){var n=e.split(\":\");this._node.setAttributeNS(i.namespaces[n[0]],e,t[e])}else this._node.setAttribute(e,t[e])}.bind(this)),this)}function a(t,e,n,s){return new i.Svg(t,e,n,this,s)}function r(){return this._node.parentNode instanceof SVGElement?new i.Svg(this._node.parentNode):null}function o(){for(var t=this._node;\"svg\"!==t.nodeName;)t=t.parentNode;return new i.Svg(t)}function l(t){var e=this._node.querySelector(t);return e?new i.Svg(e):null}function c(t){var e=this._node.querySelectorAll(t);return e.length?new i.Svg.List(e):null}function h(t,n,s,a){if(\"string\"==typeof t){var r=e.createElement(\"div\");r.innerHTML=t,t=r.firstChild}t.setAttribute(\"xmlns\",i.namespaces.xmlns);var o=this.elem(\"foreignObject\",n,s,a);return o._node.appendChild(t),o}function u(t){return this._node.appendChild(e.createTextNode(t)),this}function d(){for(;this._node.firstChild;)this._node.removeChild(this._node.firstChild);return this}function p(){return this._node.parentNode.removeChild(this._node),this.parent()}function f(t){return this._node.parentNode.replaceChild(t._node,this._node),t}function m(t,e){return e&&this._node.firstChild?this._node.insertBefore(t._node,this._node.firstChild):this._node.appendChild(t._node),this}function v(){return this._node.getAttribute(\"class\")?this._node.getAttribute(\"class\").trim().split(/\\s+/):[]}function g(t){return this._node.setAttribute(\"class\",this.classes(this._node).concat(t.trim().split(/\\s+/)).filter(function(t,e,i){return i.indexOf(t)===e}).join(\" \")),this}function x(t){var e=t.trim().split(/\\s+/);return this._node.setAttribute(\"class\",this.classes(this._node).filter(function(t){return-1===e.indexOf(t)}).join(\" \")),this}function y(){return this._node.setAttribute(\"class\",\"\"),this}function b(){return this._node.getBoundingClientRect().height}function w(){return this._node.getBoundingClientRect().width}function E(t,e,n){return void 0===e&&(e=!0),Object.keys(t).forEach(function(s){function a(t,e){var a,r,o,l={};t.easing&&(o=t.easing instanceof Array?t.easing:i.Svg.Easing[t.easing],delete t.easing),t.begin=i.ensureUnit(t.begin,\"ms\"),t.dur=i.ensureUnit(t.dur,\"ms\"),o&&(t.calcMode=\"spline\",t.keySplines=o.join(\" \"),t.keyTimes=\"0;1\"),e&&(t.fill=\"freeze\",l[s]=t.from,this.attr(l),r=i.quantity(t.begin||0).value,t.begin=\"indefinite\"),a=this.elem(\"animate\",i.extend({attributeName:s},t)),e&&setTimeout(function(){try{a._node.beginElement()}catch(e){l[s]=t.to,this.attr(l),a.remove()}}.bind(this),r),n&&a._node.addEventListener(\"beginEvent\",function(){n.emit(\"animationBegin\",{element:this,animate:a._node,params:t})}.bind(this)),a._node.addEventListener(\"endEvent\",function(){n&&n.emit(\"animationEnd\",{element:this,animate:a._node,params:t}),e&&(l[s]=t.to,this.attr(l),a.remove())}.bind(this))}t[s]instanceof Array?t[s].forEach(function(t){a.bind(this)(t,!1)}.bind(this)):a.bind(this)(t[s],e)}.bind(this)),this}function A(t){var e=this;this.svgElements=[];for(var n=0;n<t.length;n++)this.svgElements.push(new i.Svg(t[n]));Object.keys(i.Svg.prototype).filter(function(t){return-1===[\"constructor\",\"parent\",\"querySelector\",\"querySelectorAll\",\"replace\",\"append\",\"classes\",\"height\",\"width\"].indexOf(t)}).forEach(function(t){e[t]=function(){var n=Array.prototype.slice.call(arguments,0);return e.svgElements.forEach(function(e){i.Svg.prototype[t].apply(e,n)}),e}})}i.Svg=i.Class.extend({constructor:n,attr:s,elem:a,parent:r,root:o,querySelector:l,querySelectorAll:c,foreignObject:h,text:u,empty:d,remove:p,replace:f,append:m,classes:v,addClass:g,removeClass:x,removeAllClasses:y,height:b,width:w,animate:E}),i.Svg.isSupported=function(t){return e.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#\"+t,\"1.1\")};var S={easeInSine:[.47,0,.745,.715],easeOutSine:[.39,.575,.565,1],easeInOutSine:[.445,.05,.55,.95],easeInQuad:[.55,.085,.68,.53],easeOutQuad:[.25,.46,.45,.94],easeInOutQuad:[.455,.03,.515,.955],easeInCubic:[.55,.055,.675,.19],easeOutCubic:[.215,.61,.355,1],easeInOutCubic:[.645,.045,.355,1],easeInQuart:[.895,.03,.685,.22],easeOutQuart:[.165,.84,.44,1],easeInOutQuart:[.77,0,.175,1],easeInQuint:[.755,.05,.855,.06],easeOutQuint:[.23,1,.32,1],easeInOutQuint:[.86,0,.07,1],easeInExpo:[.95,.05,.795,.035],easeOutExpo:[.19,1,.22,1],easeInOutExpo:[1,0,0,1],easeInCirc:[.6,.04,.98,.335],easeOutCirc:[.075,.82,.165,1],easeInOutCirc:[.785,.135,.15,.86],easeInBack:[.6,-.28,.735,.045],easeOutBack:[.175,.885,.32,1.275],easeInOutBack:[.68,-.55,.265,1.55]};i.Svg.Easing=S,i.Svg.List=i.Class.extend({constructor:A})}(window,document,t),function(t,e,i){\"use strict\";function n(t,e,n,s,a,r){var o=i.extend({command:a?t.toLowerCase():t.toUpperCase()},e,r?{data:r}:{});n.splice(s,0,o)}function s(t,e){t.forEach(function(i,n){b[i.command.toLowerCase()].forEach(function(s,a){e(i,s,n,a,t)})})}function a(t,e){this.pathElements=[],this.pos=0,this.close=t,this.options=i.extend({},w,e)}function r(t){return void 0!==t?(this.pos=Math.max(0,Math.min(this.pathElements.length,t)),this):this.pos}function o(t){return this.pathElements.splice(this.pos,t),this}function l(t,e,i,s){return n(\"M\",{x:+t,y:+e},this.pathElements,this.pos++,i,s),this}function c(t,e,i,s){return n(\"L\",{x:+t,y:+e},this.pathElements,this.pos++,i,s),this}function h(t,e,i,s,a,r,o,l){return n(\"C\",{x1:+t,y1:+e,x2:+i,y2:+s,x:+a,y:+r},this.pathElements,this.pos++,o,l),this}function u(t,e,i,s,a,r,o,l,c){return n(\"A\",{rx:+t,ry:+e,xAr:+i,lAf:+s,sf:+a,x:+r,y:+o},this.pathElements,this.pos++,l,c),this}function d(t){var e=t.replace(/([A-Za-z])([0-9])/g,\"$1 $2\").replace(/([0-9])([A-Za-z])/g,\"$1 $2\").split(/[\\s,]+/).reduce(function(t,e){return e.match(/[A-Za-z]/)&&t.push([]),t[t.length-1].push(e),t},[]);\"Z\"===e[e.length-1][0].toUpperCase()&&e.pop();var n=e.map(function(t){var e=t.shift(),n=b[e.toLowerCase()];return i.extend({command:e},n.reduce(function(e,i,n){return e[i]=+t[n],e},{}))}),s=[this.pos,0];return Array.prototype.push.apply(s,n),Array.prototype.splice.apply(this.pathElements,s),this.pos+=n.length,this}function p(){var t=Math.pow(10,this.options.accuracy);return this.pathElements.reduce(function(e,i){var n=b[i.command.toLowerCase()].map(function(e){return this.options.accuracy?Math.round(i[e]*t)/t:i[e]}.bind(this));return e+i.command+n.join(\",\")}.bind(this),\"\")+(this.close?\"Z\":\"\")}function f(t,e){return s(this.pathElements,function(i,n){i[n]*=\"x\"===n[0]?t:e}),this}function m(t,e){return s(this.pathElements,function(i,n){i[n]+=\"x\"===n[0]?t:e}),this}function v(t){return s(this.pathElements,function(e,i,n,s,a){var r=t(e,i,n,s,a);(r||0===r)&&(e[i]=r)}),this}function g(t){var e=new i.Svg.Path(t||this.close);return e.pos=this.pos,e.pathElements=this.pathElements.slice().map(function(t){return i.extend({},t)}),e.options=i.extend({},this.options),e}function x(t){var e=[new i.Svg.Path];return this.pathElements.forEach(function(n){n.command===t.toUpperCase()&&0!==e[e.length-1].pathElements.length&&e.push(new i.Svg.Path),e[e.length-1].pathElements.push(n)}),e}function y(t,e,n){for(var s=new i.Svg.Path(e,n),a=0;a<t.length;a++)for(var r=t[a],o=0;o<r.pathElements.length;o++)s.pathElements.push(r.pathElements[o]);return s}var b={m:[\"x\",\"y\"],l:[\"x\",\"y\"],c:[\"x1\",\"y1\",\"x2\",\"y2\",\"x\",\"y\"],a:[\"rx\",\"ry\",\"xAr\",\"lAf\",\"sf\",\"x\",\"y\"]},w={accuracy:3};i.Svg.Path=i.Class.extend({constructor:a,position:r,remove:o,move:l,line:c,curve:h,arc:u,scale:f,translate:m,transform:v,parse:d,stringify:p,clone:g,splitByCommand:x}),i.Svg.Path.elementDescriptions=b,i.Svg.Path.join=y}(window,document,t),function(t,e,i){\"use strict\";function n(t,e,i,n){this.units=t,this.counterUnits=t===a.x?a.y:a.x,this.chartRect=e,this.axisLength=e[t.rectEnd]-e[t.rectStart],this.gridOffset=e[t.rectOffset],this.ticks=i,this.options=n}function s(t,e,n,s,a){var r=s[\"axis\"+this.units.pos.toUpperCase()],o=this.ticks.map(this.projectValue.bind(this)),l=this.ticks.map(r.labelInterpolationFnc);o.forEach(function(c,h){var u,d={x:0,y:0};u=o[h+1]?o[h+1]-c:Math.max(this.axisLength-c,30),i.isFalseyButZero(l[h])&&\"\"!==l[h]||(\"x\"===this.units.pos?(c=this.chartRect.x1+c,d.x=s.axisX.labelOffset.x,\"start\"===s.axisX.position?d.y=this.chartRect.padding.top+s.axisX.labelOffset.y+(n?5:20):d.y=this.chartRect.y1+s.axisX.labelOffset.y+(n?5:20)):(c=this.chartRect.y1-c,d.y=s.axisY.labelOffset.y-(n?u:0),\"start\"===s.axisY.position?d.x=n?this.chartRect.padding.left+s.axisY.labelOffset.x:this.chartRect.x1-10:d.x=this.chartRect.x2+s.axisY.labelOffset.x+10),r.showGrid&&i.createGrid(c,h,this,this.gridOffset,this.chartRect[this.counterUnits.len](),t,[s.classNames.grid,s.classNames[this.units.dir]],a),r.showLabel&&i.createLabel(c,u,h,l,this,r.offset,d,e,[s.classNames.label,s.classNames[this.units.dir],s.classNames[r.position]],n,a))}.bind(this))}var a={x:{pos:\"x\",len:\"width\",dir:\"horizontal\",rectStart:\"x1\",rectEnd:\"x2\",rectOffset:\"y2\"},y:{pos:\"y\",len:\"height\",dir:\"vertical\",rectStart:\"y2\",rectEnd:\"y1\",rectOffset:\"x1\"}};i.Axis=i.Class.extend({constructor:n,createGridAndLabels:s,projectValue:function(t,e,i){throw new Error(\"Base axis can't be instantiated!\")}}),i.Axis.units=a}(window,document,t),function(t,e,i){\"use strict\";function n(t,e,n,s){var a=s.highLow||i.getHighLow(e.normalized,s,t.pos);this.bounds=i.getBounds(n[t.rectEnd]-n[t.rectStart],a,s.scaleMinSpace||20,s.onlyInteger),this.range={min:this.bounds.min,max:this.bounds.max},i.AutoScaleAxis.super.constructor.call(this,t,n,this.bounds.values,s)}function s(t){return this.axisLength*(+i.getMultiValue(t,this.units.pos)-this.bounds.min)/this.bounds.range}i.AutoScaleAxis=i.Axis.extend({constructor:n,projectValue:s})}(window,document,t),function(t,e,i){\"use strict\";function n(t,e,n,s){var a=s.highLow||i.getHighLow(e.normalized,s,t.pos);this.divisor=s.divisor||1,this.ticks=s.ticks||i.times(this.divisor).map(function(t,e){return a.low+(a.high-a.low)/this.divisor*e}.bind(this)),this.ticks.sort(function(t,e){return t-e}),this.range={min:a.low,max:a.high},i.FixedScaleAxis.super.constructor.call(this,t,n,this.ticks,s),this.stepLength=this.axisLength/this.divisor}function s(t){return this.axisLength*(+i.getMultiValue(t,this.units.pos)-this.range.min)/(this.range.max-this.range.min)}i.FixedScaleAxis=i.Axis.extend({constructor:n,projectValue:s})}(window,document,t),function(t,e,i){\"use strict\";function n(t,e,n,s){i.StepAxis.super.constructor.call(this,t,n,s.ticks,s),this.stepLength=this.axisLength/(s.ticks.length-(s.stretch?1:0))}function s(t,e){return this.stepLength*e}i.StepAxis=i.Axis.extend({constructor:n,projectValue:s})}(window,document,t),function(t,e,i){\"use strict\";function n(t){this.data=i.normalizeData(this.data);var e={raw:this.data,normalized:i.getDataArray(this.data,t.reverseData,!0)};this.svg=i.createSvg(this.container,t.width,t.height,t.classNames.chart);var n,s,r=this.svg.elem(\"g\").addClass(t.classNames.gridGroup),o=this.svg.elem(\"g\"),l=this.svg.elem(\"g\").addClass(t.classNames.labelGroup),c=i.createChartRect(this.svg,t,a.padding);n=void 0===t.axisX.type?new i.StepAxis(i.Axis.units.x,e,c,i.extend({},t.axisX,{ticks:e.raw.labels,stretch:t.fullWidth})):t.axisX.type.call(i,i.Axis.units.x,e,c,t.axisX),s=void 0===t.axisY.type?new i.AutoScaleAxis(i.Axis.units.y,e,c,i.extend({},t.axisY,{high:i.isNum(t.high)?t.high:t.axisY.high,low:i.isNum(t.low)?t.low:t.axisY.low})):t.axisY.type.call(i,i.Axis.units.y,e,c,t.axisY),n.createGridAndLabels(r,l,this.supportsForeignObject,t,this.eventEmitter),s.createGridAndLabels(r,l,this.supportsForeignObject,t,this.eventEmitter),e.raw.series.forEach(function(a,r){var l=o.elem(\"g\");l.attr({\"ct:series-name\":a.name,\"ct:meta\":i.serialize(a.meta)}),l.addClass([t.classNames.series,a.className||t.classNames.series+\"-\"+i.alphaNumerate(r)].join(\" \"));var h=[],u=[];e.normalized[r].forEach(function(t,o){var l={x:c.x1+n.projectValue(t,o,e.normalized[r]),y:c.y1-s.projectValue(t,o,e.normalized[r])};h.push(l.x,l.y),u.push({value:t,valueIndex:o,meta:i.getMetaData(a,o)})}.bind(this));var d={lineSmooth:i.getSeriesOption(a,t,\"lineSmooth\"),showPoint:i.getSeriesOption(a,t,\"showPoint\"),showLine:i.getSeriesOption(a,t,\"showLine\"),showArea:i.getSeriesOption(a,t,\"showArea\"),areaBase:i.getSeriesOption(a,t,\"areaBase\")},p=\"function\"==typeof d.lineSmooth?d.lineSmooth:d.lineSmooth?i.Interpolation.monotoneCubic():i.Interpolation.none(),f=p(h,u);if(d.showPoint&&f.pathElements.forEach(function(e){var o=l.elem(\"line\",{x1:e.x,y1:e.y,x2:e.x+.01,y2:e.y},t.classNames.point).attr({\"ct:value\":[e.data.value.x,e.data.value.y].filter(i.isNum).join(\",\"),\"ct:meta\":e.data.meta});this.eventEmitter.emit(\"draw\",{type:\"point\",value:e.data.value,index:e.data.valueIndex,meta:e.data.meta,series:a,seriesIndex:r,axisX:n,axisY:s,group:l,element:o,x:e.x,y:e.y})}.bind(this)),d.showLine){var m=l.elem(\"path\",{d:f.stringify()},t.classNames.line,!0);this.eventEmitter.emit(\"draw\",{type:\"line\",values:e.normalized[r],path:f.clone(),chartRect:c,index:r,series:a,seriesIndex:r,axisX:n,axisY:s,group:l,element:m})}if(d.showArea&&s.range){var v=Math.max(Math.min(d.areaBase,s.range.max),s.range.min),g=c.y1-s.projectValue(v);f.splitByCommand(\"M\").filter(function(t){return t.pathElements.length>1}).map(function(t){var e=t.pathElements[0],i=t.pathElements[t.pathElements.length-1];return t.clone(!0).position(0).remove(1).move(e.x,g).line(e.x,e.y).position(t.pathElements.length+1).line(i.x,g)}).forEach(function(i){var o=l.elem(\"path\",{d:i.stringify()},t.classNames.area,!0);this.eventEmitter.emit(\"draw\",{type:\"area\",values:e.normalized[r],path:i.clone(),series:a,seriesIndex:r,axisX:n,axisY:s,chartRect:c,index:r,group:l,element:o})}.bind(this))}}.bind(this)),this.eventEmitter.emit(\"created\",{bounds:s.bounds,chartRect:c,axisX:n,axisY:s,svg:this.svg,options:t})}function s(t,e,n,s){i.Line.super.constructor.call(this,t,e,a,i.extend({},a,n),s)}var a={axisX:{offset:30,position:\"end\",labelOffset:{x:0,y:0},showLabel:!0,showGrid:!0,labelInterpolationFnc:i.noop,type:void 0},axisY:{offset:40,position:\"start\",labelOffset:{x:0,y:0},showLabel:!0,showGrid:!0,labelInterpolationFnc:i.noop,type:void 0,scaleMinSpace:20,onlyInteger:!1},width:void 0,height:void 0,showLine:!0,showPoint:!0,showArea:!1,areaBase:0,lineSmooth:!0,low:void 0,high:void 0,chartPadding:{top:15,right:15,bottom:5,left:10},fullWidth:!1,reverseData:!1,classNames:{chart:\"ct-chart-line\",label:\"ct-label\",labelGroup:\"ct-labels\",series:\"ct-series\",line:\"ct-line\",point:\"ct-point\",area:\"ct-area\",grid:\"ct-grid\",gridGroup:\"ct-grids\",vertical:\"ct-vertical\",horizontal:\"ct-horizontal\",start:\"ct-start\",end:\"ct-end\"}};i.Line=i.Base.extend({constructor:s,createChart:n})}(window,document,t),function(t,e,i){\"use strict\";function n(t){this.data=i.normalizeData(this.data);var e,n={raw:this.data,normalized:t.distributeSeries?i.getDataArray(this.data,t.reverseData,t.horizontalBars?\"x\":\"y\").map(function(t){return[t]}):i.getDataArray(this.data,t.reverseData,t.horizontalBars?\"x\":\"y\")};this.svg=i.createSvg(this.container,t.width,t.height,t.classNames.chart+(t.horizontalBars?\" \"+t.classNames.horizontalBars:\"\"));var s=this.svg.elem(\"g\").addClass(t.classNames.gridGroup),r=this.svg.elem(\"g\"),o=this.svg.elem(\"g\").addClass(t.classNames.labelGroup);if(t.stackBars&&0!==n.normalized.length){var l=i.serialMap(n.normalized,function(){return Array.prototype.slice.call(arguments).map(function(t){return t}).reduce(function(t,e){return{x:t.x+(e&&e.x)||0,y:t.y+(e&&e.y)||0}},{x:0,y:0})});e=i.getHighLow([l],i.extend({},t,{referenceValue:0}),t.horizontalBars?\"x\":\"y\")}else e=i.getHighLow(n.normalized,i.extend({},t,{referenceValue:0}),t.horizontalBars?\"x\":\"y\");e.high=+t.high||(0===t.high?0:e.high),e.low=+t.low||(0===t.low?0:e.low);var c,h,u,d,p,f=i.createChartRect(this.svg,t,a.padding);h=t.distributeSeries&&t.stackBars?n.raw.labels.slice(0,1):n.raw.labels,t.horizontalBars?(c=d=void 0===t.axisX.type?new i.AutoScaleAxis(i.Axis.units.x,n,f,i.extend({},t.axisX,{highLow:e,referenceValue:0})):t.axisX.type.call(i,i.Axis.units.x,n,f,i.extend({},t.axisX,{highLow:e,referenceValue:0})),u=p=void 0===t.axisY.type?new i.StepAxis(i.Axis.units.y,n,f,{ticks:h}):t.axisY.type.call(i,i.Axis.units.y,n,f,t.axisY)):(u=d=void 0===t.axisX.type?new i.StepAxis(i.Axis.units.x,n,f,{ticks:h}):t.axisX.type.call(i,i.Axis.units.x,n,f,t.axisX),c=p=void 0===t.axisY.type?new i.AutoScaleAxis(i.Axis.units.y,n,f,i.extend({},t.axisY,{highLow:e,referenceValue:0})):t.axisY.type.call(i,i.Axis.units.y,n,f,i.extend({},t.axisY,{highLow:e,referenceValue:0})));var m=t.horizontalBars?f.x1+c.projectValue(0):f.y1-c.projectValue(0),v=[];u.createGridAndLabels(s,o,this.supportsForeignObject,t,this.eventEmitter),\nc.createGridAndLabels(s,o,this.supportsForeignObject,t,this.eventEmitter),n.raw.series.forEach(function(e,s){var a,o,l=s-(n.raw.series.length-1)/2;a=t.distributeSeries&&!t.stackBars?u.axisLength/n.normalized.length/2:t.distributeSeries&&t.stackBars?u.axisLength/2:u.axisLength/n.normalized[s].length/2,o=r.elem(\"g\"),o.attr({\"ct:series-name\":e.name,\"ct:meta\":i.serialize(e.meta)}),o.addClass([t.classNames.series,e.className||t.classNames.series+\"-\"+i.alphaNumerate(s)].join(\" \")),n.normalized[s].forEach(function(r,h){var g,x,y,b;if(b=t.distributeSeries&&!t.stackBars?s:t.distributeSeries&&t.stackBars?0:h,g=t.horizontalBars?{x:f.x1+c.projectValue(r&&r.x?r.x:0,h,n.normalized[s]),y:f.y1-u.projectValue(r&&r.y?r.y:0,b,n.normalized[s])}:{x:f.x1+u.projectValue(r&&r.x?r.x:0,b,n.normalized[s]),y:f.y1-c.projectValue(r&&r.y?r.y:0,h,n.normalized[s])},u instanceof i.StepAxis&&(u.options.stretch||(g[u.units.pos]+=a*(t.horizontalBars?-1:1)),g[u.units.pos]+=t.stackBars||t.distributeSeries?0:l*t.seriesBarDistance*(t.horizontalBars?-1:1)),y=v[h]||m,v[h]=y-(m-g[u.counterUnits.pos]),void 0!==r){var w={};w[u.units.pos+\"1\"]=g[u.units.pos],w[u.units.pos+\"2\"]=g[u.units.pos],!t.stackBars||\"accumulate\"!==t.stackMode&&t.stackMode?(w[u.counterUnits.pos+\"1\"]=m,w[u.counterUnits.pos+\"2\"]=g[u.counterUnits.pos]):(w[u.counterUnits.pos+\"1\"]=y,w[u.counterUnits.pos+\"2\"]=v[h]),w.x1=Math.min(Math.max(w.x1,f.x1),f.x2),w.x2=Math.min(Math.max(w.x2,f.x1),f.x2),w.y1=Math.min(Math.max(w.y1,f.y2),f.y1),w.y2=Math.min(Math.max(w.y2,f.y2),f.y1),x=o.elem(\"line\",w,t.classNames.bar).attr({\"ct:value\":[r.x,r.y].filter(i.isNum).join(\",\"),\"ct:meta\":i.getMetaData(e,h)}),this.eventEmitter.emit(\"draw\",i.extend({type:\"bar\",value:r,index:h,meta:i.getMetaData(e,h),series:e,seriesIndex:s,axisX:d,axisY:p,chartRect:f,group:o,element:x},w))}}.bind(this))}.bind(this)),this.eventEmitter.emit(\"created\",{bounds:c.bounds,chartRect:f,axisX:d,axisY:p,svg:this.svg,options:t})}function s(t,e,n,s){i.Bar.super.constructor.call(this,t,e,a,i.extend({},a,n),s)}var a={axisX:{offset:30,position:\"end\",labelOffset:{x:0,y:0},showLabel:!0,showGrid:!0,labelInterpolationFnc:i.noop,scaleMinSpace:30,onlyInteger:!1},axisY:{offset:40,position:\"start\",labelOffset:{x:0,y:0},showLabel:!0,showGrid:!0,labelInterpolationFnc:i.noop,scaleMinSpace:20,onlyInteger:!1},width:void 0,height:void 0,high:void 0,low:void 0,chartPadding:{top:15,right:15,bottom:5,left:10},seriesBarDistance:15,stackBars:!1,stackMode:\"accumulate\",horizontalBars:!1,distributeSeries:!1,reverseData:!1,classNames:{chart:\"ct-chart-bar\",horizontalBars:\"ct-horizontal-bars\",label:\"ct-label\",labelGroup:\"ct-labels\",series:\"ct-series\",bar:\"ct-bar\",grid:\"ct-grid\",gridGroup:\"ct-grids\",vertical:\"ct-vertical\",horizontal:\"ct-horizontal\",start:\"ct-start\",end:\"ct-end\"}};i.Bar=i.Base.extend({constructor:s,createChart:n})}(window,document,t),function(t,e,i){\"use strict\";function n(t,e,i){var n=e.x>t.x;return n&&\"explode\"===i||!n&&\"implode\"===i?\"start\":n&&\"implode\"===i||!n&&\"explode\"===i?\"end\":\"middle\"}function s(t){this.data=i.normalizeData(this.data);var e,s,a,o,l,c=[],h=t.startAngle,u=i.getDataArray(this.data,t.reverseData);this.svg=i.createSvg(this.container,t.width,t.height,t.donut?t.classNames.chartDonut:t.classNames.chartPie),s=i.createChartRect(this.svg,t,r.padding),a=Math.min(s.width()/2,s.height()/2),l=t.total||u.reduce(function(t,e){return t+e},0);var d=i.quantity(t.donutWidth);\"%\"===d.unit&&(d.value*=a/100),a-=t.donut?d.value/2:0,o=\"outside\"===t.labelPosition||t.donut?a:\"center\"===t.labelPosition?0:a/2,o+=t.labelOffset;var p={x:s.x1+s.width()/2,y:s.y2+s.height()/2},f=1===this.data.series.filter(function(t){return t.hasOwnProperty(\"value\")?0!==t.value:0!==t}).length;t.showLabel&&(e=this.svg.elem(\"g\",null,null,!0));for(var m=0;m<this.data.series.length;m++)if(0!==u[m]||!t.ignoreEmptyValues){var v=this.data.series[m];c[m]=this.svg.elem(\"g\",null,null,!0),c[m].attr({\"ct:series-name\":v.name}),c[m].addClass([t.classNames.series,v.className||t.classNames.series+\"-\"+i.alphaNumerate(m)].join(\" \"));var g=h+u[m]/l*360,x=Math.max(0,h-(0===m||f?0:.2));g-x>=359.99&&(g=x+359.99);var y=i.polarToCartesian(p.x,p.y,a,x),b=i.polarToCartesian(p.x,p.y,a,g),w=new i.Svg.Path(!t.donut).move(b.x,b.y).arc(a,a,0,g-h>180,0,y.x,y.y);t.donut||w.line(p.x,p.y);var E=c[m].elem(\"path\",{d:w.stringify()},t.donut?t.classNames.sliceDonut:t.classNames.slicePie);if(E.attr({\"ct:value\":u[m],\"ct:meta\":i.serialize(v.meta)}),t.donut&&E.attr({style:\"stroke-width: \"+d.value+\"px\"}),this.eventEmitter.emit(\"draw\",{type:\"slice\",value:u[m],totalDataSum:l,index:m,meta:v.meta,series:v,group:c[m],element:E,path:w.clone(),center:p,radius:a,startAngle:h,endAngle:g}),t.showLabel){var A=i.polarToCartesian(p.x,p.y,o,h+(g-h)/2),S=t.labelInterpolationFnc(this.data.labels&&!i.isFalseyButZero(this.data.labels[m])?this.data.labels[m]:u[m],m);if(S||0===S){var C=e.elem(\"text\",{dx:A.x,dy:A.y,\"text-anchor\":n(p,A,t.labelDirection)},t.classNames.label).text(\"\"+S);this.eventEmitter.emit(\"draw\",{type:\"label\",index:m,group:e,element:C,text:\"\"+S,x:A.x,y:A.y})}}h=g}this.eventEmitter.emit(\"created\",{chartRect:s,svg:this.svg,options:t})}function a(t,e,n,s){i.Pie.super.constructor.call(this,t,e,r,i.extend({},r,n),s)}var r={width:void 0,height:void 0,chartPadding:5,classNames:{chartPie:\"ct-chart-pie\",chartDonut:\"ct-chart-donut\",series:\"ct-series\",slicePie:\"ct-slice-pie\",sliceDonut:\"ct-slice-donut\",label:\"ct-label\"},startAngle:0,total:void 0,donut:!1,donutWidth:60,showLabel:!0,labelOffset:0,labelPosition:\"inside\",labelInterpolationFnc:i.noop,labelDirection:\"neutral\",reverseData:!1,ignoreEmptyValues:!1};i.Pie=i.Base.extend({constructor:a,createChart:s,determineAnchorPosition:n})}(window,document,t),t}),function(t,e){\"function\"==typeof define&&define.amd?define([\"chartist\"],function(i){return t.returnExportsGlobal=e(i)}):\"object\"==typeof exports?module.exports=e(require(\"chartist\")):t[\"Chartist.plugins.legend\"]=e(t.Chartist)}(this,function(t){\"use strict\";var e={className:\"\",classNames:!1,removeAll:!1,legendNames:!1,clickable:!0,onClick:null};return t.plugins=t.plugins||{},t.plugins.legend=function(i){function n(t,e){return t-e}return i=t.extend({},e,i),function(e){var s=e.container.querySelector(\".ct-legend\");if(s&&s.parentNode.removeChild(s),i.clickable){var a=e.data.series.map(function(i,n){return\"object\"!=typeof i&&(i={value:i}),i.className=i.className||e.options.classNames.series+\"-\"+t.alphaNumerate(n),i});e.data.series=a}var r=document.createElement(\"ul\"),o=e instanceof t.Pie;r.className=\"ct-legend\",e instanceof t.Pie&&r.classList.add(\"ct-legend-inside\"),\"string\"==typeof i.className&&i.className.length>0&&r.classList.add(i.className);var l=[],c=e.data.series.slice(0),h=e.data.series,u=o&&e.data.labels;if(u){var d=e.data.labels.slice(0);h=e.data.labels}h=i.legendNames||h;var p=Array.isArray(i.classNames)&&i.classNames.length===h.length;h.forEach(function(t,e){var n=document.createElement(\"li\");n.className=\"ct-series-\"+e,p&&(n.className+=\" \"+i.classNames[e]),n.setAttribute(\"data-legend\",e),n.textContent=t.name||t,r.appendChild(n)}),e.container.appendChild(r),i.clickable&&r.addEventListener(\"click\",function(t){var s=t.target;if(s.parentNode===r&&s.hasAttribute(\"data-legend\")){t.preventDefault();var a=parseInt(s.getAttribute(\"data-legend\")),o=l.indexOf(a);if(o>-1)l.splice(o,1),s.classList.remove(\"inactive\");else if(i.removeAll)l.push(a),s.classList.add(\"inactive\");else if(e.data.series.length>1)l.push(a),s.classList.add(\"inactive\");else{l=[];var h=Array.prototype.slice.call(r.childNodes);h.forEach(function(t){t.classList.remove(\"inactive\")})}var p=c.slice(0);if(u)var f=d.slice(0);l.sort(n).reverse(),l.forEach(function(t){p.splice(t,1),u&&f.splice(t,1)}),i.onClick&&i.onClick(e,t),e.data.series=p,u&&(e.data.labels=f),e.update()}})}},t.plugins.legend});","source":"sims/framework/chartist.js","raw":"!function(t,e){\"function\"==typeof define&&define.amd?define([],function(){return t.Chartist=e()}):\"object\"==typeof exports?module.exports=e():t.Chartist=e()}(this,function(){var t={version:\"0.9.8\"};return function(t,e,i){\"use strict\";i.namespaces={svg:\"http://www.w3.org/2000/svg\",xmlns:\"http://www.w3.org/2000/xmlns/\",xhtml:\"http://www.w3.org/1999/xhtml\",xlink:\"http://www.w3.org/1999/xlink\",ct:\"http://gionkunz.github.com/chartist-js/ct\"},i.noop=function(t){return t},i.alphaNumerate=function(t){return String.fromCharCode(97+t%26)},i.extend=function(t){return t=t||{},Array.prototype.slice.call(arguments,1).forEach(function(e){for(var n in e)\"object\"!=typeof e[n]||null===e[n]||e[n]instanceof Array?t[n]=e[n]:t[n]=i.extend({},t[n],e[n])}),t},i.replaceAll=function(t,e,i){return t.replace(new RegExp(e,\"g\"),i)},i.ensureUnit=function(t,e){return\"number\"==typeof t&&(t+=e),t},i.quantity=function(t){if(\"string\"==typeof t){var e=/^(\\d+)\\s*(.*)$/g.exec(t);return{value:+e[1],unit:e[2]||void 0}}return{value:t}},i.querySelector=function(t){return t instanceof Node?t:e.querySelector(t)},i.times=function(t){return Array.apply(null,new Array(t))},i.sum=function(t,e){return t+(e||0)},i.mapMultiply=function(t){return function(e){return e*t}},i.mapAdd=function(t){return function(e){return e+t}},i.serialMap=function(t,e){var n=[],s=Math.max.apply(null,t.map(function(t){return t.length}));return i.times(s).forEach(function(i,s){var a=t.map(function(t){return t[s]});n[s]=e.apply(null,a)}),n},i.roundWithPrecision=function(t,e){var n=Math.pow(10,e||i.precision);return Math.round(t*n)/n},i.precision=8,i.escapingMap={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#039;\"},i.serialize=function(t){return null===t||void 0===t?t:(\"number\"==typeof t?t=\"\"+t:\"object\"==typeof t&&(t=JSON.stringify({data:t})),Object.keys(i.escapingMap).reduce(function(t,e){return i.replaceAll(t,e,i.escapingMap[e])},t))},i.deserialize=function(t){if(\"string\"!=typeof t)return t;t=Object.keys(i.escapingMap).reduce(function(t,e){return i.replaceAll(t,i.escapingMap[e],e)},t);try{t=JSON.parse(t),t=void 0!==t.data?t.data:t}catch(t){}return t},i.createSvg=function(t,e,n,s){var a;return e=e||\"100%\",n=n||\"100%\",Array.prototype.slice.call(t.querySelectorAll(\"svg\")).filter(function(t){return t.getAttributeNS(i.namespaces.xmlns,\"ct\")}).forEach(function(e){t.removeChild(e)}),a=new i.Svg(\"svg\").attr({width:e,height:n}).addClass(s).attr({style:\"width: \"+e+\"; height: \"+n+\";\"}),t.appendChild(a._node),a},i.normalizeData=function(t){if(t=t||{series:[],labels:[]},t.series=t.series||[],t.labels=t.labels||[],t.series.length>0&&0===t.labels.length){var e,n=i.getDataArray(t);e=n.every(function(t){return t instanceof Array})?Math.max.apply(null,n.map(function(t){return t.length})):n.length,t.labels=i.times(e).map(function(){return\"\"})}return t},i.reverseData=function(t){t.labels.reverse(),t.series.reverse();for(var e=0;e<t.series.length;e++)\"object\"==typeof t.series[e]&&void 0!==t.series[e].data?t.series[e].data.reverse():t.series[e]instanceof Array&&t.series[e].reverse()},i.getDataArray=function(t,e,n){function s(t){if(!i.isFalseyButZero(t)){if((t.data||t)instanceof Array)return(t.data||t).map(s);if(t.hasOwnProperty(\"value\"))return s(t.value);if(n){var e={};return\"string\"==typeof n?e[n]=i.getNumberOrUndefined(t):e.y=i.getNumberOrUndefined(t),e.x=t.hasOwnProperty(\"x\")?i.getNumberOrUndefined(t.x):e.x,e.y=t.hasOwnProperty(\"y\")?i.getNumberOrUndefined(t.y):e.y,e}return i.getNumberOrUndefined(t)}}return(e&&!t.reversed||!e&&t.reversed)&&(i.reverseData(t),t.reversed=!t.reversed),t.series.map(s)},i.normalizePadding=function(t,e){return e=e||0,\"number\"==typeof t?{top:t,right:t,bottom:t,left:t}:{top:\"number\"==typeof t.top?t.top:e,right:\"number\"==typeof t.right?t.right:e,bottom:\"number\"==typeof t.bottom?t.bottom:e,left:\"number\"==typeof t.left?t.left:e}},i.getMetaData=function(t,e){var n=t.data?t.data[e]:t[e];return n?i.serialize(n.meta):void 0},i.orderOfMagnitude=function(t){return Math.floor(Math.log(Math.abs(t))/Math.LN10)},i.projectLength=function(t,e,i){return e/i.range*t},i.getAvailableHeight=function(t,e){return Math.max((i.quantity(e.height).value||t.height())-(e.chartPadding.top+e.chartPadding.bottom)-e.axisX.offset,0)},i.getHighLow=function(t,e,n){function s(t){if(void 0!==t)if(t instanceof Array)for(var e=0;e<t.length;e++)s(t[e]);else{var i=n?+t[n]:+t;r&&i>a.high&&(a.high=i),o&&i<a.low&&(a.low=i)}}e=i.extend({},e,n?e[\"axis\"+n.toUpperCase()]:{});var a={high:void 0===e.high?-Number.MAX_VALUE:+e.high,low:void 0===e.low?Number.MAX_VALUE:+e.low},r=void 0===e.high,o=void 0===e.low;return(r||o)&&s(t),(e.referenceValue||0===e.referenceValue)&&(a.high=Math.max(e.referenceValue,a.high),a.low=Math.min(e.referenceValue,a.low)),a.high<=a.low&&(0===a.low?a.high=1:a.low<0?a.high=0:a.high>0?a.low=0:(a.high=1,a.low=0)),a},i.isNum=function(t){return!isNaN(t)&&isFinite(t)},i.isFalseyButZero=function(t){return!t&&0!==t},i.getNumberOrUndefined=function(t){return isNaN(+t)?void 0:+t},i.getMultiValue=function(t,e){return i.isNum(t)?+t:t?t[e||\"y\"]||0:0},i.rho=function(t){function e(t,i){return t%i==0?i:e(i,t%i)}function i(t){return t*t+1}if(1===t)return t;var n,s=2,a=2;if(t%2==0)return 2;do{s=i(s)%t,a=i(i(a))%t,n=e(Math.abs(s-a),t)}while(1===n);return n},i.getBounds=function(t,e,n,s){var a,r,o,l=0,c={high:e.high,low:e.low};c.valueRange=c.high-c.low,c.oom=i.orderOfMagnitude(c.valueRange),c.step=Math.pow(10,c.oom),c.min=Math.floor(c.low/c.step)*c.step,c.max=Math.ceil(c.high/c.step)*c.step,c.range=c.max-c.min,c.numberOfSteps=Math.round(c.range/c.step);var h=i.projectLength(t,c.step,c),u=h<n,d=s?i.rho(c.range):0;if(s&&i.projectLength(t,1,c)>=n)c.step=1;else if(s&&d<c.step&&i.projectLength(t,d,c)>=n)c.step=d;else for(;;){if(u&&i.projectLength(t,c.step,c)<=n)c.step*=2;else{if(u||!(i.projectLength(t,c.step/2,c)>=n))break;if(c.step/=2,s&&c.step%1!=0){c.step*=2;break}}if(l++>1e3)throw new Error(\"Exceeded maximum number of iterations while optimizing scale step!\")}for(c.step=Math.max(c.step,2.221e-16),r=c.min,o=c.max;r+c.step<=c.low;)r+=c.step;for(;o-c.step>=c.high;)o-=c.step;c.min=r,c.max=o,c.range=c.max-c.min;var p=[];for(a=c.min;a<=c.max;a+=c.step){i.roundWithPrecision(a)!==p[p.length-1]&&p.push(a)}return c.values=p,c},i.polarToCartesian=function(t,e,i,n){var s=(n-90)*Math.PI/180;return{x:t+i*Math.cos(s),y:e+i*Math.sin(s)}},i.createChartRect=function(t,e,n){var s=!(!e.axisX&&!e.axisY),a=s?e.axisY.offset:0,r=s?e.axisX.offset:0,o=t.width()||i.quantity(e.width).value||0,l=t.height()||i.quantity(e.height).value||0,c=i.normalizePadding(e.chartPadding,n);o=Math.max(o,a+c.left+c.right),l=Math.max(l,r+c.top+c.bottom);var h={padding:c,width:function(){return this.x2-this.x1},height:function(){return this.y1-this.y2}};return s?(\"start\"===e.axisX.position?(h.y2=c.top+r,h.y1=Math.max(l-c.bottom,h.y2+1)):(h.y2=c.top,h.y1=Math.max(l-c.bottom-r,h.y2+1)),\"start\"===e.axisY.position?(h.x1=c.left+a,h.x2=Math.max(o-c.right,h.x1+1)):(h.x1=c.left,h.x2=Math.max(o-c.right-a,h.x1+1))):(h.x1=c.left,h.x2=Math.max(o-c.right,h.x1+1),h.y2=c.top,h.y1=Math.max(l-c.bottom,h.y2+1)),h},i.createGrid=function(t,e,n,s,a,r,o,l){var c={};c[n.units.pos+\"1\"]=t,c[n.units.pos+\"2\"]=t,c[n.counterUnits.pos+\"1\"]=s,c[n.counterUnits.pos+\"2\"]=s+a;var h=r.elem(\"line\",c,o.join(\" \"));l.emit(\"draw\",i.extend({type:\"grid\",axis:n,index:e,group:r,element:h},c))},i.createLabel=function(t,e,n,s,a,r,o,l,c,h,u){var d,p={};if(p[a.units.pos]=t+o[a.units.pos],p[a.counterUnits.pos]=o[a.counterUnits.pos],p[a.units.len]=e,p[a.counterUnits.len]=Math.max(0,r-10),h){var f='<span class=\"'+c.join(\" \")+'\" style=\"'+a.units.len+\": \"+Math.round(p[a.units.len])+\"px; \"+a.counterUnits.len+\": \"+Math.round(p[a.counterUnits.len])+'px\">'+s[n]+\"</span>\";d=l.foreignObject(f,i.extend({style:\"overflow: visible;\"},p))}else d=l.elem(\"text\",p,c.join(\" \")).text(s[n]);u.emit(\"draw\",i.extend({type:\"label\",axis:a,index:n,group:l,element:d,text:s[n]},p))},i.getSeriesOption=function(t,e,i){if(t.name&&e.series&&e.series[t.name]){var n=e.series[t.name];return n.hasOwnProperty(i)?n[i]:e[i]}return e[i]},i.optionsProvider=function(e,n,s){function a(e){var a=o;if(o=i.extend({},c),n)for(l=0;l<n.length;l++){var r=t.matchMedia(n[l][0]);r.matches&&(o=i.extend(o,n[l][1]))}s&&e&&s.emit(\"optionsChanged\",{previousOptions:a,currentOptions:o})}function r(){h.forEach(function(t){t.removeListener(a)})}var o,l,c=i.extend({},e),h=[];if(!t.matchMedia)throw\"window.matchMedia not found! Make sure you're using a polyfill.\";if(n)for(l=0;l<n.length;l++){var u=t.matchMedia(n[l][0]);u.addListener(a),h.push(u)}return a(),{removeMediaQueryListeners:r,getCurrentOptions:function(){return i.extend({},o)}}},i.splitIntoSegments=function(t,e,n){var s={increasingX:!1,fillHoles:!1};n=i.extend({},s,n);for(var a=[],r=!0,o=0;o<t.length;o+=2)void 0===e[o/2].value?n.fillHoles||(r=!0):(n.increasingX&&o>=2&&t[o]<=t[o-2]&&(r=!0),r&&(a.push({pathCoordinates:[],valueData:[]}),r=!1),a[a.length-1].pathCoordinates.push(t[o],t[o+1]),a[a.length-1].valueData.push(e[o/2]));return a}}(window,document,t),function(t,e,i){\"use strict\";i.Interpolation={},i.Interpolation.none=function(t){var e={fillHoles:!1};return t=i.extend({},e,t),function(e,n){for(var s=new i.Svg.Path,a=!0,r=0;r<e.length;r+=2){var o=e[r],l=e[r+1],c=n[r/2];void 0!==c.value?(a?s.move(o,l,!1,c):s.line(o,l,!1,c),a=!1):t.fillHoles||(a=!0)}return s}},i.Interpolation.simple=function(t){var e={divisor:2,fillHoles:!1};t=i.extend({},e,t);var n=1/Math.max(1,t.divisor);return function(e,s){for(var a,r,o,l=new i.Svg.Path,c=0;c<e.length;c+=2){var h=e[c],u=e[c+1],d=(h-a)*n,p=s[c/2];void 0!==p.value?(void 0===o?l.move(h,u,!1,p):l.curve(a+d,r,h-d,u,h,u,!1,p),a=h,r=u,o=p):t.fillHoles||(a=h=o=void 0)}return l}},i.Interpolation.cardinal=function(t){var e={tension:1,fillHoles:!1};t=i.extend({},e,t);var n=Math.min(1,Math.max(0,t.tension)),s=1-n;return function e(a,r){var o=i.splitIntoSegments(a,r,{fillHoles:t.fillHoles});if(o.length){if(o.length>1){var l=[];return o.forEach(function(t){l.push(e(t.pathCoordinates,t.valueData))}),i.Svg.Path.join(l)}if(a=o[0].pathCoordinates,r=o[0].valueData,a.length<=4)return i.Interpolation.none()(a,r);for(var c=(new i.Svg.Path).move(a[0],a[1],!1,r[0]),h=0,u=a.length;u-2>h;h+=2){var d=[{x:+a[h-2],y:+a[h-1]},{x:+a[h],y:+a[h+1]},{x:+a[h+2],y:+a[h+3]},{x:+a[h+4],y:+a[h+5]}];u-4===h?d[3]=d[2]:h||(d[0]={x:+a[h],y:+a[h+1]}),c.curve(n*(-d[0].x+6*d[1].x+d[2].x)/6+s*d[2].x,n*(-d[0].y+6*d[1].y+d[2].y)/6+s*d[2].y,n*(d[1].x+6*d[2].x-d[3].x)/6+s*d[2].x,n*(d[1].y+6*d[2].y-d[3].y)/6+s*d[2].y,d[2].x,d[2].y,!1,r[(h+2)/2])}return c}return i.Interpolation.none()([])}},i.Interpolation.monotoneCubic=function(t){var e={fillHoles:!1};return t=i.extend({},e,t),function e(n,s){var a=i.splitIntoSegments(n,s,{fillHoles:t.fillHoles,increasingX:!0});if(a.length){if(a.length>1){var r=[];return a.forEach(function(t){r.push(e(t.pathCoordinates,t.valueData))}),i.Svg.Path.join(r)}if(n=a[0].pathCoordinates,s=a[0].valueData,n.length<=4)return i.Interpolation.none()(n,s);var o,l,c=[],h=[],u=n.length/2,d=[],p=[],f=[],m=[];for(o=0;o<u;o++)c[o]=n[2*o],h[o]=n[2*o+1];for(o=0;o<u-1;o++)f[o]=h[o+1]-h[o],m[o]=c[o+1]-c[o],p[o]=f[o]/m[o];for(d[0]=p[0],d[u-1]=p[u-2],o=1;o<u-1;o++)0===p[o]||0===p[o-1]||p[o-1]>0!=p[o]>0?d[o]=0:(d[o]=3*(m[o-1]+m[o])/((2*m[o]+m[o-1])/p[o-1]+(m[o]+2*m[o-1])/p[o]),isFinite(d[o])||(d[o]=0));for(l=(new i.Svg.Path).move(c[0],h[0],!1,s[0]),o=0;o<u-1;o++)l.curve(c[o]+m[o]/3,h[o]+d[o]*m[o]/3,c[o+1]-m[o]/3,h[o+1]-d[o+1]*m[o]/3,c[o+1],h[o+1],!1,s[o+1]);return l}return i.Interpolation.none()([])}},i.Interpolation.step=function(t){var e={postpone:!0,fillHoles:!1};return t=i.extend({},e,t),function(e,n){for(var s,a,r,o=new i.Svg.Path,l=0;l<e.length;l+=2){var c=e[l],h=e[l+1],u=n[l/2];void 0!==u.value?(void 0===r?o.move(c,h,!1,u):(t.postpone?o.line(c,a,!1,r):o.line(s,h,!1,u),o.line(c,h,!1,u)),s=c,a=h,r=u):t.fillHoles||(s=a=r=void 0)}return o}}}(window,document,t),function(t,e,i){\"use strict\";i.EventEmitter=function(){function t(t,e){n[t]=n[t]||[],n[t].push(e)}function e(t,e){n[t]&&(e?(n[t].splice(n[t].indexOf(e),1),0===n[t].length&&delete n[t]):delete n[t])}function i(t,e){n[t]&&n[t].forEach(function(t){t(e)}),n[\"*\"]&&n[\"*\"].forEach(function(i){i(t,e)})}var n=[];return{addEventHandler:t,removeEventHandler:e,emit:i}}}(window,document,t),function(t,e,i){\"use strict\";function n(t){var e=[];if(t.length)for(var i=0;i<t.length;i++)e.push(t[i]);return e}function s(t,e){var n=e||this.prototype||i.Class,s=Object.create(n);i.Class.cloneDefinitions(s,t);var a=function(){var t,e=s.constructor||function(){};return t=this===i?Object.create(s):this,e.apply(t,Array.prototype.slice.call(arguments,0)),t};return a.prototype=s,a.super=n,a.extend=this.extend,a}function a(){var t=n(arguments),e=t[0];return t.splice(1,t.length-1).forEach(function(t){Object.getOwnPropertyNames(t).forEach(function(i){delete e[i],Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(t,i))})}),e}i.Class={extend:s,cloneDefinitions:a}}(window,document,t),function(t,e,i){\"use strict\";function n(t,e,n){return t&&(this.data=t,this.eventEmitter.emit(\"data\",{type:\"update\",data:this.data})),e&&(this.options=i.extend({},n?this.options:this.defaultOptions,e),this.initializeTimeoutId||(this.optionsProvider.removeMediaQueryListeners(),this.optionsProvider=i.optionsProvider(this.options,this.responsiveOptions,this.eventEmitter))),this.initializeTimeoutId||this.createChart(this.optionsProvider.getCurrentOptions()),this}function s(){return this.initializeTimeoutId?t.clearTimeout(this.initializeTimeoutId):(t.removeEventListener(\"resize\",this.resizeListener),this.optionsProvider.removeMediaQueryListeners()),this}function a(t,e){return this.eventEmitter.addEventHandler(t,e),this}function r(t,e){return this.eventEmitter.removeEventHandler(t,e),this}function o(){t.addEventListener(\"resize\",this.resizeListener),this.optionsProvider=i.optionsProvider(this.options,this.responsiveOptions,this.eventEmitter),this.eventEmitter.addEventHandler(\"optionsChanged\",function(){this.update()}.bind(this)),this.options.plugins&&this.options.plugins.forEach(function(t){t instanceof Array?t[0](this,t[1]):t(this)}.bind(this)),this.eventEmitter.emit(\"data\",{type:\"initial\",data:this.data}),this.createChart(this.optionsProvider.getCurrentOptions()),this.initializeTimeoutId=void 0}function l(t,e,n,s,a){this.container=i.querySelector(t),this.data=e,this.defaultOptions=n,this.options=s,this.responsiveOptions=a,this.eventEmitter=i.EventEmitter(),this.supportsForeignObject=i.Svg.isSupported(\"Extensibility\"),this.supportsAnimations=i.Svg.isSupported(\"AnimationEventsAttribute\"),this.resizeListener=function(){this.update()}.bind(this),this.container&&(this.container.__chartist__&&this.container.__chartist__.detach(),this.container.__chartist__=this),this.initializeTimeoutId=setTimeout(o.bind(this),0)}i.Base=i.Class.extend({constructor:l,optionsProvider:void 0,container:void 0,svg:void 0,eventEmitter:void 0,createChart:function(){throw new Error(\"Base chart type can't be instantiated!\")},update:n,detach:s,on:a,off:r,version:i.version,supportsForeignObject:!1})}(window,document,t),function(t,e,i){\"use strict\";function n(t,n,s,a,r){t instanceof Element?this._node=t:(this._node=e.createElementNS(i.namespaces.svg,t),\"svg\"===t&&this.attr({\"xmlns:ct\":i.namespaces.ct})),n&&this.attr(n),s&&this.addClass(s),a&&(r&&a._node.firstChild?a._node.insertBefore(this._node,a._node.firstChild):a._node.appendChild(this._node))}function s(t,e){return\"string\"==typeof t?e?this._node.getAttributeNS(e,t):this._node.getAttribute(t):(Object.keys(t).forEach(function(e){if(void 0!==t[e])if(-1!==e.indexOf(\":\")){var n=e.split(\":\");this._node.setAttributeNS(i.namespaces[n[0]],e,t[e])}else this._node.setAttribute(e,t[e])}.bind(this)),this)}function a(t,e,n,s){return new i.Svg(t,e,n,this,s)}function r(){return this._node.parentNode instanceof SVGElement?new i.Svg(this._node.parentNode):null}function o(){for(var t=this._node;\"svg\"!==t.nodeName;)t=t.parentNode;return new i.Svg(t)}function l(t){var e=this._node.querySelector(t);return e?new i.Svg(e):null}function c(t){var e=this._node.querySelectorAll(t);return e.length?new i.Svg.List(e):null}function h(t,n,s,a){if(\"string\"==typeof t){var r=e.createElement(\"div\");r.innerHTML=t,t=r.firstChild}t.setAttribute(\"xmlns\",i.namespaces.xmlns);var o=this.elem(\"foreignObject\",n,s,a);return o._node.appendChild(t),o}function u(t){return this._node.appendChild(e.createTextNode(t)),this}function d(){for(;this._node.firstChild;)this._node.removeChild(this._node.firstChild);return this}function p(){return this._node.parentNode.removeChild(this._node),this.parent()}function f(t){return this._node.parentNode.replaceChild(t._node,this._node),t}function m(t,e){return e&&this._node.firstChild?this._node.insertBefore(t._node,this._node.firstChild):this._node.appendChild(t._node),this}function v(){return this._node.getAttribute(\"class\")?this._node.getAttribute(\"class\").trim().split(/\\s+/):[]}function g(t){return this._node.setAttribute(\"class\",this.classes(this._node).concat(t.trim().split(/\\s+/)).filter(function(t,e,i){return i.indexOf(t)===e}).join(\" \")),this}function x(t){var e=t.trim().split(/\\s+/);return this._node.setAttribute(\"class\",this.classes(this._node).filter(function(t){return-1===e.indexOf(t)}).join(\" \")),this}function y(){return this._node.setAttribute(\"class\",\"\"),this}function b(){return this._node.getBoundingClientRect().height}function w(){return this._node.getBoundingClientRect().width}function E(t,e,n){return void 0===e&&(e=!0),Object.keys(t).forEach(function(s){function a(t,e){var a,r,o,l={};t.easing&&(o=t.easing instanceof Array?t.easing:i.Svg.Easing[t.easing],delete t.easing),t.begin=i.ensureUnit(t.begin,\"ms\"),t.dur=i.ensureUnit(t.dur,\"ms\"),o&&(t.calcMode=\"spline\",t.keySplines=o.join(\" \"),t.keyTimes=\"0;1\"),e&&(t.fill=\"freeze\",l[s]=t.from,this.attr(l),r=i.quantity(t.begin||0).value,t.begin=\"indefinite\"),a=this.elem(\"animate\",i.extend({attributeName:s},t)),e&&setTimeout(function(){try{a._node.beginElement()}catch(e){l[s]=t.to,this.attr(l),a.remove()}}.bind(this),r),n&&a._node.addEventListener(\"beginEvent\",function(){n.emit(\"animationBegin\",{element:this,animate:a._node,params:t})}.bind(this)),a._node.addEventListener(\"endEvent\",function(){n&&n.emit(\"animationEnd\",{element:this,animate:a._node,params:t}),e&&(l[s]=t.to,this.attr(l),a.remove())}.bind(this))}t[s]instanceof Array?t[s].forEach(function(t){a.bind(this)(t,!1)}.bind(this)):a.bind(this)(t[s],e)}.bind(this)),this}function A(t){var e=this;this.svgElements=[];for(var n=0;n<t.length;n++)this.svgElements.push(new i.Svg(t[n]));Object.keys(i.Svg.prototype).filter(function(t){return-1===[\"constructor\",\"parent\",\"querySelector\",\"querySelectorAll\",\"replace\",\"append\",\"classes\",\"height\",\"width\"].indexOf(t)}).forEach(function(t){e[t]=function(){var n=Array.prototype.slice.call(arguments,0);return e.svgElements.forEach(function(e){i.Svg.prototype[t].apply(e,n)}),e}})}i.Svg=i.Class.extend({constructor:n,attr:s,elem:a,parent:r,root:o,querySelector:l,querySelectorAll:c,foreignObject:h,text:u,empty:d,remove:p,replace:f,append:m,classes:v,addClass:g,removeClass:x,removeAllClasses:y,height:b,width:w,animate:E}),i.Svg.isSupported=function(t){return e.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#\"+t,\"1.1\")};var S={easeInSine:[.47,0,.745,.715],easeOutSine:[.39,.575,.565,1],easeInOutSine:[.445,.05,.55,.95],easeInQuad:[.55,.085,.68,.53],easeOutQuad:[.25,.46,.45,.94],easeInOutQuad:[.455,.03,.515,.955],easeInCubic:[.55,.055,.675,.19],easeOutCubic:[.215,.61,.355,1],easeInOutCubic:[.645,.045,.355,1],easeInQuart:[.895,.03,.685,.22],easeOutQuart:[.165,.84,.44,1],easeInOutQuart:[.77,0,.175,1],easeInQuint:[.755,.05,.855,.06],easeOutQuint:[.23,1,.32,1],easeInOutQuint:[.86,0,.07,1],easeInExpo:[.95,.05,.795,.035],easeOutExpo:[.19,1,.22,1],easeInOutExpo:[1,0,0,1],easeInCirc:[.6,.04,.98,.335],easeOutCirc:[.075,.82,.165,1],easeInOutCirc:[.785,.135,.15,.86],easeInBack:[.6,-.28,.735,.045],easeOutBack:[.175,.885,.32,1.275],easeInOutBack:[.68,-.55,.265,1.55]};i.Svg.Easing=S,i.Svg.List=i.Class.extend({constructor:A})}(window,document,t),function(t,e,i){\"use strict\";function n(t,e,n,s,a,r){var o=i.extend({command:a?t.toLowerCase():t.toUpperCase()},e,r?{data:r}:{});n.splice(s,0,o)}function s(t,e){t.forEach(function(i,n){b[i.command.toLowerCase()].forEach(function(s,a){e(i,s,n,a,t)})})}function a(t,e){this.pathElements=[],this.pos=0,this.close=t,this.options=i.extend({},w,e)}function r(t){return void 0!==t?(this.pos=Math.max(0,Math.min(this.pathElements.length,t)),this):this.pos}function o(t){return this.pathElements.splice(this.pos,t),this}function l(t,e,i,s){return n(\"M\",{x:+t,y:+e},this.pathElements,this.pos++,i,s),this}function c(t,e,i,s){return n(\"L\",{x:+t,y:+e},this.pathElements,this.pos++,i,s),this}function h(t,e,i,s,a,r,o,l){return n(\"C\",{x1:+t,y1:+e,x2:+i,y2:+s,x:+a,y:+r},this.pathElements,this.pos++,o,l),this}function u(t,e,i,s,a,r,o,l,c){return n(\"A\",{rx:+t,ry:+e,xAr:+i,lAf:+s,sf:+a,x:+r,y:+o},this.pathElements,this.pos++,l,c),this}function d(t){var e=t.replace(/([A-Za-z])([0-9])/g,\"$1 $2\").replace(/([0-9])([A-Za-z])/g,\"$1 $2\").split(/[\\s,]+/).reduce(function(t,e){return e.match(/[A-Za-z]/)&&t.push([]),t[t.length-1].push(e),t},[]);\"Z\"===e[e.length-1][0].toUpperCase()&&e.pop();var n=e.map(function(t){var e=t.shift(),n=b[e.toLowerCase()];return i.extend({command:e},n.reduce(function(e,i,n){return e[i]=+t[n],e},{}))}),s=[this.pos,0];return Array.prototype.push.apply(s,n),Array.prototype.splice.apply(this.pathElements,s),this.pos+=n.length,this}function p(){var t=Math.pow(10,this.options.accuracy);return this.pathElements.reduce(function(e,i){var n=b[i.command.toLowerCase()].map(function(e){return this.options.accuracy?Math.round(i[e]*t)/t:i[e]}.bind(this));return e+i.command+n.join(\",\")}.bind(this),\"\")+(this.close?\"Z\":\"\")}function f(t,e){return s(this.pathElements,function(i,n){i[n]*=\"x\"===n[0]?t:e}),this}function m(t,e){return s(this.pathElements,function(i,n){i[n]+=\"x\"===n[0]?t:e}),this}function v(t){return s(this.pathElements,function(e,i,n,s,a){var r=t(e,i,n,s,a);(r||0===r)&&(e[i]=r)}),this}function g(t){var e=new i.Svg.Path(t||this.close);return e.pos=this.pos,e.pathElements=this.pathElements.slice().map(function(t){return i.extend({},t)}),e.options=i.extend({},this.options),e}function x(t){var e=[new i.Svg.Path];return this.pathElements.forEach(function(n){n.command===t.toUpperCase()&&0!==e[e.length-1].pathElements.length&&e.push(new i.Svg.Path),e[e.length-1].pathElements.push(n)}),e}function y(t,e,n){for(var s=new i.Svg.Path(e,n),a=0;a<t.length;a++)for(var r=t[a],o=0;o<r.pathElements.length;o++)s.pathElements.push(r.pathElements[o]);return s}var b={m:[\"x\",\"y\"],l:[\"x\",\"y\"],c:[\"x1\",\"y1\",\"x2\",\"y2\",\"x\",\"y\"],a:[\"rx\",\"ry\",\"xAr\",\"lAf\",\"sf\",\"x\",\"y\"]},w={accuracy:3};i.Svg.Path=i.Class.extend({constructor:a,position:r,remove:o,move:l,line:c,curve:h,arc:u,scale:f,translate:m,transform:v,parse:d,stringify:p,clone:g,splitByCommand:x}),i.Svg.Path.elementDescriptions=b,i.Svg.Path.join=y}(window,document,t),function(t,e,i){\"use strict\";function n(t,e,i,n){this.units=t,this.counterUnits=t===a.x?a.y:a.x,this.chartRect=e,this.axisLength=e[t.rectEnd]-e[t.rectStart],this.gridOffset=e[t.rectOffset],this.ticks=i,this.options=n}function s(t,e,n,s,a){var r=s[\"axis\"+this.units.pos.toUpperCase()],o=this.ticks.map(this.projectValue.bind(this)),l=this.ticks.map(r.labelInterpolationFnc);o.forEach(function(c,h){var u,d={x:0,y:0};u=o[h+1]?o[h+1]-c:Math.max(this.axisLength-c,30),i.isFalseyButZero(l[h])&&\"\"!==l[h]||(\"x\"===this.units.pos?(c=this.chartRect.x1+c,d.x=s.axisX.labelOffset.x,\"start\"===s.axisX.position?d.y=this.chartRect.padding.top+s.axisX.labelOffset.y+(n?5:20):d.y=this.chartRect.y1+s.axisX.labelOffset.y+(n?5:20)):(c=this.chartRect.y1-c,d.y=s.axisY.labelOffset.y-(n?u:0),\"start\"===s.axisY.position?d.x=n?this.chartRect.padding.left+s.axisY.labelOffset.x:this.chartRect.x1-10:d.x=this.chartRect.x2+s.axisY.labelOffset.x+10),r.showGrid&&i.createGrid(c,h,this,this.gridOffset,this.chartRect[this.counterUnits.len](),t,[s.classNames.grid,s.classNames[this.units.dir]],a),r.showLabel&&i.createLabel(c,u,h,l,this,r.offset,d,e,[s.classNames.label,s.classNames[this.units.dir],s.classNames[r.position]],n,a))}.bind(this))}var a={x:{pos:\"x\",len:\"width\",dir:\"horizontal\",rectStart:\"x1\",rectEnd:\"x2\",rectOffset:\"y2\"},y:{pos:\"y\",len:\"height\",dir:\"vertical\",rectStart:\"y2\",rectEnd:\"y1\",rectOffset:\"x1\"}};i.Axis=i.Class.extend({constructor:n,createGridAndLabels:s,projectValue:function(t,e,i){throw new Error(\"Base axis can't be instantiated!\")}}),i.Axis.units=a}(window,document,t),function(t,e,i){\"use strict\";function n(t,e,n,s){var a=s.highLow||i.getHighLow(e.normalized,s,t.pos);this.bounds=i.getBounds(n[t.rectEnd]-n[t.rectStart],a,s.scaleMinSpace||20,s.onlyInteger),this.range={min:this.bounds.min,max:this.bounds.max},i.AutoScaleAxis.super.constructor.call(this,t,n,this.bounds.values,s)}function s(t){return this.axisLength*(+i.getMultiValue(t,this.units.pos)-this.bounds.min)/this.bounds.range}i.AutoScaleAxis=i.Axis.extend({constructor:n,projectValue:s})}(window,document,t),function(t,e,i){\"use strict\";function n(t,e,n,s){var a=s.highLow||i.getHighLow(e.normalized,s,t.pos);this.divisor=s.divisor||1,this.ticks=s.ticks||i.times(this.divisor).map(function(t,e){return a.low+(a.high-a.low)/this.divisor*e}.bind(this)),this.ticks.sort(function(t,e){return t-e}),this.range={min:a.low,max:a.high},i.FixedScaleAxis.super.constructor.call(this,t,n,this.ticks,s),this.stepLength=this.axisLength/this.divisor}function s(t){return this.axisLength*(+i.getMultiValue(t,this.units.pos)-this.range.min)/(this.range.max-this.range.min)}i.FixedScaleAxis=i.Axis.extend({constructor:n,projectValue:s})}(window,document,t),function(t,e,i){\"use strict\";function n(t,e,n,s){i.StepAxis.super.constructor.call(this,t,n,s.ticks,s),this.stepLength=this.axisLength/(s.ticks.length-(s.stretch?1:0))}function s(t,e){return this.stepLength*e}i.StepAxis=i.Axis.extend({constructor:n,projectValue:s})}(window,document,t),function(t,e,i){\"use strict\";function n(t){this.data=i.normalizeData(this.data);var e={raw:this.data,normalized:i.getDataArray(this.data,t.reverseData,!0)};this.svg=i.createSvg(this.container,t.width,t.height,t.classNames.chart);var n,s,r=this.svg.elem(\"g\").addClass(t.classNames.gridGroup),o=this.svg.elem(\"g\"),l=this.svg.elem(\"g\").addClass(t.classNames.labelGroup),c=i.createChartRect(this.svg,t,a.padding);n=void 0===t.axisX.type?new i.StepAxis(i.Axis.units.x,e,c,i.extend({},t.axisX,{ticks:e.raw.labels,stretch:t.fullWidth})):t.axisX.type.call(i,i.Axis.units.x,e,c,t.axisX),s=void 0===t.axisY.type?new i.AutoScaleAxis(i.Axis.units.y,e,c,i.extend({},t.axisY,{high:i.isNum(t.high)?t.high:t.axisY.high,low:i.isNum(t.low)?t.low:t.axisY.low})):t.axisY.type.call(i,i.Axis.units.y,e,c,t.axisY),n.createGridAndLabels(r,l,this.supportsForeignObject,t,this.eventEmitter),s.createGridAndLabels(r,l,this.supportsForeignObject,t,this.eventEmitter),e.raw.series.forEach(function(a,r){var l=o.elem(\"g\");l.attr({\"ct:series-name\":a.name,\"ct:meta\":i.serialize(a.meta)}),l.addClass([t.classNames.series,a.className||t.classNames.series+\"-\"+i.alphaNumerate(r)].join(\" \"));var h=[],u=[];e.normalized[r].forEach(function(t,o){var l={x:c.x1+n.projectValue(t,o,e.normalized[r]),y:c.y1-s.projectValue(t,o,e.normalized[r])};h.push(l.x,l.y),u.push({value:t,valueIndex:o,meta:i.getMetaData(a,o)})}.bind(this));var d={lineSmooth:i.getSeriesOption(a,t,\"lineSmooth\"),showPoint:i.getSeriesOption(a,t,\"showPoint\"),showLine:i.getSeriesOption(a,t,\"showLine\"),showArea:i.getSeriesOption(a,t,\"showArea\"),areaBase:i.getSeriesOption(a,t,\"areaBase\")},p=\"function\"==typeof d.lineSmooth?d.lineSmooth:d.lineSmooth?i.Interpolation.monotoneCubic():i.Interpolation.none(),f=p(h,u);if(d.showPoint&&f.pathElements.forEach(function(e){var o=l.elem(\"line\",{x1:e.x,y1:e.y,x2:e.x+.01,y2:e.y},t.classNames.point).attr({\"ct:value\":[e.data.value.x,e.data.value.y].filter(i.isNum).join(\",\"),\"ct:meta\":e.data.meta});this.eventEmitter.emit(\"draw\",{type:\"point\",value:e.data.value,index:e.data.valueIndex,meta:e.data.meta,series:a,seriesIndex:r,axisX:n,axisY:s,group:l,element:o,x:e.x,y:e.y})}.bind(this)),d.showLine){var m=l.elem(\"path\",{d:f.stringify()},t.classNames.line,!0);this.eventEmitter.emit(\"draw\",{type:\"line\",values:e.normalized[r],path:f.clone(),chartRect:c,index:r,series:a,seriesIndex:r,axisX:n,axisY:s,group:l,element:m})}if(d.showArea&&s.range){var v=Math.max(Math.min(d.areaBase,s.range.max),s.range.min),g=c.y1-s.projectValue(v);f.splitByCommand(\"M\").filter(function(t){return t.pathElements.length>1}).map(function(t){var e=t.pathElements[0],i=t.pathElements[t.pathElements.length-1];return t.clone(!0).position(0).remove(1).move(e.x,g).line(e.x,e.y).position(t.pathElements.length+1).line(i.x,g)}).forEach(function(i){var o=l.elem(\"path\",{d:i.stringify()},t.classNames.area,!0);this.eventEmitter.emit(\"draw\",{type:\"area\",values:e.normalized[r],path:i.clone(),series:a,seriesIndex:r,axisX:n,axisY:s,chartRect:c,index:r,group:l,element:o})}.bind(this))}}.bind(this)),this.eventEmitter.emit(\"created\",{bounds:s.bounds,chartRect:c,axisX:n,axisY:s,svg:this.svg,options:t})}function s(t,e,n,s){i.Line.super.constructor.call(this,t,e,a,i.extend({},a,n),s)}var a={axisX:{offset:30,position:\"end\",labelOffset:{x:0,y:0},showLabel:!0,showGrid:!0,labelInterpolationFnc:i.noop,type:void 0},axisY:{offset:40,position:\"start\",labelOffset:{x:0,y:0},showLabel:!0,showGrid:!0,labelInterpolationFnc:i.noop,type:void 0,scaleMinSpace:20,onlyInteger:!1},width:void 0,height:void 0,showLine:!0,showPoint:!0,showArea:!1,areaBase:0,lineSmooth:!0,low:void 0,high:void 0,chartPadding:{top:15,right:15,bottom:5,left:10},fullWidth:!1,reverseData:!1,classNames:{chart:\"ct-chart-line\",label:\"ct-label\",labelGroup:\"ct-labels\",series:\"ct-series\",line:\"ct-line\",point:\"ct-point\",area:\"ct-area\",grid:\"ct-grid\",gridGroup:\"ct-grids\",vertical:\"ct-vertical\",horizontal:\"ct-horizontal\",start:\"ct-start\",end:\"ct-end\"}};i.Line=i.Base.extend({constructor:s,createChart:n})}(window,document,t),function(t,e,i){\"use strict\";function n(t){this.data=i.normalizeData(this.data);var e,n={raw:this.data,normalized:t.distributeSeries?i.getDataArray(this.data,t.reverseData,t.horizontalBars?\"x\":\"y\").map(function(t){return[t]}):i.getDataArray(this.data,t.reverseData,t.horizontalBars?\"x\":\"y\")};this.svg=i.createSvg(this.container,t.width,t.height,t.classNames.chart+(t.horizontalBars?\" \"+t.classNames.horizontalBars:\"\"));var s=this.svg.elem(\"g\").addClass(t.classNames.gridGroup),r=this.svg.elem(\"g\"),o=this.svg.elem(\"g\").addClass(t.classNames.labelGroup);if(t.stackBars&&0!==n.normalized.length){var l=i.serialMap(n.normalized,function(){return Array.prototype.slice.call(arguments).map(function(t){return t}).reduce(function(t,e){return{x:t.x+(e&&e.x)||0,y:t.y+(e&&e.y)||0}},{x:0,y:0})});e=i.getHighLow([l],i.extend({},t,{referenceValue:0}),t.horizontalBars?\"x\":\"y\")}else e=i.getHighLow(n.normalized,i.extend({},t,{referenceValue:0}),t.horizontalBars?\"x\":\"y\");e.high=+t.high||(0===t.high?0:e.high),e.low=+t.low||(0===t.low?0:e.low);var c,h,u,d,p,f=i.createChartRect(this.svg,t,a.padding);h=t.distributeSeries&&t.stackBars?n.raw.labels.slice(0,1):n.raw.labels,t.horizontalBars?(c=d=void 0===t.axisX.type?new i.AutoScaleAxis(i.Axis.units.x,n,f,i.extend({},t.axisX,{highLow:e,referenceValue:0})):t.axisX.type.call(i,i.Axis.units.x,n,f,i.extend({},t.axisX,{highLow:e,referenceValue:0})),u=p=void 0===t.axisY.type?new i.StepAxis(i.Axis.units.y,n,f,{ticks:h}):t.axisY.type.call(i,i.Axis.units.y,n,f,t.axisY)):(u=d=void 0===t.axisX.type?new i.StepAxis(i.Axis.units.x,n,f,{ticks:h}):t.axisX.type.call(i,i.Axis.units.x,n,f,t.axisX),c=p=void 0===t.axisY.type?new i.AutoScaleAxis(i.Axis.units.y,n,f,i.extend({},t.axisY,{highLow:e,referenceValue:0})):t.axisY.type.call(i,i.Axis.units.y,n,f,i.extend({},t.axisY,{highLow:e,referenceValue:0})));var m=t.horizontalBars?f.x1+c.projectValue(0):f.y1-c.projectValue(0),v=[];u.createGridAndLabels(s,o,this.supportsForeignObject,t,this.eventEmitter),\nc.createGridAndLabels(s,o,this.supportsForeignObject,t,this.eventEmitter),n.raw.series.forEach(function(e,s){var a,o,l=s-(n.raw.series.length-1)/2;a=t.distributeSeries&&!t.stackBars?u.axisLength/n.normalized.length/2:t.distributeSeries&&t.stackBars?u.axisLength/2:u.axisLength/n.normalized[s].length/2,o=r.elem(\"g\"),o.attr({\"ct:series-name\":e.name,\"ct:meta\":i.serialize(e.meta)}),o.addClass([t.classNames.series,e.className||t.classNames.series+\"-\"+i.alphaNumerate(s)].join(\" \")),n.normalized[s].forEach(function(r,h){var g,x,y,b;if(b=t.distributeSeries&&!t.stackBars?s:t.distributeSeries&&t.stackBars?0:h,g=t.horizontalBars?{x:f.x1+c.projectValue(r&&r.x?r.x:0,h,n.normalized[s]),y:f.y1-u.projectValue(r&&r.y?r.y:0,b,n.normalized[s])}:{x:f.x1+u.projectValue(r&&r.x?r.x:0,b,n.normalized[s]),y:f.y1-c.projectValue(r&&r.y?r.y:0,h,n.normalized[s])},u instanceof i.StepAxis&&(u.options.stretch||(g[u.units.pos]+=a*(t.horizontalBars?-1:1)),g[u.units.pos]+=t.stackBars||t.distributeSeries?0:l*t.seriesBarDistance*(t.horizontalBars?-1:1)),y=v[h]||m,v[h]=y-(m-g[u.counterUnits.pos]),void 0!==r){var w={};w[u.units.pos+\"1\"]=g[u.units.pos],w[u.units.pos+\"2\"]=g[u.units.pos],!t.stackBars||\"accumulate\"!==t.stackMode&&t.stackMode?(w[u.counterUnits.pos+\"1\"]=m,w[u.counterUnits.pos+\"2\"]=g[u.counterUnits.pos]):(w[u.counterUnits.pos+\"1\"]=y,w[u.counterUnits.pos+\"2\"]=v[h]),w.x1=Math.min(Math.max(w.x1,f.x1),f.x2),w.x2=Math.min(Math.max(w.x2,f.x1),f.x2),w.y1=Math.min(Math.max(w.y1,f.y2),f.y1),w.y2=Math.min(Math.max(w.y2,f.y2),f.y1),x=o.elem(\"line\",w,t.classNames.bar).attr({\"ct:value\":[r.x,r.y].filter(i.isNum).join(\",\"),\"ct:meta\":i.getMetaData(e,h)}),this.eventEmitter.emit(\"draw\",i.extend({type:\"bar\",value:r,index:h,meta:i.getMetaData(e,h),series:e,seriesIndex:s,axisX:d,axisY:p,chartRect:f,group:o,element:x},w))}}.bind(this))}.bind(this)),this.eventEmitter.emit(\"created\",{bounds:c.bounds,chartRect:f,axisX:d,axisY:p,svg:this.svg,options:t})}function s(t,e,n,s){i.Bar.super.constructor.call(this,t,e,a,i.extend({},a,n),s)}var a={axisX:{offset:30,position:\"end\",labelOffset:{x:0,y:0},showLabel:!0,showGrid:!0,labelInterpolationFnc:i.noop,scaleMinSpace:30,onlyInteger:!1},axisY:{offset:40,position:\"start\",labelOffset:{x:0,y:0},showLabel:!0,showGrid:!0,labelInterpolationFnc:i.noop,scaleMinSpace:20,onlyInteger:!1},width:void 0,height:void 0,high:void 0,low:void 0,chartPadding:{top:15,right:15,bottom:5,left:10},seriesBarDistance:15,stackBars:!1,stackMode:\"accumulate\",horizontalBars:!1,distributeSeries:!1,reverseData:!1,classNames:{chart:\"ct-chart-bar\",horizontalBars:\"ct-horizontal-bars\",label:\"ct-label\",labelGroup:\"ct-labels\",series:\"ct-series\",bar:\"ct-bar\",grid:\"ct-grid\",gridGroup:\"ct-grids\",vertical:\"ct-vertical\",horizontal:\"ct-horizontal\",start:\"ct-start\",end:\"ct-end\"}};i.Bar=i.Base.extend({constructor:s,createChart:n})}(window,document,t),function(t,e,i){\"use strict\";function n(t,e,i){var n=e.x>t.x;return n&&\"explode\"===i||!n&&\"implode\"===i?\"start\":n&&\"implode\"===i||!n&&\"explode\"===i?\"end\":\"middle\"}function s(t){this.data=i.normalizeData(this.data);var e,s,a,o,l,c=[],h=t.startAngle,u=i.getDataArray(this.data,t.reverseData);this.svg=i.createSvg(this.container,t.width,t.height,t.donut?t.classNames.chartDonut:t.classNames.chartPie),s=i.createChartRect(this.svg,t,r.padding),a=Math.min(s.width()/2,s.height()/2),l=t.total||u.reduce(function(t,e){return t+e},0);var d=i.quantity(t.donutWidth);\"%\"===d.unit&&(d.value*=a/100),a-=t.donut?d.value/2:0,o=\"outside\"===t.labelPosition||t.donut?a:\"center\"===t.labelPosition?0:a/2,o+=t.labelOffset;var p={x:s.x1+s.width()/2,y:s.y2+s.height()/2},f=1===this.data.series.filter(function(t){return t.hasOwnProperty(\"value\")?0!==t.value:0!==t}).length;t.showLabel&&(e=this.svg.elem(\"g\",null,null,!0));for(var m=0;m<this.data.series.length;m++)if(0!==u[m]||!t.ignoreEmptyValues){var v=this.data.series[m];c[m]=this.svg.elem(\"g\",null,null,!0),c[m].attr({\"ct:series-name\":v.name}),c[m].addClass([t.classNames.series,v.className||t.classNames.series+\"-\"+i.alphaNumerate(m)].join(\" \"));var g=h+u[m]/l*360,x=Math.max(0,h-(0===m||f?0:.2));g-x>=359.99&&(g=x+359.99);var y=i.polarToCartesian(p.x,p.y,a,x),b=i.polarToCartesian(p.x,p.y,a,g),w=new i.Svg.Path(!t.donut).move(b.x,b.y).arc(a,a,0,g-h>180,0,y.x,y.y);t.donut||w.line(p.x,p.y);var E=c[m].elem(\"path\",{d:w.stringify()},t.donut?t.classNames.sliceDonut:t.classNames.slicePie);if(E.attr({\"ct:value\":u[m],\"ct:meta\":i.serialize(v.meta)}),t.donut&&E.attr({style:\"stroke-width: \"+d.value+\"px\"}),this.eventEmitter.emit(\"draw\",{type:\"slice\",value:u[m],totalDataSum:l,index:m,meta:v.meta,series:v,group:c[m],element:E,path:w.clone(),center:p,radius:a,startAngle:h,endAngle:g}),t.showLabel){var A=i.polarToCartesian(p.x,p.y,o,h+(g-h)/2),S=t.labelInterpolationFnc(this.data.labels&&!i.isFalseyButZero(this.data.labels[m])?this.data.labels[m]:u[m],m);if(S||0===S){var C=e.elem(\"text\",{dx:A.x,dy:A.y,\"text-anchor\":n(p,A,t.labelDirection)},t.classNames.label).text(\"\"+S);this.eventEmitter.emit(\"draw\",{type:\"label\",index:m,group:e,element:C,text:\"\"+S,x:A.x,y:A.y})}}h=g}this.eventEmitter.emit(\"created\",{chartRect:s,svg:this.svg,options:t})}function a(t,e,n,s){i.Pie.super.constructor.call(this,t,e,r,i.extend({},r,n),s)}var r={width:void 0,height:void 0,chartPadding:5,classNames:{chartPie:\"ct-chart-pie\",chartDonut:\"ct-chart-donut\",series:\"ct-series\",slicePie:\"ct-slice-pie\",sliceDonut:\"ct-slice-donut\",label:\"ct-label\"},startAngle:0,total:void 0,donut:!1,donutWidth:60,showLabel:!0,labelOffset:0,labelPosition:\"inside\",labelInterpolationFnc:i.noop,labelDirection:\"neutral\",reverseData:!1,ignoreEmptyValues:!1};i.Pie=i.Base.extend({constructor:a,createChart:s,determineAnchorPosition:n})}(window,document,t),t}),function(t,e){\"function\"==typeof define&&define.amd?define([\"chartist\"],function(i){return t.returnExportsGlobal=e(i)}):\"object\"==typeof exports?module.exports=e(require(\"chartist\")):t[\"Chartist.plugins.legend\"]=e(t.Chartist)}(this,function(t){\"use strict\";var e={className:\"\",classNames:!1,removeAll:!1,legendNames:!1,clickable:!0,onClick:null};return t.plugins=t.plugins||{},t.plugins.legend=function(i){function n(t,e){return t-e}return i=t.extend({},e,i),function(e){var s=e.container.querySelector(\".ct-legend\");if(s&&s.parentNode.removeChild(s),i.clickable){var a=e.data.series.map(function(i,n){return\"object\"!=typeof i&&(i={value:i}),i.className=i.className||e.options.classNames.series+\"-\"+t.alphaNumerate(n),i});e.data.series=a}var r=document.createElement(\"ul\"),o=e instanceof t.Pie;r.className=\"ct-legend\",e instanceof t.Pie&&r.classList.add(\"ct-legend-inside\"),\"string\"==typeof i.className&&i.className.length>0&&r.classList.add(i.className);var l=[],c=e.data.series.slice(0),h=e.data.series,u=o&&e.data.labels;if(u){var d=e.data.labels.slice(0);h=e.data.labels}h=i.legendNames||h;var p=Array.isArray(i.classNames)&&i.classNames.length===h.length;h.forEach(function(t,e){var n=document.createElement(\"li\");n.className=\"ct-series-\"+e,p&&(n.className+=\" \"+i.classNames[e]),n.setAttribute(\"data-legend\",e),n.textContent=t.name||t,r.appendChild(n)}),e.container.appendChild(r),i.clickable&&r.addEventListener(\"click\",function(t){var s=t.target;if(s.parentNode===r&&s.hasAttribute(\"data-legend\")){t.preventDefault();var a=parseInt(s.getAttribute(\"data-legend\")),o=l.indexOf(a);if(o>-1)l.splice(o,1),s.classList.remove(\"inactive\");else if(i.removeAll)l.push(a),s.classList.add(\"inactive\");else if(e.data.series.length>1)l.push(a),s.classList.add(\"inactive\");else{l=[];var h=Array.prototype.slice.call(r.childNodes);h.forEach(function(t){t.classList.remove(\"inactive\")})}var p=c.slice(0);if(u)var f=d.slice(0);l.sort(n).reverse(),l.forEach(function(t){p.splice(t,1),u&&f.splice(t,1)}),i.onClick&&i.onClick(e,t),e.data.series=p,u&&(e.data.labels=f),e.update()}})}},t.plugins.legend});","date":"2019-03-31T11:16:41.913Z","updated":"2019-02-09T10:36:34.105Z","path":"sims/framework/chartist.js","layout":"false","title":"","comments":1,"_id":"cjx8wr3it000nj1h5xg2uo283"},{"_content":"/* jshint browser: true */\n'use strict';\n\n/**\n * Compute the max/min of an array\n * Notice that apply requires a context object, which is not really used\n * in the case of a static function such as Math.max\n */\nArray.max = function (array) {\n  return Math.max.apply( Math, array);\n};\nArray.min = function (array) {\n  return Math.min.apply( Math, array);\n};\n/**\n * Clone an array\n */\nArray.prototype.clone = function () {\n  return this.slice(0);\n};\n/**\n * Merge an array with another one\n */\nArray.prototype.merge = function (anotherArray) {\n  return Array.prototype.push.apply( this, anotherArray);\n};\n/**\n * Test if an array is equal to another\n */\nArray.prototype.isEqualTo = function (a2) {\n  return (this.length === a2.length) && this.every( function( el, i) {\n        return el === a2[i]; });\n};\n\n/**\n * @fileOverview  Defines error classes (also called \"exception\" classes)\n * @author Gerd Wagner\n */\n\nfunction ConstraintViolation( msg, culprit) {\n  this.message = msg;\n  if (culprit) this.culprit = culprit;\n}\nfunction NoConstraintViolation( v) {\n  if (v !== undefined) this.checkedValue = v;\n  this.message = \"\";\n}\nNoConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nNoConstraintViolation.prototype.constructor = NoConstraintViolation;\n\n/*\n * Property Constraint Violations\n */\nfunction MandatoryValueConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nMandatoryValueConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nMandatoryValueConstraintViolation.prototype.constructor = MandatoryValueConstraintViolation;\n\nfunction RangeConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nRangeConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nRangeConstraintViolation.prototype.constructor = RangeConstraintViolation;\n\nfunction StringLengthConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nStringLengthConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nStringLengthConstraintViolation.prototype.constructor = StringLengthConstraintViolation;\n\nfunction IntervalConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nIntervalConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nIntervalConstraintViolation.prototype.constructor = IntervalConstraintViolation;\n\nfunction PatternConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nPatternConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nPatternConstraintViolation.prototype.constructor = PatternConstraintViolation;\n\nfunction UniquenessConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nUniquenessConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nUniquenessConstraintViolation.prototype.constructor = UniquenessConstraintViolation;\n\nfunction CardinalityConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nCardinalityConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nCardinalityConstraintViolation.prototype.constructor = CardinalityConstraintViolation;\n\nfunction ReferentialIntegrityConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nReferentialIntegrityConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nReferentialIntegrityConstraintViolation.prototype.constructor = ReferentialIntegrityConstraintViolation;\n\nfunction FrozenValueConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nFrozenValueConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nFrozenValueConstraintViolation.prototype.constructor = FrozenValueConstraintViolation;\n\nfunction OtherConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nOtherConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nOtherConstraintViolation.prototype.constructor = OtherConstraintViolation;\n\n/*\n * Entity Type Constraint Violations\n */\nfunction EntityTypeConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nEntityTypeConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nEntityTypeConstraintViolation.prototype.constructor = EntityTypeConstraintViolation;\n\nfunction ModelClassConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nModelClassConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nModelClassConstraintViolation.prototype.constructor = ModelClassConstraintViolation;\n\nfunction ViewConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nViewConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nViewConstraintViolation.prototype.constructor = ViewConstraintViolation;\n\nfunction ObjectTypeConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nObjectTypeConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nObjectTypeConstraintViolation.prototype.constructor = ObjectTypeConstraintViolation;\n\nfunction AgentTypeConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nAgentTypeConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nAgentTypeConstraintViolation.prototype.constructor = AgentTypeConstraintViolation;\n\nfunction KindConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nKindConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nKindConstraintViolation.prototype.constructor = KindConstraintViolation;\n\nfunction RoleConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nRoleConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nRoleConstraintViolation.prototype.constructor = RoleConstraintViolation;\n\n/*******************************************************************************\n * @fileOverview A collection of utilities: methods, objects, etc used all over the code.\n * @author Mircea Diaconescu\n * @copyright Copyright © 2014 Gerd Wagner, Mircea Diaconescu et al,\n *            Chair of Internet Technology, Brandenburg University of Technology, Germany.\n * @date July 08, 2014, 11:04:23\n * @license The MIT License (MIT)\n ******************************************************************************/\nvar util = {};  //typeof util === undefined ? {} : util;\n\n/**\n * Serialize a Date object as an ISO date string\n * @return  YYYY-MM-DD\n */\nutil.createIsoDateString = function (d) {\n  return d.toISOString().substring(0,10);\n};\n/**\n * Return the next year value (e.g. if now is 2013 the function will return 2014)\n * @return {number}  the integer representing the next year value\n */\nutil.nextYear = function () {\n  var date = new Date();\n  return (date.getFullYear() + 1);\n};\n/**\n * Capitalize the first character of a string\n * @param {string} str\n * @return {string}\n */\nutil.capitalizeFirstChar = function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n/**\n * Copy all own (property and method) slots of a number of untyped objects\n * to a new untyped object.\n * @author Gerd Wagner\n * @return {object}  The merge result.\n */\nutil.mergeObjects = function () {\n  var i = 0, k = 0, n = arguments.length, m = 0,\n      foundArrayArg = false,\n      foundObjectArg = false,\n      arg = null, mergedResult,\n      keys=[], key=\"\";\n  for (i = 0; i < n; i++) {\n    arg = arguments[i];\n    if (arg === undefined) {\n      continue;\n    }\n    if (Array.isArray( arg)) {\n      if (!foundObjectArg) {\n        mergedResult = mergedResult ? mergedResult : [];\n        foundArrayArg = true;\n        mergedResult = mergedResult.concat( arg);\n      } else {\n        throw \"util.mergeObjects: incompatible objects were found! Trying to merge \"+\n              \"an Array with an Object! Expected Array arguments only!\";\n      }\n    } else if (typeof arg === 'object') {\n      if (!foundArrayArg) {\n        mergedResult = mergedResult ? mergedResult : {};\n        foundObjectArg = true;\n        keys = Object.keys( arg);\n        m = keys.length;\n        for (k = 0; k < m; k++) {\n          key = keys[k];\n          mergedResult[key] = arg[key];\n        }\n      } else {\n        throw \"util.mergeObjects: incompatible objects were found! Trying to merge \"+\n              \"an Object with an Array! Expected Object arguments only!\";\n      }\n    } else {\n      throw \"util.mergeObjects: only arguments of type Array or Object are allowed, but '\" +\n             typeof arguments[i] + \"' type was found for argument number \" + i;\n    }\n  }\n  return mergedResult;\n};\n/**********************************************\n * Name conversions\n **********************************************/\n// Example 1: EnglishTeacher => english_teachers\n// Example 2: eXPERIMENTdEF => EXPERIMENT_DEFS\nutil.class2TableName = function (className) {\n  var tableName=\"\";\n  if (className.charAt(0) === className.charAt(0).toUpperCase()) { // starts with upper case\n    if (className.charAt( className.length-1) === \"y\") {\n      tableName = util.camelToLowerCase( className.slice( 0, className.length-1)) + \"ies\";\n    } else {\n      tableName = util.camelToLowerCase( className) + \"s\";\n    }\n    return tableName;\n  } else { // inverse camel case (starts with lower case)\n    if (className.charAt( className.length-1) === \"Y\") {\n      tableName = util.invCamelToUppercase( className.slice( 0, className.length-1)) + \"IES\";\n    } else {\n      tableName = util.invCamelToUppercase( className) + \"S\";\n    }\n    return tableName;\n  }\n};\n// Example: books => Book\nutil.table2ClassName = function (tableName) {\n  var result = util.lowercaseToCamel( tableName);\n  result = result.charAt( 0).toUpperCase() + result.slice( 1);\n  // if there is an 's' at the end, drop it\n  if (result.charAt( result.length - 1) === 's') {\n    result = result.slice( 0, result.length - 1);\n  }\n  /*\n  if (!util.JsIdentifierPattern.test( result)) {\n    throw Error(\"util.camelToLowerCase: the provided 'identifier' (\" + result +\n        \") is not a valid JS identifier!\");\n  }\n  */\n  return result;\n};\n// Example: dateOfBirth => date_of_birth\nutil.property2ColumnName = function (propertyName) {\n  return util.camelToLowerCase( propertyName);\n};\n// Example: date_of_birth => dateOfBirth\nutil.column2PropertyName = function (columnName) {\n  return util.lowercaseToCamel( columnName);\n};\nutil.camelToLowerCase = function (identifier) {\n  var result = '';\n  // if the first is a A-Z char, replace it with its lower case equivalent\n  identifier = identifier.charAt( 0).toLowerCase() + identifier.slice( 1);\n  // replace upper case letter with '_' followed by the lower case equivalent leter\n  result = identifier.replace( /([A-Z])/g, function( $1) {\n    return \"_\" + $1.toLowerCase();\n  });\n  return result;\n};\nutil.invCamelToUppercase = function (name) {\n  var result = '';\n  // if the first is a a-z, replace it with corresponding upper case\n  name = name.charAt(0).toUpperCase() + name.slice( 1);\n  // replace lower case letter with '_' followed by the corresponding upper case\n  result = name.replace( /([a-z])/g, function( $1) {\n    return \"_\" + $1.toUpperCase();\n  });\n  return result;\n};\nutil.lowercaseToCamel = function (identifier) {\n  var result = '';\n  // replace upper case letter with '_' followed by the lower case equivalent letter\n  result = identifier.replace( /(\\_[a-z])/g, function ($1) {\n    return $1.toUpperCase().replace( '_', '');\n  });\n  return result;\n};\n\n/** REGEX to check if valid JS identifier **/\nutil.JsIdentifierPattern = /^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc][$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc0-9\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19b0-\\u19c0\\u19c8\\u19c9\\u19d0-\\u19d9\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1dc0-\\u1de6\\u1dfc-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f]*$/;\n\n//***** NOT USED IN cLASSjs ************************\n/**\n * Verifies if a value represents an integer or integer string\n * @param {string} x\n * @return {boolean}\n */\nutil.isIntegerString = function (x) {\n  return typeof(x) === \"string\" && x.search(/^-?[0-9]+$/) == 0;\n};\n/**\n * Extract the data record part of an object. The extracted property values\n * are either primitive data values, Date objects, or arrays of primitive\n * data values.\n * @param {object} obj\n */\nutil.createRecordFromObject = function (obj) {\n  var record={}, p=\"\", val;\n  for (p in obj) {\n    val = obj[p];\n    if (obj.hasOwnProperty(p) && (typeof(val) === \"string\" ||\n            typeof(val) === \"number\" || typeof(val) === \"boolean\" ||\n            val instanceof Date ||\n            Array.isArray( val) &&  // array list of data values\n            !val.some( function (el) {\n              return typeof(el) === \"object\";\n            })\n        )) {\n      if (val instanceof Date) record[p] = val.toISOString();\n      else if (Array.isArray( val)) record[p] = val.slice(0);\n      else record[p] = val;\n    }\n  }\n  return record;\n};\n// create an alias for cloning records\nutil.cloneRecord = util.createRecordFromObject;\n\n/**\n * Create a \"deep\" clone of a JS object at the level of own properties/slots\n * @param o  the object to be cloned\n * @return {object}\n */\nutil.cloneObject = function (o) {\n  var clone = Array.isArray(o) ? [] : {};\n  Object.keys(o).forEach( function (key) {\n    clone[key] = (typeof o[key] === \"object\") ? util.cloneObject(o[key]) : o[key];\n  });\n  return clone;\n};\n/**\n * Copy all own (property and method) slots of a number of (untyped) objects\n * to a new (untyped) object.\n * @author Gerd Wagner\n * @return {object}  The merge result.\n *\nutil.mergeObjects = function () {\n  var i=0, k=0, obj=null, mergeObj={}, keys=[], key=\"\";\n  for (i=0; i < arguments.length; i++) {\n    obj = arguments[i];\n    if (obj && typeof obj === \"object\") {\n      keys = Object.keys( obj);\n      for (k=0; k < keys.length; k++) {\n        key = keys[k];\n        mergeObj[key] = obj[key];\n      }\n    }\n  }\n  return mergeObj;\n};\n */\n/**\n * Swap two elements of an array\n * using the ES6 method Object.assign for creating a shallow clone of an object\n * @param a  the array\n * @param i  the first index\n * @param i  the 2nd index\n */\nutil.swapArrayElements = function (a,i,j) {\n  var tempStore = (typeof a[i] === \"object\") ? Object.assign( {}, a[i]) : a[i];\n  a[i] = (typeof a[j] === \"object\") ? Object.assign( {}, a[j]) : a[j];\n  a[j] = tempStore;\n};\n/**\n * Shuffles array in place using the Fisher-Yates shuffle algorithm\n * @param {Array} a - An array of items to be shuffled\n */\nutil.shuffleArray = function (a) {\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n    j = Math.floor( Math.random() * (i + 1) );\n    x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n};\n/**\n * Compute the Cartesian Product of an array of arrays\n * From https://stackoverflow.com/a/36234242/2795909\n * @param {Array} arr - An array of arrays of values to be combined\n */\nutil.cartesianProduct = function (arr) {\n  return arr.reduce( function (a,b) {\n    return a.map( function (x) {\n      return b.map( function (y) {\n        return x.concat(y);\n      })\n    }).reduce( function (a,b) {return a.concat(b)}, [])\n  }, [[]])\n};\n/**\n * Load a script\n * @param {Array} arr - An array of arrays of values to be combined\n */\nutil.loadScript = function (pathAndFilename, basePath, callback, errCallback) {\n  var loadEl = document.createElement('script');\n  // if a full URL is provided, the base path is ignored\n  if (pathAndFilename.indexOf(\"://\") === -1)\n    pathAndFilename = basePath + pathAndFilename;\n  // if no callback(s) provided, define an empty function\n  callback = typeof callback === \"function\" ? callback : function () {};\n  errCallback = typeof errCallback === \"function\" ? errCallback : function () {};\n  loadEl.src = pathAndFilename;\n  loadEl.onload = function () {\n    callback(loadEl);\n  };\n  loadEl.onerror = function (e) {\n    console.log(\"Failed loading file '\" + pathAndFilename + \"'!\");\n    loadEl.remove();\n    errCallback(e);\n  };\n  document.head.appendChild( loadEl);\n};\n\n/****************************************************************\n * Math Library\n ****************************************************************/\nvar math = {};\n/**\n * Compute the sum of an array of numbers\n * @param {Array} data - An array of numbers\n */\nmath.sum = function (data) {\n  function add( a, b) {return a + b;}\n  return data.reduce( add, 0);\n};\n/**\n * Compute the arithmetic mean of an array of numbers\n * @param {Array} data - An array of numbers\n */\nmath.mean = function (data) {\n  return math.sum( data) / data.length;\n};\n/**\n * Compute the standard deviation of an array of numbers\n * @param {Array} data - An array of numbers\n */\nmath.stdDev = function (data) {\n  var m = math.mean( data);\n  return Math.sqrt( data.reduce( function (acc, x) {\n    return acc + Math.pow( x - m, 2);}, 0) / (data.length - 1));\n};\n/**\n * Compute the bootstrap confidence interval of an array of numbers. Based on\n *   Efron, B. (1985). Bootstrap confidence intervals for a class of parametric\n *   problems. Biometrika, 72(1), 45-58.\n * @param {Array} data - An array of numbers\n * @param {integer} samples - Number of bootstrap samples (default 10000)\n * @param {decimal} alpha - Confidence interval to estimate [0,1] (default 0.95)\n * @returns {Array} Lower and upper confidence interval\n */\nmath.bootstrapConfInt = function ( data, samples, alpha ) {\n  var n = samples || 10000;\n  var p = alpha || 0.95;\n  var i, j, t;\n  var mu = Array( n );\n  var m = math.mean( data );\n  var len = data.length;\n\n  /* Calculate bootstrap samples */\n  for ( i = 0; i < n; i += 1 ) {\n    t = 0;\n    for ( j = 0; j < len; j += 1 ) {\n      t += data[ Math.floor( Math.random() * len ) ];\n    }\n    mu[ i ] = ( t / len ) - m;\n  }\n\n  /* Sort in ascending order */\n  mu.sort( function ( a, b ) {\n    return a - b;\n  } );\n\n  /* Return the lower and upper bootstrap confidence interval */\n  return [\n    m - mu[ Math.floor( Math.min( n - 1, n * ( 1 - ( (1 - p ) / 2 ) ) ) ) ],\n    m - mu[ Math.floor( Math.max( 0, n * ( ( 1 - p ) / 2 ) ) ) ]\n  ];\n};\n/**\n * Compute the lower confidence interval of an array of numbers.\n * @param {Array} data - An array of numbers\n * @returns {decimal} Lower confidence interval\n */\nmath.confIntLower = function ( data ) {\n  return math.bootstrapConfInt( data )[ 0 ];\n};\n/**\n * Compute the upper confidence interval of an array of numbers.\n * @param {Array} data - An array of numbers\n * @returns {decimal} Upper confidence interval\n */\nmath.confIntUpper = function ( data ) {\n  return math.bootstrapConfInt( data )[ 1 ];\n};\n/**\n * Predefined class for creating enumerations as special JS objects.\n * @copyright Copyright 2014 Gerd Wagner, Chair of Internet Technology,\n *   Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Gerd Wagner\n * @constructor\n * @this {eNUMERATION}\n * @param {string} name  The name of the new enumeration data type.\n * @param {array} enumArg  The labels array or code list map of the enumeration\n *\n * An eNUMERATION has the following properties:\n * labels         an array list of label strings such that enumLabel = labels[enumIndex-1]\n * enumLitNames\n *\n */\n/* globals eNUMERATION */\nfunction eNUMERATION( name, enumArg) {\n  var i = 0, lbl = \"\", LBL = \"\";\n  if (typeof name !== \"string\") {\n    throw new Error(\n      \"The first constructor argument of an enumeration must be a string!\");\n  }\n  this.name = name;\n  if (Array.isArray(enumArg)) {\n    // a simple enum defined by a list of labels\n    if (!enumArg.every(function (n) {\n        return (typeof n === \"string\");\n      })) {\n      throw new Error(\"A list of enumeration labels as the second \" +\n        \"constructor argument must be an array of strings!\");\n    }\n    this.labels = enumArg;\n    this.enumLitNames = this.labels;\n    this.codeList = null;\n  } else if (typeof enumArg === \"object\" && Object.keys(enumArg).length > 0) {\n    // a code list defined by a map\n    if (!Object.keys(enumArg).every(function (code) {\n        return (typeof enumArg[code] === \"string\");\n      })) {\n      throw new Error(\"All values of a code list map must be strings!\");\n    }\n    this.codeList = enumArg;\n    // use codes as the names of enumeration literals\n    this.enumLitNames = Object.keys( this.codeList);\n    this.labels = this.enumLitNames.map(function (c) {\n      return enumArg[c] + \" (\" + c + \")\";\n    });\n  } else {\n    throw new Error(\n      \"Invalid Enumeration constructor argument: \" + enumArg);\n  }\n  this.MAX = this.enumLitNames.length;\n  // generate the enumeration literals by capitalizing/normalizing the names\n  for (i = 1; i <= this.enumLitNames.length; i++) {\n    // replace \" \" and \"-\" with \"_\"\n    lbl = this.enumLitNames[i - 1].replace(/( |-)/g, \"_\");\n    // convert to array of words, capitalize them, and re-convert\n    LBL = lbl.split(\"_\").map(function (lblPart) {\n      return lblPart.toUpperCase();\n    }).join(\"_\");\n    // assign enumeration index\n    this[LBL] = i;\n  }\n  // protect the enumeration from change attempts\n  Object.freeze( this);\n  // add new enumeration to the population of all enumerations\n  eNUMERATION.instances[this.name] = this;\n}\n/*\n * Check if a value represents an enumeration literal or a valid index\n */\neNUMERATION.prototype.isValidEnumLitOrIndex = function (v) {\n  return (Number.isInteger(v) && v > 0 && v < this.MAX);\n};\n/*\n * Serialize a list of enumeration literals/indexes as a list of\n * enumeration literal names\n */\neNUMERATION.prototype.enumIndexesToNames = function (a) {\n  if (!Array.isArray(a)) {\n    throw new Error(\n      \"The argument must be an Array!\");\n  }\n  var listStr = a.map(function (enumInt) {\n    return this.enumLitNames[enumInt - 1];\n  }, this).join(\", \");\n  return listStr;\n};\n/*\n * Define a map of all enumerations as a class-level property\n */\neNUMERATION.instances = {};\n\n /*******************************************************************************\n * cLASS allows defining constructor-based JavaScript classes and\n * class hierarchies based on a declarative description of the form:\n *\n *   var Student = new cLASS({\n *     Name: \"Student\",\n *     supertypeName: \"Person\",\n *     properties: {\n *       \"university\": {range:\"String\", label:\"University\", max: 50, ...}\n *     },\n *     methods: {\n *     }\n *   });\n *   var stud1 = new Student({id: 1, university:\"MIT\"});\n *   // test if direct instance\n *   if (stud1.constructor.Name === \"Student\") ...\n *   // test if instance\n *   if (stud1 instanceof Student) ...\n *\n * Notice that it is assumed that a class has (or inherits) an \"id\" attribute\n * as its standard ID attribute.\n *\n *\n * @copyright Copyright 2015-2017 Gerd Wagner, Chair of Internet Technology,\n *   Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Gerd Wagner\n ******************************************************************************/\n/* globals cLASS */\nfunction cLASS (classSlots) {\n  var propDefs = classSlots.properties || {},  // property declarations\n      methods = classSlots.methods || {},\n      supertypeName = classSlots.supertypeName,\n      superclass=null, constr=null, missingRangeProp=\"\",\n      propsWithInitialValFunc = [];\n  // check Class definition constraints\n  if (supertypeName && !cLASS[supertypeName]) {\n    throw \"Specified supertype \"+ supertypeName +\" has not been defined!\";\n  }\n  if (!Object.keys( propDefs).every( function (p) {\n        if (!propDefs[p].range) missingRangeProp = p;\n        return (propDefs[p].range !== undefined);\n      }) ) {\n    throw \"No range defined for property \"+ missingRangeProp +\n        \" of class \"+ classSlots.Name +\" !\";\n  }\n  // define a constructor function for creating a new object\n  constr = function (instanceSlots) {\n    if (!instanceSlots) return;\n    if (supertypeName) {\n      // invoke supertype constructor\n      cLASS[supertypeName].call( this, instanceSlots);\n    }\n    // assign own properties  TODO: use the checked value from validationResult\n    Object.keys( propDefs).forEach( function (p) {\n      var pDef = propDefs[p], range = pDef.range, Class=null,\n          val, rangeTypes=[], i=0, validationResult=null;\n      if (typeof instanceSlots === \"object\" && p in instanceSlots) {\n        // property p has an initialization slot\n        val = instanceSlots[p];\n        validationResult = cLASS.check( p, pDef, val);\n        if (!(validationResult instanceof NoConstraintViolation)) throw validationResult;\n        // is range a cLASS collection datatype?\n        if (typeof range === \"object\" && range.dataType !== undefined) {\n          this[p] = Array.isArray( val) ? val.slice(0) : Object.assign({}, val);  // assign clone\n        } else if (typeof range === \"string\" && typeof val !== \"object\" &&\n            (cLASS[range] || range.includes(\"|\"))) {\n          // is range a class (or class disjunction)?\n          if (range.includes(\"|\")) {\n            rangeTypes = range.split(\"|\");\n            for (i=0; i < rangeTypes.length; i++) {\n              Class = cLASS[rangeTypes[i]];\n              if (Class) {  // type disjunct is a cLASS\n                if (Class.instances[String(val)])  {\n                  // convert IdRef to object reference\n                  this[p] = Class.instances[String(val)];\n                  break;\n                }\n              }\n            }\n            if (!this[p]) this[p] = val;\n          } else {  // range is a class\n            // convert IdRef to object reference\n            this[p] = cLASS[range].instances[String(val)] || val;\n          }\n        } else this[p] = val;\n      } else if (pDef.initialValue !== undefined) {  // assign initial value\n        if (typeof pDef.initialValue === \"function\") {\n          propsWithInitialValFunc.push(p);\n        } else this[p] = pDef.initialValue;\n      } else if (p === \"id\" && range === \"AutoNumber\") {    // assign auto-ID\n        if (typeof this.constructor.getAutoId === \"function\") {\n          this[p] = this.constructor.getAutoId();\n        } else if (this.constructor.idCounter !== undefined) {\n          this[p] = ++this.constructor.idCounter;\n        }\n      } else if (!pDef.optional) {  // assign default values to mandatory properties\n        if (pDef.maxCard > 1) {\n          if (pDef.minCard === 0) {  // optional multi-valued property\n            if (pDef.range in cLASS && !pDef.isOrdered) this[p] = {};  // map\n            else this[p] = [];  // array list\n          } else throw \"A non-empty collection value for \"+ p +\" is required!\";\n        } else if (cLASS.isIntegerType(range) || cLASS.isDecimalType(range)) {\n          this[p] = 0;\n        } else if (range === \"String\") {\n          this[p] = \"\";\n        } else if (range === \"Boolean\") {\n          this[p] = false;\n        } else if (typeof range === \"object\") {\n          if ([\"Array\", \"ArrayList\"].includes(range.dataType)) {\n            this[p] = [];\n          } else if (range.dataType === \"Map\") {\n            this[p] = {};\n          }\n        } else {\n          throw \"A value for \"+ p +\" is required when creating a(n) \"+ classSlots.Name;\n          console.log(\"instanceSlots = \", JSON.stringify(instanceSlots));\n        }\n      }\n      // initialize historical properties\n      if (pDef.historySize) {\n        this.history = this.history || {};  // a map\n        this.history[p] = pDef.decimalPlaces ?\n            new cLASS.RingBuffer( pDef.range, pDef.historySize,\n                {decimalPlaces: pDef.decimalPlaces}) :\n            new cLASS.RingBuffer( pDef.range, pDef.historySize);\n      }\n    }, this);\n    // call the functions for initial value expressions\n    propsWithInitialValFunc.forEach( function (p) {\n      this[p] = propDefs[p].initialValue.call(this);\n    }, this);\n    // assign remaining fields not defined as properties by the object's class\n    if (typeof( instanceSlots) === \"object\") {\n      Object.keys( instanceSlots).forEach( function (f) {\n        if (!propDefs[f]) this[f] = instanceSlots[f];\n      }, this);\n    }\n    // take care of cLASS-specific provisions (e.g., update a materialized view)\n    if (\"onConstruction\" in methods) this.onConstruction();\n    // is the class neither a complex DT nor abstract and does the object have an ID slot?\n    if (!classSlots.isComplexDatatype && !classSlots.isAbstract && \"id\" in this) {\n      // add new object to the population/extension of the class\n      cLASS[classSlots.Name].instances[String(this.id)] = this;\n    }\n  };\n  // assign class-level (meta-)properties\n  constr.constructor = cLASS;\n  constr.Name = classSlots.Name;\n  if (classSlots.isComplexDatatype) constr.isComplexDatatype = true;\n  if (classSlots.isAbstract) constr.isAbstract = true;\n  if (classSlots.label) constr.label = classSlots.label;\n  if (classSlots.shortLabel) constr.shortLabel = classSlots.shortLabel;\n  if (classSlots.primaryKey) constr.primaryKey = classSlots.primaryKey;\n  if (classSlots.tableName) constr.tableName = classSlots.tableName;\n  if (supertypeName) {\n    constr.supertypeName = supertypeName;\n    superclass = cLASS[supertypeName];\n    // apply classical inheritance pattern for methods\n    constr.prototype = Object.create( superclass.prototype);\n    constr.prototype.constructor = constr;\n    // merge superclass property declarations with own property declarations\n    constr.properties = Object.create( superclass.properties);\n   //  assign own property declarations, possibly overriding super-props\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n    Object.keys( propDefs).forEach( function (p) {\n      constr.properties[p] = propDefs[p];\n    });\n  } else {  // if class is root class\n    constr.properties = propDefs;\n    /***************************************************/\n    constr.prototype.set = function ( prop, val) {\n    /***************************************************/\n      // this = object\n      var validationResult = cLASS.check( prop, this.constructor.properties[prop], val);\n      if (validationResult instanceof NoConstraintViolation) {\n        this[prop] = validationResult.checkedValue;\n      } else {\n        throw validationResult;\n      }\n    };\n    /***************************************************/\n    // overwrite and improve the standard toString method\n    constr.prototype.toString = function () {\n    /***************************************************/\n      var str1=\"\", str2=\"\", i=0;\n      if (this.name) str1 = this.name;\n      else {\n        str1 = this.constructor.shortLabel || this.constructor.Name;\n        if (this.id) str1 += \":\"+ this.id;\n      }\n      str2 = \"{ \";\n      Object.keys( this).forEach( function (key) {\n        var propDecl = cLASS[this.constructor.Name].properties[key],\n            propLabel = propDecl ? (propDecl.shortLabel || propDecl.label) : key,\n            valStr = \"\";\n        // is the slot of a declared reference property?\n        if (propDecl && typeof propDecl.range === \"string\" && cLASS[propDecl.range]) {\n          // is the property multi-valued?\n          if (propDecl.maxCard && propDecl.maxCard > 1) {\n            if (Array.isArray( this[key])) {\n              valStr = this[key].map( function (o) {return o.id;}).toString();\n            } else valStr = JSON.stringify( Object.keys( this[key]));\n          } else {  // if the property is single-valued\n            valStr = String( this[key].id);\n          }\n        } else if (typeof this[key] === \"function\") {\n          // the slot is an instance-level method slot\n          valStr = \"a function\";\n        } else {  // the slot is an attribute slot or an undeclared reference property slot\n          valStr = JSON.stringify( this[key]);\n        }\n        if (this[key] !== undefined && propLabel) {\n          str2 += (i>0 ? \", \" : \"\") + propLabel +\": \"+ valStr;\n          i = i+1;\n        }\n      }, this);\n      str2 += \"}\";\n      if (str2 === \"{ }\") str2 = \"\";\n      return str1 + str2;\n    };\n    /***************************************************/\n    constr.prototype.toRecord = function () {\n    /***************************************************/\n      var obj = this, rec={}, propDecl={}, valuesToConvert=[], range, val;\n      Object.keys( obj).forEach( function (p) {\n        if (obj[p] !== undefined) {\n          val = obj[p];\n          propDecl = obj.constructor.properties[p];\n          range = propDecl.range;\n          if (propDecl.maxCard && propDecl.maxCard > 1) {\n            if (range.constructor && range.constructor === cLASS) { // object reference(s)\n              if (Array.isArray( val)) {\n                valuesToConvert = val.slice(0);  // clone;\n              } else {  // val is a map from ID refs to obj refs\n                valuesToConvert = Object.values( val);\n              }\n            } else if (Array.isArray( val)) {\n              valuesToConvert = val.slice(0);  // clone;\n            } else console.log(\"Invalid non-array collection in toRecord!\");\n          } else {  // maxCard=1\n            valuesToConvert = [val];\n          }\n          valuesToConvert.forEach( function (v,i) {\n            // alternatively: enum literals as labels\n            // if (range instanceof eNUMERATION) rec[p] = range.labels[val-1];\n            if ([\"number\",\"string\",\"boolean\"].includes( typeof(v)) || !v) {\n              valuesToConvert[i] = String( v);\n            } else if (range === \"Date\") {\n              valuesToConvert[i] = util.createIsoDateString( v);\n            } else if (range.constructor && range.constructor === cLASS) { // object reference(s)\n              valuesToConvert[i] = v.id;\n            } else if (Array.isArray( v)) {  // JSON-compatible array\n              valuesToConvert[i] = v.slice(0);  // clone\n            } else valuesToConvert[i] = JSON.stringify( v);\n          });\n          if (!propDecl.maxCard || propDecl.maxCard <= 1) {\n            rec[p] = valuesToConvert[0];\n          } else {\n            rec[p] = valuesToConvert;\n          }\n        }\n      });\n      return rec;\n    };\n    /***************************************************/\n    // Convert property value to (form field) string.\n    constr.prototype.getValueAsString = function ( prop) {\n    /***************************************************/\n      // make sure the eNUMERATION meta-class object can be checked if available\n      var eNUMERATION = typeof eNUMERATION === \"undefined\" ? undefined : eNUMERATION;\n      var propDecl = this.constructor.properties[prop],\n          range = propDecl.range, val = this[prop];\n      var valuesToConvert=[], displayStr=\"\", k=0,\n          listSep = \", \";\n      if (val === undefined || val === null) return \"\";\n      if (propDecl.maxCard && propDecl.maxCard > 1) {\n        if (Array.isArray( val)) {\n          valuesToConvert = val.length>0 ? val.slice(0) : [];  // clone;\n        } else if (typeof val === \"object\") {\n          valuesToConvert = Object.keys( val);\n        } else console.log(\"The value of a multi-valued \" +\n            \"property like \"+ prop +\" must be an array or a map!\");\n      } else valuesToConvert = [val];\n      valuesToConvert.forEach( function (v,i) {\n        if (typeof propDecl.val2str === \"function\") {\n          valuesToConvert[i] = propDecl.val2str( v);\n        } else if (eNUMERATION && range instanceof eNUMERATION) {\n          valuesToConvert[i] = range.labels[v-1];\n        } else if ([\"number\",\"string\",\"boolean\"].includes( typeof v) || !v) {\n          valuesToConvert[i] = String( v);\n        } else if (range === \"Date\") {\n          valuesToConvert[i] = util.createIsoDateString( v);\n        } else if (Array.isArray( v)) {  // JSON-compatible array\n          valuesToConvert[i] = v.slice(0);  // clone\n        } else if (typeof range === \"string\" && cLASS[range]) {\n          if (typeof v === \"object\" && v.id !== undefined) {\n            valuesToConvert[i] = v.id;\n          } else {\n            valuesToConvert[i] = v.toString();\n            propDecl.stringified = true;\n            console.log(\"Property \"+ this.constructor.Name +\"::\"+ prop +\" has a cLASS object value without an 'id' slot!\");\n          }\n        } else {\n          valuesToConvert[i] = JSON.stringify( v);\n          propDecl.stringified = true;\n        }\n      }, this);\n      if (valuesToConvert.length === 0) displayStr = \"[]\";\n      else {\n        displayStr = valuesToConvert[0];\n        if (propDecl.maxCard && propDecl.maxCard > 1) {\n          displayStr = \"[\" + displayStr;\n          for (k=1; k < valuesToConvert.length; k++) {\n            displayStr += listSep + valuesToConvert[k];\n          }\n          displayStr = displayStr + \"]\";\n        }\n      }\n      return displayStr;\n    };\n    /***************************************************/\n\n    /***************************************************\n     * A class-level de-serialization method\n     ***************************************************/\n    constr.createObjectFromRecord = function (record) {\n      var obj={};\n      try {\n        obj = new constr( record);\n      } catch (e) {\n        console.log( e.constructor.name + \" while deserializing a \"+\n            constr.Name +\" record: \" + e.message);\n        obj = null;\n      }\n      return obj;\n    };\n  }\n  // assign instance-level methods\n  Object.keys( methods).forEach( function (m) {\n    constr.prototype[m] = methods[m];\n  });\n  // store class/constructor as value associated with its name in a map\n  cLASS[classSlots.Name] = constr;\n  // initialize the class-level instances property\n   if (!classSlots.isAbstract) {\n     cLASS[classSlots.Name].instances = {};\n   }\n  // return the constructor as the object constructed with new cLASS\n  return constr;\n}\n /**\n  * Determine if a type is an integer type.\n  * @method\n  * @author Gerd Wagner\n  * @param {string|eNUMERATION} T  The type to be checked.\n  * @return {boolean}\n  */\ncLASS.isIntegerType = function (T) {\n  return [\"Integer\",\"PositiveInteger\",\"AutoNumber\",\"NonNegativeInteger\"].includes(T) ||\n      T instanceof eNUMERATION;\n};\n /**\n  * Determine if a type is a decimal type.\n  * @method\n  * @author Gerd Wagner\n  * @param {string} T  The type to be checked.\n  * @return {boolean}\n  */\n cLASS.isDecimalType = function (T) {\n   return [\"Number\",\"Decimal\",\"Percent\",\"ClosedUnitInterval\",\"OpenUnitInterval\"].includes(T);\n };\n /**\n  * Constants\n  */\n cLASS.patterns = {\n   ID: /^([a-zA-Z0-9][a-zA-Z0-9_\\-]+[a-zA-Z0-9])$/,\n   // defined in WHATWG HTML5 specification\n   EMAIL: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n   // proposed by Diego Perini (https://gist.github.com/729294)\n   URL: /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i,\n   INT_PHONE_NO: /^\\+(?:[0-9] ?){6,14}[0-9]$/\n };\n /**\n  * Generic method for checking the integrity constraints defined in property declarations.\n  * The values to be checked are first parsed/deserialized if provided as strings.\n  * Copied from the cOMPLEXtYPE class of oNTOjs\n  *\n  * min/max: numeric (or string length) minimum/maximum\n  * optional: true if property is single-valued and optional (false by default)\n  * range: String|NonEmptyString|Integer|...\n  * pattern: a regular expression to be matched\n  * minCard/maxCard: minimum/maximum cardinality of a multi-valued property\n  *     By default, maxCard is 1, implying that the property is single-valued, in which\n  *     case minCard is meaningless/ignored. maxCard may be Infinity.\n  *\n  * @method\n  * @author Gerd Wagner\n  * @param {string} fld  The property for which a value is to be checked.\n  * @param {object} decl  The property's declaration.\n  * @param {string|number|boolean|object} val  The value to be checked.\n  * @param optParams.checkRefInt  Check referential integrity\n  * @return {ConstraintViolation}  The constraint violation object.\n  */\n cLASS.check = function (fld, decl, val, optParams) {\n   var constrVio=null, valuesToCheck=[],\n       msg = decl.patternMessage || \"\",\n       minCard = decl.minCard!==\"umdefined\" ? decl.minCard : decl.optional?0:1,  // by default, a property is mandatory\n       maxCard = decl.maxCard || 1,  // by default, a property is single-valued\n       min = decl.min || 0, max = decl.max,\n       range = decl.range,\n       pattern = decl.pattern;\n   // check Mandatory Value Constraint\n   if (val === undefined || val === \"\") {\n     if (decl.optional) return new NoConstraintViolation();\n     else {\n       return new MandatoryValueConstraintViolation(\n           \"A value for \"+ fld +\" is required!\");\n     }\n   }\n   if (maxCard === 1) {  // single-valued property\n     valuesToCheck = [val];\n   } else {  // multi-valued properties can be array-valued or map-valued\n     if (Array.isArray( val) ) {\n       valuesToCheck = val;\n     } else if (typeof range === \"string\" && cLASS[range]) {\n       if (!decl.isOrdered) {\n         valuesToCheck = Object.keys( val).map( function (id) {\n           return val[id];\n         });\n       } else {\n         return new RangeConstraintViolation(\"Values for the ordered property \"+ fld +\n             \" must be arrays, and not maps!\");\n       }\n     } else {\n       return new RangeConstraintViolation(\"Values for \"+ fld +\n           \" must be arrays or maps of IDs to cLASS instances!\");\n     }\n   }\n   // convert integer strings to integers\n   if (cLASS.isIntegerType( range)) {\n     valuesToCheck.forEach( function (v,i) {\n       if (typeof v === \"string\") valuesToCheck[i] = parseInt( v);\n     });\n   }\n   // convert decimal strings to decimal numbers\n   if (cLASS.isDecimalType( range)) {\n     valuesToCheck.forEach( function (v,i) {\n       if (typeof v === \"string\") valuesToCheck[i] = parseFloat( v);\n     });\n   }\n   /*********************************************************************\n    ***  Convert value strings to values and check range constraints ****\n    ********************************************************************/\n   switch (range) {\n     case \"String\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\") {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be strings!\");\n         }\n       });\n       break;\n     case \"NonEmptyString\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\" || v.trim() === \"\") {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be non-empty strings!\");\n         }\n       });\n       break;\n     case \"Identifier\":  // add regexp test\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\" || v.trim() === \"\" || !cLASS.patterns.ID.test( v)) {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be valid identifiers/names!\");\n         }\n       });\n       break;\n     case \"Email\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\" || !cLASS.patterns.EMAIL.test( v)) {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be valid email addresses!\");\n         }\n       });\n       break;\n     case \"URL\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\" || !cLASS.patterns.URL.test( v)) {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be valid URLs!\");\n         }\n       });\n       break;\n     case \"PhoneNumber\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\" || !cLASS.patterns.INT_PHONE_NO.test( v)) {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be valid international phone numbers!\");\n         }\n       });\n       break;\n     case \"Integer\":\n       valuesToCheck.forEach( function (v) {\n         if (!Number.isInteger(v)) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be an integer!\");\n         }\n       });\n       break;\n     case \"NonNegativeInteger\":\n       valuesToCheck.forEach( function (v) {\n         if (!Number.isInteger(v) || v < 0) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a non-negative integer!\");\n         }\n       });\n       break;\n     case \"AutoNumber\":\n       if (valuesToCheck.length === 1) {\n         if (!Number.isInteger( valuesToCheck[0]) || valuesToCheck[0] < 1) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a positive integer!\");\n         }\n       } else {\n         constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n             \" must not be a collection like \"+ valuesToCheck);\n       }\n       break;\n     case \"PositiveInteger\":\n       valuesToCheck.forEach( function (v) {\n         if (!Number.isInteger(v) || v < 1) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a positive integer!\");\n         }\n       });\n       break;\n     case \"Number\":\n     case \"Decimal\":\n     case \"Percent\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"number\") {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a (decimal) number!\");\n         }\n       });\n       break;\n     case \"ClosedUnitInterval\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"number\") {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a (decimal) number!\");\n         } else if (v<0 || v>1) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a number in [0,1]!\");\n         }\n       });\n       break;\n     case \"OpenUnitInterval\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"number\") {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a (decimal) number!\");\n         } else if (v<=0 || v>=1) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a number in (0,1)!\");\n         }\n       });\n       break;\n     case \"Boolean\":\n       valuesToCheck.forEach( function (v,i) {\n         if (typeof v === \"string\") {\n           if ([\"true\",\"yes\"].includes(v)) valuesToCheck[i] = true;\n           else if ([\"no\",\"false\"].includes(v)) valuesToCheck[i] = false;\n           else constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n                 \" must be either 'true'/'yes' or 'false'/'no'!\");\n         } else if (typeof v !== \"boolean\") {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be either 'true' or 'false'!\");\n         }\n       });\n       break;\n     case \"Date\":\n       valuesToCheck.forEach( function (v,i) {\n         if (typeof v === \"string\" &&\n             /\\d{4}-(0\\d|1[0-2])-([0-2]\\d|3[0-1])/.test(v) && !isNaN( Date.parse(v))) {\n           valuesToCheck[i] = new Date(v);\n         } else if (!(v instanceof Date)) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be either a Date value or an ISO date string. \"+\n               v +\" is not admissible!\");\n         }\n       });\n       break;\n     case \"DateTime\":\n       valuesToCheck.forEach( function (v,i) {\n         if (typeof v === \"string\" && !isNaN( Date.parse(v))) {\n           valuesToCheck[i] = new Date(v);\n         } else if (!(v instanceof Date)) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be either a Date value or an ISO date-time string. \"+\n               v +\" is not admissible!\");\n         }\n       });\n       break;\n     default:\n       if (range instanceof eNUMERATION || typeof range === \"string\" && eNUMERATION[range]) {\n         if (typeof range === \"string\") range = eNUMERATION[range];\n         valuesToCheck.forEach( function (v) {\n           if (!Number.isInteger( v) || v < 1 || v > range.MAX) {\n             constrVio = new RangeConstraintViolation(\"The value \"+ v +\n                 \" is not an admissible enumeration integer for \"+ fld);\n           }\n         });\n       } else if (Array.isArray( range)) {\n         // *** Ad-hoc enumeration ***\n         valuesToCheck.forEach( function (v) {\n           if (range.indexOf(v) === -1) {\n             constrVio = new RangeConstraintViolation(\"The \"+ fld +\" value \"+ v +\n                 \" is not in value list \"+ range.toString());\n           }\n         });\n       } else if (typeof range === \"string\" && cLASS[range]) {\n         valuesToCheck.forEach( function (v, i) {\n           var recFldNames=[], propDefs={};\n           if (!cLASS[range].isComplexDatatype && !(v instanceof cLASS[range])) {\n             // convert IdRef to object reference\n             if (cLASS[range].instances[String(v)]) {\n               v = valuesToCheck[i] = cLASS[range].instances[String(v)];\n             } else if (optParams && optParams.checkRefInt) {\n               constrVio = new ReferentialIntegrityConstraintViolation(\"The value \" + v +\n                   \" of property '\"+ fld +\"' is not an ID of any \" + range + \" object!\");\n             }\n           } else if (cLASS[range].isComplexDatatype && typeof v === \"object\") {\n             v = Object.assign({}, v);  // use a clone\n             // v is a record that must comply with the complex datatype\n             recFldNames = Object.keys(v);\n             propDefs = cLASS[range].properties;\n             // test if all mandatory properties occur in v and if all fields of v are properties\n             if (Object.keys( propDefs).every( function (p) {return !!propDefs[p].optional || p in v;}) &&\n                 recFldNames.every( function (fld) {return !!propDefs[fld];})) {\n               recFldNames.forEach( function (p) {\n                 var validationResult = cLASS.check( p, propDefs[p], v[p]);\n                 if (validationResult instanceof NoConstraintViolation) {\n                   v[p] = validationResult.checkedValue;\n                 } else {\n                   throw validationResult;\n                 }\n               })\n             } else {\n               constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                   \" must be an instance of \"+ range +\" or a compatible record!\"+\n                   JSON.stringify(v) + \" is not admissible!\");\n             }\n/* DROP\n           } else {  // v may be a (numeric or string) ID ref\n             if (typeof v === \"string\") {\n               if (!isNaN( parseInt(v))) v = valuesToCheck[i] = parseInt(v);\n             } else if (!Number.isInteger(v)) {\n               constrVio = new RangeConstraintViolation(\"The value (\" + JSON.stringify(v) +\n                   \") of property '\" +fld + \"' is neither an integer nor a string!\");\n             }\n*/\n           }\n         });\n       } else if (typeof range === \"string\" && range.includes(\"|\")) {\n         valuesToCheck.forEach( function (v, i) {\n           var rangeTypes=[];\n           rangeTypes = range.split(\"|\");\n           if (typeof v === \"object\") {\n             if (!rangeTypes.some( function (rc) {\n               return v instanceof cLASS[rc];\n             })) {\n               constrVio = ReferentialIntegrityConstraintViolation(\"The object \" + JSON.stringify(v) +\n                   \" is not an instance of any class from \" + range + \"!\");\n             } else {\n               v = valuesToCheck[i] = v.id;  // convert to IdRef\n             }\n           } else if (Number.isInteger(v)) {\n             if (optParams && optParams.checkRefInt) {\n               if (!cLASS[range].instances[String(v)]) {\n                 constrVio = new ReferentialIntegrityConstraintViolation(\"The value \" + v +\n                     \" of property '\"+ fld +\"' is not an ID of any \" + range + \" object!\");\n               }\n             }\n           } else if (typeof v === \"string\") {\n             if (!isNaN( parseInt(v))) v = valuesToCheck[i] = parseInt(v);\n           } else {\n             constrVio = new RangeConstraintViolation(\"The value (\" + v + \") of property '\" +\n                 fld + \"' is neither an integer nor a string!\");\n           }\n         });\n       } else if (typeof range === \"object\" && range.dataType !== undefined) {\n         // the range is a (collection) datatype declaration record\n         valuesToCheck.forEach( function (v) {\n           var i = 0;\n           if (typeof v !== \"object\") {\n             constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                 \" must be an object! \" + JSON.stringify(v) + \" is not admissible!\");\n           }\n           switch (range.dataType) {\n           case \"Array\":\n             if (!Array.isArray(v)) {\n               constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                   \" must be an array! \" + JSON.stringify(v) + \" is not admissible!\");\n               break;\n             }\n             if (v.length !== range.size) {\n               constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                   \" must be an array of length \" + range.size + \"! \" + JSON.stringify(v) + \" is not admissible!\");\n               break;\n             }\n             for (i = 0; i < v.length; i++) {\n               if (!cLASS.isOfType(v[i], range.itemType)) {\n                 constrVio = new RangeConstraintViolation(\"The items of \" + fld +\n                     \" must be of type \" + range.itemType + \"! \" + JSON.stringify(v) +\n                     \" is not admissible!\");\n               }\n             }\n             break;\n           case \"ArrayList\":\n             if (!Array.isArray(v)) {\n               constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                   \" must be an array! \" + JSON.stringify(v) + \" is not admissible!\");\n               break;\n             }\n             for (i = 0; i < v.length; i++) {\n               if (!cLASS.isOfType(v[i], range.itemType)) {\n                 constrVio = new RangeConstraintViolation(\"The items of \" + fld +\n                     \" must be of type \" + range.itemType + \"! \" + JSON.stringify(v) +\n                     \" is not admissible!\");\n               }\n             }\n             break;\n           }\n         });\n       } else if (range === Object) {\n         valuesToCheck.forEach(function (v) {\n           if (!(v instanceof Object)) {\n             constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                 \" must be a JS object! \" + JSON.stringify(v) + \" is not admissible!\");\n           }\n         });\n       }\n   }\n   // return constraint violation found in range switch\n   if (constrVio) return constrVio;\n\n   /********************************************************\n    ***  Check constraints that apply to several ranges  ***\n    ********************************************************/\n   if (range === \"String\" || range === \"NonEmptyString\") {\n     valuesToCheck.forEach( function (v) {\n       if (min !== undefined && v.length < min) {\n         constrVio = new StringLengthConstraintViolation(\"The length of \"+\n             fld + \" must not be smaller than \"+ min);\n       } else if (max !== undefined && v.length > max) {\n         constrVio = new StringLengthConstraintViolation(\"The length of \"+\n             fld + \" must not be greater than \"+ max);\n       } else if (pattern !== undefined && !pattern.test( v)) {\n         constrVio = new PatternConstraintViolation( msg || v +\n             \"does not comply with the pattern defined for \"+ fld);\n       }\n     });\n   }\n   if (range === \"Integer\" || range === \"NonNegativeInteger\" ||\n       range === \"PositiveInteger\") {\n     valuesToCheck.forEach( function (v) {\n       if (min !== undefined && v < min) {\n         constrVio = new IntervalConstraintViolation( fld +\n             \" must be greater than \"+ min);\n       } else if (max !== undefined && v > max) {\n         constrVio = new IntervalConstraintViolation( fld +\n             \" must be smaller than \"+ max);\n       }\n     });\n   }\n   if (constrVio) return constrVio;\n\n   /********************************************************\n    ***  Check cardinality constraints  *********************\n    ********************************************************/\n   if (maxCard > 1) { // (a multi-valued property can be array- or map-valued)\n     // check minimum cardinality constraint\n     if (minCard > 0 && valuesToCheck.length < minCard) {\n       return new CardinalityConstraintViolation(\"A collection of at least \"+\n           minCard +\" values is required for \"+ fld);\n     }\n     // check maximum cardinality constraint\n     if (valuesToCheck.length > maxCard) {\n       return new CardinalityConstraintViolation(\"A collection value for \"+\n           fld +\" must not have more than \"+ maxCard +\" members!\");\n     }\n   }\n   // return deserialized value available in validationResult.checkedValue\n   return new NoConstraintViolation( maxCard === 1 ? valuesToCheck[0] : valuesToCheck);\n };\n /**\n  * Map range datatype to JS datatype.\n  * @method\n  * @author Gerd Wagner\n  * @return {string}\n  */\n cLASS.range2JsDataType = function ( range) {\n   var jsDataType=\"\";\n   switch (range) {\n     case \"String\":\n     case \"NonEmptyString\":\n     case \"Email\":\n     case \"URL\":\n     case \"PhoneNumber\":\n     case \"Date\":\n       jsDataType = \"string\";\n       break;\n     case \"Integer\":\n     case \"NonNegativeInteger\":\n     case \"PositiveInteger\":\n     case \"Number\":\n     case \"AutoNumber\":\n     case \"Decimal\":\n     case \"Percent\":\n     case \"ClosedUnitInterval\":\n     case \"OpenUnitInterval\":\n       jsDataType = \"number\";\n       break;\n     case \"Boolean\":\n       jsDataType = \"boolean\";\n       break;\n     default:\n       if (range instanceof eNUMERATION) {\n         jsDataType = \"number\";\n       } else if (typeof range === \"string\" && cLASS[range]) {\n         jsDataType = \"string\";  // for the standard ID (TODO: can also be \"number\")\n       } else if (typeof range === \"object\") {  // a.g. Array or Object\n         jsDataType = \"object\";\n       }\n   }\n   return jsDataType;\n };\n /**\n  * Check if a value is of some type.\n  * @method\n  * @author Gerd Wagner\n  * @return {boolean}\n  */\n cLASS.isOfType = function ( v, Type) {\n   switch (Type) {\n     case \"String\": return (typeof v === \"string\");\n     case \"NonEmptyString\": return (typeof v === \"string\" && v.trim() !== \"\");\n     case \"Integer\": return Number.isInteger(v);\n     case \"NonNegativeInteger\": return (Number.isInteger(v) && v >= 0);\n     case \"PositiveInteger\": return (Number.isInteger(v) && v > 0);\n     case \"Decimal\": return (typeof v === \"number\");\n     case \"ClosedUnitInterval\":\n       return (typeof v === \"number\" && v>=0 && v<=1);\n     case \"OpenUnitInterval\":\n       return (typeof v === \"number\" && v>0 && v<1);\n     default: return true;\n   }\n };\n\n /********************************************************\n  ***  Collection datatypes  *****************************\n  ********************************************************/\n/*\n * cLASS datatypes, such as collection types, are defined in the form of\n * cOLLECTIONdATATYPE objects that specify the collection type, the\n * item type and the size of the collection.\n */\n cLASS.cOLLECTIONdATATYPE = function (typeName, itemType, size, optParams) {\n   this.type = typeName;\n   this.itemType = itemType;\n   this.size = size;\n   this.optParams = optParams;\n };\n cLASS.Array = function (itemType, size, optParams) {\n  if (this instanceof cLASS.Array) {\n    // called with new, so return an array object\n    this.type = \"Array\";\n    this.itemType = itemType;\n    this.size = size;\n    if (optParams) {\n      if (optParams.constraints) this.constraints = optParams.constraints; //TODO\n      if (optParams.decimalPlaces) this.decimalPlaces = optParams.decimalPlaces;\n    }\n    this.array = new Array( size);\n  } else {\n    // called without new, return an object representing an Array datatype\n    return new cLASS.cOLLECTIONdATATYPE(\"Array\",\n        {itemType:itemType, size:size, optParams:optParams});\n  }\n };\ncLASS.ArrayList = function (itemType, constraints) {\n   if (constraints) {\n     return {dataType:\"ArrayList\", itemType: itemType, constraints: constraints};\n   } else return {dataType:\"ArrayList\", itemType: itemType};\n };\ncLASS.Map = function (itemType, constraints) {\n  if (constraints) {\n    return {dataType:\"Map\", itemType: itemType, constraints: constraints};\n  } else return {dataType:\"Map\", itemType: itemType};\n};\n\ncLASS.RingBuffer = function (itemType, size, optParams) {\n  if (this instanceof cLASS.RingBuffer) {\n    // called with new, so return a ring buffer object\n    this.type = \"RingBuffer\";\n    this.itemType = itemType;\n    this.size = size;\n    if (optParams) {\n      if (optParams.constraints) this.constraints = optParams.constraints; //TODO\n      if (optParams.decimalPlaces) this.decimalPlaces = optParams.decimalPlaces;\n    }\n    this.first = 0;  // index of first item\n    this.last = -1;  // index of last item\n    this.buffer = new Array( size);\n  } else {\n    // called without new, return an object representing a RingBuffer datatype\n    return new cLASS.cOLLECTIONdATATYPE(\"RingBuffer\",\n        {itemType:itemType, size:size, optParams:optParams});\n  }\n};\ncLASS.RingBuffer.prototype.nmrOfItems = function () {\n  if (this.last === -1) return 0;\n  else if (this.first <= this.last) return this.last - this.first + 1;\n  else return this.last + this.size - this.first + 1;\n};\ncLASS.RingBuffer.prototype.add = function (item) {\n  if (this.nmrOfItems() < this.size) {\n   this.last++;  // still filling the buffer\n  } else {  // buffer is full, move both pointers\n   this.first = (this.first+1) % this.size;\n   this.last = (this.last+1) % this.size;\n  }\n  this.buffer[this.last] = item;\n};\ncLASS.RingBuffer.prototype.toString = function (n) {\n  var i=0, str = \"[\", item, roundingFactor=1,\n      N = this.nmrOfItems(),\n      outputLen = n ? Math.min( n, N) : N;\n  if (N === 0) return \" \";\n  for (i=0; i < outputLen; i++) {\n    item = this.buffer[(this.first+i) % this.size];\n    // serialize enum values as labels\n    if (this.itemType instanceof eNUMERATION) item = this.itemType.labels[item-1];\n    else if (cLASS.isDecimalType( this.itemType)) {\n      //decimalPlaces:\n      roundingFactor = Math.pow( 10, this.decimalPlaces);\n      item = Math.round( item * roundingFactor) / roundingFactor;\n    }\n    str += item;\n    if (i < outputLen-1) str += \", \";\n  }\n  return str + \"]\";\n };\n// Simple Moving Average (SMA)\n cLASS.RingBuffer.prototype.getSMA = function (n) {\n   var N = this.nmrOfItems(), i=0, val=0, sum=0;\n   if (n) N = Math.min( n, N);\n   for (i=0; i < N; i++) {\n     val = this.buffer[(this.first+i) % this.size];\n     sum += val;\n   }\n   return sum / N;\n };\n\n'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n\n/**\n * @fileOverview  This file contains the definition of the library class\n * sTORAGEmANAGER.\n * @author Gerd Wagner\n * @copyright Copyright 2015 Gerd Wagner, Chair of Internet Technology,\n *   Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n */\n/**\n * Library class providing storage management methods for a number of predefined\n * storage adapters\n *\n * @constructor\n * @this {sTORAGEmANAGER}\n * @param storageAdapter: object\n */\nfunction sTORAGEmANAGER( storageAdapter) {\n  if (typeof storageAdapter !== 'object' ||\n      typeof storageAdapter.name !== \"string\" ||\n      !([\"LocalStorage\",\"IndexedDB\",\"MariaDB\"].includes( storageAdapter.name))) {\n    throw new ConstraintViolation(\"Invalid storage adapter name!\");\n  } else if (!storageAdapter.dbName) {\n    throw new ConstraintViolation(\"Storage adapter: missing DB name!\");\n  } else {\n    this.adapter = storageAdapter;\n    // if \"LocalStorage\", create a main memory DB\n    if (storageAdapter.name === \"LocalStorage\") {\n      Object.keys( cLASS).forEach( function (key) {\n        // load all cLASSes\n        if (cLASS[key].instances) {\n          sTORAGEmANAGER.adapters[\"LocalStorage\"].retrieveLsTable( cLASS[key]);\n        }\n      });\n    }\n  }\n  // copy storage adapter to the corresponding adapter's storage management method library\n  sTORAGEmANAGER.adapters[this.adapter.name].currentAdapter = storageAdapter;\n}\n/**\n * Generic method for creating an empty DB\n * @method\n */\nsTORAGEmANAGER.prototype.createEmptyDb = function (classes) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName;\n  return new Promise( function (resolve) {\n    var modelClasses=[];\n    if (Array.isArray( classes) && classes.length > 0) {\n      modelClasses = classes;\n    } else {\n      Object.keys( cLASS).forEach( function (key) {\n        // test if cLASS[key] represents a cLASS\n        if (typeof cLASS[key] === \"function\" && cLASS[key].properties) {\n          // collect all non-abstract cLASSes that are not datatype classes\n          if (!cLASS[key].isAbstract && !cLASS[key].isComplexDatatype) {\n            modelClasses.push( cLASS[key]);\n          }\n        }\n      });\n    }\n    sTORAGEmANAGER.adapters[adapterName].createEmptyDb( dbName, modelClasses)\n    .then( resolve);\n  });\n};\n/**\n * Generic method for creating and \"persisting\" new model objects\n * @method\n * @param {object} mClass  The model cLASS concerned\n * @param {object} rec  A record or record list\n */\nsTORAGEmANAGER.prototype.add = function (mClass, rec) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName,\n      createLog = this.createLog,\n      checkConstraints = this.validateBeforeSave,\n      records=[], validRecords=[];\n  if (typeof rec === \"object\" && !Array.isArray(rec)) {\n    records = [rec];\n  } else if (Array.isArray(rec) && rec.every( function (r) {\n             return typeof r === \"object\" && !Array.isArray(r)})) {\n    records = rec;\n  } else throw Error(\"2nd argument of 'add' must be a record or record list!\");\n  // create auto-IDs if required\n  if (mClass.properties.id && mClass.properties.id.range === \"AutoNumber\") {\n    records.forEach( function (r) {\n      if (!r.id) {  // do not overwrite assigned ID values\n        if (typeof mClass.getAutoId === \"function\") r.id = mClass.getAutoId();\n        else if (mClass.idCounter !== undefined) r.id = ++mClass.idCounter;\n      }\n    })\n  }\n  // check constraints before save if required\n  if (checkConstraints) {\n    records.forEach( function (r) {\n      var newObj=null;\n      if (r instanceof mClass) {\n        validRecords.push( r);\n      } else {\n        try {newObj = new mClass( r);}  // check constraints\n        catch (e) {\n          if (e instanceof ConstraintViolation) {\n            console.log( e.constructor.name +\": \"+ e.message);\n          } else console.log( e);\n        }\n        if (newObj) validRecords.push( newObj);\n      }\n    });\n    records = validRecords;\n  }\n  return new Promise( function (resolve) {\n    sTORAGEmANAGER.adapters[adapterName].add( dbName, mClass, records).then( function () {\n      if (createLog) console.log( records.length +\" \"+ mClass.Name +\"(s) added.\");\n      if (typeof resolve === \"function\") resolve();\n    }).catch( function (error) {\n      console.log( error.name +\": \"+ error.message);\n    });\n  });\n};\n/**\n * Generic method for loading/retrieving a model object\n * @method\n * @param {object} mc  The model cLASS concerned\n * @param {string|number} id  The object ID value\n */\nsTORAGEmANAGER.prototype.retrieve = function (mc, id) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName;\n  return new Promise( function (resolve) {\n    sTORAGEmANAGER.adapters[adapterName].retrieve( dbName, mc, id)\n    .then( function (obj) {\n      if (!obj) {\n        obj = null;\n        console.log(\"There is no \" + mc.Name + \" with ID value \" + id + \" in the database!\");\n      }\n      resolve( obj);\n    });\n  });\n};\n/**\n * Generic method for loading all table rows and converting them\n * to model objects\n *\n * @method\n * @param {object} mc  The model cLASS concerned\n */\nsTORAGEmANAGER.prototype.retrieveAll = function (mc) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName,\n      createLog = this.createLog,\n      validateAfterRetrieve = this.validateAfterRetrieve;\n  return new Promise( function (resolve) {\n    sTORAGEmANAGER.adapters[adapterName].retrieveAll( dbName, mc)\n    .then( function (records) {\n      var i=0, newObj=null;\n      if (createLog) {\n        console.log( records.length +\" \"+ mc.Name +\" records retrieved.\")\n      }\n      if (validateAfterRetrieve) {\n        for (i=0; i < records.length; i++) {\n          try {\n            newObj = new mc( records[i]);\n          } catch (e) {\n            if (e instanceof ConstraintViolation) {\n              console.log( e.constructor.name +\": \"+ e.message);\n            } else console.log( e.name +\": \"+ e.message);\n          }\n        }\n      }\n      resolve( records);\n    })\n  });\n};\n/**\n * Generic method for updating model objects\n * @method\n * @param {object} mc  The model cLASS concerned\n * @param {string|number} id  The object ID value\n * @param {object} slots  The object's update slots\n */\nsTORAGEmANAGER.prototype.update = function (mc, id, slots) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName, \n      currentSM = this;\n  return new Promise( function (resolve) {\n    var objectBeforeUpdate = null, properties = mc.properties,\n        updatedProperties=[], noConstraintViolated = true,\n        updSlots = util.cloneObject( slots);\n    // first check if object exists\n    currentSM.retrieve( mc, id).then( function (objToUpdate) {\n      if (objToUpdate) {\n        if (typeof objToUpdate === \"object\" && objToUpdate.constructor !== mc) {\n          // if the retrieved objToUpdate is not of type mc, check integrity constraints\n          objToUpdate = mc.createObjectFromRecord( objToUpdate);\n          if (!objToUpdate) return;  // constraint violation\n        }\n        objectBeforeUpdate = util.cloneObject( objToUpdate);\n        try {\n          Object.keys( slots).forEach( function (prop) {\n            var oldVal = objToUpdate[prop],\n                newVal = slots[prop],\n                propDecl = properties[prop];\n            if (prop !== \"id\") {\n              if (propDecl.maxCard === undefined || propDecl.maxCard === 1) {  // single-valued\n                if (Number.isInteger( oldVal) && newVal !== \"\") {\n                  newVal = parseInt( newVal);\n                } else if (typeof oldVal === \"number\" && newVal !== \"\") {\n                  newVal = parseFloat( newVal);\n                } else if (oldVal===undefined && newVal===\"\") {\n                  newVal = undefined;\n                }\n                if (newVal !== oldVal) {\n                  updatedProperties.push( prop);\n                  objToUpdate.set( prop, newVal);  // also checking constraints\n                } else {\n                  delete updSlots[prop];\n                }\n              } else {   // multi-valued\n                if (oldVal.length !== newVal.length ||\n                    oldVal.some( function (vi,i) { return (vi !== newVal[i]);})) {\n                  objToUpdate.set(prop, newVal);\n                  updatedProperties.push(prop);\n                } else {\n                  delete updSlots[prop];\n                }\n              }\n            }\n          });\n        } catch (e) {\n          console.log( e.constructor.name +\": \"+ e.message);\n          noConstraintViolated = false;\n          // restore object to its state before updating\n          objToUpdate = objectBeforeUpdate;\n        }\n        if (noConstraintViolated) {\n          if (updatedProperties.length > 0) {\n            sTORAGEmANAGER.adapters[adapterName].update( dbName, mc, id, slots, updSlots)\n            .then( function () {\n              console.log(\"Properties \"+ updatedProperties.toString() +\n                  \" of \"+ mc.Name +\" \"+ id +\" updated.\");\n              if (typeof resolve === \"function\") resolve();\n            });\n          } else {\n            console.log(\"No property value changed for \"+ mc.Name +\" \"+ id +\"!\");\n          }\n        }\n      }\n    });\n  });\n};\n/**\n * Generic method for deleting model objects\n * @method\n * @param {object} mc  The model cLASS concerned\n * @param {string|number} id  The object ID value\n */\nsTORAGEmANAGER.prototype.destroy = function (mc, id) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName,\n      currentSM = this;\n  return new Promise( function (resolve) {\n    currentSM.retrieve( mc, id).then( function (record) {\n      if (record) {\n        sTORAGEmANAGER.adapters[adapterName].destroy( dbName, mc, id)\n        .then( function () {\n          console.log( mc.Name +\" \"+ id +\" deleted.\");\n          if (typeof resolve === \"function\") resolve();\n        });\n      } else {\n        console.log(\"There is no \"+ mc.Name +\" with ID value \"+ id +\" in the database!\");\n      }\n    });\n  });\n};\n/**\n * Generic method for clearing the DB table, or object store, of a cLASS\n * @method\n */\nsTORAGEmANAGER.prototype.clearTable = function (mc) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName;\n  return new Promise( function (resolve) {\n    sTORAGEmANAGER.adapters[adapterName].clearTable( dbName, mc)\n    .then( resolve);\n  });\n};\n/**\n * Generic method for clearing the DB of an app\n * @method\n */\nsTORAGEmANAGER.prototype.clearDB = function () {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName;\n  return new Promise( function (resolve) {\n    if ((typeof confirm === \"function\" &&\n        confirm(\"Do you really want to delete all data?\")) ||\n        typeof confirm !== \"function\") {\n      sTORAGEmANAGER.adapters[adapterName].clearDB( dbName)\n      .then( resolve);\n    }\n  });\n};\n/**\n * Generic method for storing unsaved data on page unload\n * @method\n */\nsTORAGEmANAGER.prototype.saveOnUnload = function () {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName;\n  sTORAGEmANAGER.adapters[adapterName].saveOnUnload( dbName);\n};\n\nsTORAGEmANAGER.adapters = {};\n\n\n/*****************************************************************************\n * Storage management methods for the \"LocalStorage\" adapter\n * Only in the case of \"LocalStorage\", due to its non-concurrent architecture,\n * the entire data is loaded into a kind of main memory DB, which is saved\n * back to LocalStorage on page unload.\n ****************************************************************************/\nsTORAGEmANAGER.adapters[\"LocalStorage\"] = {\n  //-----------------------------------------------------------------\n  createEmptyDb: function (dbName, modelClasses) {\n  //-----------------------------------------------------------------\n    // nothing to do\n    return new Promise( function (resolve) {\n      resolve();\n    });\n  },\n  //------------------------------------------------\n  add: function (dbName, mc, records) {  // does not access localStorage\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var newObj=null;\n      if (!Array.isArray( records)) {  // single record insertion\n        records = [records];\n      }\n      records.forEach( function (rec) {\n        newObj = new mc( rec);\n        mc.instances[newObj.id] = newObj;\n      })\n      resolve( newObj);\n    });\n  },\n  //------------------------------------------------\n  retrieve: function (dbName, mc, id) {  // does not access localStorage\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      resolve( mc.instances[id]);\n    });\n  },\n  //-------------------------------------------------------------\n  // *** A LocalStorage-specific, and not an interface method ***\n  //-------------------------------------------------------------\n  retrieveLsTable: function (mc) {\n  //-------------------------------------------------------------\n    var key=\"\", keys=[], i=0,\n        tableString=\"\", table={},\n        tableName = util.class2TableName( mc.Name);\n    try {\n      if (localStorage[tableName]) {\n        tableString = localStorage[tableName];\n      }\n    } catch (e) {\n      console.log( \"Error when reading from Local Storage\\n\" + e);\n    }\n    if (tableString) {\n      table = JSON.parse( tableString);\n      keys = Object.keys( table);\n      console.log( keys.length + \" \" + mc.Name + \" records loaded.\");\n      for (i=0; i < keys.length; i++) {\n        key = keys[i];\n        mc.instances[key] = mc.createObjectFromRecord( table[key]);\n      }\n    }\n  },\n  //------------------------------------------------\n  retrieveAll: function (dbName, mc) {\n    //------------------------------------------------\n    var  currentSM = this;\n    return new Promise( function (resolve) {\n      var records=[];\n      /* OLD\n      function retrieveAll (mc) {\n        var key = \"\", keys = [], i = 0,\n            tableString = \"\", table={},\n            tableName = util.class2TableName( mc.Name);\n        // do no retrieve the same class population twice\n        if (Object.keys( mc.instances).length > 0) return;\n        // first retrieve the population of the classes that are ranges of reference properties\n        Object.keys( mc.properties).forEach( function (p) {\n          var range = mc.properties[p].range;\n          if (range instanceof cLASS) retrieveAll( range);\n        });\n        currentSM.retrieveTable( mc);      }\n      retrieveAll( mc);\n      */\n      // convert entity map mc.instances to an array list\n      records = Object.keys( mc.instances).map( function (key) {return mc.instances[key];});\n      resolve( records);\n    });\n  },\n  //------------------------------------------------\n  update: function (dbName, mc, id, slots) {  // does not access localStorage\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      // in-memory object has already been updated in the generic update\n      /*\n      Object.keys( slots).forEach( function (prop) {\n        obj = mc.instances[id];\n        obj[prop] = slots[prop];\n      });\n      */\n      resolve();\n    });\n  },\n  //------------------------------------------------\n  destroy: function (dbName, mc, id) {  // does not access localStorage\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      delete mc.instances[id];\n      resolve();\n    });\n  },\n  //------------------------------------------------\n  clearTable: function (dbName, mc) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      mc.instances = {};\n      try {\n        localStorage[tableName] = JSON.stringify({});\n        console.log(\"Table \"+ tableName +\" cleared.\");\n      } catch (e) {\n        console.log(\"Error when writing to Local Storage\\n\" + e);\n      }\n      resolve();\n    });\n  },\n  //------------------------------------------------\n  clearDB: function () {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      Object.keys( cLASS).forEach( function (key) {\n        var tableName=\"\";\n        if (!cLASS[key].isComplexDatatype && Object.keys( cLASS[key].instances).length > 0) {\n          cLASS[key].instances = {};\n          tableName = mc.tableName || util.class2TableName( cLASS[key].Name);\n          try {\n            localStorage[tableName] = JSON.stringify({});\n          } catch (e) {\n            console.log(\"Error when writing to Local Storage\\n\" + e);\n          }\n        }\n      });\n      resolve();\n    });\n  },\n  //------------------------------------------------\n  saveOnUnload: function () {\n  //------------------------------------------------\n    Object.keys( cLASS).forEach( function (key) {\n      var id=\"\", table={}, obj=null, i=0, mc=null,\n          keys=[], tableName=\"\";\n      if (cLASS[key].instances) {\n        mc = cLASS[key];\n        keys = Object.keys( mc.instances)\n        tableName = util.class2TableName( mc.Name);\n        for (i=0; i < keys.length; i++) {\n          id = keys[i];\n          obj = mc.instances[id];\n          table[id] = obj.toRecord();\n        }\n        try {\n          localStorage[tableName] = JSON.stringify( table);\n          console.log( keys.length +\" \"+ mc.Name +\" records saved.\");\n        } catch (e) {\n          console.log(\"Error when writing to Local Storage\\n\" + e);\n        }\n      }\n    });\n  }\n};\n/**\n * @fileOverview  Storage management methods for the \"IndexedDB\" adapter\n * @author Gerd Wagner\n * @copyright Copyright 2017 Gerd Wagner, Chair of Internet Technology,\n *   Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n */\nsTORAGEmANAGER.adapters[\"IndexedDB\"] = {\n  //------------------------------------------------\n  createEmptyDb: function (dbName, modelClasses) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      idb.open( dbName, 1, function (upgradeDb) {\n        modelClasses.forEach( function (mc) {\n          var tableName = mc.tableName || util.class2TableName( mc.Name),\n              keyPath = mc.primaryKey || \"id\";\n          if (!upgradeDb.objectStoreNames.contains( tableName)) {\n            upgradeDb.createObjectStore( tableName, {keyPath: keyPath});\n          }\n        })\n      }).then( resolve);\n    });\n  },\n  //------------------------------------------------\n  add: function (dbName, mc, records) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readwrite\");\n        var os = tx.objectStore( tableName);\n        // Promise.all takes a list of promises and resolves if all of them do\n        return Promise.all( records.map( function (rec) {return os.add( rec);}))\n            .then( function () {return tx.complete;});\n      }).then( resolve)\n      .catch( function (err) {\n        console.log( err.name +\": \"+ err.message +\"Table: \"+ tableName);}\n      );\n    });\n  },\n  //------------------------------------------------\n  retrieve: function (dbName, mc, id) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readonly\");\n        var os = tx.objectStore( tableName);\n        return os.get( id);\n      }).then( function( result) {\n        if (result === undefined) result = null;\n        resolve( result);\n      }).catch( function (err) {console.log( err.name +\": \"+ err.message);});\n    });\n  },\n  //------------------------------------------------\n  retrieveAll: function (dbName, mc) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readonly\");\n        var os = tx.objectStore( tableName);\n        return os.getAll();\n      }).then( function (results) {\n        if (results === undefined) results = [];\n        resolve( results);\n      }).catch( function (err) {console.log( err.name +\": \"+ err.message);});\n    });\n  },\n  //------------------------------------------------\n  update: function (dbName, mc, id, slots) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readwrite\");\n        var os = tx.objectStore( tableName);\n        slots[\"id\"] = id;\n        os.put( slots);\n        return tx.complete;\n      }).then( resolve)\n      .catch( function (err) {\n        console.log( err.name +\": \"+ err.message +\"Table: \"+ tableName);}\n      );\n    });\n  },\n  //------------------------------------------------\n  destroy: function (dbName, mc, id) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readwrite\");\n        var os = tx.objectStore( tableName);\n        os.delete( id);\n        return tx.complete;\n      }).then( resolve)\n      .catch( function (err) {console.log( err.name +\": \"+ err.message);});\n    });\n  },\n  //------------------------------------------------\n  clearTable: function (dbName, mc) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readwrite\");\n        var os = tx.objectStore( tableName);\n        os.clear();\n        return tx.complete;\n      }).then( resolve)\n      .catch( function (err) {console.log( err.name +\": \"+ err.message);});\n    });\n  },\n  //------------------------------------------------\n  clearDB: function (dbName) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( idbCx.objectStoreNames, \"readwrite\");\n        // Promise.all takes a list of promises and resolves if all of them do\n        return Promise.all( Array.from( idbCx.objectStoreNames,\n            function (osName) {return tx.objectStore( osName).clear();}))\n            .then( function () {return tx.complete;});\n      }).then( resolve)\n      .catch( function (err) {console.log( err.name +\": \"+ err.message);});\n    });\n  },\n  //------------------------------------------------\n  saveOnUnload: function (dbName) {  // not yet implemented\n  //------------------------------------------------\n  }\n};\n/**\n * @fileOverview  A port of a C implementation of MT19937, providing a collection of classes\n * and methods used to generate random numbers and random variates. From the Random.js library\n * of SimJS.\n *\n * @copyright Copyright © 1997-2002, Makoto Matsumoto and Takuji Nishimura.\n * @license LGPL\n */\n\n\n/*\n A C-program for MT19937, with initialization improved 2002/1/26.\n Coded by Takuji Nishimura and Makoto Matsumoto.\n\n Before using, initialize the state by using init_genrand(seed)\n or init_by_array(init_key, key_length).\n\n Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\n All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions\n are met:\n\n 1. Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in the\n documentation and/or other materials provided with the distribution.\n\n 3. The names of its contributors may not be used to endorse or promote\n products derived from this software without specific prior written\n permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// default non-seeded random stream based on Math.random\nvar rand = null;\n\n/***\n * The following constructor function definition has been modified\n * Use new Date()).getTime() as seed for getting MT with a randomized seed\n */\nvar Random = function( seed) {\n  if (seed === undefined) {\n    this.random = Math.random;  // use the JS built-in RNG\n  } else {  // use the Mersenne Twister\n    if (!Number.isInteger( seed)) {\n      throw new TypeError(\"Seed value must be an integer\");\n    }\n    /* Period parameters */\n    this.N = 624;\n    this.M = 397;\n    this.MATRIX_A = 0x9908b0df;   /* constant vector a */\n    this.UPPER_MASK = 0x80000000; /* most significant w-r bits */\n    this.LOWER_MASK = 0x7fffffff; /* least significant r bits */\n\n    this.mt = new Array(this.N); /* the array for the state vector */\n    this.mti=this.N+1; /* mti==N+1 means mt[N] is not initialized */\n\n    //this.init_genrand(seed);\n    this.init_by_array([seed], 1);\n  }\n};\n\n/* initializes mt[N] with a seed */\nRandom.prototype.init_genrand = function(s) {\n  this.mt[0] = s >>> 0;\n  for (this.mti=1; this.mti<this.N; this.mti++) {\n    var s = this.mt[this.mti-1] ^ (this.mt[this.mti-1] >>> 30);\n    this.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253)\n        + this.mti;\n    /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\n    /* In the previous versions, MSBs of the seed affect   */\n    /* only MSBs of the array mt[].                        */\n    /* 2002/01/09 modified by Makoto Matsumoto             */\n    this.mt[this.mti] >>>= 0;\n    /* for >32 bit machines */\n  }\n};\n\n/* initialize by an array with array-length */\n/* init_key is the array for initializing keys */\n/* key_length is its length */\n/* slight change for C++, 2004/2/26 */\nRandom.prototype.init_by_array = function(init_key, key_length) {\n  var i, j, k;\n  this.init_genrand(19650218);\n  i=1; j=0;\n  k = (this.N>key_length ? this.N : key_length);\n  for (; k; k--) {\n    var s = this.mt[i-1] ^ (this.mt[i-1] >>> 30);\n    this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525)))\n        + init_key[j] + j; /* non linear */\n    this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\n    i++; j++;\n    if (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }\n    if (j>=key_length) j=0;\n  }\n  for (k=this.N-1; k; k--) {\n    var s = this.mt[i-1] ^ (this.mt[i-1] >>> 30);\n    this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941))\n        - i; /* non linear */\n    this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\n    i++;\n    if (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }\n  }\n\n  this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */\n};\n\n/* generates a random number on [0,0xffffffff]-interval */\nRandom.prototype.genrand_int32 = function() {\n  var y;\n  var mag01 = new Array(0x0, this.MATRIX_A);\n  /* mag01[x] = x * MATRIX_A  for x=0,1 */\n\n  if (this.mti >= this.N) { /* generate N words at one time */\n    var kk;\n\n    if (this.mti == this.N+1)   /* if init_genrand() has not been called, */\n      this.init_genrand(5489); /* a default initial seed is used */\n\n    for (kk=0;kk<this.N-this.M;kk++) {\n      y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);\n      this.mt[kk] = this.mt[kk+this.M] ^ (y >>> 1) ^ mag01[y & 0x1];\n    }\n    for (;kk<this.N-1;kk++) {\n      y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);\n      this.mt[kk] = this.mt[kk+(this.M-this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];\n    }\n    y = (this.mt[this.N-1]&this.UPPER_MASK)|(this.mt[0]&this.LOWER_MASK);\n    this.mt[this.N-1] = this.mt[this.M-1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n    this.mti = 0;\n  }\n\n  y = this.mt[this.mti++];\n\n  /* Tempering */\n  y ^= (y >>> 11);\n  y ^= (y << 7) & 0x9d2c5680;\n  y ^= (y << 15) & 0xefc60000;\n  y ^= (y >>> 18);\n\n  return y >>> 0;\n};\n\n/* generates a random number on [0,0x7fffffff]-interval */\nRandom.prototype.genrand_int31 = function() {\n  return (this.genrand_int32()>>>1);\n};\n\n/* generates a random number on [0,1]-real-interval */\nRandom.prototype.genrand_real1 = function() {\n  return this.genrand_int32()*(1.0/4294967295.0);\n  /* divided by 2^32-1 */\n};\n\n/* generates a random number on [0,1)-real-interval */\nRandom.prototype.random = function() {\n  if (this.pythonCompatibility) {\n    if (this.skip) {\n      this.genrand_int32();\n    }\n    this.skip = true;\n  }\n  return this.genrand_int32()*(1.0/4294967296.0);\n  /* divided by 2^32 */\n};\n\n/* generates a random number on (0,1)-real-interval */\nRandom.prototype.genrand_real3 = function() {\n  return (this.genrand_int32() + 0.5)*(1.0/4294967296.0);\n  /* divided by 2^32 */\n};\n\n/* generates a random number on [0,1) with 53-bit resolution*/\nRandom.prototype.genrand_res53 = function() {\n  var a=this.genrand_int32()>>>5, b=this.genrand_int32()>>>6;\n  return(a*67108864.0+b)*(1.0/9007199254740992.0);\n};\n\n/* These real versions are due to Isaku Wada, 2002/01/09 added */\n\n\n/**************************************************************************/\nRandom.prototype.LOG4 = Math.log(4.0);\nRandom.prototype.SG_MAGICCONST = 1.0 + Math.log(4.5);\n\nRandom.prototype.exponential = function (lambda) {\n  if (arguments.length != 1) {                         // ARG_CHECK\n    throw new SyntaxError(\"exponential() must \"     // ARG_CHECK\n        + \" be called with 'lambda' parameter\"); // ARG_CHECK\n  }                                                   // ARG_CHECK\n  var r = this.random();\n  return -Math.log(r) / lambda;\n};\n\nRandom.prototype.gamma = function (alpha, beta) {\n  if (arguments.length != 2) {                         // ARG_CHECK\n    throw new SyntaxError(\"gamma() must be called\"  // ARG_CHECK\n        + \" with alpha and beta parameters\"); // ARG_CHECK\n  }                                                   // ARG_CHECK\n  /* Based on Python 2.6 source code of random.py.\n   */\n  if (alpha > 1.0) {\n    var ainv = Math.sqrt(2.0 * alpha - 1.0);\n    var bbb = alpha - this.LOG4;\n    var ccc = alpha + ainv;\n    while (true) {\n      var u1 = this.random();\n      if ((u1 < 1e-7) || (u > 0.9999999)) {\n        continue;\n      }\n      var u2 = 1.0 - this.random();\n      var v = Math.log(u1 / (1.0 - u1)) / ainv;\n      var x = alpha * Math.exp(v);\n      var z = u1 * u1 * u2;\n      var r = bbb + ccc * v - x;\n      if ((r + this.SG_MAGICCONST - 4.5 * z >= 0.0) || (r >= Math.log(z))) {\n        return x * beta;\n      }\n    }\n  } else if (alpha == 1.0) {\n    var u = this.random();\n    while (u <= 1e-7) {\n      u = this.random();\n    }\n    return - Math.log(u) * beta;\n  } else {\n    while (true) {\n      var u = this.random();\n      var b = (Math.E + alpha) / Math.E;\n      var p = b * u;\n      if (p <= 1.0) {\n        var x = Math.pow(p, 1.0 / alpha);\n      } else {\n        var x = - Math.log((b - p) / alpha);\n      }\n      var u1 = this.random();\n      if (p > 1.0) {\n        if (u1 <= Math.pow(x, (alpha - 1.0))) {\n          break;\n        }\n      } else if (u1 <= Math.exp(-x)) {\n        break;\n      }\n    }\n    return x * beta;\n  }\n\n};\n\nRandom.prototype.normal = function (mu, sigma) {\n  if (arguments.length != 2) {                          // ARG_CHECK\n    throw new SyntaxError(\"normal() must be called\"  // ARG_CHECK\n        + \" with mu and sigma parameters\");      // ARG_CHECK\n  }                                                    // ARG_CHECK\n  var z = this.lastNormal;\n  this.lastNormal = NaN;\n  if (!z) {\n    var a = this.random() * 2 * Math.PI;\n    var b = Math.sqrt(-2.0 * Math.log(1.0 - this.random()));\n    z = Math.cos(a) * b;\n    this.lastNormal = Math.sin(a) * b;\n  }\n  return mu + z * sigma;\n};\n\nRandom.prototype.pareto = function (alpha) {\n  if (arguments.length != 1) {                         // ARG_CHECK\n    throw new SyntaxError(\"pareto() must be called\" // ARG_CHECK\n        + \" with alpha parameter\");             // ARG_CHECK\n  }                                                   // ARG_CHECK\n  var u = this.random();\n  return 1.0 / Math.pow((1 - u), 1.0 / alpha);\n};\n\nRandom.prototype.weibull = function (alpha, beta) {\n  if (arguments.length != 2) {                         // ARG_CHECK\n    throw new SyntaxError(\"weibull() must be called\" // ARG_CHECK\n        + \" with alpha and beta parameters\");    // ARG_CHECK\n  }                                                   // ARG_CHECK\n  var u = 1.0 - this.random();\n  return alpha * Math.pow(-Math.log(u), 1.0 / beta);\n};\n\nRandom.prototype.triangular = function (lower, upper, mode) {\n  // http://en.wikipedia.org/wiki/Triangular_distribution\n  if (arguments.length != 3) {\n    throw new SyntaxError(\"triangular() must be called\"\n        + \" with 3 parameters (lower, upper and mode)\");\n  }\n  if (!(lower < upper && lower <= mode && mode <= upper)) {\n    throw new SyntaxError(\"The lower, upper and mode parameters \" +\n        \"must satisfy the conditions l < U and l <= m <= u!\");\n  }\n  var c = (mode - lower) / (upper - lower);\n  var u = this.random();\n  if (u <= c) {\n    return lower + Math.sqrt(u * (upper - lower) * (mode - lower));\n  } else {\n    return upper - Math.sqrt((1 - u) * (upper - lower) * (upper - mode));\n  }\n};\n\nRandom.prototype.uniform = function (lower, upper) {\n  if (arguments.length === 1) {\n    throw new SyntaxError(\"uniform(lower, upper) must be called\"\n        + \" 1. with lower and upper parameters [e.g., uniform(lower, upper)] or \"\n        + \" 2. without any parameter [e.g., uniform()]\");\n  } else if (arguments.length >= 2) {\n    return lower + this.random() * (upper - lower);\n  } else {\n    return this.random();\n  }\n};\n/***\n Added by Gerd Wagner (20160921)\n */\nRandom.prototype.uniformInt = function (lower, upper) {\n  if (arguments.length != 2 ||\n      !(Number.isInteger(lower) && Number.isInteger(upper))) {\n    throw new SyntaxError(\"uniformInt() must be called\"\n        + \" with lower and upper integer values!\");\n  }\n  return lower + Math.floor( this.random() * (upper - lower + 1));\n};\n\nRandom.prototype.frequency = function (freqMap) {\n  if (typeof freqMap !== \"object\") {\n    throw new SyntaxError(\"rand.frequency() must be called\"\n        + \" with a frequency map argument!\");\n  }\n  var probabilities = Object.values( freqMap);\n  if (math.sum( probabilities) !== 1 ) {\n    throw new SyntaxError(\"rand.frequency(): rel. frequency values \" +\n        \"do not add up to 1!\");\n  }\n  var cumProb=0;\n  var cumProbs = probabilities.map( function (p) {\n    cumProb += p;\n    return cumProb;\n  });\n  var valueStrings = Object.keys( freqMap);\n  var valuesAreNumeric = !isNaN( parseInt( valueStrings[0]));\n  var randX = this.random(), i=0;\n  for (i=0; i <= cumProbs.length; i++) {\n    if (randX < cumProbs[i]) return valuesAreNumeric ?\n        parseInt( valueStrings[i]) : valueStrings[i];\n  }\n};\n\n/**\n * Shuffles array in place using the Fisher-Yates shuffle algorithm\n * @param {Array} a - An array of items to be shuffled\n */\nRandom.prototype.shuffleArray = function (a) {\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i -= 1) {\n    j = Math.floor( this.random() * (i + 1) );\n    x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n};\n/*******************************************************************************\n * Binary Heap function based on the Appendix 2 Binary Heaps of M. Haverbeke\n * \"Eloquent JavaScript\", 3rd Edition\n * \n * @copyright Copyright 2018 Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Luis Gustavo Nardin\n ******************************************************************************/\nfunction BinaryHeap ( scoreFunction ) {\n  this.content = [];\n  this.scoreFunction = scoreFunction;\n}\nBinaryHeap.prototype.push = function ( element ) {\n  this.content.push( element );\n  this.bubbleUp( this.content.length - 1 );\n};\nBinaryHeap.prototype.pop = function () {\n  var result = this.content[0];\n  var end = this.content.pop();\n  \n  if ( this.content.length > 0 ) {\n    this.content[0] = end;\n    this.sinkDown( 0 );\n  }\n  return result;\n};\nBinaryHeap.prototype.remove = function ( element ) {\n  var len = this.content.length;\n  var end;\n  for ( var i = 0; i < len; i += 1 ) {\n    if ( this.content[i] !== element ) {\n      continue;\n    }\n    \n    end = this.content.pop();\n    if ( i === len - 1 ) {\n      break;\n    }\n    \n    this.content[i] = end;\n    this.bubbleUp( i );\n    this.sinkDown( i );\n    break;\n  }\n};\nBinaryHeap.prototype.getContent = function () {\n  return this.content;\n};\nBinaryHeap.prototype.getFirst = function () {\n  if ( this.content.length > 0 ) {\n    return this.content[0];\n  }\n  return [];\n};\nBinaryHeap.prototype.clear = function () {\n  this.content = [];\n};\nBinaryHeap.prototype.isEmpty = function () {\n  return this.content.length <= 0;\n};\nBinaryHeap.prototype.size = function () {\n  return this.content.length;\n};\nBinaryHeap.prototype.bubbleUp = function ( n ) {\n  var element = this.content[n];\n  var score = this.scoreFunction( element );\n  var parentN, parent;\n  \n  while ( n > 0 ) {\n    parentN = Math.floor( (n + 1) / 2 ) - 1;\n    parent = this.content[parentN];\n    if ( score >= this.scoreFunction( parent ) ) {\n      break;\n    }\n    \n    this.content[parentN] = element;\n    this.content[n] = parent;\n    n = parentN;\n  }\n};\nBinaryHeap.prototype.sinkDown = function ( n ) {\n  var length = this.content.length;\n  var element = this.content[n];\n  var elemScore = this.scoreFunction( element );\n  var swap, child1, child2, child1N, child2N, child1Score, child2Score;\n\n  while ( true ) {\n    child2N = (n + 1) * 2;\n    child1N = child2N - 1;\n    swap = null;\n    if ( child1N < length ) {\n      child1 = this.content[child1N];\n      child1Score = this.scoreFunction( child1 );\n      if ( child1Score < elemScore ) {\n        swap = child1N;\n      }\n    }\n    if ( child2N < length ) {\n      child2 = this.content[child2N];\n      child2Score = this.scoreFunction( child2 );\n      if ( child2Score < (swap == null ? elemScore : child1Score) ) {\n        swap = child2N;\n      }\n    }\n    if ( swap == null ) break;\n\n    this.content[n] = this.content[swap];\n    this.content[swap] = element;\n    n = swap;\n  }\n};\n\n/*******************************************************************************\n * This library file contains several OES foundation elements\n * @copyright Copyright 2016 Gerd Wagner, BTU (Germany) + ODU (VA, USA)\n * @license The MIT License (MIT)\n * @author Gerd Wagner\n ******************************************************************************/\nvar oes = oes || {};\nvar sim = sim || {};\n\noes.defaults = {\n  license: \"CC BY-SA\",\n  imgFolder: \"img/\",\n  validateOnInput: false,\n  expostStatDecimalPlaces: 2\n};\noes.predfinedProperties = [\"shortLabel\", \"history\"];\n\noes.Object = new cLASS({\n  Name: \"oBJECT\",\n  isAbstract: true,\n  properties: {\n    \"id\": {range: \"Integer\"},\n    \"name\": {range: \"NonEmptyString\", optional:true}\n  },\n  methods: {\n    \"toLogString\": function () {\n      var str1=\"\", str2=\"\", i=0;\n      if (!this.constructor.shortLabel && !this.name) return \"\";\n      else {  // show class name + object ID\n        str1 = this.name || this.constructor.shortLabel +\"-\"+ this.id;\n      }\n      str2 = \"{ \";\n      Object.keys( this).forEach( function (key) {\n        var propDecl = cLASS[this.constructor.Name].properties[key],\n            val = this[key], propLabel=\"\", valStr=\"\", listOfActTypeNames=[];\n        if (key===\"activityState\") {\n          listOfActTypeNames = Object.keys( val);\n          valStr = JSON.stringify( listOfActTypeNames.map( function (atn) {\n            var shortLabel = cLASS[atn].shortLabel;\n            return shortLabel || atn;\n          }));\n          propLabel = \"actState\";\n        } else if (propDecl && propDecl.shortLabel) {\n          propLabel = propDecl.shortLabel;\n          if (cLASS[propDecl.range]) {  // a reference property\n            // is the property multi-valued?\n            if (propDecl.maxCard && propDecl.maxCard > 1) {\n              if (Array.isArray( val)) {\n                valStr = JSON.stringify( val.map( function (o) {return o.id;}));\n              } else valStr = JSON.stringify( Object.keys( val));\n            } else {  // if the property is single-valued\n              valStr = val.id;\n            }\n          } else {  // if the property is not a reference property\n            if (typeof val === \"number\" && !Number.isInteger(val) && sim.timeRoundingFactor) {\n              valStr = JSON.stringify( Math.round(\n                         val * sim.timeRoundingFactor) / sim.timeRoundingFactor);\n            } else valStr = JSON.stringify( val);\n          }\n        }\n        if (this[key] !== undefined && propLabel) {\n          str2 += (i>0 ? \", \" : \"\") + propLabel +\": \"+ valStr;\n          i = i+1;\n        }\n      }, this);\n      str2 += \"}\";\n      if (str2 === \"{ }\") str2 = \"\";\n      return str1 + str2;\n    }\n  }\n});\n/***\n * Events subsume activities. While instantaneous events have an occTime,\n * activities may not have an occTime on creation, but only a startTime.\n * For events with duration it holds that occTime = startTime + duration.\n */\noes.Event = new cLASS({\n  Name: \"eVENT\",\n  isAbstract: true,\n  properties: {\n    \"occTime\": {range: \"NonNegativeNumber\", optional:true},\n    \"priority\": {range: \"NonNegativeNumber\", optional:true},\n    // only meaningful for events with duration\n    \"startTime\": {range: \"NonNegativeNumber\", optional:true},\n    \"duration\": {range: \"NonNegativeNumber\", optional:true}\n  },\n  methods: {\n    \"toLogString\": function () {\n      var occT = sim.model.time === \"continuous\" && sim.timeRoundingFactor ?\n          Math.round( this.occTime * sim.timeRoundingFactor) / sim.timeRoundingFactor :\n          this.occTime;\n      var str1=\"\", str2=\"\", evtStr=\"\", i=0,\n          eventTypeName = this.constructor.Name, AT=null,\n          propDs={}, slots={};\n      switch (eventTypeName) {\n      case \"aCTIVITYsTART\":\n        AT = cLASS[this.activityType];\n        if (!AT.shortLabel) return \"\";\n        str1 = AT.shortLabel + \"Start\";\n        propDs = AT.properties;\n        slots = this.resources;\n        break;\n      case \"pROCESSINGaCTIVITYsTART\":\n        break;\n      case \"aCTIVITYeND\":\n        AT = cLASS[this.activityType];\n        if (!AT.shortLabel) return \"\";\n        str1 = AT.shortLabel + \"End\";\n        propDs = AT.properties;\n        slots = {\"activityIdRef\": this.activityIdRef};\n        break;\n      default:\n        if (!this.constructor.shortLabel) return \"\";\n        str1 = this.constructor.shortLabel;\n        propDs = cLASS[eventTypeName].properties;\n        slots = this;\n      }\n      str2 = \"{\";\n      Object.keys( slots).forEach( function (p) {\n        var propDecl = propDs[p], val = slots[p], propLabel=\"\", valStr=\"\";\n        if (propDecl && propDecl.shortLabel) {\n          propLabel = propDecl.shortLabel;\n          if (cLASS[propDecl.range]) {  // a reference property\n            valStr = val.id;\n          } else {  // if the property is not a reference property\n            if (typeof val === \"number\" && !Number.isInteger(val) && sim.timeRoundingFactor) {\n              valStr = JSON.stringify( Math.round(\n                      val * sim.timeRoundingFactor) / sim.timeRoundingFactor);\n            } else valStr = JSON.stringify( val);\n          }\n        }\n        if (val !== undefined && propLabel) {\n          str2 += (i>0 ? \", \" : \"\") + propLabel +\":\"+ valStr;\n          i = i+1;\n        }\n      });\n/*\n      Object.keys( this).forEach( function (key) {\n        var propDecl = cLASS[eventTypeName].properties[key],\n            val = this[key], propLabel=\"\", valStr=\"\";\n        if (propDecl && propDecl.shortLabel) {\n          propLabel = propDecl.shortLabel;\n          if (cLASS[propDecl.range]) {  // a reference property\n            valStr = val.id;\n          } else {  // if the property is not a reference property\n            if (typeof val === \"number\" && !Number.isInteger(val) && sim.timeRoundingFactor) {\n              valStr = JSON.stringify( Math.round(\n                      val * sim.timeRoundingFactor) / sim.timeRoundingFactor);\n            } else valStr = JSON.stringify( val);\n          }\n        }\n        if (this[key] !== undefined && propLabel) {\n          str2 += (i>0 ? \", \" : \"\") + propLabel +\":\"+ valStr;\n          i = i+1;\n        }\n      }, this);\n*/\n      str2 += \"}\";\n      if (str2 === \"{}\") str2 = \"\";\n      evtStr = str1 + str2 + \"@\" + occT;\n      return evtStr;\n    }\n  }\n});\n// compare function for Array.sort\noes.Event.rank = function (e1, e2) {\n  var p1=0, p2=0;\n  if (e1.constructor.priority) p1 = e1.constructor.priority;\n  if (e2.constructor.priority) p2 = e2.constructor.priority;\n  return p2 - p1;\n}\n/******************************************************************************\n *** Activities Package *******************************************************\n ******************************************************************************/\n/**\n *  Activities are events having some duration and using resources. Their duration\n *  may be either pre-set to a fixed value or to a random value (in which case they\n *  have a scheduled end), or it may be determined by the occurrence of an activity\n *  end event that is caused by another simulation event (in which case they have an\n *  open end). The duration of a pre-set duration activity can be defined in 3 ways:\n *  either for all activities of some type AT by a) a class-level attribute\n *  AT.fixedDuration or b) a class-level method AT.randomDuration(), or\n *  c) by setting the attribute \"duration\" of its aCTIVITYsTART event.\n *\n *  Activities may consume, and also produce, resources. The actor(s)\n *  that (jointly) perform(s) an activity can be viewed as (a) special resource(s).\n *  At any simulation step there is a (possibly empty) set of ongoing activities.\n *  The objects that participate in an ongoing activity as resources are in a\n *  certain activity state (e.g., \"printing\", \"service-performing\"), in which they\n *  are no more available for other activities that try to allocate them as\n *  resources, if their resource role is exclusive/non-shareable.\n *\n *  For any resource of an activity, its utilization by that activity during\n *  a certain time period is measured by the simulator and can be included\n *  in the ex-post statistics.\n *\n *  An activity type is defined as a subtype of the OES class \"aCTIVITY\" with a\n *  mandatory class-level method \"generateId\" and a mandatory class-level attribute\n *  \"resourceTypes\", and an optional class-level method \"randomDuration\" or,\n *  alternatively, an optional class-level attribute \"fixedDuration\".\n *\n *  A pre-defined event type oes.ActivityStart is used for creating activity start\n *  events with a constructor parameter \"resources\" defining a resource roles map\n *  assigning resource object references to resource role names. When an activity\n *  start event occurs, a JS object representing the activity is created, the\n *  resource roles map is copied to corresponding property slots of the activity,\n *  and the value of the activityState property of all resource objects is updated\n *  by adding the activity type name (the activityState is a set/map of the names\n *  of those types of activities, in which the object is participating).\n */\noes.Activity = new cLASS({\n  Name: \"aCTIVITY\",\n  supertypeName: \"eVENT\",\n  isAbstract: true,\n  properties: {\n    \"id\": {range: \"Integer\"},\n    // on activity creation resource roles are copied to corresp. property slots\n    \"resources\": {range: cLASS.Map(\"oBJECT\"), optional:true}\n  },\n  methods: {}\n});\noes.ActivityStart = new cLASS({\n  Name: \"aCTIVITYsTART\",\n  supertypeName: \"eVENT\",\n  properties: {\n    \"activityType\": {range: \"NonEmptyString\"},  //TODO: should allow type names (like IdRefs)\n    \"resources\": {range: cLASS.Map(\"oBJECT\"), optional:true}\n  },\n  methods: {\n    \"toLogString\": function () {\n      var occT = sim.model.time === \"continuous\" && sim.timeRoundingFactor ?\n          Math.round( this.occTime * sim.timeRoundingFactor) / sim.timeRoundingFactor :\n          this.occTime;\n      var str1 = cLASS[this.activityType].shortLabel, str2 = \"\";\n      if (!str1) return \"\";\n      str1 += \"Start\";\n      Object.keys( this.resources).forEach( function (resRole) {\n        var resObj = this.resources[resRole];\n        str2 += (resObj.name || String(resObj.id)) +\", \";\n      }, this);\n      return str1 +\"(\"+ str2.slice(0, -2) +\")\" + \"@\" + occT;\n    },\n    \"onEvent\": function () {\n      var slots={}, acty=null, followupEvents=[];\n      var AT = cLASS[this.activityType];\n      if (this.duration > 0) slots.duration = this.duration;\n      else if (AT.fixedDuration) slots.duration = AT.fixedDuration;\n      else if (AT.randomDuration) slots.duration = AT.randomDuration();\n      Object.keys( this.resources).forEach( function (resRole) {\n        var resObj = this.resources[resRole];\n        // copy resource def. slots as ref. prop. slots\n        if (!slots[resRole]) slots[resRole] = resObj;\n        // set activity state for resource object\n        if (!resObj.activityState) resObj.activityState = {};\n        resObj.activityState[this.activityType] = true;\n      }, this);\n      slots.id = sim.idCounter++;  // activities need an ID\n      slots.startTime = this.occTime;\n      // create new activity\n      acty = new AT( slots);\n      // assign resources map to new activity\n      acty.resources = this.resources;\n      // register new activity as an ongoing activity\n      sim.ongoingActivities[acty.id] = acty;\n      // define initial. slots for ActivityEnd event\n      slots = {\n        occTime: this.occTime + acty.duration,\n        activityType: AT.Name,\n        activityIdRef: acty.id\n      };\n      if (this.actor) slots.actor = this.actor;\n      // if there is an onActivityStart procedure, execute it\n      if (typeof acty.onActivityStart === \"function\") {\n        followupEvents = acty.onActivityStart();\n      }\n      // schedule activity end event\n      followupEvents.push( new oes.ActivityEnd( slots));\n      return followupEvents;\n    }\n  }\n});\noes.ActivityEnd = new cLASS({\n  Name: \"aCTIVITYeND\",\n  supertypeName: \"eVENT\",\n  properties: {\n    \"activityType\": {range: \"NonEmptyString\"},\n    \"activityIdRef\": {range: \"Integer\"}\n  },\n  methods: {\n    \"toLogString\": function () {\n      var occT = sim.model.time === \"continuous\" && sim.timeRoundingFactor ?\n          Math.round( this.occTime * sim.timeRoundingFactor) / sim.timeRoundingFactor :\n          this.occTime;\n      var str1 = cLASS[this.activityType].shortLabel, str2 = \"\",\n          resources = sim.ongoingActivities[this.activityIdRef].resources;\n      if (!str1) return \"\";\n      str1 += \"End\";\n      Object.keys( resources).forEach( function (resRole) {\n        var resObj = resources[resRole];\n        str2 += (resObj.name || String(resObj.id)) +\", \";\n      }, this);\n      return str1 +\"(\"+ str2.slice(0, -2) +\")\" + \"@\" + occT;\n    },\n    \"onEvent\": function () {\n      var followupEvents=[];\n      var acty = sim.ongoingActivities[this.activityIdRef];  // retrieve activity\n      // if there is an onActivityEnd procedure, execute it\n      if (acty.onActivityEnd) followupEvents = acty.onActivityEnd();\n      // set occTime and duration if there was no pre-set duration\n      if (!acty.duration) {\n        acty.occTime = this.occTime;\n        acty.duration = acty.occTime - acty.startTime;\n      }\n      // compute resource utilization per resource role\n      Object.keys( acty.resources).forEach( function (resRole) {\n        var objIdStr = String(acty[resRole].id),\n            resUtilMap = sim.stat.resUtil[this.activityType];\n        if (resUtilMap[objIdStr] === undefined) resUtilMap[objIdStr] = 0;\n        resUtilMap[objIdStr] += acty.duration;\n        // update the activity state of resource objects\n        delete acty[resRole].activityState[this.activityType];\n      }, this);\n      // drop activity from list of ongoing activities\n      delete sim.ongoingActivities[String( this.activityIdRef)];\n      return followupEvents;\n    }\n  }\n});\n/******************************************************************************\n *** Processing Network Package ***********************************************\n ******************************************************************************/\n/**\n * Processing nodes are objects that play an resource role in processing\n * activities. The definition of a processing node combines defining both an\n * object (as resource) and an implicit activity type, possibly with\n * duration, resource types and onActivityStart/onActivityEnd event rule methods.\n *\n * A simple processing node has an input queue for processing objects and a\n * successor processing node. Processing objects may be either of a generic\n * type \"pROCESSINGoBJECT\" or of a model-specific subtype of \"pROCESSINGoBJECT\"\n * (such as \"Customer\").\n *\n * A processing node object may be defined with a value for its \"fixedDuration\"\n * property or with a \"randomDuration\" function, applying to its processing\n * activities. If neither a fixedDuration nor a randomDuration method are defined,\n * the exponential distribution with an event rate of 1 is used as a default function\n * for sampling processing durations. By default, a processing node processes one\n * processing object at a time, but it may also have its \"capacity\" attribute set to\n * a value greater than 1.\n *\n * In the general case, a processing node may have several input object types,\n * and an input queue for each of them, and either a successor processing node or\n * else an (automatically generated) output queue for each type of output object.\n * By default, when no explicit transformation of inputs to outputs is modeled by\n * specifying an outputTypes map, there is no transformation and it holds that\n * outputs = inputs.\n *\n * TODO: Add resourceTypes\n */\noes.ProcNodeStatusEL = new eNUMERATION( \"ProcNodeStatusEL\",\n    [\"idle\", \"busy\", \"down\"] );\noes.ProcessingNode = new cLASS({\n  Name: \"pROCESSINGnODE\",\n  label: \"Processing Node\",\n  shortLabel: \"PN\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"inputQueue\": {range:\"oBJECT\", minCard: 0, maxCard: Infinity, isOrdered:true,\n        label:\"Input Queue\", shortLabel:\"inpQ\"},\n    \"inputType\": {range:\"oBJECTtYPE\", optional:true},  // default: \"pROCESSINGoBJECT\"\n    \"status\": {range: \"ProcessingNodeStatusEL\", shortLabel:\"stat\",\n        initialValue: oes.ProcNodeStatusEL.IDLE},\n    \"successorNode\": {range: \"pROCESSINGnODE|eXITnODE\", optional:true},\n    \"fixedDuration\": {range: \"PositiveInteger\", optional:true},\n    \"capacity\": {range: \"PositiveInteger\", optional:true},\n    // Ex: {\"lemons\": {type:\"Lemon\", quantity:2}, \"ice\": {type:\"IceCubes\", quantity:[0.2,\"kg\"]},...\n    \"inputTypes\": {range: cLASS.Map( Object), optional:true},\n    // Ex: {\"lemonade\": {type:\"Lemonade\", quantity:[1,\"l\"]}, ...\n    \"outputTypes\": {range: cLASS.Map( Object), optional:true},\n    // a map with PN object names as keys and conditions as values for (X)OR/AND splitting\n    \"successorNodes\": {range: cLASS.Map( Function), optional:true}\n  },\n  methods: {}\n});\n/**\n * Processing Objects are generic objects that arrive at an entry node of a PN\n * and are processed at one or more processing nodes before they leave the\n * PN at an exit node.\n */\noes.ProcessingObject = new cLASS({\n  Name: \"pROCESSINGoBJECT\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"arrivalTime\": { range: \"Number\", label: \"Arrival time\", shortLabel: \"arrT\"}\n  }\n});\n/**\n * Processing Activities are activities that have inputs and outputs and are\n * performed by a processing node (as their actor). The input types/roles,\n * output types/roles and duration of a processing activity are defined in its\n * underlying processing node, which is associated via its \"procNode\" property.\n *\n * A processing node object definition may have slots for defining a \"fixedDuration\"\n * attribute or a \"randomDuration\" method.\n */\noes.ProcessingActivity = new cLASS({\n  Name: \"pROCESSINGaCTIVITY\",\n  label: \"Processing Activity\",\n  shortLabel: \"Proc\",  // for the log\n  supertypeName: \"aCTIVITY\",\n  properties: {\n    \"procNode\": {range: \"pROCESSINGnODE\"}\n  },\n  methods: {}\n});\n// define the exponential distribution as the default inter-arrival time\noes.ProcessingActivity.defaultEventRate = 1;\noes.ProcessingActivity.defaultDuration = function () {\n  return rand.exponential( oes.ProcessingActivity.defaultEventRate)\n};\n\noes.ProcessingActivityStart = new cLASS({\n  Name: \"pROCESSINGaCTIVITYsTART\",\n  supertypeName: \"aCTIVITYsTART\",\n  properties: {\n    \"procNode\": {range: \"pROCESSINGnODE\"}\n  },\n  methods: {\n    \"onConstruction\": function () {\n      if (this.resources) {\n        // make sure that processing node is a resource\n        this.resources[\"procNode\"] = this.procNode;\n      }\n    },\n    \"onEvent\": function () {\n      var slots={}, pN = this.procNode, acty=null, followupEvents=[];\n      if (!pN.inputQueue[0]) {\n        console.log(\"ProcessingActivityStart with empty inputQueue at \"+ pN.name +\n            \" at step \"+ sim.step);\n      }\n      // create slots for constructing new ProcessingActivity\n      if (this.duration) slots.duration = this.duration;\n      else if (pN.fixedDuration) slots.duration = pN.fixedDuration;\n      else if (pN.randomDuration) slots.duration = pN.randomDuration();\n      else slots.duration = oes.ProcessingActivity.defaultDuration();\n      pN.status = oes.ProcNodeStatusEL.BUSY;\n      Object.keys( this.resources).forEach( function (resRole) {\n        var resObj = this.resources[resRole];\n        // copy resource def. slots as ref. prop. slots\n        if (!slots[resRole]) slots[resRole] = resObj;\n        // set activity state for resource object\n        if (!resObj.activityState) resObj.activityState = {};\n        resObj.activityState[this.activityType] = true;\n      }, this);\n      slots.id = sim.idCounter++;  // activities need an ID\n      slots.startTime = this.occTime;\n      // create new activity\n      acty = new oes.ProcessingActivity( slots);\n      acty.resources = this.resources;  // assign resources map\n      sim.ongoingActivities[acty.id] = acty;\n      // create slots for constructing a ProcessingActivityEnd event\n      slots = {\n        occTime: this.occTime + acty.duration,\n        activityType: \"pROCESSINGaCTIVITY\",\n        activityIdRef: acty.id\n      };\n      slots.procNode = pN;\n      // if there is an onActivityStart procedure, execute it\n      if (typeof pN.onActivityStart === \"function\") {\n        followupEvents = pN.onActivityStart();\n      }\n      // schedule activity end event\n      followupEvents.push( new oes.ProcessingActivityEnd( slots));\n      return followupEvents;\n    }\n  }\n});\noes.ProcessingActivityEnd = new cLASS({\n  Name: \"pROCESSINGaCTIVITYeND\",\n  supertypeName: \"aCTIVITYeND\",\n  properties: {\n    \"procNode\": {range: \"pROCESSINGnODE\"}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var procObj=null, nextNode=null, followupEvt1=null, followupEvt2=null,\n          followupEvents=[], pN = this.procNode;\n      // retrieve activity\n      var acty = sim.ongoingActivities[this.activityIdRef];\n      // if there is an onActivityEnd procedure, execute it\n      if (pN.onActivityEnd) followupEvents = pN.onActivityEnd();\n      // set occTime and duration if there was no pre-set duration\n      if (!acty.duration) {\n        acty.occTime = this.occTime;\n        acty.duration = acty.occTime - acty.startTime;\n      }\n      // compute resource utilization per resource role\n      Object.keys( acty.resources).forEach( function (resRole) {\n        var objIdStr = String(acty[resRole].id),\n            resUtilMap = sim.stat.resUtil[this.activityType];\n        if (resUtilMap[objIdStr] === undefined) resUtilMap[objIdStr] = 0;\n        resUtilMap[objIdStr] += acty.duration;\n        // update the activity state of resource objects\n        delete acty[resRole].activityState[this.activityType];\n      }, this);\n      // drop activity from list of ongoing activities\n      delete sim.ongoingActivities[String( this.activityIdRef)];\n      // the successor node may be dynamically assigned by a.onActivityEnd()\n      nextNode = pN.successorNode || acty.successorNode;\n      // pop processing object from the input queue\n      procObj = pN.inputQueue.shift();\n      // push object to the input queue of the next node\n      nextNode.inputQueue.push( procObj);\n      // is the next node a processing node?\n      if (nextNode.constructor.Name === \"pROCESSINGnODE\") {\n        // is the next processing node available?\n        if (nextNode.inputQueue.length === 1 &&\n            nextNode.status === oes.ProcNodeStatusEL.IDLE) {\n          // then start its ProcessingActivity\n          nextNode.status = oes.ProcNodeStatusEL.BUSY;\n          followupEvt1 = new oes.ProcessingActivityStart({\n            occTime: this.occTime + sim.nextMomentDeltaT,\n            activityType: \"pROCESSINGaCTIVITY\",\n            procNode: nextNode,\n            resources: acty.resources || {}\n          });\n          followupEvents.push( followupEvt1);\n        }\n      } else {  // the next node is an exit node\n        followupEvents.push( new oes.Departure({\n          occTime: this.occTime + sim.nextMomentDeltaT,\n          exitNode: nextNode\n        }));\n      }\n      // are there more items in the input queue and no BREAK happened?\n      if (pN.status === oes.ProcNodeStatusEL.BUSY) {\n        if (pN.inputQueue.length > 0) {\n          followupEvt2 = new oes.ProcessingActivityStart({\n            occTime: this.occTime + sim.nextMomentDeltaT,\n            activityType: \"pROCESSINGaCTIVITY\",\n            procNode: pN,\n            resources: {}\n          });\n          followupEvents.push( followupEvt2);\n        } else pN.status = oes.ProcNodeStatusEL.IDLE;\n      }\n      return followupEvents;\n    }\n  }\n});\n/**\n * Entry nodes are objects that participate in exogenous arrival events\n * leading to the creation of processing objects, which are either routed to a\n * successor node or pushed to an output queue. The definition of an entry\n * node combines defining both a (possibly spatial) object and an associated\n * implicit arrival event type, possibly with an \"onArrival\" event rule method.\n *\n * Entry node object definitions may include (1) a \"successorNode\" attribute slot\n * for assigning a successor node to which processing objects are routed; (2) a\n * \"maxNmrOfArrivals\" attribute slot for defining a maximum number of arrival\n * events after which no more arrival events will be created (and, consequently,\n * the simulation may run out of future events); (3) either an \"arrivalRate\"\n * attribute slot for defining the event rate parameter of an exponential pdf\n * used for computing the time between two consecutive arrival events, or a per-\n * instance-defined \"arrivalRecurrence\" method slot for computing the recurrence\n * of arrival events; (4) a per-instance-defined \"outputType\" slot for defining\n * a custom output type (instead of the default \"pROCESSINGoBJECT\"). If neither an\n * \"arrivalRate\" nor an \"arrivalRecurrence\" method are defined, the exponential\n * distribution with an event rate of 1 is used as a default recurrence.\n *\n * Entry nodes have a built-in (read-only) statistics attribute \"nmrOfArrivedObjects\"\n * counting the number of objects that have arrived at the given entry node.\n *\n * TODO: If no successor node is defined for an entry node, an output queue is\n * automatically created.\n */\noes.EntryNode = new cLASS({\n  Name: \"eNTRYnODE\",\n  label: \"Entry Node\",\n  shortLabel: \"Entry\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"outputType\": {range: \"oBJECTtYPE\", optional:true},  // default: \"pROCESSINGoBJECT\"\n    \"successorNode\": {range: \"pROCESSINGnODE\", optional:true},\n    \"maxNmrOfArrivals\": {range: \"PositiveInteger\", optional:true},\n    \"arrivalRate\": {range: \"Decimal\", optional:true},\n    \"nmrOfArrivedObjects\": {range: \"NonNegativeInteger\", shortLabel: \"arrObj\", optional:true}\n  }\n});\n/**\n * Exit nodes are objects that participate in departure events leading to the\n * destruction of the departing object. The definition of an exit node combines\n * defining both a (possibly spatial) object and an associated implicit departure\n * event type, possibly with an \"onDeparture\" event rule method.\n *\n * Exit nodes have two built-in statistics attributes: (1) \"nmrOfDepartedObjects\"\n * counting the number of objects that have departed at the given exit node, and\n * (2) \"cumulativeTimeInSystem\" for adding up the times in system of all departed\n * objects.\n */\noes.ExitNode = new cLASS({\n  Name: \"eXITnODE\",\n  label: \"Exit Node\",\n  shortLabel: \"Exit\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"inputQueue\": {range:\"oBJECT\", minCard: 0, maxCard: Infinity, isOrdered:true,\n      label:\"Input Queue\", shortLabel:\"inpQ\"},\n    \"nmrOfDepartedObjects\": {range: \"NonNegativeInteger\", shortLabel: \"depObj\", optional:true},\n    \"cumulativeTimeInSystem\": {range: \"NonNegativeDecimal\", optional:true}\n  }\n});\n/**\n * Set up PN statistics\n * - for any entry node, define the implicit statistics variable \"arrivedObjects\"\n * - for any exit node, define the implicit statistics variables \"departedObjects\"\n *   and \"meanTimeInSystem\"\n */\noes.setupProcNetStatistics = function () {\n  var entryNodes = oes.EntryNode.instances,\n      exitNodes = oes.ExitNode.instances;\n  var initState = sim.scenario.initialState,\n      initialObjDefs = initState.objects;\n  if (!sim.model.statistics) sim.model.statistics = {};\n  // define default statistics variables for PN entry node statistics\n  Object.keys( entryNodes).forEach( function (nodeIdStr) {\n    var suppressDefaultEntry=false,\n        entryNode = entryNodes[nodeIdStr],\n        varName = Object.keys( entryNodes).length === 1 ?\n            \"arrivedObjects\" : entryNode.name +\"_arrivedObjects\";\n    entryNode.nmrOfArrivedObjects = 0;\n    if (sim.model.statistics[varName] && !sim.model.statistics[varName].label) {\n      // model-defined suppression of default statistics\n      suppressDefaultEntry = true;\n    }\n    if (!suppressDefaultEntry) {\n      if (!sim.model.statistics[varName]) sim.model.statistics[varName] = {};\n      sim.model.statistics[varName].range = \"NonNegativeInteger\";\n      if (!sim.model.statistics[varName].label) {\n        sim.model.statistics[varName].label = \"Arrived objects\";\n      }\n      sim.model.statistics[varName].entryNode = entryNode;\n      sim.model.statistics[varName].computeOnlyAtEnd = true;\n    }\n  });\n  // define default statistics variables for PN exit node statistics\n  Object.keys( exitNodes).forEach( function (nodeIdStr) {\n    var suppressDefaultEntry=false,\n        exitNode = exitNodes[nodeIdStr],\n        varName = Object.keys( exitNodes).length === 1 ?\n            \"departedObjects\" : exitNode.name +\"_departedObjects\";\n    exitNode.nmrOfDepartedObjects = 0;\n    if (sim.model.statistics[varName] && !sim.model.statistics[varName].label) {\n      // model-defined suppression of default statistics\n      suppressDefaultEntry = true;\n    }\n    if (!suppressDefaultEntry) {\n      if (!sim.model.statistics[varName]) sim.model.statistics[varName] = {};\n      sim.model.statistics[varName].range = \"NonNegativeInteger\";\n      if (!sim.model.statistics[varName].label) {\n        sim.model.statistics[varName].label = \"Departed objects\";\n      }\n      sim.model.statistics[varName].exitNode = exitNode;\n      sim.model.statistics[varName].computeOnlyAtEnd = true;\n    }\n    exitNode.cumulativeTimeInSystem = 0;\n    varName = Object.keys( exitNodes).length === 1 ?\n        \"meanTimeInSystem\" : exitNode.name +\"_meanTimeInSystem\";\n    if (sim.model.statistics[varName] && !sim.model.statistics[varName].label) {\n      // model-defined suppression of default statistics\n      suppressDefaultEntry = true;\n    }\n    if (!suppressDefaultEntry) {\n      if (!sim.model.statistics[varName]) sim.model.statistics[varName] = {};\n      sim.model.statistics[varName].range = \"Decimal\";\n      if (!sim.model.statistics[varName].label) {\n        sim.model.statistics[varName].label = \"Mean time in system\";\n      }\n      sim.model.statistics[varName].exitNode = exitNode;\n      sim.model.statistics[varName].computeOnlyAtEnd = true;\n      sim.model.statistics[varName].expression = function () {\n        return exitNode.cumulativeTimeInSystem / exitNode.nmrOfDepartedObjects\n      };\n    }\n  });\n};\n\n/**\n * Arrival events are associated with an entry node.\n * They may define a quantity of arrived processing objects, which is 1 by default.\n * Viewing an arrival not as an arrival of processing objects, but as an arrival of\n * a customer order, the quantity attribute would allow to define an order\n * quantity that results in the same quantity of processing objects (or production\n * orders) pushed to the entry node's succeeding processing node.\n */\noes.Arrival = new cLASS({\n  Name: \"aRRIVAL\",\n  label: \"Arrival\",\n  shortLabel: \"Arr\",\n  supertypeName: \"eVENT\",\n  properties: {\n    \"entryNode\": {range: \"eNTRYnODE\"},\n    \"quantity\": {range: \"PositiveInteger\", optional:true}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var occT=0, procObj=null, ProcessingObject=null, followupEvents=[];\n      if (this.entryNode.outputType) {\n        ProcessingObject = cLASS[this.entryNode.outputType];\n      } else {  // default\n        ProcessingObject = oes.ProcessingObject;\n      }\n      // update statistics\n      this.entryNode.nmrOfArrivedObjects++;\n      // create newly arrived processing object\n      procObj = new ProcessingObject({arrivalTime: this.occTime});\n      sim.addObject( procObj);\n      // invoke onArrival event rule method\n      if (this.entryNode.onArrival) followupEvents = this.entryNode.onArrival();\n      if (this.entryNode.successorNode) {\n        // push newly arrived object to the inputQueue of the next node\n        this.entryNode.successorNode.inputQueue.push( procObj);\n        // is the follow-up processing node available?\n        if (this.entryNode.successorNode.status === oes.ProcNodeStatusEL.IDLE) {\n          this.entryNode.successorNode.status = oes.ProcNodeStatusEL.BUSY;\n          followupEvents.push( new oes.ProcessingActivityStart({\n            occTime: this.occTime + sim.nextMomentDeltaT,\n            activityType: \"pROCESSINGaCTIVITY\",\n            procNode: this.entryNode.successorNode,\n            resources: this.entryNode.resources || {}\n          }));\n        }\n      }\n      // implement the recurrence of aRRIVAL events\n      if (!this.entryNode.maxNmrOfArrivals ||\n          this.entryNode.nmrOfArrivedObjects < this.entryNode.maxNmrOfArrivals) {\n        // has an arrival recurrence function been defined for the entry node?\n        if (this.entryNode.arrivalRecurrence) {\n          occT = this.occTime + this.entryNode.arrivalRecurrence();\n        } else {  // use the default recurrence\n          occT = this.occTime + oes.Arrival.defaultRecurrence();\n        }\n        sim.scheduleEvent( new oes.Arrival({\n          occTime: occT, entryNode: this.entryNode}));\n      }\n      return followupEvents;\n    }\n  }\n});\n// define the exponential distribution as the default inter-arrival time\noes.Arrival.defaultEventRate = 1;\noes.Arrival.defaultRecurrence = function () {\n  return rand.exponential( oes.Arrival.defaultEventRate);\n};\n/**\n * Departure events have two participants: an exit node and the departing object.\n */\noes.Departure = new cLASS({\n  Name: \"dEPARTURE\",\n  shortLabel: \"Dep\",\n  supertypeName: \"eVENT\",\n  properties: {\n    \"exitNode\": {range: \"eXITnODE\"}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var followupEvents = [];\n      // pop processing object from the input queue\n      var procObj = this.exitNode.inputQueue.shift();\n      // update statistics\n      this.exitNode.nmrOfDepartedObjects++;\n      this.exitNode.cumulativeTimeInSystem += this.occTime - procObj.arrivalTime;\n      // invoke onDeparture event rule method\n      if (typeof this.exitNode.onDeparture === \"function\") {\n        followupEvents = this.exitNode.onDeparture();\n      }\n      // remove object from simulation\n      sim.removeObject( procObj);\n      return followupEvents;\n    }\n  }\n});\n/**\n * Check model constraints\n * @method\n * @author Gerd Wagner\n */\noes.checkProcNetConstraints = function (params) {\n  var errMsgs=[], msg=\"\", evts=[];\n  // PNC1: nmrOfArrObjects = nmrOfObjectsAtProcNodes + nmrOfObjectsAtExitNodes + nmrOfDepObjects\n  var nmrOfArrObjects = Object.keys( oes.EntryNode.instances).reduce( function (res, nodeObjIdStr) {\n    return res + sim.objects[nodeObjIdStr].nmrOfArrivedObjects\n  }, 0);\n  var nmrOfObjectsAtProcNodes = Object.keys( oes.ProcessingNode.instances).reduce( function (res, nodeObjIdStr) {\n    return res + sim.objects[nodeObjIdStr].inputQueue.length\n  }, 0);\n  var nmrOfObjectsAtExitNodes = Object.keys( oes.ExitNode.instances).reduce( function (res, nodeObjIdStr) {\n    return res + sim.objects[nodeObjIdStr].inputQueue.length\n  }, 0);\n  var nmrOfDepObjects = Object.keys( oes.ExitNode.instances).reduce( function (res, nodeObjIdStr) {\n    return res + sim.objects[nodeObjIdStr].nmrOfDepartedObjects\n  }, 0);\n  if (nmrOfArrObjects !== nmrOfObjectsAtProcNodes + nmrOfObjectsAtExitNodes + nmrOfDepObjects) {\n    msg = \"The object preservation constraint is violated at step \"+ sim.step +\n        (params && params.add ? params.add : \"\") +\n        \" (nmrOfArrObjects: \"+ nmrOfArrObjects +\n        \", nmrOfObjectsInSystem: \"+ String(nmrOfObjectsAtProcNodes+nmrOfObjectsAtExitNodes) +\n        \", nmrOfDepObjects: \"+ nmrOfDepObjects +\")\";\n    if (params && params.log) console.log( msg);\n    else errMsgs.push( msg);\n  }\n  // PNC2: if a proc. node has a proc. end event, its input queue must be non-empty\n  evts = sim.FEL.getEventsOfType(\"pROCESSINGaCTIVITYeND\");\n  evts.forEach( function (procEndEvt) {\n    var pN = procEndEvt.procNode, inpQ = pN.inputQueue;\n    if (inpQ.length === 0 || !inpQ[0]) {\n      msg = \"At step \"+ sim.step +\" \"+ (params && params.add ? params.add : \"\") +\n          \", the proc. node \"+ (pN.name||pN.id) +\" has an empty input queue.\";\n      if (params && params.log) console.log( msg);\n      else errMsgs.push( msg);\n    }\n  });\n  return errMsgs;\n};\n/******************************************************************************\n *** Experiment Classes *******************************************************\n ******************************************************************************/\n/**\n * A complex datatype for experiment parameter definitions\n * @author Gerd Wagner\n */\noes.ExperimentParamDef = new cLASS({\n  Name: \"eXPERIMENTpARAMdEF\",\n  isComplexDatatype: true,  // do not collect instances\n  properties: {\n    \"name\": {range: \"Identifier\", label:\"Name\"},\n    \"values\": {\n      range: cLASS.ArrayList(\"Number\"),\n      label:\"Values\",\n      val2str: function (v) {\n        return v.toString();  // JSON.stringify( v);\n      },\n      str2val: function (str) {\n        return JSON.parse( str);\n      },\n    }\n  }\n});\n/**\n * An experiment is defined for a scenario, which is defined for a model.\n */\noes.ExperimentDef = new cLASS({\n  Name: \"eXPERIMENTdEF\",\n  properties: {\n    \"id\": {range: \"AutoNumber\"},\n    \"model\": {range: \"NonEmptyString\", label:\"Model name\", optional:true},\n    \"scenarioNo\": {range: \"PositiveInteger\", label:\"Scenario number\"},\n    \"experimentNo\": {range: \"PositiveInteger\", label:\"Experiment number\",\n        hint:\"The sequence number relative to the underlying simulation scenario\"},\n    \"experimentTitle\": {range: \"NonEmptyString\", optional:true, label:\"Experiment title\"},\n    \"replications\": {range:\"PositiveInteger\", label:\"Number of replications\"},\n    \"parameterDefs\": {range: \"eXPERIMENTpARAMdEF\", minCard: 0, maxCard: Infinity,\n        isOrdered:true, label:\"Parameter definitions\"},\n    \"seeds\": {range: Array, optional:true}  // seeds.length = replications\n  }\n});\noes.ExperimentDef.idCounter = 0;  // retrieve actual value from IDB\n\noes.ExperimentRun = new cLASS({\n  Name: \"eXPERIMENTrUN\",\n  properties: {\n    \"id\": {range: \"AutoNumber\", label:\"ID\"},  // possibly a timestamp\n    \"experimentDef\": {range: \"eXPERIMENTdEF\", label:\"Experiment def.\"},\n    \"dateTime\": {range: \"DateTime\", label:\"Date/time\"}\n  }\n});\noes.ExperimentRun.getAutoId = function () {\n  return (new Date()).getTime();\n};\n\noes.ExperimentScenarioRun = new cLASS({\n  Name: \"eXPERIMENTsCENARIOrUN\",\n  properties: {\n    \"id\": {range: \"AutoNumber\"},  // possibly a timestamp\n    \"experimentRun\": {range: \"eXPERIMENTrUN\"},\n    \"experimentScenarioNo\": {range: \"NonNegativeInteger\"},\n    \"parameterValueCombination\": {range: Array},\n    \"outputStatistics\": {range: Object,\n      label:\"Output statistics\",\n      val2str: function (v) {\n        return JSON.stringify( v);\n      },\n      str2val: function (str) {\n        return JSON.parse( str);\n      },\n    }\n  }\n});\noes.ExperimentScenarioRun.getAutoId = function () {\n  return (new Date()).getTime();\n};\n\n/******************************************************************************\n *** Lists of predefined cLASSes as reserved names for constraint checks ******\n ******************************************************************************/\noes.predefinedObjectTypes = [\"oBJECT\",\"pROCESSINGoBJECT\",\"pROCESSINGnODE\",\"eNTRYnODE\",\"eXITnODE\"];\noes.predefinedEventTypes = [\"eVENT\",\"aCTIVITYsTART\",\"aCTIVITYeND\",\"aRRIVAL\",\n    \"pROCESSINGaCTIVITYsTART\",\"pROCESSINGaCTIVITYeND\",\"dEPARTURE\"];\noes.predefinedActivityTypes = [\"aCTIVITY\",\"pROCESSINGaCTIVITY\"];\n\n/******************************************************************************\n *** OES Model Objects scenario/experiment/config/model/statistics/etc. *******\n ******************************************************************************/\nsim.scenario = sim.scenario || {};\n// Define the schema of the model object \"scenario\"\nsim.scenario.objectName = \"scenario\";\nsim.scenario.properties = {\n    \"simulationEndTime\": {range:\"Time\", label:\"Duration:\", hint:\"Simulation duration\"},\n    \"name\": {range:\"NonEmptyString\", optional: true, label:\"Name\", hint:\"Scenario name\"},\n    \"title\": {range:\"NonEmptyString\", optional: true, label:\"Title\", hint:\"Scenario title\"},\n    \"shortDescription\": {range:\"String\", optional: true, label:\"Scenario description\",\n        hint:\"Short description of the simulation scenario\"},\n    \"creator\": {range:\"String\", optional: true, label:\"Creator\",\n        hint:\"Creator of simulation model\"},\n    \"created\": {range:\"String\", optional: true, label:\"Created on\",\n        hint:\"Creation date\"},\n    \"modified\": {range:\"String\", optional: true, label:\"Modified on\",\n      hint:\"Modification date\"},\n    \"idCounter\": {range:\"NonNegativeInteger\", optional: true, label:\"ID counter\"},\n    \"randomSeed\": {range:\"PositiveInteger\", optional: true, label:\"Random seed\"}\n};\n\nsim.experiment = {\n  objectName: \"experiment\",\n  properties: {\n    \"experimentNo\": {range:\"AutoNumber\", label:\"Experiment number\",\n        hint:\"Automatically assigned sequence number for experiment\"},\n    \"experimentTitle\": {range:\"String\", optional: true, label:\"Experiment title\"},\n    \"replications\": {range:\"PositiveInteger\", label:\"Number of replications\",\n        hint:\"Number of replications/repetitions per experiment scenario\"},\n    \"parameterDefs\": {\n        range: \"eXPERIMENTpARAMdEF\", maxCard: Infinity,\n        label:\"Experiment parameters\",\n        hint:\"Define experiment parameters by name and value set specification\"\n    },\n    \"seeds\": {range: Array, optional: true},\n  },\n  replications: 0,\n  parameters: [],\n  scenarios:[],  // are created by the simulator\n  validate: function () {\n    var errMsgs=[], exp = sim.experiment;\n    if (exp.replications > 0) {\n      if (exp.seeds) {\n        if (!Array.isArray( exp.seeds)) {\n          errMsgs.push(\"The experiment 'seeds' parameter must have an array value! Illegal value: \"+ JSON.stringify(exp.seeds));\n        } else if (exp.seeds.length < exp.replications) {\n          errMsgs.push(\"Not enough seeds for number of replications!\");\n        }\n      }\n      if (exp.parameterDefs.length > 0) {\n        exp.parameterDefs.forEach( function (paramDef) {\n          if (!paramDef.values && !(paramDef.startValue && paramDef.endValue)) {\n            errMsgs.push(\"Experiment parameter \"+ paramDef.name +\" has neither a 'values' \" +\n                \"nor 'startValue'/'endValue' attribute(s)!\");\n          }\n        })\n      }\n      if (exp.timeSeriesStatisticsVariables) {\n        exp.timeSeriesStatisticsVariables.forEach( function (varName) {\n          if (!(varName in sim.model.statistics)) {\n            errMsgs.push(\"'timeSeriesStatisticsVariables' contains a name (\"+ varName +\") that does not \" +\n                \"correspond to a sim.model.statistics variable!\");\n          }\n        })\n      }\n    }\n    return errMsgs;\n  }\n};\n\n// Define the schema of the model object \"config\"\nsim.config = {\n  objectName: \"config\",\n  properties: {\n    \"createLog\": {range:\"Boolean\", optional: true, label:\"Log\", hint:\"Create simulation log? (yes/no)\"},\n    \"visualize\": {range:\"Boolean\", optional: true, initialValue: true, label:\"Visualization\",\n        hint:\"Visualize a simulation run? (yes/no)\"},\n    \"stepDuration\": {range:\"NonNegativeInteger\", optional: true, label:\"Step duration:\",\n        hint:\"How long is a simulation step to take? [ms]\"},\n    \"userInteractive\": {range:\"Boolean\", optional: true, label:\"User-interactive\",\n      hint:\"Enable user interactions? (yes/no)\"}\n  }\n};\n// Define the schema of the model object \"sim\"\nsim.objectName = \"sim\";\nsim.properties = {\n  \"step\": {range:\"NonNegativeInteger\", label:\"Step:\", hint:\"Simulation step\"},\n  \"time\": {range:\"Number\", label:\"Time:\", hint:\"Simulation time\"}\n};\nsim.space = {overlayGrid: {}};\n\n// Define the schema of the observationUI\nsim.config.observationUI = {\n  objectName: \"observationUI\",\n  canvas: {},\n  properties: {\n    \"spaceView\": {range: Object, label: \"Space view\"},\n    \"objectViews\": {range: Object, label: \"Object views\"}\n  }\n};\n// define the observationUI.monitor\nsim.config.observationUI.monitor = {};\n// Define the schema of the observationUI.spaceView\nsim.config.observationUI.spaceView = {\n  objectName: \"spaceView\",\n  properties: {\n    \"type\": {range: \"NonEmptyString\", label: \"Space view type\"},\n    \"gridCellSize\": {range: \"PositiveInteger\", label: \"Grid cell size\"}\n  }\n};\n// define the visualization record for non-spatial models\nsim.config.observationUI.vis = {SVG:{}};\n// define the objectViews definition map\nsim.config.observationUI.objectViews = {};\n// define the map for runtime objectViews\nsim.objectViews = {};\n\n// Define the schema of the model object \"model\"\nsim.model = sim.model || {};\nsim.model.v = {};  // definitions of (global) model variables available in sim.v\nsim.model.f = {};  // (global) model functions\n\n//TODO: can this be dropped?\noes.defineSimModelSchema = function () {\n  sim.model.objectName = \"model\";\n  sim.model.properties = {\n    \"name\": {range:\"NonEmptyString\", label:\"Name\"},\n    \"title\": {range:\"NonEmptyString\", label:\"Title\", hint:\"Model title\"},\n    \"shortDescription\": {range:\"String\", optional: true, label:\"Model description\",\n      hint:\"Short description of the simulation model\"},\n    \"systemNarrative\": {range:\"String\", optional: true, label:\"System narrative\",\n        hint:\"Narrative of the system under investigation\"},\n    \"license\": {range:\"String\", optional: true, label:\"License\",\n      hint:\"Copyright license\"},\n    \"creator\": {range:\"String\", optional: true, label:\"Creator\",\n      hint:\"Creator of simulation model\"},\n    \"created\": {range:\"String\", optional: true, label:\"Created on\",\n      hint:\"Creation date\"},\n    \"modified\": {range:\"String\", optional: true, label:\"Modified on\",\n      hint:\"Modification date\"},\n    \"time\": {range:[\"discrete\",\"continuous\"], optional: true,\n      label:\"Time model\", hint:\"Either 'discrete' (default) or 'continuous'\"},\n    \"timeUnit\": {range:[\"ms\",\"s\",\"m\",\"h\",\"D\",\"W\",\"M\",\"Y\"], optional: true,\n        label:\"Time unit\", hint:\"A time unit like 'ms', 's' or 'm'\"},\n    \"timeIncrement\": {range:\"Decimal\", optional: true, label:\"Time increment\",\n        hint:\"By default: 1\"},\n    \"objectTypes\": {range: Array, label:\"Object types\"},\n    \"eventTypes\": {range: Array, label:\"Event types\"},\n    \"activityTypes\": {range: Array, optional: true, label:\"Activity types\"}\n  };\n  // Define the schema of the model object \"model.space\"\n  sim.model.space.objectName = \"spaceModel\";\n  sim.model.space.properties = {\n      \"type\": {range:[\"1D-Grid\",\"IntegerGrid\",\"ObjectGrid\",\"3D-Grid\",\"1D\",\"2D\",\"3D\"], label:\"Space type\"},\n      \"geometry\": {range:[\"TOROIDAL\",\"EUCLIDEAN\"], optional: true, label:\"Space geometry\",\n        hint:\"Either 'TOROIDAL' (default) or 'EUCLIDEAN'\"},\n      \"xMax\": {range:\"NonNegativeInteger\", label:\"Width\", hint:\"Maximum x value\"},\n      \"yMax\": {range:\"NonNegativeInteger\", optional: true, label:\"Height\", hint:\"Maximum y value\"},\n      \"zMax\": {range:\"NonNegativeInteger\", optional: true, label:\"Depth\", hint:\"Maximum z value\"}\n  };\n};\nsim.model.objectName = \"model\";\nsim.model.properties = {\n  \"name\": {range:\"NonEmptyString\", label:\"Name\"},\n  \"title\": {range:\"NonEmptyString\", label:\"Title\", hint:\"Model title\"},\n  \"shortDescription\": {range:\"String\", optional: true, label:\"Model description\",\n    hint:\"Short description of the simulation model\"},\n  \"systemNarrative\": {range:\"String\", optional: true, label:\"System narrative\",\n    hint:\"Narrative of the system under investigation\"},\n  \"license\": {range:\"String\", optional: true, label:\"License\",\n    hint:\"Copyright license\"},\n  \"creator\": {range:\"String\", optional: true, label:\"Creator\",\n    hint:\"Creator of simulation model\"},\n  \"created\": {range:\"String\", optional: true, label:\"Created on\",\n    hint:\"Creation date\"},\n  \"modified\": {range:\"String\", optional: true, label:\"Modified on\",\n    hint:\"Modification date\"},\n  \"time\": {range:[\"discrete\",\"continuous\"], optional: true,\n    label:\"Time model\", hint:\"Either 'discrete' (default) or 'continuous'\"},\n  \"timeUnit\": {range:[\"ms\",\"s\",\"m\",\"h\",\"D\",\"W\",\"M\",\"Y\"], optional: true,\n    label:\"Time unit\", hint:\"A time unit like 'ms', 's' or 'm'\"},\n  \"timeIncrement\": {range:\"Decimal\", optional: true, label:\"Time increment\",\n    hint:\"By default: 1\"},\n  \"objectTypes\": {range: Array, label:\"Object types\"},\n  \"eventTypes\": {range: Array, label:\"Event types\"},\n  \"activityTypes\": {range: Array, optional: true, label:\"Activity types\"}\n};\n// Define the schema of the model object \"model.space\"\nsim.model.space = sim.model.space || {};\nsim.model.space.objectName = \"spaceModel\";\nsim.model.space.properties = {\n  \"type\": {range:[\"1D-Grid\",\"IntegerGrid\",\"ObjectGrid\",\"3D-Grid\",\"1D\",\"2D\",\"3D\"], label:\"Space type\"},\n  \"geometry\": {range:[\"TOROIDAL\",\"EUCLIDEAN\"], optional: true, label:\"Space geometry\",\n    hint:\"Either 'TOROIDAL' (default) or 'EUCLIDEAN'\"},\n  \"xMax\": {range:\"NonNegativeInteger\", label:\"Width\", hint:\"Maximum x value\"},\n  \"yMax\": {range:\"NonNegativeInteger\", optional: true, label:\"Height\", hint:\"Maximum y value\"},\n  \"zMax\": {range:\"NonNegativeInteger\", optional: true, label:\"Depth\", hint:\"Maximum z value\"}\n};\n\n// Define the schema of the model object \"scenario.initialState\"\nsim.scenario.initialState = {\n  objectName: \"initialState\",\n  properties: {\n    // a map, and therefore an instance of Object\n    \"objects\": {range: Object, optional: true, label:\"Initial objects\"},\n    // a map, and therefore an instance of Object\n    \"events\": {range: Object, optional: true, label:\"Initial events\"}\n  },\n  validate: function () {\n    var errors=[];\n    var isProcNetSim = this.objects &&\n            Object.keys( this.objects).some( function (objIdStr) {\n              return this.objects[objIdStr].typeName === \"eNTRYnODE\";\n            }, this);\n    if (!this.events && !isProcNetSim &&\n        !(sim.model.timeIncrement || sim.model.OnEachTimeStep)) {\n      errors.push(\"There must be at least one initial event when neither \" +\n          \"a time increment nor an 'OnEachTimeStep' method has been defined.\");\n    }\n    if (!this.objects) return;\n    Object.keys( this.objects).forEach( function (objIdStr) {\n      var slots={}, Class=null;\n      // check object IDs\n      if (String( parseInt( objIdStr)) !== objIdStr) {\n        errors.push(\"An object has a non-integer ID: \"+ objIdStr);\n      }\n      slots = this.objects[objIdStr];\n      Class = cLASS[slots.typeName];\n      Object.keys( slots).forEach( function (p) {\n        var decl = Class.properties[p], constrVio=null;\n        if (decl) {\n          constrVio = cLASS.check( p, decl, slots[p]);\n          if (!(constrVio instanceof NoConstraintViolation)) {\n            errors.push( slots.typeName +\"(\"+ objIdStr +\"): \"+ constrVio.message);\n          }\n        }\n      });\n    }, this);\n    return errors;\n  }\n};\n// Define the schema of the model object \"scenario.initialStateUI\"\nsim.scenario.initialStateUI = {\n  objectName: \"initialStateUI\",\n  properties: {\n    \"editableProperties\": {range: Object, label:\"Editable properties\"}\n  },\n  validate: function () {\n    if (!this.editableProperties) return;\n    Object.keys( this.editableProperties).forEach( function (className) {\n      // ...\n    }, this);\n  }\n};\nsim.scenario.initialStateUI.editableProperties = {};\n\n/**\n * Check correctness of scenario/model definitions\n * @method\n * @author Gerd Wagner\n */\noes.verifySimulation = function () {\n  var errMsgs=[];\n\n  function checkModelObject( mo) {  // mo = model object\n    var props = mo.properties, errors=[];\n    if (!props) {\n      errors.push(\"The model object \"+ mo.objectName +\" does not have a declaration of 'properties'!\");\n      return;\n    }\n    // check property slots\n    Object.keys( props).forEach( function (prop) {\n      var constrVio = cLASS.check( prop, props[prop], mo[prop]);\n      if (!(constrVio instanceof NoConstraintViolation)) {\n        errors.push( constrVio.constructor.name +\": \"+ constrVio.message);\n      }\n    });\n    if (mo.validate) {  // invoke specific check method\n      errors.merge( mo.validate());\n    }\n    if (errors.length > 0) {\n      errors.forEach( function (err, i) {\n        errors[i] = \"[\"+ mo.objectName +\"] \" + err;\n      });\n    }\n    return errors;\n  }\n  // check model definition\n  errMsgs.merge( checkModelObject( sim.model));\n  // check SPACE model definition\n  if (sim.model.space.type) {\n    errMsgs.merge( checkModelObject( sim.model.space));\n  }\n  // check scenario definition\n  errMsgs.merge( checkModelObject( sim.scenario));\n  // check experiment definition\n  if (sim.experiment.replications > 0) errMsgs.merge( checkModelObject( sim.experiment));\n  // check initial state definition\n  errMsgs.merge( checkModelObject( sim.scenario.initialState));\n  // check definitions of STATISTICS variables\n  if (sim.model.statistics) {\n    Object.keys( sim.model.statistics).forEach( function (varName) {\n      var statVar = sim.model.statistics[varName],\n          OT = statVar.objectType,\n          aggrFunc = statVar.aggregationFunction;\n      // statistics variable bound to a model variable\n      if (statVar.globalVariable) {\n        if (sim.model.v[statVar.globalVariable] === undefined)\n          errMsgs.push( \"[Statistics] Global model variable <var>\"+\n              statVar.globalVariable +\"</var> has not been defined!\");\n      }\n      if (OT && !sim.model.objectTypes.includes( OT)) {\n        errMsgs.push( \"[Statistics] Specified object type <var>\"+\n            OT +\"</var> is not included in sim.model.objectTypes!\");\n      }\n      // variable bound to specific object\n      if (statVar.objectIdRef && !sim.objects[statVar.objectIdRef]) {\n        errMsgs.push( \"[Statistics] Invalid definition of statistics variable <var>\"+\n            varName +\"</var>: There is no object with ID \"+ statVar.objectIdRef +\"!\");\n      }\n      // aggregation function must be defined\n      if (aggrFunc && typeof( oes.stat[aggrFunc]) !== 'function') {\n        errMsgs.push( \"[Statistics] Invalid definition of statistics variable <var>\"+\n            varName +\"</var>: <code>\"+ aggrFunc +\n            \"</code> is not an admissible aggregation function name!\");\n      }\n      // if variable is bound to a property, objectIdRef or objectType must be provided\n      if (statVar.property && !statVar.objectIdRef && !(OT && cLASS[OT])) {\n        errMsgs.push( \"[Statistics] Invalid definition of statistics variable <var>\"+\n            varName +\"</var>:\"+ (!OT ? \" object type name missing!\" :\n                                 !cLASS[OT] ? \" object type \"+ OT +\" not defined!\" :\n                                 !aggrFunc ? \" aggregationFunction missing!\":\"\"));\n      }\n      //TODO: add further checks!\n    });\n  }\n  errMsgs.concat( oes.checkModelConstraints());\n  return errMsgs;\n};\n/**\n * Determine if a simulation is based on a PN model\n */\noes.isProcNetModel = function () {\n  var initState = sim.scenario.initialState,\n      initialObjDefs = initState.objects,\n      initialObj= [], keys=[], key=\"\", i=0;\n  if (initialObjDefs) {  // a map of object definitions\n    keys = Object.keys( initialObjDefs);\n    for (i=0; i < keys.length; i++) {\n      key = keys[i];\n      initialObj = initialObjDefs[key];\n      if (initialObj.typeName === \"eNTRYnODE\") return true;\n    }\n  }\n  return false;\n};\n/**\n * Check model constraints\n * @method\n * @author Gerd Wagner\n */\noes.checkModelConstraints = function (params) {\n  var errMsgs=[];\n  if (sim.model.constraints) {\n    Object.keys( sim.model.constraints).forEach( function (constrName) {\n      var constraint = sim.model.constraints[constrName], msg=\"\";\n      if (!constraint()) {\n        msg = \"The constraint '\"+ constrName +\"' is violated at step \"+ sim.step;\n        if (params && params.log) console.log( msg);\n        else errMsgs.push( msg);\n      }\n    })\n  }\n  return errMsgs;\n};\n/**\n * Set up Storage Management\n *\n * @method\n * @author Gerd Wagner\n */\noes.setupStorageManagement = function (dbName) {\n  var storageAdapter = {dbName: dbName};\n  if (!('indexedDB' in self)) {\n    console.log(\"This browser doesn't support IndexedDB. Falling back to LocalStorage.\");\n    storageAdapter.name = \"LocalStorage\";\n  } else {\n    storageAdapter.name = \"IndexedDB\";\n  }\n  sim.storeMan = new sTORAGEmANAGER( storageAdapter);\n  //sim.storeMan.createEmptyDb().then( oes.setupFrontEndSimEnv);\n  // last step in setupFrontEndSimEnv, then wait for user actions\n  sim.storeMan.createEmptyDb([oes.ExperimentRun, oes.ExperimentScenarioRun]).then( function () {\n    console.log(\"Empty IndexedDB created.\");\n  });\n};\n/**\n * Set up front-end simulation environment\n *\n * @method\n * @author Gerd Wagner\n */\noes.setupFrontEndSimEnv = function () {\n  var errors=[], el=null;\n  sim.initializeSimulator();\n  // set up initial state\n  sim.initializeModelVariables();\n  sim.createInitialObjEvt();\n  if (Object.keys( oes.EntryNode.instances).length > 0) {\n    oes.setupProcNetStatistics();\n  }\n  // initialize statistics\n  if (sim.model.statistics) oes.stat.initialize();\n  // check simulation definition constraints\n  if (oes.loadManager && oes.loadManager.codeLoadingMode !== \"deploy\") {\n    errors = oes.verifySimulation();\n    if (errors.length > 0) {\n      el = dom.createElement(\"div\", {id:\"errors\"});\n      el.appendChild( dom.createElement(\"h1\", {content: \"Errors\"}));\n      errors.forEach( function (err) {\n        el.appendChild( dom.createElement(\"p\", {content: err}));\n      });\n      document.body.insertBefore( el, document.body.firstElementChild);\n    } else {\n      console.log(\"No errors detected in \"+ oes.loadManager.codeLoadingMode + \" mode.\");\n    }\n  }\n  // set up the UI\n  oes.ui.setupUI();\n  // visualize initial state (step 0)\n  if (sim.config.visualize) oes.ui.visualizeStep();\n};\n\n/*******************************************************************************\n * EventList maintains an ordered list of events using Binary Heap\n * \n * @copyright Copyright 2018 Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Luis Gustavo Nardin\n ******************************************************************************/\nvar oes = oes || {};\noes.EventList = function EventList ( a ) {\n  this.heap = new BinaryHeap( function ( e ) {\n    return e.occTime;\n  } );\n};\noes.EventList.prototype.add = function ( e ) {\n  if (sim.model.timeRoundingDecimalPlaces) {\n    e.occTime = Math.round( e.occTime * sim.timeRoundingFactor) /\n        sim.timeRoundingFactor;\n  }\n  this.heap.push( e );\n};\noes.EventList.prototype.getNextOccurrenceTime = function () {\n  if ( !this.heap.isEmpty() ) {\n    return this.heap.getFirst().occTime;\n  } else {\n    return 0;\n  }\n};\noes.EventList.prototype.getNextEvent = function () {\n  if ( !this.heap.isEmpty() ) {\n    return this.heap.pop();\n  } else {\n    return null;\n  }\n};\noes.EventList.prototype.getAllEvents = function () {\n  return this.heap.content;\n};\noes.EventList.prototype.isEmpty = function () {\n  return this.heap.isEmpty();\n};\noes.EventList.prototype.removeNextEvents = function () {\n  var nextTime = 0, nextEvents = [];\n  if ( this.heap.isEmpty() ) {\n    return [];\n  }\n  nextTime = this.heap.getFirst().occTime;\n  while ( !this.heap.isEmpty() &&\n      this.heap.getFirst().occTime === nextTime ) {\n    nextEvents.push( this.heap.pop() );\n  }\n  return nextEvents;\n};\noes.EventList.prototype.clear = function ( e ) {\n  this.heap.clear();\n};\n\noes.EventList.prototype.containsEventOfType = function ( evtType ) {\n  return this.heap.getContent().some( function (evt) {\n    return evt.constructor.Name === evtType;\n  } );\n};\noes.EventList.prototype.getEventsOfType = function ( evtType ) {\n  return this.heap.getContent().filter( function (evt) {\n    return evt.constructor.Name === evtType;\n  } );\n};\noes.EventList.prototype.toString = function () {\n  var str = \"\";\n  if ( !this.heap.isEmpty() ) {\n    str = this.heap.getContent().reduce( function ( serialization, e ) {\n      return serialization + \", \" + e.toLogString();\n    }, \"\" );\n    str = str.slice( 1 );\n  }\n  return str;\n};\n\n/**\n * @fileOverview Variables and procedures for (ex-post) statitsics\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Mircea Diaconescu\n * @author Gerd Wagner\n * @license The MIT License (MIT)\n */\n// create namespace oes if not already created by some other \"module\"\nif (typeof oes !== \"object\") var oes = {};\n/**\n * Computation of the simulation statistics.\n *\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Mircea Diaconescu\n * @license The MIT License (MIT)\n */\noes.stat = {\n  timeSeriesCompressionSteps: 1 // length of array values to be compressed into one value\n};\nsim.stat = {  // run-time statistics variables\n  timeSeries: {}\n};\nsim.aux = sim.aux || {}; // auxiliary variables\nsim.aux.stat = {\n  prevValue: {}\n};\n/**\n * Initialize the ex-post statistics\n */\noes.stat.initialize = function () {\n  var aggReturnType = {  // stores the return types of various aggregation functions\n    'avg': 'Decimal'\n  };\n  Object.keys( sim.model.statistics).forEach( function (varName) {\n    var statVar = sim.model.statistics[varName],\n        initialVal = statVar.initialValue || 0,\n        OT=\"\", objIdRefStr=\"\", objectRef=null,\n        propDecl=\"\", globVar=\"\";\n    statVar.name = varName;\n    // is the statistics variable bound to a global variable?\n    if (statVar.globalVariable) {\n      globVar = statVar.globalVariable;\n      if (typeof sim.model.v[globVar] === \"object\") {\n        initialVal = sim.model.v[globVar].initialValue || 0;\n      } else initialVal = sim.model.v[globVar];\n    } else if (statVar.property && statVar.objectIdRef) {\n      // the variable is bound to a property slot of a specific object\n      objIdRefStr = String( statVar.objectIdRef);\n      if (statVar.objectType) OT = statVar.objectType;\n      else OT = sim.objects[objIdRefStr].constructor.Name;\n      objectRef = cLASS[OT].instances[objIdRefStr];\n      if (objectRef) {\n        statVar.objectRef = objectRef;  // store reference to the object\n        // the statistics variable default range is the property range\n        if (!statVar.range) {\n          if (statVar.aggregationFunction &&\n              aggReturnType[statVar.aggregationFunction]) {\n            statVar.range = aggReturnType[statVar.aggregationFunction];\n          } else {\n            propDecl = cLASS[objectRef.constructor.Name].properties[statVar.property];\n            statVar.range = propDecl.range;\n          }\n        }\n        initialVal = objectRef[statVar.property];\n      }\n    } else if (statVar.property && statVar.objectType) {\n      OT = statVar.objectType;\n      if (statVar.aggregationFunction) {\n        initialVal = 0;\n        if (aggReturnType[statVar.aggregationFunction]) {\n          statVar.range = aggReturnType[statVar.aggregationFunction];\n        }\n      } else { // the variable is bound to a collection of property slots\n        /*\n        propDecl = cLASS[OT].properties[statVar.property];\n        statVar.range = propDecl.range;\n        */\n        statVar.hasRecordRange = true;\n        initialVal = {};\n        Object.keys( cLASS[OT].instances).forEach( function (objIdStr) {\n          initialVal[objIdStr] = cLASS[OT].instances[objIdStr][statVar.property];\n        });\n      }\n    } else if (statVar.gridCellProperty && sim.space.grid) {\n      // statistics variable for grid cell property\n      if (!statVar.range) {\n        if (statVar.aggregationFunction &&\n          aggReturnType[statVar.aggregationFunction]) {\n          statVar.range = aggReturnType[statVar.aggregationFunction];\n        } else {\n          propDecl = sim.space.grid[0][0].constructor.properties[statVar.gridCellProperty];\n          if (propDecl)  statVar.range = propDecl.range;\n        }\n      }\n    }\n    // is the variable's time series to be created?\n    statVar.createTimeSeries = (statVar.showTimeSeries || sim.experiment.timeSeriesStatisticsVariables &&\n        sim.experiment.timeSeriesStatisticsVariables.includes( statVar));\n    if (statVar.createTimeSeries) {\n      if (sim.timeIncrement === undefined){\n        sim.stat.timeSeries[varName] = [[],[]];\n      } else {\n        sim.stat.timeSeries[varName] = [];\n      }\n    }\n    // is variable bound to a time series aggregation?\n    statVar.isBoundToTimeSeriesAggregate = (statVar.aggregationFunction &&\n        (statVar.objectIdRef && statVar.property || statVar.globalVariable));\n    // is variable bound to an aggregate over an ObjectType population?\n    statVar.isBoundToPopulationAggregate =\n        (!statVar.objectIdRef && statVar.property && OT);\n    // determine Integer range\n    if (statVar.range) {\n      statVar.hasIntegerRange = cLASS.isIntegerType( statVar.range);\n    } else if (statVar.globalVariable && typeof sim.model.v[globVar] === \"object\" &&\n             statVar.aggregationFunction && statVar.aggregationFunction !== \"avg\") {\n      statVar.hasIntegerRange = cLASS.isIntegerType( sim.model.v[globVar].range);\n    } else {\n      statVar.hasIntegerRange = false;\n    }\n    // initialize runtime statistics variables in sim.stat\n    if (statVar.hasIntegerRange) sim.stat[varName] = parseInt( initialVal);\n    else sim.stat[varName] = initialVal;\n    // store as previous value\n    sim.aux.stat.prevValue[varName] = sim.stat[varName];\n  });\n  // initialize resource utilization statistics\n  if (sim.model.activityTypes && sim.model.activityTypes.length > 0) {\n    sim.stat.resUtil = {};\n    sim.model.activityTypes.forEach( function (aT) {\n      sim.stat.resUtil[aT] = {};\n    });\n  }\n  // initialize PN statistics\n  if (Object.keys( oes.ProcessingNode.instances).length > 0) {\n    sim.stat.resUtil = sim.stat.resUtil || {};\n    sim.stat.resUtil[\"pROCESSINGaCTIVITY\"] = {};\n  }\n};\n/**\n * The timeSeries arrays are limited in length for two reasons:\n * - large arrays results in slowing down the simulation\n * - we have limited pixels on the screen to show the statistics graphs\n *\n * Actually, the maximum length is limited to the number of pixels\n * available for the statistics graphs, so one time series value for\n * each one physical pixels. This is achieved by compressing the\n * array, averaging groups of values to one value.\n *\n * @param maxLength\n *    the maximum allowed length of the timeSeries array\n */\noes.stat.prepareTimeSeriesCompression = function (maxLength) {\n  maxLength = maxLength || sim.scenario.simulationEndTime; // defaults to \"no restriction - all steps\"\n  oes.stat.timeSeriesCompressionSteps = Math.floor(sim.scenario.simulationEndTime / maxLength);\n  if (oes.stat.timeSeriesCompressionSteps < 1) oes.stat.timeSeriesCompressionSteps = 1;\n  console.log(\"Statistics: timeSeriesCompressionSteps=\"\n    + oes.stat.timeSeriesCompressionSteps + \" (1 means no compression)\");\n};\n/**\n * Reset the statistics variables. This means that any computed\n * value is reset to the initial value and all the connection with\n * object(s) references are recreated.\n */\noes.stat.reset = function () {\n  oes.stat.initialize();\n};\n\n/**\n * Update the statistic variables at the end of each simulation step.\n */\noes.stat.updateStatistics = function () {\n  var i=0, statVar=null,\n      statVarNames = Object.keys( sim.model.statistics),\n      n = statVarNames.length;\n  for (i=0; i<n; i++) {\n    statVar = sim.model.statistics[statVarNames[i]];\n    // computeOnlyAtEnd statistic variables are ignored at this point\n    if (!statVar.computeOnlyAtEnd) oes.stat.updateStatisticsVariable( statVar);\n  }\n};\n\n/**\n * Update a statistics variable X and assign the result to sim.stat[\"X\"]\n * @param statVar  the statistics variable declaration\n */\noes.stat.updateStatisticsVariable = function (statVar) {\n  var varName = statVar.name, valueAtCurrentStep;\n  var cellsOnX = 0, cellsOnY = 0, i = 0, j = 0;\n  var grid=null, sum=0, pName=\"\", OT=null;\n  // expression/function is used to compute the value\n  if (typeof statVar.expression === 'function') {\n    valueAtCurrentStep = statVar.expression() || 0;\n  } else if (statVar.globalVariable) { // value obtained from a global variable\n    valueAtCurrentStep = sim.v[statVar.globalVariable] || 0;\n  } else if (statVar.objectRef) { // value obtained from an object's property slot\n    valueAtCurrentStep = statVar.objectRef[statVar.property] || 0;\n  } else if (statVar.property && statVar.objectType && !statVar.aggregationFunction) {\n    // the variable is bound to a collection of property slots\n    valueAtCurrentStep = {};\n    OT = cLASS[statVar.objectType];\n    Object.keys( OT.instances).forEach( function (objIdStr) {\n      valueAtCurrentStep[objIdStr] = OT.instances[objIdStr][statVar.property];\n    });\n  } else if (statVar.entryNode) { // PN statistics\n    valueAtCurrentStep = statVar.entryNode.nmrOfArrivedObjects || 0;\n  } else if (statVar.exitNode) { // PN statistics\n    valueAtCurrentStep = statVar.exitNode.nmrOfDepartedObjects || 0;\n  } else if (statVar.gridCellProperty) {\n    grid = sim.space.grid;\n    cellsOnX = grid.length;\n    cellsOnY = grid[0].length;\n    pName = statVar.gridCellProperty;\n    for (i = 0; i < cellsOnX; i++) {\n      for (j = 0; j < cellsOnY; j++) sum += (grid[i][j])[pName];\n    }\n    valueAtCurrentStep = sum / (cellsOnX * cellsOnY);\n    if (statVar.aggregationFunction) {\n      valueAtCurrentStep = oes.stat[statVar.aggregationFunction](\n        sim.aux.stat.prevValue[varName], valueAtCurrentStep);\n    }\n  } else {  // value computed manually in the simulation scenario\n    valueAtCurrentStep = sim.stat[varName];\n  }\n  //TODO: support TimeSeriesAggregate of PopulationAggregate\n  if (statVar.isBoundToTimeSeriesAggregate) {\n    valueAtCurrentStep = oes.stat[statVar.aggregationFunction](\n        sim.aux.stat.prevValue[varName], valueAtCurrentStep);\n  } else if (statVar.isBoundToPopulationAggregate) {\n    valueAtCurrentStep = oes.stat.computePopulationAggregate(statVar);\n  }\n  // format integer values\n  if (statVar.hasIntegerRange) sim.stat[varName] = parseInt( valueAtCurrentStep);\n  else sim.stat[varName] = valueAtCurrentStep;\n  // check if the variable's time series has to be stored/returned\n  if (statVar.createTimeSeries) {\n    if (sim.timeIncrement) {\n      //sim.stat.timeSeries[varName][sim.step] = sim.stat[varName];\n      sim.stat.timeSeries[varName].push( sim.stat[varName]);\n      if (oes.stat.timeSeriesCompressionSteps > 1\n          && sim.step % oes.stat.timeSeriesCompressionSteps === 0) {\n        oes.stat.compressTimeSeries( sim.stat.timeSeries[varName]);\n      }\n    } else {  // next-event time progression\n      sim.stat.timeSeries[varName][0][sim.step] = sim.time;\n      // TODO: check how we can average steps for time progression case\n      sim.stat.timeSeries[varName][1][sim.step] = sim.stat[varName];\n      // TODO: check how we can average statistic values for time progression case\n    }\n  }\n  // assign current value to previous value\n  sim.aux.stat.prevValue[varName] = sim.stat[varName];\n};\n\n/**\n * Compress time series to keep its length in a specified\n * range, avoiding long arrays that slow down the simulation.\n * @param ts\n *    the time series to compress\n */\noes.stat.compressTimeSeries = function (ts) {\n  var avgLen = oes.stat.timeSeriesCompressionSteps;\n  var i = 0, n = ts.length, avg = 0;\n  // compute average value for the latest set, which will be compressed\n  for (i = n - avgLen; i < n; i++) avg += ts[i];\n  // remove averaged values and append the compressed (average) value\n  ts.splice(n-avgLen-1, avgLen, avg /= avgLen);\n};\n\n/**\n * Compute a Population Aggregate\n */\noes.stat.computePopulationAggregate = function (statVar) {\n  var OT = statVar.objectType,\n      objIDs = Object.keys( cLASS[OT].instances),\n      n = objIDs.length,\n      aggrF = statVar.aggregationFunction,\n      aggr=0, i=0;\n  switch (aggrF) {\n  case \"min\":\n  case \"max\":\n    for (i=0; i < n; i++) {\n      aggr = Math[aggrF]( aggr, cLASS[OT].instances[String(id)][statVar.property]);\n    }\n    break;\n  case \"sum\":\n  case \"avg\":\n    for (i=0; i < n; i++) {\n      aggr += cLASS[OT].instances[String(id)][statVar.property];\n    }\n    if (aggrF === \"avg\") aggr = aggr/n;\n    break;\n  }\n  return aggr;\n};\n/**\n * Compute the values of the statistic variables which are only required\n * to be computed at the simulation end. This method has to be called when\n * the simulation ends.\n */\noes.stat.computeOnlyAtEndStatistics = function () {\n  Object.keys( sim.model.statistics).forEach( function (varName) {\n    var statVar = sim.model.statistics[varName];\n    if (statVar.computeOnlyAtEnd) oes.stat.updateStatisticsVariable( statVar);\n  });\n};\n\n/**\n * Compute the <code>max</code> aggregation function value.\n * @param oldValue\n * @param newValue\n *\n */\noes.stat.max = function (oldValue, newValue) {\n  return Math.max( oldValue, newValue);\n};\n\n/**\n * Compute the <code>min</code> aggregation function value.\n * @param oldValue\n * @param newValue\n *\n */\noes.stat.min = function (oldValue, newValue) {\n  return Math.min( oldValue, newValue);\n};\n/**\n * Compute the <code>sum</code> aggregation function value.\n * @param oldValue\n * @param newValue\n *\n */\noes.stat.sum = function (oldValue, newValue) {\n  return oldValue + newValue;\n};\n/**\n * Compute the <code>avg</code> (average, arithmetic mean) aggregation function value.\n * @param oldValue\n * @param newValue\n *\n */\noes.stat.avg = function (oldValue, newValue) {\n  if (sim.step >= 1) return (oldValue + (newValue - oldValue) / (sim.step + 1));\n  else return oldValue;\n};\n/**\n * Summary statistics record\n */\noes.stat.summary = {\n  average: {label:\"Average\", f: math.mean},\n  stdDev: {label:\"Std.dev.\", f: math.stdDev},\n  min: {label:\"Minimum\", f: Array.min},\n  max: {label:\"Maximum\", f: Array.max},\n  confIntLowerBound: {label: \"Conf.Int.Lower\", f: function ( data ) {\n    sim.stat.CurrentCI = math.confInt( data ); // {lowerBound: x, upperBound: y}\n    return sim.stat.CurrentCI.lowerBound;\n  }},\n  confIntUpperBound: {label: \"Conf.Int.Upper\", f: function () {\n    return sim.stat.CurrentCI.upperBound;\n  }}\n};\n/**\n * @fileOverview A JavaScript implementation of an Object-Event Simulator defined as\n * a JS object \"sim\". The simulator is associated with a simulation model (sim.model)\n * and one or more simulation scenarios (sim.scenarios).\n *\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Gerd Wagner\n * @license The MIT License (MIT)\n *\n * Integrity *constraints* that must be satisfied at any simulation step can be defined\n * as Boolean functions in the map \"model.constraints\" with constraint names being the\n * keys. They are currently checked for the initial state only (in \"setupInitialState\").\n * In future versions there may be an option that constraints are checked in all\n * simulation steps for catching more model errors.\n */\n/*\nImprovements/extensions\nv1\n - support the definition of a \"warm-up period\"\n - drop the activityType attribute of ProcessingActivityStart (and -End?) since it is always \"pROCESSINGaCTIVITY\"\n - allow creating new events \n   (a) without an occTime setting, such that they are scheduled with a delay of nextMomentDeltaT\n   (b) without an occTime setting, but with a \"delay\"\n - refactor createInitialObjEvt into a create and a reset procedure such that already created initial objects\n    are not deleted, but reset, when rerunning a simulation\n - make constraint checking on object/event creation conditional depending on\n       areConstraintsToBeChecked = sim.isConstraintCheckingTurnedOn ||\n          sim.isConstraintCheckingTurnedOn === undefined && oes.loadManager &&\n          oes.loadManager.codeLoadingMode !== \"deploy\";\n - improve the initial state definition UI:\n   + support value changes via IndexedDB\n   + allow adding/dropping objects in the ClassPopulationWidget\n   + support enumeration attributes in the ClassPopulationWidget\n - Add observation UIs for visualizing variables in \"monitors\"\n\n - make a sims/basic-tests.html that invokes one or more seeded scenario simulations and checks statistics results\n - Define set/get for scenario.visualize and use the setter for dropping/setting-up the visualization (canvas)\n\n - Find out what is the meaning of \"variable\" versus \"parameter\" in AnyLogic\n\n - run experiment scenarios in parallel worker threads using the navigator.hardwareConcurrency information\n   (see https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency)\n\n - improve clock-time measuring and support real-time simulation enabled by realtimeFactor set to 1\n - Refactor the simulation step/loop by parametrizing pre-defined events from an extension library (such as \"PN Models\")\n - New model constraint checks:\n   + prevent the use of pre-defined cLASS names (\"aRRIVAL\", etc.) and predefined property names (oes.predfinedProperties)\n\n - Implement support for the \"recurrence\" attribute of entry nodes\n - Allow setting a waiting timeout for the input queues of processing nodes (corresponding\n   to AnyLogic's \"Enable exit on timeout\")\n - Implement support for the \"capacity\" attribute of processing nodes (by popping/forwarding\n   more than one processing objects)\n - Allow processing nodes to specify a maximum queue length (limited queue capacity)\n\n *** later ***\n - Add exploration model\n - Support using variants of the same model (sim.models)\n - UI for defining ex-post statistics\n\nv2\n - extend mODELcLASS with object pools\n - analyze use of modules\n - concurrent event processing with deferred state changes\n - add agents\n - add participation model\n */\n\n/*******************************************************\n Initializations\n ********************************************************/\nsim.ui = sim.ui || {}; // runtime UI components\n/*******************************************************\n Add object to simulation objects\n *******************************************************\n * @author Gerd Wagner\n * @method\n * @param o  the object to be added\n */\nsim.addObject = function (o) {\n  if (!(o instanceof oes.Object)) {\n    console.log( o.toString() +\" is not an oBJECT!\");\n    return;\n  }\n  if (!o.id) o.id = sim.idCounter++;\n  sim.objects[String(o.id)] = o;\n  if (o.name) {\n    if (typeof o.name !== \"string\" ) {\n      console.log(\"oBJECT \"+ o.toString() +\" has a non-string name\"+ o.name);\n      return;\n    } else sim.namedObjects[o.name] = o;\n  }\n  return o;\n};\nsim.addObjects = function (objArr) {\n  objArr.forEach( function (o) {sim.addObject(o)});\n  return objArr;\n};\n/*******************************************************\n Remove an object from the set of simulation objects\n *******************************************************\n * @author Gerd Wagner\n * @method\n * @param o  the object to be removed\n */\nsim.removeObject = function (o) {\n  var ObjectClass=null;\n  if (!(o instanceof oes.Object)) {\n    console.log( JSON.stringify(o) +\" is not an OES object!\");\n    return;\n  }\n  if (!sim.objects[String(o.id)]) {\n    console.log( JSON.stringify(o) +\"@\"+ sim.time +\n        \" has not been registered as a simulation object!\");\n    return;\n  }\n  ObjectClass = o.constructor;\n  delete ObjectClass.instances[String(o.id)];\n  delete sim.objects[String(o.id)];\n};\nsim.removeObjectById = function (id) {\n  var ObjectClass=null;\n  if (typeof id === \"string\") id = parseInt(id);\n  if (!Number.isInteger( id)) {\n    console.log( JSON.stringify(id) +\" is not an integer!\");\n    return;\n  }\n  if (!sim.objects[String(id)]) {\n    console.log( JSON.stringify(id) +\" is not an ID of a registered simulation object!\");\n    return;\n  }\n  ObjectClass = o.constructor;\n  delete ObjectClass.instances[id];\n  delete sim.objects[id];\n};\n/*******************************************************\n Schedule an event by adding it to the FEL\n *******************************************************\n * @author Gerd Wagner\n * @method\n * @param e  the event to be scheduled\n */\nsim.scheduleEvent = function (e) {\n  if (e instanceof oes.Event) sim.FEL.add(e);\n  else {\n    console.log( e.toString() +\" is not an eVENT!\");\n  }\n};\n/********************************************************\n * Initialize Model Variables\n ********************************************************/\nsim.initializeModelVariables = function (expParamSlots) {\n  sim.v = {};  // a map of global variables (accessible by name)\n  // set up the map of model variables\n  sim.model.v = sim.model.v || {};\n  Object.keys( sim.model.v).forEach( function (varName) {\n    var mv = sim.model.v[varName];\n    if (typeof expParamSlots === \"object\" && expParamSlots[varName]) {\n      // assign experiment parameter value\n      sim.v[varName] = expParamSlots[varName];\n    } else {\n      sim.v[varName] = (mv.value !== undefined) ? mv.value : mv.initialValue;\n    }\n  });\n}\n/********************************************************\n * Create Initial Objects and Events\n ********************************************************/\nsim.createInitialObjEvt = function () {\n  var initState = sim.scenario.initialState,\n      initialEvtDefs=null, initialObjDefs=null, entryNodes={};\n  // clear initial state data structures\n  sim.objects = {};  // a map of all objects (accessible by ID)\n  sim.namedObjects = {};  // a map of objects accessible by a unique name\n  sim.FEL.clear();\n  sim.ongoingActivities = {};  // a map of all ongoing activities accessible by ID\n  // clear the cLASS populations of model-specific object types\n  sim.model.objectTypes.forEach( function (objTypeName) {\n    cLASS[objTypeName].instances = {};\n  });\n  // clear the cLASS populations of pre-defined object and activity types\n  [\"eNTRYnODE\",\"pROCESSINGnODE\",\"eXITnODE\",\"pROCESSINGoBJECT\",\"pROCESSINGaCTIVITY\"].\n      forEach( function (objTypeName) {cLASS[objTypeName].instances = {};});\n  // allow parametrized object/event definitions\n  if (typeof sim.scenario.setupInitialState === \"function\") {\n    sim.scenario.setupInitialState();\n  }\n  // register initial objects\n  initialObjDefs = initState.objects;\n  if (initialObjDefs) {  // a map of object definitions\n    Object.keys( initialObjDefs).forEach( function (objIdStr) {\n      var objSlots = util.cloneObject( initialObjDefs[objIdStr]),\n          objTypeName = objSlots.typeName,\n          ObjType = cLASS[objTypeName], obj=null;\n      // fatal error: object type class not found\n      if (!ObjType) throw \"Missing object type class '\" + objTypeName + \"'!\";\n      objSlots.id = parseInt( objIdStr);\n      delete objSlots.typeName;  // remove typeName slot\n      try {obj = new ObjType( objSlots);}\n      catch (e) {\n        if (typeof e !== \"object\") console.log( e);\n        else console.log( e.constructor.name +\": \"+ e.message);\n        obj = null;\n      }\n      if (obj) sim.addObject( obj);\n    })\n  }\n  // convert ID references to object references (in a second pass)\n  Object.keys( sim.objects).forEach( function (objIdStr) {\n    var obj = sim.objects[objIdStr],\n        propDefs = cLASS[obj.constructor.Name].properties;\n    Object.keys( obj).forEach( function (p) {\n      if (!propDefs[p]) {\n        if (typeof obj[p] !== \"function\" && !oes.predfinedProperties.includes(p)) {\n          console.log(\"Undeclared prop: \"+ p +\" for obj \"+ objIdStr);\n        }\n        return;\n      }\n      var range = propDefs[p].range, val = obj[p], rangeClasses=[];\n      if (typeof range === \"string\" && typeof val !== \"object\" &&\n          (cLASS[range] || range.includes(\"|\"))) {\n        if (range.includes(\"|\")) {\n          rangeClasses = range.split(\"|\");\n          // check referential integrity: val must be in some range class\n          if (!rangeClasses.some( function (rc) {\n                return cLASS[rc].instances[String(val)];\n              })) {\n            throw \"Referential integrity violation: \"+ val +\" does not reference any of \"+\n                range +\"!\";\n          }\n        } else if (!(sim.objects[String(val)] instanceof cLASS[range])) {  // also allows superclasses\n            throw \"Referential integrity violation: \"+ val +\" does not reference a \"+ range +\"!\";\n        }\n        obj[p] = sim.objects[String(val)];\n      }\n    });\n  });\n  // schedule initial events\n  initialEvtDefs = initState.events;\n  if (initialEvtDefs) {  // an array of JS object definitions\n    initialEvtDefs.forEach( function (evt) {\n      var e = util.cloneObject( evt),  // clone event object definition\n          evtTypeName = e.typeName,\n          EvtType = cLASS[evtTypeName];\n      // fatal error: event type class not found\n      if (!EvtType) throw Error(\"Missing class for event type '\" + evtTypeName + \"'!\");\n      delete e.typeName;  // remove type slot\n      sim.scheduleEvent( new EvtType( e));\n    })\n  }\n  /**************************************************************\n   * Special settings for PN models\n   **************************************************************/\n  entryNodes = oes.EntryNode.instances;\n  // schedule initial arrival events for the entry nodes of a PN\n  Object.keys( entryNodes).forEach( function (nodeIdStr) {\n    var occT=0, arrEvt=null, entryNode = entryNodes[nodeIdStr];\n    // has no arrival recurrence function been defined for this entry node?\n    if (!entryNode.arrivalRecurrence) {\n      // use the default recurrence\n      occT = oes.Arrival.defaultRecurrence();\n    } else {\n      occT = entryNode.arrivalRecurrence();\n    }\n    arrEvt = new oes.Arrival({ occTime: occT, entryNode: entryNode});\n    sim.scheduleEvent( arrEvt);\n  });\n};\n/*************************************************************\n * Update initial state objects (after modifications via the UI)\n ************************************************************/\nsim.updateInitialStateObjects = function () {\n  // reset the initial objects map\n  sim.scenario.initialState.objects = {};\n  // loop over all object types\n  sim.model.objectTypes.forEach( function (objTypeName) {\n    var objects = cLASS[objTypeName].instances;\n    // loop over all instances of this object type\n    Object.keys( objects).forEach( function (objIdStr) {\n      var obj = objects[objIdStr],\n          objRec = util.createRecordFromObject( obj);\n      objRec.typeName = objTypeName;\n      delete objRec.id;\n      sim.scenario.initialState.objects[objIdStr] = objRec;\n    });\n  });\n};\n/*************************************************************\n * Initialize the simulator on start up\n * Settings that do not vary across scenarios in an experiment\n ************************************************************/\nsim.initializeSimulator = function (dbName) {\n  var x=0, i=0;\n  sim.FEL = new oes.EventList();  // the Future Events List (FEL)\n  // complete model definition by setting objectTypes and eventTypes if not defined\n  if (!sim.model.objectTypes) sim.model.objectTypes = [];\n  if (!sim.model.eventTypes) sim.model.eventTypes = [];\n  // set timeIncrement for fixed-increment time progression\n  if (sim.model.timeIncrement) {\n    sim.timeIncrement = sim.model.timeIncrement;\n  } else {\n    if (sim.model.OnEachTimeStep) sim.timeIncrement = 1;\n  }\n  if (sim.model.time === \"continuous\") {\n    if (sim.model.timeRoundingDecimalPlaces) {\n      sim.timeRoundingFactor = Math.pow( 10, sim.model.timeRoundingDecimalPlaces);\n    } else {\n      if (sim.timeIncrement) {  // fixed-increment time progression\n        // determine rounding factor\n        x = sim.timeIncrement - Math.trunc( sim.timeIncrement);\n        if (x === 0) sim.timeRoundingFactor = 1;\n        else if (x >= 0.1) sim.timeRoundingFactor = 10;\n        else if (x >= 0.01) sim.timeRoundingFactor = 100;\n        else sim.timeRoundingFactor = 1000;\n      }\n    }\n    // define the minimal time delay until the next moment\n    if (sim.model.nextMomentDeltaT) {\n      sim.nextMomentDeltaT = sim.model.nextMomentDeltaT;\n    } else if (sim.timeRoundingFactor) {\n      sim.nextMomentDeltaT = 1 / sim.timeRoundingFactor;\n    } else {  // default\n      sim.nextMomentDeltaT = 0.000001;\n    }\n  } else {  // discrete time\n    sim.nextMomentDeltaT = 1;\n  }\n  // initialize space model\n  if (sim.model.space.type) oes.space.initialize();\n  // set up a default random variate sampling method\n  if (sim.scenario.randomSeed) {  // use the Mersenne Twister RNG\n    rand = new Random( sim.scenario.randomSeed);\n  } else {  // use the JS built-in RNG\n    rand = new Random();\n  }\n  // initialize experiment(s)\n  if (sim.experiment.replications) {  // an experiment has been defined\n    if (!sim.experiment.parameterDefs) sim.experiment.parameterDefs = [];\n    sim.experiment.parameterDefs.forEach( function (paramDef, i, a) {\n      if (paramDef.constructor !== oes.ExperimentParamDef) {\n        a[i] = new oes.ExperimentParamDef( paramDef);\n      }\n    });\n    if (sim.experiment.constructor !== oes.ExperimentDef) {\n      sim.experiment = new oes.ExperimentDef( sim.experiment);\n    }\n  }\n  if (dbName) oes.setupStorageManagement( dbName);\n};\n/*******************************************************************\n * Initialize a (standalone or experiment scenario) simulation run *\n *******************************************************************/\nsim.initializeSimulationRun = function (expParamSlots, seed) {\n  var logInfo={};\n  var isExperimentRun = expParamSlots !== undefined || seed;\n  sim.step = 0;  // simulation loop steps\n  sim.time = 0;  // simulation time\n  // get ID counter from simulation scenario, or set to default value\n  sim.idCounter = sim.scenario.idCounter || 1000;\n  // set up a default random variate sampling method\n  if (!isExperimentRun && sim.scenario.randomSeed) {  // use the Mersenne Twister RNG\n    rand = new Random( sim.scenario.randomSeed);\n  } else if (seed) {  // experiment-defined replication-specific seed\n    rand = new Random( seed);\n  } else {  // use the JS built-in RNG\n    rand = new Random();\n  }\n  // set up initial state\n  sim.initializeModelVariables( expParamSlots);\n  sim.createInitialObjEvt();\n  if (Object.keys( oes.EntryNode.instances).length > 0) oes.setupProcNetStatistics();\n  if (sim.model.statistics) {\n    // initialize statistics\n    oes.stat.initialize();\n    // create statistics for initial state\n    oes.stat.updateStatistics();\n  }\n  // get stepDuration from simulation config, or set to default value\n  sim.stepDuration = sim.config.stepDuration || 0;\n  // log initial state (visualized before in oes.setupFrontEndSimEnv)\n  if (sim.config.createLog) {\n    logInfo = sim.createStepLogInfo();\n    if (!sim.useWorker) {  // main thread\n      if (typeof sim.logStep === \"function\") sim.logStep( logInfo);\n    } else {  // worker thread\n      self.postMessage({  // send log data to main thread\n        simStep: sim.step,\n        simTime: logInfo.simTime,\n        systemStateInfo: logInfo.systemStateInfo,\n        evtInfo: logInfo.evtInfo\n      });\n    }\n  }\n};\n/*******************************************************\n Run a Standalone Scenario\n********************************************************/\nsim.runScenario = function (useWorker) {\n  var msgRec = {},\n      simTimeTenth = parseInt( sim.scenario.simulationEndTime / 10),\n      nextProgressIncrement = simTimeTenth,\n      areConstraintsToBeChecked = sim.isConstraintCheckingTurnedOn ||\n          sim.isConstraintCheckingTurnedOn === undefined && oes.loadManager &&\n          oes.loadManager.codeLoadingMode !== \"deploy\";\n  if (!useWorker) {  // running in main thread\n    sim.useWorker = false;\n    sim.initializeSimulationRun();\n    sim.runScenarioStep();  // loops by self-invocation via setTimeout\n  } else {  // running in worker thread\n    sim.useWorker = true;\n    sim.initializeSimulationRun();\n    while (sim.time < sim.scenario.simulationEndTime) {\n      sim.runScenarioStep();\n      if (areConstraintsToBeChecked) {\n        oes.checkModelConstraints({log:true});\n        if (oes.isProcNetModel()) oes.checkProcNetConstraints({log:true});\n      }\n      // update the progress bar and the simulation step/time\n      if (sim.time > nextProgressIncrement) {\n        self.postMessage({\n            progressIncrement: 10,\n            simStep: sim.step,\n            simTime: sim.time\n        });\n        nextProgressIncrement += simTimeTenth;\n      }\n      // end simulation if no time increment and no more events\n      if (!sim.timeIncrement && sim.FEL.isEmpty()) {\n        break;\n      }\n    }\n    if (sim.model.statistics) {\n      oes.stat.computeOnlyAtEndStatistics();\n      msgRec.simStat = sim.stat;\n    }\n    self.postMessage( msgRec);\n  }\n};\n/*******************************************************\n Standalone Scenario Simulation Step\n (when executed in main thread, it loops by self-invocation via setTimeout)\n********************************************************/\nsim.runScenarioStep = function (followupEvents) {\n  var nextEvents=[], i=0, j=0,\n      EventClass=null, participantRoles={}, nextExoEvt=null, e=null,\n      nextEvtTime = sim.FEL.getNextOccurrenceTime(),  // 0 if there is no next event\n      stepStartTime = (new Date()).getTime(),\n      totalStepTime = 0, stepDiffTimeDelay = 0,\n      uia = sim.scenario.userInteractions,  // shortcut\n      uiViewModel=null, eventTypeName=\"\", logInfo={};\n  function advanceSimulationTime () {\n    // increment the step counter\n    sim.step += 1;\n    // advance simulation time\n    if (sim.timeIncrement) {  // fixed-increment time progression\n      if (nextEvtTime > sim.time && nextEvtTime < sim.time + sim.timeIncrement) {\n        sim.time = nextEvtTime;\n      } else {\n        sim.time += sim.timeIncrement;\n        if (sim.model.OnEachTimeStep) sim.model.OnEachTimeStep();\n      }\n    } else if (nextEvtTime > 0) {  // next-event time progression\n      sim.time = nextEvtTime;\n    }\n  }\n  //-----------------------------------------------------\n  if (!sim.useWorker) {\n    if (sim.stopRequested) {   // interrupt simulation\n      sim.stopRequested = false;\n      oes.ui.updateUiOnStop();\n      return;\n    }\n    if (sim.time >= sim.scenario.simulationEndTime)  {  // terminate simulation\n      if (sim.model.statistics) oes.stat.computeOnlyAtEndStatistics();\n      oes.ui.updateUiOnSimulationEnd();\n      return;\n    }\n  }\n  if (followupEvents) {  // runScenarioStep was called from user action event handler\n    // schedule follow-up events\n    for (j=0; j < followupEvents.length; j++) {\n      sim.FEL.add( followupEvents[j]);\n    }\n    // clear followUpEvents list\n    followupEvents = [];\n  } else {  // normal invocation of runScenarioStep\n    followupEvents = [];\n    advanceSimulationTime();\n    // update the sim-control UI via the fields' data binding to UI output elements\n    if (!sim.useWorker) {\n      sim.ui[\"sim\"].dataBinding[\"step\"].value = sim.step;\n      sim.ui[\"sim\"].dataBinding[\"time\"].value = sim.time;\n    }\n    // extract and process next events\n    if (sim.time === nextEvtTime) {\n      nextEvents = sim.FEL.removeNextEvents();\n      /*\n      if (nextEvents.length > 1) {\n        console.log(\"nextEvents: \"+ nextEvents[0].occTime +\" + \"+ nextEvents[1].occTime);\n      }\n      */\n      if (nextEvents.length > 1) nextEvents.sort( oes.Event.rank);  // priority order\n      for (i=0; i < nextEvents.length; i++) {\n        e = nextEvents[i];\n        eventTypeName = e.constructor.Name;\n        // retrieve event class\n        EventClass = cLASS[eventTypeName];\n        // test if EventClass represents an exogenous event type\n        if (typeof EventClass.recurrence === \"function\") {\n          // create and schedule next exogenous event\n          if (typeof e.createNextEvent === \"function\") {\n            sim.FEL.add( e.createNextEvent());\n          } else if (EventClass.createNextEvent) {  // old syntax (class-level method)\n            sim.FEL.add( EventClass.createNextEvent( e));\n          } else {\n            //TODO: filter participantRoles in a pre-processing step in initModel\n            //let participantRoles = EventClass.properties;  TODO: for ES6 version\n            participantRoles = EventClass.properties;\n            nextExoEvt = new EventClass();\n            nextExoEvt.occTime = e.occTime + EventClass.recurrence();\n            // copy event participants\n            Object.keys( participantRoles).forEach( function (pR) {\n              nextExoEvt[pR] = e[pR];\n            });\n            sim.FEL.add( nextExoEvt);\n          }\n        }\n        // check if a user interaction has been triggered\n        if (sim.config.userInteractive && uia && uia[eventTypeName]) {\n          // check also the triggering event condition, if defined\n          if (!uia[eventTypeName].trigEvtCondition || uia[eventTypeName].trigEvtCondition(e)) {\n            // make sure that the user interaction triggering event is last in nextEvents list\n            if (i === nextEvents.length - 1) {\n              sim.currentEvents[eventTypeName] = e;\n              uiViewModel = uia[eventTypeName];\n              Object.keys( uiViewModel.outputFields).forEach( function (outFldN) {\n                var fldEl = uiViewModel.dataBinding[outFldN],\n                    val = uiViewModel.outputFields[outFldN].value;\n                if (typeof val === \"function\") fldEl.value = val();\n                else fldEl.value = val || \"\";\n              });\n              uiViewModel.domElem.style.display = \"block\";\n              return;  // interrupt simulator & transfer control to UI\n            } else {\n              util.swapArrayElements( nextEvents, i, length-1);\n            }\n          }\n        }\n        followupEvents = e.onEvent();\n        // render event appearances if defined\n        if (sim.config.visualize && sim.ui.animations && sim.ui.animations[eventTypeName]) {\n          sim.ui.animations[eventTypeName].play();\n        }\n        // schedule follow-up events\n        for (j=0; j < followupEvents.length; j++) {\n          sim.FEL.add( followupEvents[j]);\n        }\n        // clear followUpEvents list\n        followupEvents = [];\n      }\n    }\n  }\n  // update statistics\n  if (sim.model.statistics) oes.stat.updateStatistics();\n  // create simulation log\n  if (sim.config.createLog) {\n    logInfo = sim.createStepLogInfo();\n    if (!sim.useWorker) {  // main thread\n      if (typeof sim.logStep === \"function\") sim.logStep( logInfo);\n    } else {  // worker thread\n      self.postMessage({\n        simStep: sim.step,\n        simTime: logInfo.simTime,\n        systemStateInfo: logInfo.systemStateInfo,\n        evtInfo: logInfo.evtInfo\n      });\n    }\n  }\n  // update state visualization (NOT in worker mode)\n  if (sim.config.visualize) oes.ui.visualizeStep();\n  // compute the time needed for executing this step\n  totalStepTime = (new Date()).getTime() - stepStartTime;\n  // check if we need some delay, because of the stepDuration parameter\n  if (sim.stepDuration > totalStepTime) {\n    stepDiffTimeDelay = sim.stepDuration - totalStepTime\n  } else {\n    stepDiffTimeDelay = 0;\n  }\n  if (!sim.useWorker) {  // main thread\n    // end simulation if no time increment and no more events\n    if (!sim.timeIncrement && sim.FEL.isEmpty()) {\n      if (sim.model.statistics) oes.stat.computeOnlyAtEndStatistics();\n      oes.ui.updateUiOnSimulationEnd();\n      return;\n    } else {\n      // continue simulation loop\n      // in the browser, use setTimeout to prevent script blocking\n      setTimeout( sim.runScenarioStep, stepDiffTimeDelay);\n    }\n  }\n};\n/*******************************************************\n Run an Experiment (in a JS worker)\n ********************************************************/\nsim.runExperiment = function () {\n  var exp = sim.experiment, cp=[], valueSets=[], i=0, j=0, k=0, M=0,\n      N = exp.parameterDefs.length, increm=0, x=0, expPar={},\n      expRunId = (new Date()).getTime(),\n      valueCombination=[], expParamSlots={},\n      tenthRunLength=0,  // a tenth of the total run time\n      nextProgressIncrementStep=0;  // thresholds for updating the progress bar\n  try {\n    sim.storeMan.add( oes.ExperimentRun, {\n      id: expRunId,\n      experimentDef: exp.id,\n      dateTime: (new Date()).toISOString(),\n    });\n  } catch (e) {\n    console.log( JSON.stringify(e));\n  }\n  // create preliminary definitions of implicit PN statistics variables\n  if (oes.isProcNetModel()) {\n    if (!sim.model.statistics[\"arrivedObjects\"]) {\n      sim.model.statistics[\"arrivedObjects\"] = {label:\"Arrived objects\"};\n    }\n    if (!sim.model.statistics[\"departedObjects\"]) {\n      sim.model.statistics[\"departedObjects\"] = {label:\"Departed objects\"};\n    }\n    if (!sim.model.statistics[\"meanTimeInSystem\"]) {\n      sim.model.statistics[\"meanTimeInSystem\"] = {label:\"Mean time in system\"};\n    }\n  }\n  if (N === 0) {  // simple experiment (without parameters)\n    cp = [[]];  // only 1 empty parameter value combination\n    // initialize replication statistics record\n    exp.replicStat = {};\n    Object.keys( sim.model.statistics).forEach( function (varName) {\n      if (sim.model.statistics[varName].label) {  // output statistics\n        exp.replicStat[varName] = [];  // an array per statistics variable\n      }\n    });\n  } else {\n    for (i=0; i < N; i++) {\n      expPar = exp.parameterDefs[i];\n      if (!expPar.values) {\n        // create value set\n        expPar.values = [];\n        increm = expPar.stepSize || 1;\n        for (x = expPar.startValue; x <= expPar.endValue; x += increm) {\n          expPar.values.push( x);\n        }\n      }\n      valueSets.push( expPar.values);\n    }\n    cp = util.cartesianProduct( valueSets);\n  }\n  M = cp.length;  // size of cartesian product\n  tenthRunLength = (M * exp.replications) / 10;\n  nextProgressIncrementStep = tenthRunLength;\n  // loop over all combinations of experiment parameter values\n  for (i=0; i < M; i++) {\n    valueCombination = cp[i];  // a JS array\n    // initialize the scenario record\n    exp.scenarios[i] = {stat:{}};\n    exp.scenarios[i].parameterValues = valueCombination;\n    // initialize experiment scenario statistics\n    Object.keys( sim.model.statistics).forEach( function (varName) {\n      var statVar = sim.model.statistics[varName];\n      if (statVar.label) {  // output statistics\n        if (statVar.property && statVar.objectType &&\n            !statVar.aggregationFunction) {\n          exp.scenarios[i].stat[varName] = {};\n        } else exp.scenarios[i].stat[varName] = 0;\n      }\n    });\n    // create experiment parameter slots for assigning corresponding model variables\n    for (j=0; j < N; j++) {\n      expParamSlots[exp.parameterDefs[j].name] = valueCombination[j];\n    }\n    // run experiment scenario replications\n    for (k=0; k < exp.replications; k++) {\n      if (exp.seeds) {\n        sim.initializeSimulationRun( expParamSlots, exp.seeds[k]);\n      } else {\n        sim.initializeSimulationRun( expParamSlots);\n      }\n      while (sim.time < sim.scenario.simulationEndTime) {\n        sim.runExperimentScenarioStep();\n        if (sim.config.isConstraintCheckingTurnedOn) {\n          oes.checkModelConstraints({log:true});\n          if (oes.isProcNetModel()) {\n            oes.checkProcNetConstraints({log:true, add:\" in repl. \"+ String(k+1)});\n          }\n        }\n        // end simulation if no time increment and no more events\n        if (!sim.timeIncrement && sim.FEL.isEmpty()) break;\n      }\n      oes.stat.computeOnlyAtEndStatistics();\n      if (N > 0) {  // experiment with parameters\n        // for the first replication, initialize experiment scenario statistics\n        if (k === 0) {\n          Object.keys( sim.model.statistics ).forEach( function ( varName ) {\n            if ( sim.model.statistics[ varName ].label ) {  // output statistics\n              exp.scenarios[ i ].stat[ varName ] = 0;\n            }\n          } );\n        }\n        // aggregate replication statistics from sim.stat to sim.experiment.scenarios[i].stat\n        Object.keys( sim.model.statistics).forEach( function (varName) {\n          if (sim.model.statistics[varName].label) {  // output statistics\n            exp.scenarios[i].stat[varName] += sim.stat[varName];\n          }\n        });\n        if (exp.storeEachExperimentScenarioRun) {\n          sim.storeMan.add( oes.ExperimentScenarioRun, {\n            id: expRunId + i * exp.replications + k + 1,\n            experimentRun: expRunId,\n            experimentScenarioNo: i,\n            parameterValueCombination: exp.scenarios[i].parameterValues,\n            outputStatistics: Object.assign({}, sim.stat)  // clone\n          });\n        }\n      } else {  // simple experiment\n        // store replication statistics\n        Object.keys( sim.model.statistics).forEach( function (varName) {\n          if (sim.model.statistics[varName].label) {  // output statistics\n            exp.replicStat[varName][k] = sim.stat[varName];\n          }\n        });\n        sim.storeMan.add( oes.ExperimentScenarioRun, {\n          id: expRunId + i * exp.replications + k + 1,\n          experimentRun: expRunId,\n          outputStatistics: Object.assign({}, sim.stat)  // clone\n        });\n      }\n      // update the progress bar\n      if (i*k > nextProgressIncrementStep) {\n        self.postMessage({progressIncrement: 10});\n        nextProgressIncrementStep += tenthRunLength;\n      }\n    }\n    if (N === 0) {  // simple experiment (without parameters)\n      // aggregate replication statistics in sim.experiment.scenarios[i].stat\n      Object.keys( sim.model.statistics).forEach( function (varName) {\n        if (sim.model.statistics[varName].label) {  // output statistics\n          if (!sim.model.statistics[varName].hasRecordRange) {\n            exp.scenarios[i].stat[varName] = {};\n            Object.keys( oes.stat.summary).forEach( function (aggr) {\n              var aggrF = oes.stat.summary[aggr].f;\n              exp.scenarios[i].stat[varName][aggr] = aggrF( exp.replicStat[varName]);\n            });\n          } else {\n            //TODO: loop over record fields\n          }\n        }\n      });\n    }\n    if (N > 0) {  // experiment with parameters\n      // send statistics to main thread\n      self.postMessage({\n        expScenNo: i,\n        expScenParamValues: exp.scenarios[i].parameterValues,\n        expScenStat: exp.scenarios[i].stat\n      });\n      if (!exp.storeEachExperimentScenarioRun) {\n        // store the average statistics aggregated over all exp. scenario runs\n        try {\n          sim.storeMan.add( oes.ExperimentScenarioRun, {\n            experimentRun: expRunId,\n            experimentScenarioNo: i,\n            parameterValueCombination: exp.scenarios[i].parameterValues,\n            outputStatistics: exp.scenarios[i].stat\n          });\n        } catch (e) {\n          console.log( JSON.stringify(e));\n        }\n      }\n    } else {  // simple experiment (without parameters)\n      // send statistics to main thread\n      self.postMessage({\n        expReplicStat: exp.replicStat,\n        expScenStat: exp.scenarios[i].stat\n      });\n    }\n  }\n  self.postMessage({endOfExp: true});\n};\n/*******************************************************\n Experiment Scenario Simulation Step\n ********************************************************/\nsim.runExperimentScenarioStep = function () {\n  var nextEvents=[], i=0, j=0,\n      EventClass=null, participantRoles={}, nextExoEvt=null, e=null,\n      nextEvtTime = sim.FEL.getNextOccurrenceTime(),  // 0 if there is no next event\n      eventTypeName=\"\", followupEvents=[];\n  function advanceSimulationTime () {\n    // increment the step counter\n    sim.step += 1;\n    // advance simulation time\n    if (sim.timeIncrement) {  // fixed-increment time progression\n      // fixed-increment time progression simulations may also have events\n      if (nextEvtTime > sim.time && nextEvtTime < sim.time + sim.timeIncrement) {\n        sim.time = nextEvtTime;  // an event occurring before the next incremented time\n      } else {\n        sim.time += sim.timeIncrement;\n        if (sim.model.OnEachTimeStep) sim.model.OnEachTimeStep();\n      }\n    } else if (nextEvtTime > 0) {  // next-event time progression\n      sim.time = nextEvtTime;\n    }\n    if (sim.model.time === \"continuous\" && sim.timeRoundingFactor) {\n      sim.time = Math.round( sim.time * sim.timeRoundingFactor) /\n          sim.timeRoundingFactor;\n      nextEvtTime = Math.round( nextEvtTime * sim.timeRoundingFactor) /\n          sim.timeRoundingFactor;\n    }\n  }\n  //-----------------------------------------------------\n  advanceSimulationTime();\n  // extract and process next events\n  if (sim.time === nextEvtTime) {\n    nextEvents = sim.FEL.removeNextEvents();\n    if (nextEvents.length > 1) nextEvents.sort( oes.Event.rank);  // priority order\n    for (i=0; i < nextEvents.length; i++) {\n      e = nextEvents[i];\n      eventTypeName = e.constructor.Name;\n      // retrieve event class\n      EventClass = cLASS[eventTypeName];\n      // does EventClass represent an exogenous event type?\n      if (EventClass.recurrence) {\n        // create and schedule next exogenous event\n        if (e.createNextEvent) {  // new syntax\n          sim.FEL.add( e.createNextEvent());\n        } else if (EventClass.createNextEvent) {  // old syntax (class-level method)\n          sim.FEL.add( EventClass.createNextEvent( e));\n        } else {\n          //TODO: filter participantRoles in a pre-processing step in initModel\n          //let participantRoles = EventClass.properties;  TODO: for ES6 versio\n          participantRoles = EventClass.properties;\n          nextExoEvt = new EventClass();\n          nextExoEvt.occTime = e.occTime + EventClass.recurrence();\n          // copy event participants\n          Object.keys( participantRoles).forEach( function (pR) {\n            nextExoEvt[pR] = e[pR];\n          });\n          sim.FEL.add( nextExoEvt);\n        }\n      }\n      followupEvents = e.onEvent();\n      // schedule follow-up events\n      for (j=0; j < followupEvents.length; j++) {\n        sim.FEL.add( followupEvents[j]);\n      }\n      // clear followUpEvents list\n      followupEvents = [];\n    }\n  }\n  // update statistics\n  if (sim.model.statistics) oes.stat.updateStatistics();\n};\n/*******************************************************\n Create step log info\n ********************************************************/\nsim.createStepLogInfo = function () {\n  var simTime = sim.model.time === \"continuous\" && sim.timeRoundingFactor ?\n      Math.round( sim.time * sim.timeRoundingFactor) / sim.timeRoundingFactor :\n      sim.time;\n  var systemStateInfo = Object.keys( sim.v).reduce( function (serialization, varName, i) {\n    var varDecl = sim.model.v[varName], slotSerialization=\"\";\n    if (varDecl.shortLabel) {\n      slotSerialization = varDecl.shortLabel +\": \"+ sim.v[varName];\n      return i>0 ? serialization +\", \"+ slotSerialization : slotSerialization;\n    } else return serialization;\n  }, \"\");\n  if (systemStateInfo && Object.keys( sim.objects).length > 0) systemStateInfo += \", \";\n  systemStateInfo += Object.keys( sim.objects).reduce( function (serialization, objIdStr, i) {\n    var o = sim.objects[objIdStr];\n    if (o.shortLabel || o.constructor.shortLabel) {\n      return i>0 ? serialization +\", \"+ o.toLogString() : o.toLogString();\n    } else return serialization;\n  }, \"\");\n  return {simTime: String(simTime), systemStateInfo: systemStateInfo, evtInfo: sim.FEL.toString()}\n};","source":"sims/framework/simulation-worker-core.js","raw":"/* jshint browser: true */\n'use strict';\n\n/**\n * Compute the max/min of an array\n * Notice that apply requires a context object, which is not really used\n * in the case of a static function such as Math.max\n */\nArray.max = function (array) {\n  return Math.max.apply( Math, array);\n};\nArray.min = function (array) {\n  return Math.min.apply( Math, array);\n};\n/**\n * Clone an array\n */\nArray.prototype.clone = function () {\n  return this.slice(0);\n};\n/**\n * Merge an array with another one\n */\nArray.prototype.merge = function (anotherArray) {\n  return Array.prototype.push.apply( this, anotherArray);\n};\n/**\n * Test if an array is equal to another\n */\nArray.prototype.isEqualTo = function (a2) {\n  return (this.length === a2.length) && this.every( function( el, i) {\n        return el === a2[i]; });\n};\n\n/**\n * @fileOverview  Defines error classes (also called \"exception\" classes)\n * @author Gerd Wagner\n */\n\nfunction ConstraintViolation( msg, culprit) {\n  this.message = msg;\n  if (culprit) this.culprit = culprit;\n}\nfunction NoConstraintViolation( v) {\n  if (v !== undefined) this.checkedValue = v;\n  this.message = \"\";\n}\nNoConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nNoConstraintViolation.prototype.constructor = NoConstraintViolation;\n\n/*\n * Property Constraint Violations\n */\nfunction MandatoryValueConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nMandatoryValueConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nMandatoryValueConstraintViolation.prototype.constructor = MandatoryValueConstraintViolation;\n\nfunction RangeConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nRangeConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nRangeConstraintViolation.prototype.constructor = RangeConstraintViolation;\n\nfunction StringLengthConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nStringLengthConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nStringLengthConstraintViolation.prototype.constructor = StringLengthConstraintViolation;\n\nfunction IntervalConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nIntervalConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nIntervalConstraintViolation.prototype.constructor = IntervalConstraintViolation;\n\nfunction PatternConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nPatternConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nPatternConstraintViolation.prototype.constructor = PatternConstraintViolation;\n\nfunction UniquenessConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nUniquenessConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nUniquenessConstraintViolation.prototype.constructor = UniquenessConstraintViolation;\n\nfunction CardinalityConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nCardinalityConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nCardinalityConstraintViolation.prototype.constructor = CardinalityConstraintViolation;\n\nfunction ReferentialIntegrityConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nReferentialIntegrityConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nReferentialIntegrityConstraintViolation.prototype.constructor = ReferentialIntegrityConstraintViolation;\n\nfunction FrozenValueConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nFrozenValueConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nFrozenValueConstraintViolation.prototype.constructor = FrozenValueConstraintViolation;\n\nfunction OtherConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nOtherConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nOtherConstraintViolation.prototype.constructor = OtherConstraintViolation;\n\n/*\n * Entity Type Constraint Violations\n */\nfunction EntityTypeConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nEntityTypeConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nEntityTypeConstraintViolation.prototype.constructor = EntityTypeConstraintViolation;\n\nfunction ModelClassConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nModelClassConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nModelClassConstraintViolation.prototype.constructor = ModelClassConstraintViolation;\n\nfunction ViewConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nViewConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nViewConstraintViolation.prototype.constructor = ViewConstraintViolation;\n\nfunction ObjectTypeConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nObjectTypeConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nObjectTypeConstraintViolation.prototype.constructor = ObjectTypeConstraintViolation;\n\nfunction AgentTypeConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nAgentTypeConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nAgentTypeConstraintViolation.prototype.constructor = AgentTypeConstraintViolation;\n\nfunction KindConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nKindConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nKindConstraintViolation.prototype.constructor = KindConstraintViolation;\n\nfunction RoleConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nRoleConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nRoleConstraintViolation.prototype.constructor = RoleConstraintViolation;\n\n/*******************************************************************************\n * @fileOverview A collection of utilities: methods, objects, etc used all over the code.\n * @author Mircea Diaconescu\n * @copyright Copyright © 2014 Gerd Wagner, Mircea Diaconescu et al,\n *            Chair of Internet Technology, Brandenburg University of Technology, Germany.\n * @date July 08, 2014, 11:04:23\n * @license The MIT License (MIT)\n ******************************************************************************/\nvar util = {};  //typeof util === undefined ? {} : util;\n\n/**\n * Serialize a Date object as an ISO date string\n * @return  YYYY-MM-DD\n */\nutil.createIsoDateString = function (d) {\n  return d.toISOString().substring(0,10);\n};\n/**\n * Return the next year value (e.g. if now is 2013 the function will return 2014)\n * @return {number}  the integer representing the next year value\n */\nutil.nextYear = function () {\n  var date = new Date();\n  return (date.getFullYear() + 1);\n};\n/**\n * Capitalize the first character of a string\n * @param {string} str\n * @return {string}\n */\nutil.capitalizeFirstChar = function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n/**\n * Copy all own (property and method) slots of a number of untyped objects\n * to a new untyped object.\n * @author Gerd Wagner\n * @return {object}  The merge result.\n */\nutil.mergeObjects = function () {\n  var i = 0, k = 0, n = arguments.length, m = 0,\n      foundArrayArg = false,\n      foundObjectArg = false,\n      arg = null, mergedResult,\n      keys=[], key=\"\";\n  for (i = 0; i < n; i++) {\n    arg = arguments[i];\n    if (arg === undefined) {\n      continue;\n    }\n    if (Array.isArray( arg)) {\n      if (!foundObjectArg) {\n        mergedResult = mergedResult ? mergedResult : [];\n        foundArrayArg = true;\n        mergedResult = mergedResult.concat( arg);\n      } else {\n        throw \"util.mergeObjects: incompatible objects were found! Trying to merge \"+\n              \"an Array with an Object! Expected Array arguments only!\";\n      }\n    } else if (typeof arg === 'object') {\n      if (!foundArrayArg) {\n        mergedResult = mergedResult ? mergedResult : {};\n        foundObjectArg = true;\n        keys = Object.keys( arg);\n        m = keys.length;\n        for (k = 0; k < m; k++) {\n          key = keys[k];\n          mergedResult[key] = arg[key];\n        }\n      } else {\n        throw \"util.mergeObjects: incompatible objects were found! Trying to merge \"+\n              \"an Object with an Array! Expected Object arguments only!\";\n      }\n    } else {\n      throw \"util.mergeObjects: only arguments of type Array or Object are allowed, but '\" +\n             typeof arguments[i] + \"' type was found for argument number \" + i;\n    }\n  }\n  return mergedResult;\n};\n/**********************************************\n * Name conversions\n **********************************************/\n// Example 1: EnglishTeacher => english_teachers\n// Example 2: eXPERIMENTdEF => EXPERIMENT_DEFS\nutil.class2TableName = function (className) {\n  var tableName=\"\";\n  if (className.charAt(0) === className.charAt(0).toUpperCase()) { // starts with upper case\n    if (className.charAt( className.length-1) === \"y\") {\n      tableName = util.camelToLowerCase( className.slice( 0, className.length-1)) + \"ies\";\n    } else {\n      tableName = util.camelToLowerCase( className) + \"s\";\n    }\n    return tableName;\n  } else { // inverse camel case (starts with lower case)\n    if (className.charAt( className.length-1) === \"Y\") {\n      tableName = util.invCamelToUppercase( className.slice( 0, className.length-1)) + \"IES\";\n    } else {\n      tableName = util.invCamelToUppercase( className) + \"S\";\n    }\n    return tableName;\n  }\n};\n// Example: books => Book\nutil.table2ClassName = function (tableName) {\n  var result = util.lowercaseToCamel( tableName);\n  result = result.charAt( 0).toUpperCase() + result.slice( 1);\n  // if there is an 's' at the end, drop it\n  if (result.charAt( result.length - 1) === 's') {\n    result = result.slice( 0, result.length - 1);\n  }\n  /*\n  if (!util.JsIdentifierPattern.test( result)) {\n    throw Error(\"util.camelToLowerCase: the provided 'identifier' (\" + result +\n        \") is not a valid JS identifier!\");\n  }\n  */\n  return result;\n};\n// Example: dateOfBirth => date_of_birth\nutil.property2ColumnName = function (propertyName) {\n  return util.camelToLowerCase( propertyName);\n};\n// Example: date_of_birth => dateOfBirth\nutil.column2PropertyName = function (columnName) {\n  return util.lowercaseToCamel( columnName);\n};\nutil.camelToLowerCase = function (identifier) {\n  var result = '';\n  // if the first is a A-Z char, replace it with its lower case equivalent\n  identifier = identifier.charAt( 0).toLowerCase() + identifier.slice( 1);\n  // replace upper case letter with '_' followed by the lower case equivalent leter\n  result = identifier.replace( /([A-Z])/g, function( $1) {\n    return \"_\" + $1.toLowerCase();\n  });\n  return result;\n};\nutil.invCamelToUppercase = function (name) {\n  var result = '';\n  // if the first is a a-z, replace it with corresponding upper case\n  name = name.charAt(0).toUpperCase() + name.slice( 1);\n  // replace lower case letter with '_' followed by the corresponding upper case\n  result = name.replace( /([a-z])/g, function( $1) {\n    return \"_\" + $1.toUpperCase();\n  });\n  return result;\n};\nutil.lowercaseToCamel = function (identifier) {\n  var result = '';\n  // replace upper case letter with '_' followed by the lower case equivalent letter\n  result = identifier.replace( /(\\_[a-z])/g, function ($1) {\n    return $1.toUpperCase().replace( '_', '');\n  });\n  return result;\n};\n\n/** REGEX to check if valid JS identifier **/\nutil.JsIdentifierPattern = /^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc][$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc0-9\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19b0-\\u19c0\\u19c8\\u19c9\\u19d0-\\u19d9\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1dc0-\\u1de6\\u1dfc-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f]*$/;\n\n//***** NOT USED IN cLASSjs ************************\n/**\n * Verifies if a value represents an integer or integer string\n * @param {string} x\n * @return {boolean}\n */\nutil.isIntegerString = function (x) {\n  return typeof(x) === \"string\" && x.search(/^-?[0-9]+$/) == 0;\n};\n/**\n * Extract the data record part of an object. The extracted property values\n * are either primitive data values, Date objects, or arrays of primitive\n * data values.\n * @param {object} obj\n */\nutil.createRecordFromObject = function (obj) {\n  var record={}, p=\"\", val;\n  for (p in obj) {\n    val = obj[p];\n    if (obj.hasOwnProperty(p) && (typeof(val) === \"string\" ||\n            typeof(val) === \"number\" || typeof(val) === \"boolean\" ||\n            val instanceof Date ||\n            Array.isArray( val) &&  // array list of data values\n            !val.some( function (el) {\n              return typeof(el) === \"object\";\n            })\n        )) {\n      if (val instanceof Date) record[p] = val.toISOString();\n      else if (Array.isArray( val)) record[p] = val.slice(0);\n      else record[p] = val;\n    }\n  }\n  return record;\n};\n// create an alias for cloning records\nutil.cloneRecord = util.createRecordFromObject;\n\n/**\n * Create a \"deep\" clone of a JS object at the level of own properties/slots\n * @param o  the object to be cloned\n * @return {object}\n */\nutil.cloneObject = function (o) {\n  var clone = Array.isArray(o) ? [] : {};\n  Object.keys(o).forEach( function (key) {\n    clone[key] = (typeof o[key] === \"object\") ? util.cloneObject(o[key]) : o[key];\n  });\n  return clone;\n};\n/**\n * Copy all own (property and method) slots of a number of (untyped) objects\n * to a new (untyped) object.\n * @author Gerd Wagner\n * @return {object}  The merge result.\n *\nutil.mergeObjects = function () {\n  var i=0, k=0, obj=null, mergeObj={}, keys=[], key=\"\";\n  for (i=0; i < arguments.length; i++) {\n    obj = arguments[i];\n    if (obj && typeof obj === \"object\") {\n      keys = Object.keys( obj);\n      for (k=0; k < keys.length; k++) {\n        key = keys[k];\n        mergeObj[key] = obj[key];\n      }\n    }\n  }\n  return mergeObj;\n};\n */\n/**\n * Swap two elements of an array\n * using the ES6 method Object.assign for creating a shallow clone of an object\n * @param a  the array\n * @param i  the first index\n * @param i  the 2nd index\n */\nutil.swapArrayElements = function (a,i,j) {\n  var tempStore = (typeof a[i] === \"object\") ? Object.assign( {}, a[i]) : a[i];\n  a[i] = (typeof a[j] === \"object\") ? Object.assign( {}, a[j]) : a[j];\n  a[j] = tempStore;\n};\n/**\n * Shuffles array in place using the Fisher-Yates shuffle algorithm\n * @param {Array} a - An array of items to be shuffled\n */\nutil.shuffleArray = function (a) {\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n    j = Math.floor( Math.random() * (i + 1) );\n    x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n};\n/**\n * Compute the Cartesian Product of an array of arrays\n * From https://stackoverflow.com/a/36234242/2795909\n * @param {Array} arr - An array of arrays of values to be combined\n */\nutil.cartesianProduct = function (arr) {\n  return arr.reduce( function (a,b) {\n    return a.map( function (x) {\n      return b.map( function (y) {\n        return x.concat(y);\n      })\n    }).reduce( function (a,b) {return a.concat(b)}, [])\n  }, [[]])\n};\n/**\n * Load a script\n * @param {Array} arr - An array of arrays of values to be combined\n */\nutil.loadScript = function (pathAndFilename, basePath, callback, errCallback) {\n  var loadEl = document.createElement('script');\n  // if a full URL is provided, the base path is ignored\n  if (pathAndFilename.indexOf(\"://\") === -1)\n    pathAndFilename = basePath + pathAndFilename;\n  // if no callback(s) provided, define an empty function\n  callback = typeof callback === \"function\" ? callback : function () {};\n  errCallback = typeof errCallback === \"function\" ? errCallback : function () {};\n  loadEl.src = pathAndFilename;\n  loadEl.onload = function () {\n    callback(loadEl);\n  };\n  loadEl.onerror = function (e) {\n    console.log(\"Failed loading file '\" + pathAndFilename + \"'!\");\n    loadEl.remove();\n    errCallback(e);\n  };\n  document.head.appendChild( loadEl);\n};\n\n/****************************************************************\n * Math Library\n ****************************************************************/\nvar math = {};\n/**\n * Compute the sum of an array of numbers\n * @param {Array} data - An array of numbers\n */\nmath.sum = function (data) {\n  function add( a, b) {return a + b;}\n  return data.reduce( add, 0);\n};\n/**\n * Compute the arithmetic mean of an array of numbers\n * @param {Array} data - An array of numbers\n */\nmath.mean = function (data) {\n  return math.sum( data) / data.length;\n};\n/**\n * Compute the standard deviation of an array of numbers\n * @param {Array} data - An array of numbers\n */\nmath.stdDev = function (data) {\n  var m = math.mean( data);\n  return Math.sqrt( data.reduce( function (acc, x) {\n    return acc + Math.pow( x - m, 2);}, 0) / (data.length - 1));\n};\n/**\n * Compute the bootstrap confidence interval of an array of numbers. Based on\n *   Efron, B. (1985). Bootstrap confidence intervals for a class of parametric\n *   problems. Biometrika, 72(1), 45-58.\n * @param {Array} data - An array of numbers\n * @param {integer} samples - Number of bootstrap samples (default 10000)\n * @param {decimal} alpha - Confidence interval to estimate [0,1] (default 0.95)\n * @returns {Array} Lower and upper confidence interval\n */\nmath.bootstrapConfInt = function ( data, samples, alpha ) {\n  var n = samples || 10000;\n  var p = alpha || 0.95;\n  var i, j, t;\n  var mu = Array( n );\n  var m = math.mean( data );\n  var len = data.length;\n\n  /* Calculate bootstrap samples */\n  for ( i = 0; i < n; i += 1 ) {\n    t = 0;\n    for ( j = 0; j < len; j += 1 ) {\n      t += data[ Math.floor( Math.random() * len ) ];\n    }\n    mu[ i ] = ( t / len ) - m;\n  }\n\n  /* Sort in ascending order */\n  mu.sort( function ( a, b ) {\n    return a - b;\n  } );\n\n  /* Return the lower and upper bootstrap confidence interval */\n  return [\n    m - mu[ Math.floor( Math.min( n - 1, n * ( 1 - ( (1 - p ) / 2 ) ) ) ) ],\n    m - mu[ Math.floor( Math.max( 0, n * ( ( 1 - p ) / 2 ) ) ) ]\n  ];\n};\n/**\n * Compute the lower confidence interval of an array of numbers.\n * @param {Array} data - An array of numbers\n * @returns {decimal} Lower confidence interval\n */\nmath.confIntLower = function ( data ) {\n  return math.bootstrapConfInt( data )[ 0 ];\n};\n/**\n * Compute the upper confidence interval of an array of numbers.\n * @param {Array} data - An array of numbers\n * @returns {decimal} Upper confidence interval\n */\nmath.confIntUpper = function ( data ) {\n  return math.bootstrapConfInt( data )[ 1 ];\n};\n/**\n * Predefined class for creating enumerations as special JS objects.\n * @copyright Copyright 2014 Gerd Wagner, Chair of Internet Technology,\n *   Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Gerd Wagner\n * @constructor\n * @this {eNUMERATION}\n * @param {string} name  The name of the new enumeration data type.\n * @param {array} enumArg  The labels array or code list map of the enumeration\n *\n * An eNUMERATION has the following properties:\n * labels         an array list of label strings such that enumLabel = labels[enumIndex-1]\n * enumLitNames\n *\n */\n/* globals eNUMERATION */\nfunction eNUMERATION( name, enumArg) {\n  var i = 0, lbl = \"\", LBL = \"\";\n  if (typeof name !== \"string\") {\n    throw new Error(\n      \"The first constructor argument of an enumeration must be a string!\");\n  }\n  this.name = name;\n  if (Array.isArray(enumArg)) {\n    // a simple enum defined by a list of labels\n    if (!enumArg.every(function (n) {\n        return (typeof n === \"string\");\n      })) {\n      throw new Error(\"A list of enumeration labels as the second \" +\n        \"constructor argument must be an array of strings!\");\n    }\n    this.labels = enumArg;\n    this.enumLitNames = this.labels;\n    this.codeList = null;\n  } else if (typeof enumArg === \"object\" && Object.keys(enumArg).length > 0) {\n    // a code list defined by a map\n    if (!Object.keys(enumArg).every(function (code) {\n        return (typeof enumArg[code] === \"string\");\n      })) {\n      throw new Error(\"All values of a code list map must be strings!\");\n    }\n    this.codeList = enumArg;\n    // use codes as the names of enumeration literals\n    this.enumLitNames = Object.keys( this.codeList);\n    this.labels = this.enumLitNames.map(function (c) {\n      return enumArg[c] + \" (\" + c + \")\";\n    });\n  } else {\n    throw new Error(\n      \"Invalid Enumeration constructor argument: \" + enumArg);\n  }\n  this.MAX = this.enumLitNames.length;\n  // generate the enumeration literals by capitalizing/normalizing the names\n  for (i = 1; i <= this.enumLitNames.length; i++) {\n    // replace \" \" and \"-\" with \"_\"\n    lbl = this.enumLitNames[i - 1].replace(/( |-)/g, \"_\");\n    // convert to array of words, capitalize them, and re-convert\n    LBL = lbl.split(\"_\").map(function (lblPart) {\n      return lblPart.toUpperCase();\n    }).join(\"_\");\n    // assign enumeration index\n    this[LBL] = i;\n  }\n  // protect the enumeration from change attempts\n  Object.freeze( this);\n  // add new enumeration to the population of all enumerations\n  eNUMERATION.instances[this.name] = this;\n}\n/*\n * Check if a value represents an enumeration literal or a valid index\n */\neNUMERATION.prototype.isValidEnumLitOrIndex = function (v) {\n  return (Number.isInteger(v) && v > 0 && v < this.MAX);\n};\n/*\n * Serialize a list of enumeration literals/indexes as a list of\n * enumeration literal names\n */\neNUMERATION.prototype.enumIndexesToNames = function (a) {\n  if (!Array.isArray(a)) {\n    throw new Error(\n      \"The argument must be an Array!\");\n  }\n  var listStr = a.map(function (enumInt) {\n    return this.enumLitNames[enumInt - 1];\n  }, this).join(\", \");\n  return listStr;\n};\n/*\n * Define a map of all enumerations as a class-level property\n */\neNUMERATION.instances = {};\n\n /*******************************************************************************\n * cLASS allows defining constructor-based JavaScript classes and\n * class hierarchies based on a declarative description of the form:\n *\n *   var Student = new cLASS({\n *     Name: \"Student\",\n *     supertypeName: \"Person\",\n *     properties: {\n *       \"university\": {range:\"String\", label:\"University\", max: 50, ...}\n *     },\n *     methods: {\n *     }\n *   });\n *   var stud1 = new Student({id: 1, university:\"MIT\"});\n *   // test if direct instance\n *   if (stud1.constructor.Name === \"Student\") ...\n *   // test if instance\n *   if (stud1 instanceof Student) ...\n *\n * Notice that it is assumed that a class has (or inherits) an \"id\" attribute\n * as its standard ID attribute.\n *\n *\n * @copyright Copyright 2015-2017 Gerd Wagner, Chair of Internet Technology,\n *   Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Gerd Wagner\n ******************************************************************************/\n/* globals cLASS */\nfunction cLASS (classSlots) {\n  var propDefs = classSlots.properties || {},  // property declarations\n      methods = classSlots.methods || {},\n      supertypeName = classSlots.supertypeName,\n      superclass=null, constr=null, missingRangeProp=\"\",\n      propsWithInitialValFunc = [];\n  // check Class definition constraints\n  if (supertypeName && !cLASS[supertypeName]) {\n    throw \"Specified supertype \"+ supertypeName +\" has not been defined!\";\n  }\n  if (!Object.keys( propDefs).every( function (p) {\n        if (!propDefs[p].range) missingRangeProp = p;\n        return (propDefs[p].range !== undefined);\n      }) ) {\n    throw \"No range defined for property \"+ missingRangeProp +\n        \" of class \"+ classSlots.Name +\" !\";\n  }\n  // define a constructor function for creating a new object\n  constr = function (instanceSlots) {\n    if (!instanceSlots) return;\n    if (supertypeName) {\n      // invoke supertype constructor\n      cLASS[supertypeName].call( this, instanceSlots);\n    }\n    // assign own properties  TODO: use the checked value from validationResult\n    Object.keys( propDefs).forEach( function (p) {\n      var pDef = propDefs[p], range = pDef.range, Class=null,\n          val, rangeTypes=[], i=0, validationResult=null;\n      if (typeof instanceSlots === \"object\" && p in instanceSlots) {\n        // property p has an initialization slot\n        val = instanceSlots[p];\n        validationResult = cLASS.check( p, pDef, val);\n        if (!(validationResult instanceof NoConstraintViolation)) throw validationResult;\n        // is range a cLASS collection datatype?\n        if (typeof range === \"object\" && range.dataType !== undefined) {\n          this[p] = Array.isArray( val) ? val.slice(0) : Object.assign({}, val);  // assign clone\n        } else if (typeof range === \"string\" && typeof val !== \"object\" &&\n            (cLASS[range] || range.includes(\"|\"))) {\n          // is range a class (or class disjunction)?\n          if (range.includes(\"|\")) {\n            rangeTypes = range.split(\"|\");\n            for (i=0; i < rangeTypes.length; i++) {\n              Class = cLASS[rangeTypes[i]];\n              if (Class) {  // type disjunct is a cLASS\n                if (Class.instances[String(val)])  {\n                  // convert IdRef to object reference\n                  this[p] = Class.instances[String(val)];\n                  break;\n                }\n              }\n            }\n            if (!this[p]) this[p] = val;\n          } else {  // range is a class\n            // convert IdRef to object reference\n            this[p] = cLASS[range].instances[String(val)] || val;\n          }\n        } else this[p] = val;\n      } else if (pDef.initialValue !== undefined) {  // assign initial value\n        if (typeof pDef.initialValue === \"function\") {\n          propsWithInitialValFunc.push(p);\n        } else this[p] = pDef.initialValue;\n      } else if (p === \"id\" && range === \"AutoNumber\") {    // assign auto-ID\n        if (typeof this.constructor.getAutoId === \"function\") {\n          this[p] = this.constructor.getAutoId();\n        } else if (this.constructor.idCounter !== undefined) {\n          this[p] = ++this.constructor.idCounter;\n        }\n      } else if (!pDef.optional) {  // assign default values to mandatory properties\n        if (pDef.maxCard > 1) {\n          if (pDef.minCard === 0) {  // optional multi-valued property\n            if (pDef.range in cLASS && !pDef.isOrdered) this[p] = {};  // map\n            else this[p] = [];  // array list\n          } else throw \"A non-empty collection value for \"+ p +\" is required!\";\n        } else if (cLASS.isIntegerType(range) || cLASS.isDecimalType(range)) {\n          this[p] = 0;\n        } else if (range === \"String\") {\n          this[p] = \"\";\n        } else if (range === \"Boolean\") {\n          this[p] = false;\n        } else if (typeof range === \"object\") {\n          if ([\"Array\", \"ArrayList\"].includes(range.dataType)) {\n            this[p] = [];\n          } else if (range.dataType === \"Map\") {\n            this[p] = {};\n          }\n        } else {\n          throw \"A value for \"+ p +\" is required when creating a(n) \"+ classSlots.Name;\n          console.log(\"instanceSlots = \", JSON.stringify(instanceSlots));\n        }\n      }\n      // initialize historical properties\n      if (pDef.historySize) {\n        this.history = this.history || {};  // a map\n        this.history[p] = pDef.decimalPlaces ?\n            new cLASS.RingBuffer( pDef.range, pDef.historySize,\n                {decimalPlaces: pDef.decimalPlaces}) :\n            new cLASS.RingBuffer( pDef.range, pDef.historySize);\n      }\n    }, this);\n    // call the functions for initial value expressions\n    propsWithInitialValFunc.forEach( function (p) {\n      this[p] = propDefs[p].initialValue.call(this);\n    }, this);\n    // assign remaining fields not defined as properties by the object's class\n    if (typeof( instanceSlots) === \"object\") {\n      Object.keys( instanceSlots).forEach( function (f) {\n        if (!propDefs[f]) this[f] = instanceSlots[f];\n      }, this);\n    }\n    // take care of cLASS-specific provisions (e.g., update a materialized view)\n    if (\"onConstruction\" in methods) this.onConstruction();\n    // is the class neither a complex DT nor abstract and does the object have an ID slot?\n    if (!classSlots.isComplexDatatype && !classSlots.isAbstract && \"id\" in this) {\n      // add new object to the population/extension of the class\n      cLASS[classSlots.Name].instances[String(this.id)] = this;\n    }\n  };\n  // assign class-level (meta-)properties\n  constr.constructor = cLASS;\n  constr.Name = classSlots.Name;\n  if (classSlots.isComplexDatatype) constr.isComplexDatatype = true;\n  if (classSlots.isAbstract) constr.isAbstract = true;\n  if (classSlots.label) constr.label = classSlots.label;\n  if (classSlots.shortLabel) constr.shortLabel = classSlots.shortLabel;\n  if (classSlots.primaryKey) constr.primaryKey = classSlots.primaryKey;\n  if (classSlots.tableName) constr.tableName = classSlots.tableName;\n  if (supertypeName) {\n    constr.supertypeName = supertypeName;\n    superclass = cLASS[supertypeName];\n    // apply classical inheritance pattern for methods\n    constr.prototype = Object.create( superclass.prototype);\n    constr.prototype.constructor = constr;\n    // merge superclass property declarations with own property declarations\n    constr.properties = Object.create( superclass.properties);\n   //  assign own property declarations, possibly overriding super-props\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n    Object.keys( propDefs).forEach( function (p) {\n      constr.properties[p] = propDefs[p];\n    });\n  } else {  // if class is root class\n    constr.properties = propDefs;\n    /***************************************************/\n    constr.prototype.set = function ( prop, val) {\n    /***************************************************/\n      // this = object\n      var validationResult = cLASS.check( prop, this.constructor.properties[prop], val);\n      if (validationResult instanceof NoConstraintViolation) {\n        this[prop] = validationResult.checkedValue;\n      } else {\n        throw validationResult;\n      }\n    };\n    /***************************************************/\n    // overwrite and improve the standard toString method\n    constr.prototype.toString = function () {\n    /***************************************************/\n      var str1=\"\", str2=\"\", i=0;\n      if (this.name) str1 = this.name;\n      else {\n        str1 = this.constructor.shortLabel || this.constructor.Name;\n        if (this.id) str1 += \":\"+ this.id;\n      }\n      str2 = \"{ \";\n      Object.keys( this).forEach( function (key) {\n        var propDecl = cLASS[this.constructor.Name].properties[key],\n            propLabel = propDecl ? (propDecl.shortLabel || propDecl.label) : key,\n            valStr = \"\";\n        // is the slot of a declared reference property?\n        if (propDecl && typeof propDecl.range === \"string\" && cLASS[propDecl.range]) {\n          // is the property multi-valued?\n          if (propDecl.maxCard && propDecl.maxCard > 1) {\n            if (Array.isArray( this[key])) {\n              valStr = this[key].map( function (o) {return o.id;}).toString();\n            } else valStr = JSON.stringify( Object.keys( this[key]));\n          } else {  // if the property is single-valued\n            valStr = String( this[key].id);\n          }\n        } else if (typeof this[key] === \"function\") {\n          // the slot is an instance-level method slot\n          valStr = \"a function\";\n        } else {  // the slot is an attribute slot or an undeclared reference property slot\n          valStr = JSON.stringify( this[key]);\n        }\n        if (this[key] !== undefined && propLabel) {\n          str2 += (i>0 ? \", \" : \"\") + propLabel +\": \"+ valStr;\n          i = i+1;\n        }\n      }, this);\n      str2 += \"}\";\n      if (str2 === \"{ }\") str2 = \"\";\n      return str1 + str2;\n    };\n    /***************************************************/\n    constr.prototype.toRecord = function () {\n    /***************************************************/\n      var obj = this, rec={}, propDecl={}, valuesToConvert=[], range, val;\n      Object.keys( obj).forEach( function (p) {\n        if (obj[p] !== undefined) {\n          val = obj[p];\n          propDecl = obj.constructor.properties[p];\n          range = propDecl.range;\n          if (propDecl.maxCard && propDecl.maxCard > 1) {\n            if (range.constructor && range.constructor === cLASS) { // object reference(s)\n              if (Array.isArray( val)) {\n                valuesToConvert = val.slice(0);  // clone;\n              } else {  // val is a map from ID refs to obj refs\n                valuesToConvert = Object.values( val);\n              }\n            } else if (Array.isArray( val)) {\n              valuesToConvert = val.slice(0);  // clone;\n            } else console.log(\"Invalid non-array collection in toRecord!\");\n          } else {  // maxCard=1\n            valuesToConvert = [val];\n          }\n          valuesToConvert.forEach( function (v,i) {\n            // alternatively: enum literals as labels\n            // if (range instanceof eNUMERATION) rec[p] = range.labels[val-1];\n            if ([\"number\",\"string\",\"boolean\"].includes( typeof(v)) || !v) {\n              valuesToConvert[i] = String( v);\n            } else if (range === \"Date\") {\n              valuesToConvert[i] = util.createIsoDateString( v);\n            } else if (range.constructor && range.constructor === cLASS) { // object reference(s)\n              valuesToConvert[i] = v.id;\n            } else if (Array.isArray( v)) {  // JSON-compatible array\n              valuesToConvert[i] = v.slice(0);  // clone\n            } else valuesToConvert[i] = JSON.stringify( v);\n          });\n          if (!propDecl.maxCard || propDecl.maxCard <= 1) {\n            rec[p] = valuesToConvert[0];\n          } else {\n            rec[p] = valuesToConvert;\n          }\n        }\n      });\n      return rec;\n    };\n    /***************************************************/\n    // Convert property value to (form field) string.\n    constr.prototype.getValueAsString = function ( prop) {\n    /***************************************************/\n      // make sure the eNUMERATION meta-class object can be checked if available\n      var eNUMERATION = typeof eNUMERATION === \"undefined\" ? undefined : eNUMERATION;\n      var propDecl = this.constructor.properties[prop],\n          range = propDecl.range, val = this[prop];\n      var valuesToConvert=[], displayStr=\"\", k=0,\n          listSep = \", \";\n      if (val === undefined || val === null) return \"\";\n      if (propDecl.maxCard && propDecl.maxCard > 1) {\n        if (Array.isArray( val)) {\n          valuesToConvert = val.length>0 ? val.slice(0) : [];  // clone;\n        } else if (typeof val === \"object\") {\n          valuesToConvert = Object.keys( val);\n        } else console.log(\"The value of a multi-valued \" +\n            \"property like \"+ prop +\" must be an array or a map!\");\n      } else valuesToConvert = [val];\n      valuesToConvert.forEach( function (v,i) {\n        if (typeof propDecl.val2str === \"function\") {\n          valuesToConvert[i] = propDecl.val2str( v);\n        } else if (eNUMERATION && range instanceof eNUMERATION) {\n          valuesToConvert[i] = range.labels[v-1];\n        } else if ([\"number\",\"string\",\"boolean\"].includes( typeof v) || !v) {\n          valuesToConvert[i] = String( v);\n        } else if (range === \"Date\") {\n          valuesToConvert[i] = util.createIsoDateString( v);\n        } else if (Array.isArray( v)) {  // JSON-compatible array\n          valuesToConvert[i] = v.slice(0);  // clone\n        } else if (typeof range === \"string\" && cLASS[range]) {\n          if (typeof v === \"object\" && v.id !== undefined) {\n            valuesToConvert[i] = v.id;\n          } else {\n            valuesToConvert[i] = v.toString();\n            propDecl.stringified = true;\n            console.log(\"Property \"+ this.constructor.Name +\"::\"+ prop +\" has a cLASS object value without an 'id' slot!\");\n          }\n        } else {\n          valuesToConvert[i] = JSON.stringify( v);\n          propDecl.stringified = true;\n        }\n      }, this);\n      if (valuesToConvert.length === 0) displayStr = \"[]\";\n      else {\n        displayStr = valuesToConvert[0];\n        if (propDecl.maxCard && propDecl.maxCard > 1) {\n          displayStr = \"[\" + displayStr;\n          for (k=1; k < valuesToConvert.length; k++) {\n            displayStr += listSep + valuesToConvert[k];\n          }\n          displayStr = displayStr + \"]\";\n        }\n      }\n      return displayStr;\n    };\n    /***************************************************/\n\n    /***************************************************\n     * A class-level de-serialization method\n     ***************************************************/\n    constr.createObjectFromRecord = function (record) {\n      var obj={};\n      try {\n        obj = new constr( record);\n      } catch (e) {\n        console.log( e.constructor.name + \" while deserializing a \"+\n            constr.Name +\" record: \" + e.message);\n        obj = null;\n      }\n      return obj;\n    };\n  }\n  // assign instance-level methods\n  Object.keys( methods).forEach( function (m) {\n    constr.prototype[m] = methods[m];\n  });\n  // store class/constructor as value associated with its name in a map\n  cLASS[classSlots.Name] = constr;\n  // initialize the class-level instances property\n   if (!classSlots.isAbstract) {\n     cLASS[classSlots.Name].instances = {};\n   }\n  // return the constructor as the object constructed with new cLASS\n  return constr;\n}\n /**\n  * Determine if a type is an integer type.\n  * @method\n  * @author Gerd Wagner\n  * @param {string|eNUMERATION} T  The type to be checked.\n  * @return {boolean}\n  */\ncLASS.isIntegerType = function (T) {\n  return [\"Integer\",\"PositiveInteger\",\"AutoNumber\",\"NonNegativeInteger\"].includes(T) ||\n      T instanceof eNUMERATION;\n};\n /**\n  * Determine if a type is a decimal type.\n  * @method\n  * @author Gerd Wagner\n  * @param {string} T  The type to be checked.\n  * @return {boolean}\n  */\n cLASS.isDecimalType = function (T) {\n   return [\"Number\",\"Decimal\",\"Percent\",\"ClosedUnitInterval\",\"OpenUnitInterval\"].includes(T);\n };\n /**\n  * Constants\n  */\n cLASS.patterns = {\n   ID: /^([a-zA-Z0-9][a-zA-Z0-9_\\-]+[a-zA-Z0-9])$/,\n   // defined in WHATWG HTML5 specification\n   EMAIL: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n   // proposed by Diego Perini (https://gist.github.com/729294)\n   URL: /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i,\n   INT_PHONE_NO: /^\\+(?:[0-9] ?){6,14}[0-9]$/\n };\n /**\n  * Generic method for checking the integrity constraints defined in property declarations.\n  * The values to be checked are first parsed/deserialized if provided as strings.\n  * Copied from the cOMPLEXtYPE class of oNTOjs\n  *\n  * min/max: numeric (or string length) minimum/maximum\n  * optional: true if property is single-valued and optional (false by default)\n  * range: String|NonEmptyString|Integer|...\n  * pattern: a regular expression to be matched\n  * minCard/maxCard: minimum/maximum cardinality of a multi-valued property\n  *     By default, maxCard is 1, implying that the property is single-valued, in which\n  *     case minCard is meaningless/ignored. maxCard may be Infinity.\n  *\n  * @method\n  * @author Gerd Wagner\n  * @param {string} fld  The property for which a value is to be checked.\n  * @param {object} decl  The property's declaration.\n  * @param {string|number|boolean|object} val  The value to be checked.\n  * @param optParams.checkRefInt  Check referential integrity\n  * @return {ConstraintViolation}  The constraint violation object.\n  */\n cLASS.check = function (fld, decl, val, optParams) {\n   var constrVio=null, valuesToCheck=[],\n       msg = decl.patternMessage || \"\",\n       minCard = decl.minCard!==\"umdefined\" ? decl.minCard : decl.optional?0:1,  // by default, a property is mandatory\n       maxCard = decl.maxCard || 1,  // by default, a property is single-valued\n       min = decl.min || 0, max = decl.max,\n       range = decl.range,\n       pattern = decl.pattern;\n   // check Mandatory Value Constraint\n   if (val === undefined || val === \"\") {\n     if (decl.optional) return new NoConstraintViolation();\n     else {\n       return new MandatoryValueConstraintViolation(\n           \"A value for \"+ fld +\" is required!\");\n     }\n   }\n   if (maxCard === 1) {  // single-valued property\n     valuesToCheck = [val];\n   } else {  // multi-valued properties can be array-valued or map-valued\n     if (Array.isArray( val) ) {\n       valuesToCheck = val;\n     } else if (typeof range === \"string\" && cLASS[range]) {\n       if (!decl.isOrdered) {\n         valuesToCheck = Object.keys( val).map( function (id) {\n           return val[id];\n         });\n       } else {\n         return new RangeConstraintViolation(\"Values for the ordered property \"+ fld +\n             \" must be arrays, and not maps!\");\n       }\n     } else {\n       return new RangeConstraintViolation(\"Values for \"+ fld +\n           \" must be arrays or maps of IDs to cLASS instances!\");\n     }\n   }\n   // convert integer strings to integers\n   if (cLASS.isIntegerType( range)) {\n     valuesToCheck.forEach( function (v,i) {\n       if (typeof v === \"string\") valuesToCheck[i] = parseInt( v);\n     });\n   }\n   // convert decimal strings to decimal numbers\n   if (cLASS.isDecimalType( range)) {\n     valuesToCheck.forEach( function (v,i) {\n       if (typeof v === \"string\") valuesToCheck[i] = parseFloat( v);\n     });\n   }\n   /*********************************************************************\n    ***  Convert value strings to values and check range constraints ****\n    ********************************************************************/\n   switch (range) {\n     case \"String\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\") {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be strings!\");\n         }\n       });\n       break;\n     case \"NonEmptyString\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\" || v.trim() === \"\") {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be non-empty strings!\");\n         }\n       });\n       break;\n     case \"Identifier\":  // add regexp test\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\" || v.trim() === \"\" || !cLASS.patterns.ID.test( v)) {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be valid identifiers/names!\");\n         }\n       });\n       break;\n     case \"Email\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\" || !cLASS.patterns.EMAIL.test( v)) {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be valid email addresses!\");\n         }\n       });\n       break;\n     case \"URL\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\" || !cLASS.patterns.URL.test( v)) {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be valid URLs!\");\n         }\n       });\n       break;\n     case \"PhoneNumber\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\" || !cLASS.patterns.INT_PHONE_NO.test( v)) {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be valid international phone numbers!\");\n         }\n       });\n       break;\n     case \"Integer\":\n       valuesToCheck.forEach( function (v) {\n         if (!Number.isInteger(v)) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be an integer!\");\n         }\n       });\n       break;\n     case \"NonNegativeInteger\":\n       valuesToCheck.forEach( function (v) {\n         if (!Number.isInteger(v) || v < 0) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a non-negative integer!\");\n         }\n       });\n       break;\n     case \"AutoNumber\":\n       if (valuesToCheck.length === 1) {\n         if (!Number.isInteger( valuesToCheck[0]) || valuesToCheck[0] < 1) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a positive integer!\");\n         }\n       } else {\n         constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n             \" must not be a collection like \"+ valuesToCheck);\n       }\n       break;\n     case \"PositiveInteger\":\n       valuesToCheck.forEach( function (v) {\n         if (!Number.isInteger(v) || v < 1) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a positive integer!\");\n         }\n       });\n       break;\n     case \"Number\":\n     case \"Decimal\":\n     case \"Percent\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"number\") {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a (decimal) number!\");\n         }\n       });\n       break;\n     case \"ClosedUnitInterval\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"number\") {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a (decimal) number!\");\n         } else if (v<0 || v>1) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a number in [0,1]!\");\n         }\n       });\n       break;\n     case \"OpenUnitInterval\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"number\") {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a (decimal) number!\");\n         } else if (v<=0 || v>=1) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a number in (0,1)!\");\n         }\n       });\n       break;\n     case \"Boolean\":\n       valuesToCheck.forEach( function (v,i) {\n         if (typeof v === \"string\") {\n           if ([\"true\",\"yes\"].includes(v)) valuesToCheck[i] = true;\n           else if ([\"no\",\"false\"].includes(v)) valuesToCheck[i] = false;\n           else constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n                 \" must be either 'true'/'yes' or 'false'/'no'!\");\n         } else if (typeof v !== \"boolean\") {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be either 'true' or 'false'!\");\n         }\n       });\n       break;\n     case \"Date\":\n       valuesToCheck.forEach( function (v,i) {\n         if (typeof v === \"string\" &&\n             /\\d{4}-(0\\d|1[0-2])-([0-2]\\d|3[0-1])/.test(v) && !isNaN( Date.parse(v))) {\n           valuesToCheck[i] = new Date(v);\n         } else if (!(v instanceof Date)) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be either a Date value or an ISO date string. \"+\n               v +\" is not admissible!\");\n         }\n       });\n       break;\n     case \"DateTime\":\n       valuesToCheck.forEach( function (v,i) {\n         if (typeof v === \"string\" && !isNaN( Date.parse(v))) {\n           valuesToCheck[i] = new Date(v);\n         } else if (!(v instanceof Date)) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be either a Date value or an ISO date-time string. \"+\n               v +\" is not admissible!\");\n         }\n       });\n       break;\n     default:\n       if (range instanceof eNUMERATION || typeof range === \"string\" && eNUMERATION[range]) {\n         if (typeof range === \"string\") range = eNUMERATION[range];\n         valuesToCheck.forEach( function (v) {\n           if (!Number.isInteger( v) || v < 1 || v > range.MAX) {\n             constrVio = new RangeConstraintViolation(\"The value \"+ v +\n                 \" is not an admissible enumeration integer for \"+ fld);\n           }\n         });\n       } else if (Array.isArray( range)) {\n         // *** Ad-hoc enumeration ***\n         valuesToCheck.forEach( function (v) {\n           if (range.indexOf(v) === -1) {\n             constrVio = new RangeConstraintViolation(\"The \"+ fld +\" value \"+ v +\n                 \" is not in value list \"+ range.toString());\n           }\n         });\n       } else if (typeof range === \"string\" && cLASS[range]) {\n         valuesToCheck.forEach( function (v, i) {\n           var recFldNames=[], propDefs={};\n           if (!cLASS[range].isComplexDatatype && !(v instanceof cLASS[range])) {\n             // convert IdRef to object reference\n             if (cLASS[range].instances[String(v)]) {\n               v = valuesToCheck[i] = cLASS[range].instances[String(v)];\n             } else if (optParams && optParams.checkRefInt) {\n               constrVio = new ReferentialIntegrityConstraintViolation(\"The value \" + v +\n                   \" of property '\"+ fld +\"' is not an ID of any \" + range + \" object!\");\n             }\n           } else if (cLASS[range].isComplexDatatype && typeof v === \"object\") {\n             v = Object.assign({}, v);  // use a clone\n             // v is a record that must comply with the complex datatype\n             recFldNames = Object.keys(v);\n             propDefs = cLASS[range].properties;\n             // test if all mandatory properties occur in v and if all fields of v are properties\n             if (Object.keys( propDefs).every( function (p) {return !!propDefs[p].optional || p in v;}) &&\n                 recFldNames.every( function (fld) {return !!propDefs[fld];})) {\n               recFldNames.forEach( function (p) {\n                 var validationResult = cLASS.check( p, propDefs[p], v[p]);\n                 if (validationResult instanceof NoConstraintViolation) {\n                   v[p] = validationResult.checkedValue;\n                 } else {\n                   throw validationResult;\n                 }\n               })\n             } else {\n               constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                   \" must be an instance of \"+ range +\" or a compatible record!\"+\n                   JSON.stringify(v) + \" is not admissible!\");\n             }\n/* DROP\n           } else {  // v may be a (numeric or string) ID ref\n             if (typeof v === \"string\") {\n               if (!isNaN( parseInt(v))) v = valuesToCheck[i] = parseInt(v);\n             } else if (!Number.isInteger(v)) {\n               constrVio = new RangeConstraintViolation(\"The value (\" + JSON.stringify(v) +\n                   \") of property '\" +fld + \"' is neither an integer nor a string!\");\n             }\n*/\n           }\n         });\n       } else if (typeof range === \"string\" && range.includes(\"|\")) {\n         valuesToCheck.forEach( function (v, i) {\n           var rangeTypes=[];\n           rangeTypes = range.split(\"|\");\n           if (typeof v === \"object\") {\n             if (!rangeTypes.some( function (rc) {\n               return v instanceof cLASS[rc];\n             })) {\n               constrVio = ReferentialIntegrityConstraintViolation(\"The object \" + JSON.stringify(v) +\n                   \" is not an instance of any class from \" + range + \"!\");\n             } else {\n               v = valuesToCheck[i] = v.id;  // convert to IdRef\n             }\n           } else if (Number.isInteger(v)) {\n             if (optParams && optParams.checkRefInt) {\n               if (!cLASS[range].instances[String(v)]) {\n                 constrVio = new ReferentialIntegrityConstraintViolation(\"The value \" + v +\n                     \" of property '\"+ fld +\"' is not an ID of any \" + range + \" object!\");\n               }\n             }\n           } else if (typeof v === \"string\") {\n             if (!isNaN( parseInt(v))) v = valuesToCheck[i] = parseInt(v);\n           } else {\n             constrVio = new RangeConstraintViolation(\"The value (\" + v + \") of property '\" +\n                 fld + \"' is neither an integer nor a string!\");\n           }\n         });\n       } else if (typeof range === \"object\" && range.dataType !== undefined) {\n         // the range is a (collection) datatype declaration record\n         valuesToCheck.forEach( function (v) {\n           var i = 0;\n           if (typeof v !== \"object\") {\n             constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                 \" must be an object! \" + JSON.stringify(v) + \" is not admissible!\");\n           }\n           switch (range.dataType) {\n           case \"Array\":\n             if (!Array.isArray(v)) {\n               constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                   \" must be an array! \" + JSON.stringify(v) + \" is not admissible!\");\n               break;\n             }\n             if (v.length !== range.size) {\n               constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                   \" must be an array of length \" + range.size + \"! \" + JSON.stringify(v) + \" is not admissible!\");\n               break;\n             }\n             for (i = 0; i < v.length; i++) {\n               if (!cLASS.isOfType(v[i], range.itemType)) {\n                 constrVio = new RangeConstraintViolation(\"The items of \" + fld +\n                     \" must be of type \" + range.itemType + \"! \" + JSON.stringify(v) +\n                     \" is not admissible!\");\n               }\n             }\n             break;\n           case \"ArrayList\":\n             if (!Array.isArray(v)) {\n               constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                   \" must be an array! \" + JSON.stringify(v) + \" is not admissible!\");\n               break;\n             }\n             for (i = 0; i < v.length; i++) {\n               if (!cLASS.isOfType(v[i], range.itemType)) {\n                 constrVio = new RangeConstraintViolation(\"The items of \" + fld +\n                     \" must be of type \" + range.itemType + \"! \" + JSON.stringify(v) +\n                     \" is not admissible!\");\n               }\n             }\n             break;\n           }\n         });\n       } else if (range === Object) {\n         valuesToCheck.forEach(function (v) {\n           if (!(v instanceof Object)) {\n             constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                 \" must be a JS object! \" + JSON.stringify(v) + \" is not admissible!\");\n           }\n         });\n       }\n   }\n   // return constraint violation found in range switch\n   if (constrVio) return constrVio;\n\n   /********************************************************\n    ***  Check constraints that apply to several ranges  ***\n    ********************************************************/\n   if (range === \"String\" || range === \"NonEmptyString\") {\n     valuesToCheck.forEach( function (v) {\n       if (min !== undefined && v.length < min) {\n         constrVio = new StringLengthConstraintViolation(\"The length of \"+\n             fld + \" must not be smaller than \"+ min);\n       } else if (max !== undefined && v.length > max) {\n         constrVio = new StringLengthConstraintViolation(\"The length of \"+\n             fld + \" must not be greater than \"+ max);\n       } else if (pattern !== undefined && !pattern.test( v)) {\n         constrVio = new PatternConstraintViolation( msg || v +\n             \"does not comply with the pattern defined for \"+ fld);\n       }\n     });\n   }\n   if (range === \"Integer\" || range === \"NonNegativeInteger\" ||\n       range === \"PositiveInteger\") {\n     valuesToCheck.forEach( function (v) {\n       if (min !== undefined && v < min) {\n         constrVio = new IntervalConstraintViolation( fld +\n             \" must be greater than \"+ min);\n       } else if (max !== undefined && v > max) {\n         constrVio = new IntervalConstraintViolation( fld +\n             \" must be smaller than \"+ max);\n       }\n     });\n   }\n   if (constrVio) return constrVio;\n\n   /********************************************************\n    ***  Check cardinality constraints  *********************\n    ********************************************************/\n   if (maxCard > 1) { // (a multi-valued property can be array- or map-valued)\n     // check minimum cardinality constraint\n     if (minCard > 0 && valuesToCheck.length < minCard) {\n       return new CardinalityConstraintViolation(\"A collection of at least \"+\n           minCard +\" values is required for \"+ fld);\n     }\n     // check maximum cardinality constraint\n     if (valuesToCheck.length > maxCard) {\n       return new CardinalityConstraintViolation(\"A collection value for \"+\n           fld +\" must not have more than \"+ maxCard +\" members!\");\n     }\n   }\n   // return deserialized value available in validationResult.checkedValue\n   return new NoConstraintViolation( maxCard === 1 ? valuesToCheck[0] : valuesToCheck);\n };\n /**\n  * Map range datatype to JS datatype.\n  * @method\n  * @author Gerd Wagner\n  * @return {string}\n  */\n cLASS.range2JsDataType = function ( range) {\n   var jsDataType=\"\";\n   switch (range) {\n     case \"String\":\n     case \"NonEmptyString\":\n     case \"Email\":\n     case \"URL\":\n     case \"PhoneNumber\":\n     case \"Date\":\n       jsDataType = \"string\";\n       break;\n     case \"Integer\":\n     case \"NonNegativeInteger\":\n     case \"PositiveInteger\":\n     case \"Number\":\n     case \"AutoNumber\":\n     case \"Decimal\":\n     case \"Percent\":\n     case \"ClosedUnitInterval\":\n     case \"OpenUnitInterval\":\n       jsDataType = \"number\";\n       break;\n     case \"Boolean\":\n       jsDataType = \"boolean\";\n       break;\n     default:\n       if (range instanceof eNUMERATION) {\n         jsDataType = \"number\";\n       } else if (typeof range === \"string\" && cLASS[range]) {\n         jsDataType = \"string\";  // for the standard ID (TODO: can also be \"number\")\n       } else if (typeof range === \"object\") {  // a.g. Array or Object\n         jsDataType = \"object\";\n       }\n   }\n   return jsDataType;\n };\n /**\n  * Check if a value is of some type.\n  * @method\n  * @author Gerd Wagner\n  * @return {boolean}\n  */\n cLASS.isOfType = function ( v, Type) {\n   switch (Type) {\n     case \"String\": return (typeof v === \"string\");\n     case \"NonEmptyString\": return (typeof v === \"string\" && v.trim() !== \"\");\n     case \"Integer\": return Number.isInteger(v);\n     case \"NonNegativeInteger\": return (Number.isInteger(v) && v >= 0);\n     case \"PositiveInteger\": return (Number.isInteger(v) && v > 0);\n     case \"Decimal\": return (typeof v === \"number\");\n     case \"ClosedUnitInterval\":\n       return (typeof v === \"number\" && v>=0 && v<=1);\n     case \"OpenUnitInterval\":\n       return (typeof v === \"number\" && v>0 && v<1);\n     default: return true;\n   }\n };\n\n /********************************************************\n  ***  Collection datatypes  *****************************\n  ********************************************************/\n/*\n * cLASS datatypes, such as collection types, are defined in the form of\n * cOLLECTIONdATATYPE objects that specify the collection type, the\n * item type and the size of the collection.\n */\n cLASS.cOLLECTIONdATATYPE = function (typeName, itemType, size, optParams) {\n   this.type = typeName;\n   this.itemType = itemType;\n   this.size = size;\n   this.optParams = optParams;\n };\n cLASS.Array = function (itemType, size, optParams) {\n  if (this instanceof cLASS.Array) {\n    // called with new, so return an array object\n    this.type = \"Array\";\n    this.itemType = itemType;\n    this.size = size;\n    if (optParams) {\n      if (optParams.constraints) this.constraints = optParams.constraints; //TODO\n      if (optParams.decimalPlaces) this.decimalPlaces = optParams.decimalPlaces;\n    }\n    this.array = new Array( size);\n  } else {\n    // called without new, return an object representing an Array datatype\n    return new cLASS.cOLLECTIONdATATYPE(\"Array\",\n        {itemType:itemType, size:size, optParams:optParams});\n  }\n };\ncLASS.ArrayList = function (itemType, constraints) {\n   if (constraints) {\n     return {dataType:\"ArrayList\", itemType: itemType, constraints: constraints};\n   } else return {dataType:\"ArrayList\", itemType: itemType};\n };\ncLASS.Map = function (itemType, constraints) {\n  if (constraints) {\n    return {dataType:\"Map\", itemType: itemType, constraints: constraints};\n  } else return {dataType:\"Map\", itemType: itemType};\n};\n\ncLASS.RingBuffer = function (itemType, size, optParams) {\n  if (this instanceof cLASS.RingBuffer) {\n    // called with new, so return a ring buffer object\n    this.type = \"RingBuffer\";\n    this.itemType = itemType;\n    this.size = size;\n    if (optParams) {\n      if (optParams.constraints) this.constraints = optParams.constraints; //TODO\n      if (optParams.decimalPlaces) this.decimalPlaces = optParams.decimalPlaces;\n    }\n    this.first = 0;  // index of first item\n    this.last = -1;  // index of last item\n    this.buffer = new Array( size);\n  } else {\n    // called without new, return an object representing a RingBuffer datatype\n    return new cLASS.cOLLECTIONdATATYPE(\"RingBuffer\",\n        {itemType:itemType, size:size, optParams:optParams});\n  }\n};\ncLASS.RingBuffer.prototype.nmrOfItems = function () {\n  if (this.last === -1) return 0;\n  else if (this.first <= this.last) return this.last - this.first + 1;\n  else return this.last + this.size - this.first + 1;\n};\ncLASS.RingBuffer.prototype.add = function (item) {\n  if (this.nmrOfItems() < this.size) {\n   this.last++;  // still filling the buffer\n  } else {  // buffer is full, move both pointers\n   this.first = (this.first+1) % this.size;\n   this.last = (this.last+1) % this.size;\n  }\n  this.buffer[this.last] = item;\n};\ncLASS.RingBuffer.prototype.toString = function (n) {\n  var i=0, str = \"[\", item, roundingFactor=1,\n      N = this.nmrOfItems(),\n      outputLen = n ? Math.min( n, N) : N;\n  if (N === 0) return \" \";\n  for (i=0; i < outputLen; i++) {\n    item = this.buffer[(this.first+i) % this.size];\n    // serialize enum values as labels\n    if (this.itemType instanceof eNUMERATION) item = this.itemType.labels[item-1];\n    else if (cLASS.isDecimalType( this.itemType)) {\n      //decimalPlaces:\n      roundingFactor = Math.pow( 10, this.decimalPlaces);\n      item = Math.round( item * roundingFactor) / roundingFactor;\n    }\n    str += item;\n    if (i < outputLen-1) str += \", \";\n  }\n  return str + \"]\";\n };\n// Simple Moving Average (SMA)\n cLASS.RingBuffer.prototype.getSMA = function (n) {\n   var N = this.nmrOfItems(), i=0, val=0, sum=0;\n   if (n) N = Math.min( n, N);\n   for (i=0; i < N; i++) {\n     val = this.buffer[(this.first+i) % this.size];\n     sum += val;\n   }\n   return sum / N;\n };\n\n'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n\n/**\n * @fileOverview  This file contains the definition of the library class\n * sTORAGEmANAGER.\n * @author Gerd Wagner\n * @copyright Copyright 2015 Gerd Wagner, Chair of Internet Technology,\n *   Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n */\n/**\n * Library class providing storage management methods for a number of predefined\n * storage adapters\n *\n * @constructor\n * @this {sTORAGEmANAGER}\n * @param storageAdapter: object\n */\nfunction sTORAGEmANAGER( storageAdapter) {\n  if (typeof storageAdapter !== 'object' ||\n      typeof storageAdapter.name !== \"string\" ||\n      !([\"LocalStorage\",\"IndexedDB\",\"MariaDB\"].includes( storageAdapter.name))) {\n    throw new ConstraintViolation(\"Invalid storage adapter name!\");\n  } else if (!storageAdapter.dbName) {\n    throw new ConstraintViolation(\"Storage adapter: missing DB name!\");\n  } else {\n    this.adapter = storageAdapter;\n    // if \"LocalStorage\", create a main memory DB\n    if (storageAdapter.name === \"LocalStorage\") {\n      Object.keys( cLASS).forEach( function (key) {\n        // load all cLASSes\n        if (cLASS[key].instances) {\n          sTORAGEmANAGER.adapters[\"LocalStorage\"].retrieveLsTable( cLASS[key]);\n        }\n      });\n    }\n  }\n  // copy storage adapter to the corresponding adapter's storage management method library\n  sTORAGEmANAGER.adapters[this.adapter.name].currentAdapter = storageAdapter;\n}\n/**\n * Generic method for creating an empty DB\n * @method\n */\nsTORAGEmANAGER.prototype.createEmptyDb = function (classes) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName;\n  return new Promise( function (resolve) {\n    var modelClasses=[];\n    if (Array.isArray( classes) && classes.length > 0) {\n      modelClasses = classes;\n    } else {\n      Object.keys( cLASS).forEach( function (key) {\n        // test if cLASS[key] represents a cLASS\n        if (typeof cLASS[key] === \"function\" && cLASS[key].properties) {\n          // collect all non-abstract cLASSes that are not datatype classes\n          if (!cLASS[key].isAbstract && !cLASS[key].isComplexDatatype) {\n            modelClasses.push( cLASS[key]);\n          }\n        }\n      });\n    }\n    sTORAGEmANAGER.adapters[adapterName].createEmptyDb( dbName, modelClasses)\n    .then( resolve);\n  });\n};\n/**\n * Generic method for creating and \"persisting\" new model objects\n * @method\n * @param {object} mClass  The model cLASS concerned\n * @param {object} rec  A record or record list\n */\nsTORAGEmANAGER.prototype.add = function (mClass, rec) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName,\n      createLog = this.createLog,\n      checkConstraints = this.validateBeforeSave,\n      records=[], validRecords=[];\n  if (typeof rec === \"object\" && !Array.isArray(rec)) {\n    records = [rec];\n  } else if (Array.isArray(rec) && rec.every( function (r) {\n             return typeof r === \"object\" && !Array.isArray(r)})) {\n    records = rec;\n  } else throw Error(\"2nd argument of 'add' must be a record or record list!\");\n  // create auto-IDs if required\n  if (mClass.properties.id && mClass.properties.id.range === \"AutoNumber\") {\n    records.forEach( function (r) {\n      if (!r.id) {  // do not overwrite assigned ID values\n        if (typeof mClass.getAutoId === \"function\") r.id = mClass.getAutoId();\n        else if (mClass.idCounter !== undefined) r.id = ++mClass.idCounter;\n      }\n    })\n  }\n  // check constraints before save if required\n  if (checkConstraints) {\n    records.forEach( function (r) {\n      var newObj=null;\n      if (r instanceof mClass) {\n        validRecords.push( r);\n      } else {\n        try {newObj = new mClass( r);}  // check constraints\n        catch (e) {\n          if (e instanceof ConstraintViolation) {\n            console.log( e.constructor.name +\": \"+ e.message);\n          } else console.log( e);\n        }\n        if (newObj) validRecords.push( newObj);\n      }\n    });\n    records = validRecords;\n  }\n  return new Promise( function (resolve) {\n    sTORAGEmANAGER.adapters[adapterName].add( dbName, mClass, records).then( function () {\n      if (createLog) console.log( records.length +\" \"+ mClass.Name +\"(s) added.\");\n      if (typeof resolve === \"function\") resolve();\n    }).catch( function (error) {\n      console.log( error.name +\": \"+ error.message);\n    });\n  });\n};\n/**\n * Generic method for loading/retrieving a model object\n * @method\n * @param {object} mc  The model cLASS concerned\n * @param {string|number} id  The object ID value\n */\nsTORAGEmANAGER.prototype.retrieve = function (mc, id) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName;\n  return new Promise( function (resolve) {\n    sTORAGEmANAGER.adapters[adapterName].retrieve( dbName, mc, id)\n    .then( function (obj) {\n      if (!obj) {\n        obj = null;\n        console.log(\"There is no \" + mc.Name + \" with ID value \" + id + \" in the database!\");\n      }\n      resolve( obj);\n    });\n  });\n};\n/**\n * Generic method for loading all table rows and converting them\n * to model objects\n *\n * @method\n * @param {object} mc  The model cLASS concerned\n */\nsTORAGEmANAGER.prototype.retrieveAll = function (mc) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName,\n      createLog = this.createLog,\n      validateAfterRetrieve = this.validateAfterRetrieve;\n  return new Promise( function (resolve) {\n    sTORAGEmANAGER.adapters[adapterName].retrieveAll( dbName, mc)\n    .then( function (records) {\n      var i=0, newObj=null;\n      if (createLog) {\n        console.log( records.length +\" \"+ mc.Name +\" records retrieved.\")\n      }\n      if (validateAfterRetrieve) {\n        for (i=0; i < records.length; i++) {\n          try {\n            newObj = new mc( records[i]);\n          } catch (e) {\n            if (e instanceof ConstraintViolation) {\n              console.log( e.constructor.name +\": \"+ e.message);\n            } else console.log( e.name +\": \"+ e.message);\n          }\n        }\n      }\n      resolve( records);\n    })\n  });\n};\n/**\n * Generic method for updating model objects\n * @method\n * @param {object} mc  The model cLASS concerned\n * @param {string|number} id  The object ID value\n * @param {object} slots  The object's update slots\n */\nsTORAGEmANAGER.prototype.update = function (mc, id, slots) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName, \n      currentSM = this;\n  return new Promise( function (resolve) {\n    var objectBeforeUpdate = null, properties = mc.properties,\n        updatedProperties=[], noConstraintViolated = true,\n        updSlots = util.cloneObject( slots);\n    // first check if object exists\n    currentSM.retrieve( mc, id).then( function (objToUpdate) {\n      if (objToUpdate) {\n        if (typeof objToUpdate === \"object\" && objToUpdate.constructor !== mc) {\n          // if the retrieved objToUpdate is not of type mc, check integrity constraints\n          objToUpdate = mc.createObjectFromRecord( objToUpdate);\n          if (!objToUpdate) return;  // constraint violation\n        }\n        objectBeforeUpdate = util.cloneObject( objToUpdate);\n        try {\n          Object.keys( slots).forEach( function (prop) {\n            var oldVal = objToUpdate[prop],\n                newVal = slots[prop],\n                propDecl = properties[prop];\n            if (prop !== \"id\") {\n              if (propDecl.maxCard === undefined || propDecl.maxCard === 1) {  // single-valued\n                if (Number.isInteger( oldVal) && newVal !== \"\") {\n                  newVal = parseInt( newVal);\n                } else if (typeof oldVal === \"number\" && newVal !== \"\") {\n                  newVal = parseFloat( newVal);\n                } else if (oldVal===undefined && newVal===\"\") {\n                  newVal = undefined;\n                }\n                if (newVal !== oldVal) {\n                  updatedProperties.push( prop);\n                  objToUpdate.set( prop, newVal);  // also checking constraints\n                } else {\n                  delete updSlots[prop];\n                }\n              } else {   // multi-valued\n                if (oldVal.length !== newVal.length ||\n                    oldVal.some( function (vi,i) { return (vi !== newVal[i]);})) {\n                  objToUpdate.set(prop, newVal);\n                  updatedProperties.push(prop);\n                } else {\n                  delete updSlots[prop];\n                }\n              }\n            }\n          });\n        } catch (e) {\n          console.log( e.constructor.name +\": \"+ e.message);\n          noConstraintViolated = false;\n          // restore object to its state before updating\n          objToUpdate = objectBeforeUpdate;\n        }\n        if (noConstraintViolated) {\n          if (updatedProperties.length > 0) {\n            sTORAGEmANAGER.adapters[adapterName].update( dbName, mc, id, slots, updSlots)\n            .then( function () {\n              console.log(\"Properties \"+ updatedProperties.toString() +\n                  \" of \"+ mc.Name +\" \"+ id +\" updated.\");\n              if (typeof resolve === \"function\") resolve();\n            });\n          } else {\n            console.log(\"No property value changed for \"+ mc.Name +\" \"+ id +\"!\");\n          }\n        }\n      }\n    });\n  });\n};\n/**\n * Generic method for deleting model objects\n * @method\n * @param {object} mc  The model cLASS concerned\n * @param {string|number} id  The object ID value\n */\nsTORAGEmANAGER.prototype.destroy = function (mc, id) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName,\n      currentSM = this;\n  return new Promise( function (resolve) {\n    currentSM.retrieve( mc, id).then( function (record) {\n      if (record) {\n        sTORAGEmANAGER.adapters[adapterName].destroy( dbName, mc, id)\n        .then( function () {\n          console.log( mc.Name +\" \"+ id +\" deleted.\");\n          if (typeof resolve === \"function\") resolve();\n        });\n      } else {\n        console.log(\"There is no \"+ mc.Name +\" with ID value \"+ id +\" in the database!\");\n      }\n    });\n  });\n};\n/**\n * Generic method for clearing the DB table, or object store, of a cLASS\n * @method\n */\nsTORAGEmANAGER.prototype.clearTable = function (mc) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName;\n  return new Promise( function (resolve) {\n    sTORAGEmANAGER.adapters[adapterName].clearTable( dbName, mc)\n    .then( resolve);\n  });\n};\n/**\n * Generic method for clearing the DB of an app\n * @method\n */\nsTORAGEmANAGER.prototype.clearDB = function () {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName;\n  return new Promise( function (resolve) {\n    if ((typeof confirm === \"function\" &&\n        confirm(\"Do you really want to delete all data?\")) ||\n        typeof confirm !== \"function\") {\n      sTORAGEmANAGER.adapters[adapterName].clearDB( dbName)\n      .then( resolve);\n    }\n  });\n};\n/**\n * Generic method for storing unsaved data on page unload\n * @method\n */\nsTORAGEmANAGER.prototype.saveOnUnload = function () {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName;\n  sTORAGEmANAGER.adapters[adapterName].saveOnUnload( dbName);\n};\n\nsTORAGEmANAGER.adapters = {};\n\n\n/*****************************************************************************\n * Storage management methods for the \"LocalStorage\" adapter\n * Only in the case of \"LocalStorage\", due to its non-concurrent architecture,\n * the entire data is loaded into a kind of main memory DB, which is saved\n * back to LocalStorage on page unload.\n ****************************************************************************/\nsTORAGEmANAGER.adapters[\"LocalStorage\"] = {\n  //-----------------------------------------------------------------\n  createEmptyDb: function (dbName, modelClasses) {\n  //-----------------------------------------------------------------\n    // nothing to do\n    return new Promise( function (resolve) {\n      resolve();\n    });\n  },\n  //------------------------------------------------\n  add: function (dbName, mc, records) {  // does not access localStorage\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var newObj=null;\n      if (!Array.isArray( records)) {  // single record insertion\n        records = [records];\n      }\n      records.forEach( function (rec) {\n        newObj = new mc( rec);\n        mc.instances[newObj.id] = newObj;\n      })\n      resolve( newObj);\n    });\n  },\n  //------------------------------------------------\n  retrieve: function (dbName, mc, id) {  // does not access localStorage\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      resolve( mc.instances[id]);\n    });\n  },\n  //-------------------------------------------------------------\n  // *** A LocalStorage-specific, and not an interface method ***\n  //-------------------------------------------------------------\n  retrieveLsTable: function (mc) {\n  //-------------------------------------------------------------\n    var key=\"\", keys=[], i=0,\n        tableString=\"\", table={},\n        tableName = util.class2TableName( mc.Name);\n    try {\n      if (localStorage[tableName]) {\n        tableString = localStorage[tableName];\n      }\n    } catch (e) {\n      console.log( \"Error when reading from Local Storage\\n\" + e);\n    }\n    if (tableString) {\n      table = JSON.parse( tableString);\n      keys = Object.keys( table);\n      console.log( keys.length + \" \" + mc.Name + \" records loaded.\");\n      for (i=0; i < keys.length; i++) {\n        key = keys[i];\n        mc.instances[key] = mc.createObjectFromRecord( table[key]);\n      }\n    }\n  },\n  //------------------------------------------------\n  retrieveAll: function (dbName, mc) {\n    //------------------------------------------------\n    var  currentSM = this;\n    return new Promise( function (resolve) {\n      var records=[];\n      /* OLD\n      function retrieveAll (mc) {\n        var key = \"\", keys = [], i = 0,\n            tableString = \"\", table={},\n            tableName = util.class2TableName( mc.Name);\n        // do no retrieve the same class population twice\n        if (Object.keys( mc.instances).length > 0) return;\n        // first retrieve the population of the classes that are ranges of reference properties\n        Object.keys( mc.properties).forEach( function (p) {\n          var range = mc.properties[p].range;\n          if (range instanceof cLASS) retrieveAll( range);\n        });\n        currentSM.retrieveTable( mc);      }\n      retrieveAll( mc);\n      */\n      // convert entity map mc.instances to an array list\n      records = Object.keys( mc.instances).map( function (key) {return mc.instances[key];});\n      resolve( records);\n    });\n  },\n  //------------------------------------------------\n  update: function (dbName, mc, id, slots) {  // does not access localStorage\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      // in-memory object has already been updated in the generic update\n      /*\n      Object.keys( slots).forEach( function (prop) {\n        obj = mc.instances[id];\n        obj[prop] = slots[prop];\n      });\n      */\n      resolve();\n    });\n  },\n  //------------------------------------------------\n  destroy: function (dbName, mc, id) {  // does not access localStorage\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      delete mc.instances[id];\n      resolve();\n    });\n  },\n  //------------------------------------------------\n  clearTable: function (dbName, mc) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      mc.instances = {};\n      try {\n        localStorage[tableName] = JSON.stringify({});\n        console.log(\"Table \"+ tableName +\" cleared.\");\n      } catch (e) {\n        console.log(\"Error when writing to Local Storage\\n\" + e);\n      }\n      resolve();\n    });\n  },\n  //------------------------------------------------\n  clearDB: function () {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      Object.keys( cLASS).forEach( function (key) {\n        var tableName=\"\";\n        if (!cLASS[key].isComplexDatatype && Object.keys( cLASS[key].instances).length > 0) {\n          cLASS[key].instances = {};\n          tableName = mc.tableName || util.class2TableName( cLASS[key].Name);\n          try {\n            localStorage[tableName] = JSON.stringify({});\n          } catch (e) {\n            console.log(\"Error when writing to Local Storage\\n\" + e);\n          }\n        }\n      });\n      resolve();\n    });\n  },\n  //------------------------------------------------\n  saveOnUnload: function () {\n  //------------------------------------------------\n    Object.keys( cLASS).forEach( function (key) {\n      var id=\"\", table={}, obj=null, i=0, mc=null,\n          keys=[], tableName=\"\";\n      if (cLASS[key].instances) {\n        mc = cLASS[key];\n        keys = Object.keys( mc.instances)\n        tableName = util.class2TableName( mc.Name);\n        for (i=0; i < keys.length; i++) {\n          id = keys[i];\n          obj = mc.instances[id];\n          table[id] = obj.toRecord();\n        }\n        try {\n          localStorage[tableName] = JSON.stringify( table);\n          console.log( keys.length +\" \"+ mc.Name +\" records saved.\");\n        } catch (e) {\n          console.log(\"Error when writing to Local Storage\\n\" + e);\n        }\n      }\n    });\n  }\n};\n/**\n * @fileOverview  Storage management methods for the \"IndexedDB\" adapter\n * @author Gerd Wagner\n * @copyright Copyright 2017 Gerd Wagner, Chair of Internet Technology,\n *   Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n */\nsTORAGEmANAGER.adapters[\"IndexedDB\"] = {\n  //------------------------------------------------\n  createEmptyDb: function (dbName, modelClasses) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      idb.open( dbName, 1, function (upgradeDb) {\n        modelClasses.forEach( function (mc) {\n          var tableName = mc.tableName || util.class2TableName( mc.Name),\n              keyPath = mc.primaryKey || \"id\";\n          if (!upgradeDb.objectStoreNames.contains( tableName)) {\n            upgradeDb.createObjectStore( tableName, {keyPath: keyPath});\n          }\n        })\n      }).then( resolve);\n    });\n  },\n  //------------------------------------------------\n  add: function (dbName, mc, records) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readwrite\");\n        var os = tx.objectStore( tableName);\n        // Promise.all takes a list of promises and resolves if all of them do\n        return Promise.all( records.map( function (rec) {return os.add( rec);}))\n            .then( function () {return tx.complete;});\n      }).then( resolve)\n      .catch( function (err) {\n        console.log( err.name +\": \"+ err.message +\"Table: \"+ tableName);}\n      );\n    });\n  },\n  //------------------------------------------------\n  retrieve: function (dbName, mc, id) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readonly\");\n        var os = tx.objectStore( tableName);\n        return os.get( id);\n      }).then( function( result) {\n        if (result === undefined) result = null;\n        resolve( result);\n      }).catch( function (err) {console.log( err.name +\": \"+ err.message);});\n    });\n  },\n  //------------------------------------------------\n  retrieveAll: function (dbName, mc) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readonly\");\n        var os = tx.objectStore( tableName);\n        return os.getAll();\n      }).then( function (results) {\n        if (results === undefined) results = [];\n        resolve( results);\n      }).catch( function (err) {console.log( err.name +\": \"+ err.message);});\n    });\n  },\n  //------------------------------------------------\n  update: function (dbName, mc, id, slots) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readwrite\");\n        var os = tx.objectStore( tableName);\n        slots[\"id\"] = id;\n        os.put( slots);\n        return tx.complete;\n      }).then( resolve)\n      .catch( function (err) {\n        console.log( err.name +\": \"+ err.message +\"Table: \"+ tableName);}\n      );\n    });\n  },\n  //------------------------------------------------\n  destroy: function (dbName, mc, id) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readwrite\");\n        var os = tx.objectStore( tableName);\n        os.delete( id);\n        return tx.complete;\n      }).then( resolve)\n      .catch( function (err) {console.log( err.name +\": \"+ err.message);});\n    });\n  },\n  //------------------------------------------------\n  clearTable: function (dbName, mc) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readwrite\");\n        var os = tx.objectStore( tableName);\n        os.clear();\n        return tx.complete;\n      }).then( resolve)\n      .catch( function (err) {console.log( err.name +\": \"+ err.message);});\n    });\n  },\n  //------------------------------------------------\n  clearDB: function (dbName) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( idbCx.objectStoreNames, \"readwrite\");\n        // Promise.all takes a list of promises and resolves if all of them do\n        return Promise.all( Array.from( idbCx.objectStoreNames,\n            function (osName) {return tx.objectStore( osName).clear();}))\n            .then( function () {return tx.complete;});\n      }).then( resolve)\n      .catch( function (err) {console.log( err.name +\": \"+ err.message);});\n    });\n  },\n  //------------------------------------------------\n  saveOnUnload: function (dbName) {  // not yet implemented\n  //------------------------------------------------\n  }\n};\n/**\n * @fileOverview  A port of a C implementation of MT19937, providing a collection of classes\n * and methods used to generate random numbers and random variates. From the Random.js library\n * of SimJS.\n *\n * @copyright Copyright © 1997-2002, Makoto Matsumoto and Takuji Nishimura.\n * @license LGPL\n */\n\n\n/*\n A C-program for MT19937, with initialization improved 2002/1/26.\n Coded by Takuji Nishimura and Makoto Matsumoto.\n\n Before using, initialize the state by using init_genrand(seed)\n or init_by_array(init_key, key_length).\n\n Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\n All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions\n are met:\n\n 1. Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in the\n documentation and/or other materials provided with the distribution.\n\n 3. The names of its contributors may not be used to endorse or promote\n products derived from this software without specific prior written\n permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// default non-seeded random stream based on Math.random\nvar rand = null;\n\n/***\n * The following constructor function definition has been modified\n * Use new Date()).getTime() as seed for getting MT with a randomized seed\n */\nvar Random = function( seed) {\n  if (seed === undefined) {\n    this.random = Math.random;  // use the JS built-in RNG\n  } else {  // use the Mersenne Twister\n    if (!Number.isInteger( seed)) {\n      throw new TypeError(\"Seed value must be an integer\");\n    }\n    /* Period parameters */\n    this.N = 624;\n    this.M = 397;\n    this.MATRIX_A = 0x9908b0df;   /* constant vector a */\n    this.UPPER_MASK = 0x80000000; /* most significant w-r bits */\n    this.LOWER_MASK = 0x7fffffff; /* least significant r bits */\n\n    this.mt = new Array(this.N); /* the array for the state vector */\n    this.mti=this.N+1; /* mti==N+1 means mt[N] is not initialized */\n\n    //this.init_genrand(seed);\n    this.init_by_array([seed], 1);\n  }\n};\n\n/* initializes mt[N] with a seed */\nRandom.prototype.init_genrand = function(s) {\n  this.mt[0] = s >>> 0;\n  for (this.mti=1; this.mti<this.N; this.mti++) {\n    var s = this.mt[this.mti-1] ^ (this.mt[this.mti-1] >>> 30);\n    this.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253)\n        + this.mti;\n    /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\n    /* In the previous versions, MSBs of the seed affect   */\n    /* only MSBs of the array mt[].                        */\n    /* 2002/01/09 modified by Makoto Matsumoto             */\n    this.mt[this.mti] >>>= 0;\n    /* for >32 bit machines */\n  }\n};\n\n/* initialize by an array with array-length */\n/* init_key is the array for initializing keys */\n/* key_length is its length */\n/* slight change for C++, 2004/2/26 */\nRandom.prototype.init_by_array = function(init_key, key_length) {\n  var i, j, k;\n  this.init_genrand(19650218);\n  i=1; j=0;\n  k = (this.N>key_length ? this.N : key_length);\n  for (; k; k--) {\n    var s = this.mt[i-1] ^ (this.mt[i-1] >>> 30);\n    this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525)))\n        + init_key[j] + j; /* non linear */\n    this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\n    i++; j++;\n    if (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }\n    if (j>=key_length) j=0;\n  }\n  for (k=this.N-1; k; k--) {\n    var s = this.mt[i-1] ^ (this.mt[i-1] >>> 30);\n    this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941))\n        - i; /* non linear */\n    this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\n    i++;\n    if (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }\n  }\n\n  this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */\n};\n\n/* generates a random number on [0,0xffffffff]-interval */\nRandom.prototype.genrand_int32 = function() {\n  var y;\n  var mag01 = new Array(0x0, this.MATRIX_A);\n  /* mag01[x] = x * MATRIX_A  for x=0,1 */\n\n  if (this.mti >= this.N) { /* generate N words at one time */\n    var kk;\n\n    if (this.mti == this.N+1)   /* if init_genrand() has not been called, */\n      this.init_genrand(5489); /* a default initial seed is used */\n\n    for (kk=0;kk<this.N-this.M;kk++) {\n      y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);\n      this.mt[kk] = this.mt[kk+this.M] ^ (y >>> 1) ^ mag01[y & 0x1];\n    }\n    for (;kk<this.N-1;kk++) {\n      y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);\n      this.mt[kk] = this.mt[kk+(this.M-this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];\n    }\n    y = (this.mt[this.N-1]&this.UPPER_MASK)|(this.mt[0]&this.LOWER_MASK);\n    this.mt[this.N-1] = this.mt[this.M-1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n    this.mti = 0;\n  }\n\n  y = this.mt[this.mti++];\n\n  /* Tempering */\n  y ^= (y >>> 11);\n  y ^= (y << 7) & 0x9d2c5680;\n  y ^= (y << 15) & 0xefc60000;\n  y ^= (y >>> 18);\n\n  return y >>> 0;\n};\n\n/* generates a random number on [0,0x7fffffff]-interval */\nRandom.prototype.genrand_int31 = function() {\n  return (this.genrand_int32()>>>1);\n};\n\n/* generates a random number on [0,1]-real-interval */\nRandom.prototype.genrand_real1 = function() {\n  return this.genrand_int32()*(1.0/4294967295.0);\n  /* divided by 2^32-1 */\n};\n\n/* generates a random number on [0,1)-real-interval */\nRandom.prototype.random = function() {\n  if (this.pythonCompatibility) {\n    if (this.skip) {\n      this.genrand_int32();\n    }\n    this.skip = true;\n  }\n  return this.genrand_int32()*(1.0/4294967296.0);\n  /* divided by 2^32 */\n};\n\n/* generates a random number on (0,1)-real-interval */\nRandom.prototype.genrand_real3 = function() {\n  return (this.genrand_int32() + 0.5)*(1.0/4294967296.0);\n  /* divided by 2^32 */\n};\n\n/* generates a random number on [0,1) with 53-bit resolution*/\nRandom.prototype.genrand_res53 = function() {\n  var a=this.genrand_int32()>>>5, b=this.genrand_int32()>>>6;\n  return(a*67108864.0+b)*(1.0/9007199254740992.0);\n};\n\n/* These real versions are due to Isaku Wada, 2002/01/09 added */\n\n\n/**************************************************************************/\nRandom.prototype.LOG4 = Math.log(4.0);\nRandom.prototype.SG_MAGICCONST = 1.0 + Math.log(4.5);\n\nRandom.prototype.exponential = function (lambda) {\n  if (arguments.length != 1) {                         // ARG_CHECK\n    throw new SyntaxError(\"exponential() must \"     // ARG_CHECK\n        + \" be called with 'lambda' parameter\"); // ARG_CHECK\n  }                                                   // ARG_CHECK\n  var r = this.random();\n  return -Math.log(r) / lambda;\n};\n\nRandom.prototype.gamma = function (alpha, beta) {\n  if (arguments.length != 2) {                         // ARG_CHECK\n    throw new SyntaxError(\"gamma() must be called\"  // ARG_CHECK\n        + \" with alpha and beta parameters\"); // ARG_CHECK\n  }                                                   // ARG_CHECK\n  /* Based on Python 2.6 source code of random.py.\n   */\n  if (alpha > 1.0) {\n    var ainv = Math.sqrt(2.0 * alpha - 1.0);\n    var bbb = alpha - this.LOG4;\n    var ccc = alpha + ainv;\n    while (true) {\n      var u1 = this.random();\n      if ((u1 < 1e-7) || (u > 0.9999999)) {\n        continue;\n      }\n      var u2 = 1.0 - this.random();\n      var v = Math.log(u1 / (1.0 - u1)) / ainv;\n      var x = alpha * Math.exp(v);\n      var z = u1 * u1 * u2;\n      var r = bbb + ccc * v - x;\n      if ((r + this.SG_MAGICCONST - 4.5 * z >= 0.0) || (r >= Math.log(z))) {\n        return x * beta;\n      }\n    }\n  } else if (alpha == 1.0) {\n    var u = this.random();\n    while (u <= 1e-7) {\n      u = this.random();\n    }\n    return - Math.log(u) * beta;\n  } else {\n    while (true) {\n      var u = this.random();\n      var b = (Math.E + alpha) / Math.E;\n      var p = b * u;\n      if (p <= 1.0) {\n        var x = Math.pow(p, 1.0 / alpha);\n      } else {\n        var x = - Math.log((b - p) / alpha);\n      }\n      var u1 = this.random();\n      if (p > 1.0) {\n        if (u1 <= Math.pow(x, (alpha - 1.0))) {\n          break;\n        }\n      } else if (u1 <= Math.exp(-x)) {\n        break;\n      }\n    }\n    return x * beta;\n  }\n\n};\n\nRandom.prototype.normal = function (mu, sigma) {\n  if (arguments.length != 2) {                          // ARG_CHECK\n    throw new SyntaxError(\"normal() must be called\"  // ARG_CHECK\n        + \" with mu and sigma parameters\");      // ARG_CHECK\n  }                                                    // ARG_CHECK\n  var z = this.lastNormal;\n  this.lastNormal = NaN;\n  if (!z) {\n    var a = this.random() * 2 * Math.PI;\n    var b = Math.sqrt(-2.0 * Math.log(1.0 - this.random()));\n    z = Math.cos(a) * b;\n    this.lastNormal = Math.sin(a) * b;\n  }\n  return mu + z * sigma;\n};\n\nRandom.prototype.pareto = function (alpha) {\n  if (arguments.length != 1) {                         // ARG_CHECK\n    throw new SyntaxError(\"pareto() must be called\" // ARG_CHECK\n        + \" with alpha parameter\");             // ARG_CHECK\n  }                                                   // ARG_CHECK\n  var u = this.random();\n  return 1.0 / Math.pow((1 - u), 1.0 / alpha);\n};\n\nRandom.prototype.weibull = function (alpha, beta) {\n  if (arguments.length != 2) {                         // ARG_CHECK\n    throw new SyntaxError(\"weibull() must be called\" // ARG_CHECK\n        + \" with alpha and beta parameters\");    // ARG_CHECK\n  }                                                   // ARG_CHECK\n  var u = 1.0 - this.random();\n  return alpha * Math.pow(-Math.log(u), 1.0 / beta);\n};\n\nRandom.prototype.triangular = function (lower, upper, mode) {\n  // http://en.wikipedia.org/wiki/Triangular_distribution\n  if (arguments.length != 3) {\n    throw new SyntaxError(\"triangular() must be called\"\n        + \" with 3 parameters (lower, upper and mode)\");\n  }\n  if (!(lower < upper && lower <= mode && mode <= upper)) {\n    throw new SyntaxError(\"The lower, upper and mode parameters \" +\n        \"must satisfy the conditions l < U and l <= m <= u!\");\n  }\n  var c = (mode - lower) / (upper - lower);\n  var u = this.random();\n  if (u <= c) {\n    return lower + Math.sqrt(u * (upper - lower) * (mode - lower));\n  } else {\n    return upper - Math.sqrt((1 - u) * (upper - lower) * (upper - mode));\n  }\n};\n\nRandom.prototype.uniform = function (lower, upper) {\n  if (arguments.length === 1) {\n    throw new SyntaxError(\"uniform(lower, upper) must be called\"\n        + \" 1. with lower and upper parameters [e.g., uniform(lower, upper)] or \"\n        + \" 2. without any parameter [e.g., uniform()]\");\n  } else if (arguments.length >= 2) {\n    return lower + this.random() * (upper - lower);\n  } else {\n    return this.random();\n  }\n};\n/***\n Added by Gerd Wagner (20160921)\n */\nRandom.prototype.uniformInt = function (lower, upper) {\n  if (arguments.length != 2 ||\n      !(Number.isInteger(lower) && Number.isInteger(upper))) {\n    throw new SyntaxError(\"uniformInt() must be called\"\n        + \" with lower and upper integer values!\");\n  }\n  return lower + Math.floor( this.random() * (upper - lower + 1));\n};\n\nRandom.prototype.frequency = function (freqMap) {\n  if (typeof freqMap !== \"object\") {\n    throw new SyntaxError(\"rand.frequency() must be called\"\n        + \" with a frequency map argument!\");\n  }\n  var probabilities = Object.values( freqMap);\n  if (math.sum( probabilities) !== 1 ) {\n    throw new SyntaxError(\"rand.frequency(): rel. frequency values \" +\n        \"do not add up to 1!\");\n  }\n  var cumProb=0;\n  var cumProbs = probabilities.map( function (p) {\n    cumProb += p;\n    return cumProb;\n  });\n  var valueStrings = Object.keys( freqMap);\n  var valuesAreNumeric = !isNaN( parseInt( valueStrings[0]));\n  var randX = this.random(), i=0;\n  for (i=0; i <= cumProbs.length; i++) {\n    if (randX < cumProbs[i]) return valuesAreNumeric ?\n        parseInt( valueStrings[i]) : valueStrings[i];\n  }\n};\n\n/**\n * Shuffles array in place using the Fisher-Yates shuffle algorithm\n * @param {Array} a - An array of items to be shuffled\n */\nRandom.prototype.shuffleArray = function (a) {\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i -= 1) {\n    j = Math.floor( this.random() * (i + 1) );\n    x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n};\n/*******************************************************************************\n * Binary Heap function based on the Appendix 2 Binary Heaps of M. Haverbeke\n * \"Eloquent JavaScript\", 3rd Edition\n * \n * @copyright Copyright 2018 Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Luis Gustavo Nardin\n ******************************************************************************/\nfunction BinaryHeap ( scoreFunction ) {\n  this.content = [];\n  this.scoreFunction = scoreFunction;\n}\nBinaryHeap.prototype.push = function ( element ) {\n  this.content.push( element );\n  this.bubbleUp( this.content.length - 1 );\n};\nBinaryHeap.prototype.pop = function () {\n  var result = this.content[0];\n  var end = this.content.pop();\n  \n  if ( this.content.length > 0 ) {\n    this.content[0] = end;\n    this.sinkDown( 0 );\n  }\n  return result;\n};\nBinaryHeap.prototype.remove = function ( element ) {\n  var len = this.content.length;\n  var end;\n  for ( var i = 0; i < len; i += 1 ) {\n    if ( this.content[i] !== element ) {\n      continue;\n    }\n    \n    end = this.content.pop();\n    if ( i === len - 1 ) {\n      break;\n    }\n    \n    this.content[i] = end;\n    this.bubbleUp( i );\n    this.sinkDown( i );\n    break;\n  }\n};\nBinaryHeap.prototype.getContent = function () {\n  return this.content;\n};\nBinaryHeap.prototype.getFirst = function () {\n  if ( this.content.length > 0 ) {\n    return this.content[0];\n  }\n  return [];\n};\nBinaryHeap.prototype.clear = function () {\n  this.content = [];\n};\nBinaryHeap.prototype.isEmpty = function () {\n  return this.content.length <= 0;\n};\nBinaryHeap.prototype.size = function () {\n  return this.content.length;\n};\nBinaryHeap.prototype.bubbleUp = function ( n ) {\n  var element = this.content[n];\n  var score = this.scoreFunction( element );\n  var parentN, parent;\n  \n  while ( n > 0 ) {\n    parentN = Math.floor( (n + 1) / 2 ) - 1;\n    parent = this.content[parentN];\n    if ( score >= this.scoreFunction( parent ) ) {\n      break;\n    }\n    \n    this.content[parentN] = element;\n    this.content[n] = parent;\n    n = parentN;\n  }\n};\nBinaryHeap.prototype.sinkDown = function ( n ) {\n  var length = this.content.length;\n  var element = this.content[n];\n  var elemScore = this.scoreFunction( element );\n  var swap, child1, child2, child1N, child2N, child1Score, child2Score;\n\n  while ( true ) {\n    child2N = (n + 1) * 2;\n    child1N = child2N - 1;\n    swap = null;\n    if ( child1N < length ) {\n      child1 = this.content[child1N];\n      child1Score = this.scoreFunction( child1 );\n      if ( child1Score < elemScore ) {\n        swap = child1N;\n      }\n    }\n    if ( child2N < length ) {\n      child2 = this.content[child2N];\n      child2Score = this.scoreFunction( child2 );\n      if ( child2Score < (swap == null ? elemScore : child1Score) ) {\n        swap = child2N;\n      }\n    }\n    if ( swap == null ) break;\n\n    this.content[n] = this.content[swap];\n    this.content[swap] = element;\n    n = swap;\n  }\n};\n\n/*******************************************************************************\n * This library file contains several OES foundation elements\n * @copyright Copyright 2016 Gerd Wagner, BTU (Germany) + ODU (VA, USA)\n * @license The MIT License (MIT)\n * @author Gerd Wagner\n ******************************************************************************/\nvar oes = oes || {};\nvar sim = sim || {};\n\noes.defaults = {\n  license: \"CC BY-SA\",\n  imgFolder: \"img/\",\n  validateOnInput: false,\n  expostStatDecimalPlaces: 2\n};\noes.predfinedProperties = [\"shortLabel\", \"history\"];\n\noes.Object = new cLASS({\n  Name: \"oBJECT\",\n  isAbstract: true,\n  properties: {\n    \"id\": {range: \"Integer\"},\n    \"name\": {range: \"NonEmptyString\", optional:true}\n  },\n  methods: {\n    \"toLogString\": function () {\n      var str1=\"\", str2=\"\", i=0;\n      if (!this.constructor.shortLabel && !this.name) return \"\";\n      else {  // show class name + object ID\n        str1 = this.name || this.constructor.shortLabel +\"-\"+ this.id;\n      }\n      str2 = \"{ \";\n      Object.keys( this).forEach( function (key) {\n        var propDecl = cLASS[this.constructor.Name].properties[key],\n            val = this[key], propLabel=\"\", valStr=\"\", listOfActTypeNames=[];\n        if (key===\"activityState\") {\n          listOfActTypeNames = Object.keys( val);\n          valStr = JSON.stringify( listOfActTypeNames.map( function (atn) {\n            var shortLabel = cLASS[atn].shortLabel;\n            return shortLabel || atn;\n          }));\n          propLabel = \"actState\";\n        } else if (propDecl && propDecl.shortLabel) {\n          propLabel = propDecl.shortLabel;\n          if (cLASS[propDecl.range]) {  // a reference property\n            // is the property multi-valued?\n            if (propDecl.maxCard && propDecl.maxCard > 1) {\n              if (Array.isArray( val)) {\n                valStr = JSON.stringify( val.map( function (o) {return o.id;}));\n              } else valStr = JSON.stringify( Object.keys( val));\n            } else {  // if the property is single-valued\n              valStr = val.id;\n            }\n          } else {  // if the property is not a reference property\n            if (typeof val === \"number\" && !Number.isInteger(val) && sim.timeRoundingFactor) {\n              valStr = JSON.stringify( Math.round(\n                         val * sim.timeRoundingFactor) / sim.timeRoundingFactor);\n            } else valStr = JSON.stringify( val);\n          }\n        }\n        if (this[key] !== undefined && propLabel) {\n          str2 += (i>0 ? \", \" : \"\") + propLabel +\": \"+ valStr;\n          i = i+1;\n        }\n      }, this);\n      str2 += \"}\";\n      if (str2 === \"{ }\") str2 = \"\";\n      return str1 + str2;\n    }\n  }\n});\n/***\n * Events subsume activities. While instantaneous events have an occTime,\n * activities may not have an occTime on creation, but only a startTime.\n * For events with duration it holds that occTime = startTime + duration.\n */\noes.Event = new cLASS({\n  Name: \"eVENT\",\n  isAbstract: true,\n  properties: {\n    \"occTime\": {range: \"NonNegativeNumber\", optional:true},\n    \"priority\": {range: \"NonNegativeNumber\", optional:true},\n    // only meaningful for events with duration\n    \"startTime\": {range: \"NonNegativeNumber\", optional:true},\n    \"duration\": {range: \"NonNegativeNumber\", optional:true}\n  },\n  methods: {\n    \"toLogString\": function () {\n      var occT = sim.model.time === \"continuous\" && sim.timeRoundingFactor ?\n          Math.round( this.occTime * sim.timeRoundingFactor) / sim.timeRoundingFactor :\n          this.occTime;\n      var str1=\"\", str2=\"\", evtStr=\"\", i=0,\n          eventTypeName = this.constructor.Name, AT=null,\n          propDs={}, slots={};\n      switch (eventTypeName) {\n      case \"aCTIVITYsTART\":\n        AT = cLASS[this.activityType];\n        if (!AT.shortLabel) return \"\";\n        str1 = AT.shortLabel + \"Start\";\n        propDs = AT.properties;\n        slots = this.resources;\n        break;\n      case \"pROCESSINGaCTIVITYsTART\":\n        break;\n      case \"aCTIVITYeND\":\n        AT = cLASS[this.activityType];\n        if (!AT.shortLabel) return \"\";\n        str1 = AT.shortLabel + \"End\";\n        propDs = AT.properties;\n        slots = {\"activityIdRef\": this.activityIdRef};\n        break;\n      default:\n        if (!this.constructor.shortLabel) return \"\";\n        str1 = this.constructor.shortLabel;\n        propDs = cLASS[eventTypeName].properties;\n        slots = this;\n      }\n      str2 = \"{\";\n      Object.keys( slots).forEach( function (p) {\n        var propDecl = propDs[p], val = slots[p], propLabel=\"\", valStr=\"\";\n        if (propDecl && propDecl.shortLabel) {\n          propLabel = propDecl.shortLabel;\n          if (cLASS[propDecl.range]) {  // a reference property\n            valStr = val.id;\n          } else {  // if the property is not a reference property\n            if (typeof val === \"number\" && !Number.isInteger(val) && sim.timeRoundingFactor) {\n              valStr = JSON.stringify( Math.round(\n                      val * sim.timeRoundingFactor) / sim.timeRoundingFactor);\n            } else valStr = JSON.stringify( val);\n          }\n        }\n        if (val !== undefined && propLabel) {\n          str2 += (i>0 ? \", \" : \"\") + propLabel +\":\"+ valStr;\n          i = i+1;\n        }\n      });\n/*\n      Object.keys( this).forEach( function (key) {\n        var propDecl = cLASS[eventTypeName].properties[key],\n            val = this[key], propLabel=\"\", valStr=\"\";\n        if (propDecl && propDecl.shortLabel) {\n          propLabel = propDecl.shortLabel;\n          if (cLASS[propDecl.range]) {  // a reference property\n            valStr = val.id;\n          } else {  // if the property is not a reference property\n            if (typeof val === \"number\" && !Number.isInteger(val) && sim.timeRoundingFactor) {\n              valStr = JSON.stringify( Math.round(\n                      val * sim.timeRoundingFactor) / sim.timeRoundingFactor);\n            } else valStr = JSON.stringify( val);\n          }\n        }\n        if (this[key] !== undefined && propLabel) {\n          str2 += (i>0 ? \", \" : \"\") + propLabel +\":\"+ valStr;\n          i = i+1;\n        }\n      }, this);\n*/\n      str2 += \"}\";\n      if (str2 === \"{}\") str2 = \"\";\n      evtStr = str1 + str2 + \"@\" + occT;\n      return evtStr;\n    }\n  }\n});\n// compare function for Array.sort\noes.Event.rank = function (e1, e2) {\n  var p1=0, p2=0;\n  if (e1.constructor.priority) p1 = e1.constructor.priority;\n  if (e2.constructor.priority) p2 = e2.constructor.priority;\n  return p2 - p1;\n}\n/******************************************************************************\n *** Activities Package *******************************************************\n ******************************************************************************/\n/**\n *  Activities are events having some duration and using resources. Their duration\n *  may be either pre-set to a fixed value or to a random value (in which case they\n *  have a scheduled end), or it may be determined by the occurrence of an activity\n *  end event that is caused by another simulation event (in which case they have an\n *  open end). The duration of a pre-set duration activity can be defined in 3 ways:\n *  either for all activities of some type AT by a) a class-level attribute\n *  AT.fixedDuration or b) a class-level method AT.randomDuration(), or\n *  c) by setting the attribute \"duration\" of its aCTIVITYsTART event.\n *\n *  Activities may consume, and also produce, resources. The actor(s)\n *  that (jointly) perform(s) an activity can be viewed as (a) special resource(s).\n *  At any simulation step there is a (possibly empty) set of ongoing activities.\n *  The objects that participate in an ongoing activity as resources are in a\n *  certain activity state (e.g., \"printing\", \"service-performing\"), in which they\n *  are no more available for other activities that try to allocate them as\n *  resources, if their resource role is exclusive/non-shareable.\n *\n *  For any resource of an activity, its utilization by that activity during\n *  a certain time period is measured by the simulator and can be included\n *  in the ex-post statistics.\n *\n *  An activity type is defined as a subtype of the OES class \"aCTIVITY\" with a\n *  mandatory class-level method \"generateId\" and a mandatory class-level attribute\n *  \"resourceTypes\", and an optional class-level method \"randomDuration\" or,\n *  alternatively, an optional class-level attribute \"fixedDuration\".\n *\n *  A pre-defined event type oes.ActivityStart is used for creating activity start\n *  events with a constructor parameter \"resources\" defining a resource roles map\n *  assigning resource object references to resource role names. When an activity\n *  start event occurs, a JS object representing the activity is created, the\n *  resource roles map is copied to corresponding property slots of the activity,\n *  and the value of the activityState property of all resource objects is updated\n *  by adding the activity type name (the activityState is a set/map of the names\n *  of those types of activities, in which the object is participating).\n */\noes.Activity = new cLASS({\n  Name: \"aCTIVITY\",\n  supertypeName: \"eVENT\",\n  isAbstract: true,\n  properties: {\n    \"id\": {range: \"Integer\"},\n    // on activity creation resource roles are copied to corresp. property slots\n    \"resources\": {range: cLASS.Map(\"oBJECT\"), optional:true}\n  },\n  methods: {}\n});\noes.ActivityStart = new cLASS({\n  Name: \"aCTIVITYsTART\",\n  supertypeName: \"eVENT\",\n  properties: {\n    \"activityType\": {range: \"NonEmptyString\"},  //TODO: should allow type names (like IdRefs)\n    \"resources\": {range: cLASS.Map(\"oBJECT\"), optional:true}\n  },\n  methods: {\n    \"toLogString\": function () {\n      var occT = sim.model.time === \"continuous\" && sim.timeRoundingFactor ?\n          Math.round( this.occTime * sim.timeRoundingFactor) / sim.timeRoundingFactor :\n          this.occTime;\n      var str1 = cLASS[this.activityType].shortLabel, str2 = \"\";\n      if (!str1) return \"\";\n      str1 += \"Start\";\n      Object.keys( this.resources).forEach( function (resRole) {\n        var resObj = this.resources[resRole];\n        str2 += (resObj.name || String(resObj.id)) +\", \";\n      }, this);\n      return str1 +\"(\"+ str2.slice(0, -2) +\")\" + \"@\" + occT;\n    },\n    \"onEvent\": function () {\n      var slots={}, acty=null, followupEvents=[];\n      var AT = cLASS[this.activityType];\n      if (this.duration > 0) slots.duration = this.duration;\n      else if (AT.fixedDuration) slots.duration = AT.fixedDuration;\n      else if (AT.randomDuration) slots.duration = AT.randomDuration();\n      Object.keys( this.resources).forEach( function (resRole) {\n        var resObj = this.resources[resRole];\n        // copy resource def. slots as ref. prop. slots\n        if (!slots[resRole]) slots[resRole] = resObj;\n        // set activity state for resource object\n        if (!resObj.activityState) resObj.activityState = {};\n        resObj.activityState[this.activityType] = true;\n      }, this);\n      slots.id = sim.idCounter++;  // activities need an ID\n      slots.startTime = this.occTime;\n      // create new activity\n      acty = new AT( slots);\n      // assign resources map to new activity\n      acty.resources = this.resources;\n      // register new activity as an ongoing activity\n      sim.ongoingActivities[acty.id] = acty;\n      // define initial. slots for ActivityEnd event\n      slots = {\n        occTime: this.occTime + acty.duration,\n        activityType: AT.Name,\n        activityIdRef: acty.id\n      };\n      if (this.actor) slots.actor = this.actor;\n      // if there is an onActivityStart procedure, execute it\n      if (typeof acty.onActivityStart === \"function\") {\n        followupEvents = acty.onActivityStart();\n      }\n      // schedule activity end event\n      followupEvents.push( new oes.ActivityEnd( slots));\n      return followupEvents;\n    }\n  }\n});\noes.ActivityEnd = new cLASS({\n  Name: \"aCTIVITYeND\",\n  supertypeName: \"eVENT\",\n  properties: {\n    \"activityType\": {range: \"NonEmptyString\"},\n    \"activityIdRef\": {range: \"Integer\"}\n  },\n  methods: {\n    \"toLogString\": function () {\n      var occT = sim.model.time === \"continuous\" && sim.timeRoundingFactor ?\n          Math.round( this.occTime * sim.timeRoundingFactor) / sim.timeRoundingFactor :\n          this.occTime;\n      var str1 = cLASS[this.activityType].shortLabel, str2 = \"\",\n          resources = sim.ongoingActivities[this.activityIdRef].resources;\n      if (!str1) return \"\";\n      str1 += \"End\";\n      Object.keys( resources).forEach( function (resRole) {\n        var resObj = resources[resRole];\n        str2 += (resObj.name || String(resObj.id)) +\", \";\n      }, this);\n      return str1 +\"(\"+ str2.slice(0, -2) +\")\" + \"@\" + occT;\n    },\n    \"onEvent\": function () {\n      var followupEvents=[];\n      var acty = sim.ongoingActivities[this.activityIdRef];  // retrieve activity\n      // if there is an onActivityEnd procedure, execute it\n      if (acty.onActivityEnd) followupEvents = acty.onActivityEnd();\n      // set occTime and duration if there was no pre-set duration\n      if (!acty.duration) {\n        acty.occTime = this.occTime;\n        acty.duration = acty.occTime - acty.startTime;\n      }\n      // compute resource utilization per resource role\n      Object.keys( acty.resources).forEach( function (resRole) {\n        var objIdStr = String(acty[resRole].id),\n            resUtilMap = sim.stat.resUtil[this.activityType];\n        if (resUtilMap[objIdStr] === undefined) resUtilMap[objIdStr] = 0;\n        resUtilMap[objIdStr] += acty.duration;\n        // update the activity state of resource objects\n        delete acty[resRole].activityState[this.activityType];\n      }, this);\n      // drop activity from list of ongoing activities\n      delete sim.ongoingActivities[String( this.activityIdRef)];\n      return followupEvents;\n    }\n  }\n});\n/******************************************************************************\n *** Processing Network Package ***********************************************\n ******************************************************************************/\n/**\n * Processing nodes are objects that play an resource role in processing\n * activities. The definition of a processing node combines defining both an\n * object (as resource) and an implicit activity type, possibly with\n * duration, resource types and onActivityStart/onActivityEnd event rule methods.\n *\n * A simple processing node has an input queue for processing objects and a\n * successor processing node. Processing objects may be either of a generic\n * type \"pROCESSINGoBJECT\" or of a model-specific subtype of \"pROCESSINGoBJECT\"\n * (such as \"Customer\").\n *\n * A processing node object may be defined with a value for its \"fixedDuration\"\n * property or with a \"randomDuration\" function, applying to its processing\n * activities. If neither a fixedDuration nor a randomDuration method are defined,\n * the exponential distribution with an event rate of 1 is used as a default function\n * for sampling processing durations. By default, a processing node processes one\n * processing object at a time, but it may also have its \"capacity\" attribute set to\n * a value greater than 1.\n *\n * In the general case, a processing node may have several input object types,\n * and an input queue for each of them, and either a successor processing node or\n * else an (automatically generated) output queue for each type of output object.\n * By default, when no explicit transformation of inputs to outputs is modeled by\n * specifying an outputTypes map, there is no transformation and it holds that\n * outputs = inputs.\n *\n * TODO: Add resourceTypes\n */\noes.ProcNodeStatusEL = new eNUMERATION( \"ProcNodeStatusEL\",\n    [\"idle\", \"busy\", \"down\"] );\noes.ProcessingNode = new cLASS({\n  Name: \"pROCESSINGnODE\",\n  label: \"Processing Node\",\n  shortLabel: \"PN\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"inputQueue\": {range:\"oBJECT\", minCard: 0, maxCard: Infinity, isOrdered:true,\n        label:\"Input Queue\", shortLabel:\"inpQ\"},\n    \"inputType\": {range:\"oBJECTtYPE\", optional:true},  // default: \"pROCESSINGoBJECT\"\n    \"status\": {range: \"ProcessingNodeStatusEL\", shortLabel:\"stat\",\n        initialValue: oes.ProcNodeStatusEL.IDLE},\n    \"successorNode\": {range: \"pROCESSINGnODE|eXITnODE\", optional:true},\n    \"fixedDuration\": {range: \"PositiveInteger\", optional:true},\n    \"capacity\": {range: \"PositiveInteger\", optional:true},\n    // Ex: {\"lemons\": {type:\"Lemon\", quantity:2}, \"ice\": {type:\"IceCubes\", quantity:[0.2,\"kg\"]},...\n    \"inputTypes\": {range: cLASS.Map( Object), optional:true},\n    // Ex: {\"lemonade\": {type:\"Lemonade\", quantity:[1,\"l\"]}, ...\n    \"outputTypes\": {range: cLASS.Map( Object), optional:true},\n    // a map with PN object names as keys and conditions as values for (X)OR/AND splitting\n    \"successorNodes\": {range: cLASS.Map( Function), optional:true}\n  },\n  methods: {}\n});\n/**\n * Processing Objects are generic objects that arrive at an entry node of a PN\n * and are processed at one or more processing nodes before they leave the\n * PN at an exit node.\n */\noes.ProcessingObject = new cLASS({\n  Name: \"pROCESSINGoBJECT\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"arrivalTime\": { range: \"Number\", label: \"Arrival time\", shortLabel: \"arrT\"}\n  }\n});\n/**\n * Processing Activities are activities that have inputs and outputs and are\n * performed by a processing node (as their actor). The input types/roles,\n * output types/roles and duration of a processing activity are defined in its\n * underlying processing node, which is associated via its \"procNode\" property.\n *\n * A processing node object definition may have slots for defining a \"fixedDuration\"\n * attribute or a \"randomDuration\" method.\n */\noes.ProcessingActivity = new cLASS({\n  Name: \"pROCESSINGaCTIVITY\",\n  label: \"Processing Activity\",\n  shortLabel: \"Proc\",  // for the log\n  supertypeName: \"aCTIVITY\",\n  properties: {\n    \"procNode\": {range: \"pROCESSINGnODE\"}\n  },\n  methods: {}\n});\n// define the exponential distribution as the default inter-arrival time\noes.ProcessingActivity.defaultEventRate = 1;\noes.ProcessingActivity.defaultDuration = function () {\n  return rand.exponential( oes.ProcessingActivity.defaultEventRate)\n};\n\noes.ProcessingActivityStart = new cLASS({\n  Name: \"pROCESSINGaCTIVITYsTART\",\n  supertypeName: \"aCTIVITYsTART\",\n  properties: {\n    \"procNode\": {range: \"pROCESSINGnODE\"}\n  },\n  methods: {\n    \"onConstruction\": function () {\n      if (this.resources) {\n        // make sure that processing node is a resource\n        this.resources[\"procNode\"] = this.procNode;\n      }\n    },\n    \"onEvent\": function () {\n      var slots={}, pN = this.procNode, acty=null, followupEvents=[];\n      if (!pN.inputQueue[0]) {\n        console.log(\"ProcessingActivityStart with empty inputQueue at \"+ pN.name +\n            \" at step \"+ sim.step);\n      }\n      // create slots for constructing new ProcessingActivity\n      if (this.duration) slots.duration = this.duration;\n      else if (pN.fixedDuration) slots.duration = pN.fixedDuration;\n      else if (pN.randomDuration) slots.duration = pN.randomDuration();\n      else slots.duration = oes.ProcessingActivity.defaultDuration();\n      pN.status = oes.ProcNodeStatusEL.BUSY;\n      Object.keys( this.resources).forEach( function (resRole) {\n        var resObj = this.resources[resRole];\n        // copy resource def. slots as ref. prop. slots\n        if (!slots[resRole]) slots[resRole] = resObj;\n        // set activity state for resource object\n        if (!resObj.activityState) resObj.activityState = {};\n        resObj.activityState[this.activityType] = true;\n      }, this);\n      slots.id = sim.idCounter++;  // activities need an ID\n      slots.startTime = this.occTime;\n      // create new activity\n      acty = new oes.ProcessingActivity( slots);\n      acty.resources = this.resources;  // assign resources map\n      sim.ongoingActivities[acty.id] = acty;\n      // create slots for constructing a ProcessingActivityEnd event\n      slots = {\n        occTime: this.occTime + acty.duration,\n        activityType: \"pROCESSINGaCTIVITY\",\n        activityIdRef: acty.id\n      };\n      slots.procNode = pN;\n      // if there is an onActivityStart procedure, execute it\n      if (typeof pN.onActivityStart === \"function\") {\n        followupEvents = pN.onActivityStart();\n      }\n      // schedule activity end event\n      followupEvents.push( new oes.ProcessingActivityEnd( slots));\n      return followupEvents;\n    }\n  }\n});\noes.ProcessingActivityEnd = new cLASS({\n  Name: \"pROCESSINGaCTIVITYeND\",\n  supertypeName: \"aCTIVITYeND\",\n  properties: {\n    \"procNode\": {range: \"pROCESSINGnODE\"}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var procObj=null, nextNode=null, followupEvt1=null, followupEvt2=null,\n          followupEvents=[], pN = this.procNode;\n      // retrieve activity\n      var acty = sim.ongoingActivities[this.activityIdRef];\n      // if there is an onActivityEnd procedure, execute it\n      if (pN.onActivityEnd) followupEvents = pN.onActivityEnd();\n      // set occTime and duration if there was no pre-set duration\n      if (!acty.duration) {\n        acty.occTime = this.occTime;\n        acty.duration = acty.occTime - acty.startTime;\n      }\n      // compute resource utilization per resource role\n      Object.keys( acty.resources).forEach( function (resRole) {\n        var objIdStr = String(acty[resRole].id),\n            resUtilMap = sim.stat.resUtil[this.activityType];\n        if (resUtilMap[objIdStr] === undefined) resUtilMap[objIdStr] = 0;\n        resUtilMap[objIdStr] += acty.duration;\n        // update the activity state of resource objects\n        delete acty[resRole].activityState[this.activityType];\n      }, this);\n      // drop activity from list of ongoing activities\n      delete sim.ongoingActivities[String( this.activityIdRef)];\n      // the successor node may be dynamically assigned by a.onActivityEnd()\n      nextNode = pN.successorNode || acty.successorNode;\n      // pop processing object from the input queue\n      procObj = pN.inputQueue.shift();\n      // push object to the input queue of the next node\n      nextNode.inputQueue.push( procObj);\n      // is the next node a processing node?\n      if (nextNode.constructor.Name === \"pROCESSINGnODE\") {\n        // is the next processing node available?\n        if (nextNode.inputQueue.length === 1 &&\n            nextNode.status === oes.ProcNodeStatusEL.IDLE) {\n          // then start its ProcessingActivity\n          nextNode.status = oes.ProcNodeStatusEL.BUSY;\n          followupEvt1 = new oes.ProcessingActivityStart({\n            occTime: this.occTime + sim.nextMomentDeltaT,\n            activityType: \"pROCESSINGaCTIVITY\",\n            procNode: nextNode,\n            resources: acty.resources || {}\n          });\n          followupEvents.push( followupEvt1);\n        }\n      } else {  // the next node is an exit node\n        followupEvents.push( new oes.Departure({\n          occTime: this.occTime + sim.nextMomentDeltaT,\n          exitNode: nextNode\n        }));\n      }\n      // are there more items in the input queue and no BREAK happened?\n      if (pN.status === oes.ProcNodeStatusEL.BUSY) {\n        if (pN.inputQueue.length > 0) {\n          followupEvt2 = new oes.ProcessingActivityStart({\n            occTime: this.occTime + sim.nextMomentDeltaT,\n            activityType: \"pROCESSINGaCTIVITY\",\n            procNode: pN,\n            resources: {}\n          });\n          followupEvents.push( followupEvt2);\n        } else pN.status = oes.ProcNodeStatusEL.IDLE;\n      }\n      return followupEvents;\n    }\n  }\n});\n/**\n * Entry nodes are objects that participate in exogenous arrival events\n * leading to the creation of processing objects, which are either routed to a\n * successor node or pushed to an output queue. The definition of an entry\n * node combines defining both a (possibly spatial) object and an associated\n * implicit arrival event type, possibly with an \"onArrival\" event rule method.\n *\n * Entry node object definitions may include (1) a \"successorNode\" attribute slot\n * for assigning a successor node to which processing objects are routed; (2) a\n * \"maxNmrOfArrivals\" attribute slot for defining a maximum number of arrival\n * events after which no more arrival events will be created (and, consequently,\n * the simulation may run out of future events); (3) either an \"arrivalRate\"\n * attribute slot for defining the event rate parameter of an exponential pdf\n * used for computing the time between two consecutive arrival events, or a per-\n * instance-defined \"arrivalRecurrence\" method slot for computing the recurrence\n * of arrival events; (4) a per-instance-defined \"outputType\" slot for defining\n * a custom output type (instead of the default \"pROCESSINGoBJECT\"). If neither an\n * \"arrivalRate\" nor an \"arrivalRecurrence\" method are defined, the exponential\n * distribution with an event rate of 1 is used as a default recurrence.\n *\n * Entry nodes have a built-in (read-only) statistics attribute \"nmrOfArrivedObjects\"\n * counting the number of objects that have arrived at the given entry node.\n *\n * TODO: If no successor node is defined for an entry node, an output queue is\n * automatically created.\n */\noes.EntryNode = new cLASS({\n  Name: \"eNTRYnODE\",\n  label: \"Entry Node\",\n  shortLabel: \"Entry\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"outputType\": {range: \"oBJECTtYPE\", optional:true},  // default: \"pROCESSINGoBJECT\"\n    \"successorNode\": {range: \"pROCESSINGnODE\", optional:true},\n    \"maxNmrOfArrivals\": {range: \"PositiveInteger\", optional:true},\n    \"arrivalRate\": {range: \"Decimal\", optional:true},\n    \"nmrOfArrivedObjects\": {range: \"NonNegativeInteger\", shortLabel: \"arrObj\", optional:true}\n  }\n});\n/**\n * Exit nodes are objects that participate in departure events leading to the\n * destruction of the departing object. The definition of an exit node combines\n * defining both a (possibly spatial) object and an associated implicit departure\n * event type, possibly with an \"onDeparture\" event rule method.\n *\n * Exit nodes have two built-in statistics attributes: (1) \"nmrOfDepartedObjects\"\n * counting the number of objects that have departed at the given exit node, and\n * (2) \"cumulativeTimeInSystem\" for adding up the times in system of all departed\n * objects.\n */\noes.ExitNode = new cLASS({\n  Name: \"eXITnODE\",\n  label: \"Exit Node\",\n  shortLabel: \"Exit\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"inputQueue\": {range:\"oBJECT\", minCard: 0, maxCard: Infinity, isOrdered:true,\n      label:\"Input Queue\", shortLabel:\"inpQ\"},\n    \"nmrOfDepartedObjects\": {range: \"NonNegativeInteger\", shortLabel: \"depObj\", optional:true},\n    \"cumulativeTimeInSystem\": {range: \"NonNegativeDecimal\", optional:true}\n  }\n});\n/**\n * Set up PN statistics\n * - for any entry node, define the implicit statistics variable \"arrivedObjects\"\n * - for any exit node, define the implicit statistics variables \"departedObjects\"\n *   and \"meanTimeInSystem\"\n */\noes.setupProcNetStatistics = function () {\n  var entryNodes = oes.EntryNode.instances,\n      exitNodes = oes.ExitNode.instances;\n  var initState = sim.scenario.initialState,\n      initialObjDefs = initState.objects;\n  if (!sim.model.statistics) sim.model.statistics = {};\n  // define default statistics variables for PN entry node statistics\n  Object.keys( entryNodes).forEach( function (nodeIdStr) {\n    var suppressDefaultEntry=false,\n        entryNode = entryNodes[nodeIdStr],\n        varName = Object.keys( entryNodes).length === 1 ?\n            \"arrivedObjects\" : entryNode.name +\"_arrivedObjects\";\n    entryNode.nmrOfArrivedObjects = 0;\n    if (sim.model.statistics[varName] && !sim.model.statistics[varName].label) {\n      // model-defined suppression of default statistics\n      suppressDefaultEntry = true;\n    }\n    if (!suppressDefaultEntry) {\n      if (!sim.model.statistics[varName]) sim.model.statistics[varName] = {};\n      sim.model.statistics[varName].range = \"NonNegativeInteger\";\n      if (!sim.model.statistics[varName].label) {\n        sim.model.statistics[varName].label = \"Arrived objects\";\n      }\n      sim.model.statistics[varName].entryNode = entryNode;\n      sim.model.statistics[varName].computeOnlyAtEnd = true;\n    }\n  });\n  // define default statistics variables for PN exit node statistics\n  Object.keys( exitNodes).forEach( function (nodeIdStr) {\n    var suppressDefaultEntry=false,\n        exitNode = exitNodes[nodeIdStr],\n        varName = Object.keys( exitNodes).length === 1 ?\n            \"departedObjects\" : exitNode.name +\"_departedObjects\";\n    exitNode.nmrOfDepartedObjects = 0;\n    if (sim.model.statistics[varName] && !sim.model.statistics[varName].label) {\n      // model-defined suppression of default statistics\n      suppressDefaultEntry = true;\n    }\n    if (!suppressDefaultEntry) {\n      if (!sim.model.statistics[varName]) sim.model.statistics[varName] = {};\n      sim.model.statistics[varName].range = \"NonNegativeInteger\";\n      if (!sim.model.statistics[varName].label) {\n        sim.model.statistics[varName].label = \"Departed objects\";\n      }\n      sim.model.statistics[varName].exitNode = exitNode;\n      sim.model.statistics[varName].computeOnlyAtEnd = true;\n    }\n    exitNode.cumulativeTimeInSystem = 0;\n    varName = Object.keys( exitNodes).length === 1 ?\n        \"meanTimeInSystem\" : exitNode.name +\"_meanTimeInSystem\";\n    if (sim.model.statistics[varName] && !sim.model.statistics[varName].label) {\n      // model-defined suppression of default statistics\n      suppressDefaultEntry = true;\n    }\n    if (!suppressDefaultEntry) {\n      if (!sim.model.statistics[varName]) sim.model.statistics[varName] = {};\n      sim.model.statistics[varName].range = \"Decimal\";\n      if (!sim.model.statistics[varName].label) {\n        sim.model.statistics[varName].label = \"Mean time in system\";\n      }\n      sim.model.statistics[varName].exitNode = exitNode;\n      sim.model.statistics[varName].computeOnlyAtEnd = true;\n      sim.model.statistics[varName].expression = function () {\n        return exitNode.cumulativeTimeInSystem / exitNode.nmrOfDepartedObjects\n      };\n    }\n  });\n};\n\n/**\n * Arrival events are associated with an entry node.\n * They may define a quantity of arrived processing objects, which is 1 by default.\n * Viewing an arrival not as an arrival of processing objects, but as an arrival of\n * a customer order, the quantity attribute would allow to define an order\n * quantity that results in the same quantity of processing objects (or production\n * orders) pushed to the entry node's succeeding processing node.\n */\noes.Arrival = new cLASS({\n  Name: \"aRRIVAL\",\n  label: \"Arrival\",\n  shortLabel: \"Arr\",\n  supertypeName: \"eVENT\",\n  properties: {\n    \"entryNode\": {range: \"eNTRYnODE\"},\n    \"quantity\": {range: \"PositiveInteger\", optional:true}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var occT=0, procObj=null, ProcessingObject=null, followupEvents=[];\n      if (this.entryNode.outputType) {\n        ProcessingObject = cLASS[this.entryNode.outputType];\n      } else {  // default\n        ProcessingObject = oes.ProcessingObject;\n      }\n      // update statistics\n      this.entryNode.nmrOfArrivedObjects++;\n      // create newly arrived processing object\n      procObj = new ProcessingObject({arrivalTime: this.occTime});\n      sim.addObject( procObj);\n      // invoke onArrival event rule method\n      if (this.entryNode.onArrival) followupEvents = this.entryNode.onArrival();\n      if (this.entryNode.successorNode) {\n        // push newly arrived object to the inputQueue of the next node\n        this.entryNode.successorNode.inputQueue.push( procObj);\n        // is the follow-up processing node available?\n        if (this.entryNode.successorNode.status === oes.ProcNodeStatusEL.IDLE) {\n          this.entryNode.successorNode.status = oes.ProcNodeStatusEL.BUSY;\n          followupEvents.push( new oes.ProcessingActivityStart({\n            occTime: this.occTime + sim.nextMomentDeltaT,\n            activityType: \"pROCESSINGaCTIVITY\",\n            procNode: this.entryNode.successorNode,\n            resources: this.entryNode.resources || {}\n          }));\n        }\n      }\n      // implement the recurrence of aRRIVAL events\n      if (!this.entryNode.maxNmrOfArrivals ||\n          this.entryNode.nmrOfArrivedObjects < this.entryNode.maxNmrOfArrivals) {\n        // has an arrival recurrence function been defined for the entry node?\n        if (this.entryNode.arrivalRecurrence) {\n          occT = this.occTime + this.entryNode.arrivalRecurrence();\n        } else {  // use the default recurrence\n          occT = this.occTime + oes.Arrival.defaultRecurrence();\n        }\n        sim.scheduleEvent( new oes.Arrival({\n          occTime: occT, entryNode: this.entryNode}));\n      }\n      return followupEvents;\n    }\n  }\n});\n// define the exponential distribution as the default inter-arrival time\noes.Arrival.defaultEventRate = 1;\noes.Arrival.defaultRecurrence = function () {\n  return rand.exponential( oes.Arrival.defaultEventRate);\n};\n/**\n * Departure events have two participants: an exit node and the departing object.\n */\noes.Departure = new cLASS({\n  Name: \"dEPARTURE\",\n  shortLabel: \"Dep\",\n  supertypeName: \"eVENT\",\n  properties: {\n    \"exitNode\": {range: \"eXITnODE\"}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var followupEvents = [];\n      // pop processing object from the input queue\n      var procObj = this.exitNode.inputQueue.shift();\n      // update statistics\n      this.exitNode.nmrOfDepartedObjects++;\n      this.exitNode.cumulativeTimeInSystem += this.occTime - procObj.arrivalTime;\n      // invoke onDeparture event rule method\n      if (typeof this.exitNode.onDeparture === \"function\") {\n        followupEvents = this.exitNode.onDeparture();\n      }\n      // remove object from simulation\n      sim.removeObject( procObj);\n      return followupEvents;\n    }\n  }\n});\n/**\n * Check model constraints\n * @method\n * @author Gerd Wagner\n */\noes.checkProcNetConstraints = function (params) {\n  var errMsgs=[], msg=\"\", evts=[];\n  // PNC1: nmrOfArrObjects = nmrOfObjectsAtProcNodes + nmrOfObjectsAtExitNodes + nmrOfDepObjects\n  var nmrOfArrObjects = Object.keys( oes.EntryNode.instances).reduce( function (res, nodeObjIdStr) {\n    return res + sim.objects[nodeObjIdStr].nmrOfArrivedObjects\n  }, 0);\n  var nmrOfObjectsAtProcNodes = Object.keys( oes.ProcessingNode.instances).reduce( function (res, nodeObjIdStr) {\n    return res + sim.objects[nodeObjIdStr].inputQueue.length\n  }, 0);\n  var nmrOfObjectsAtExitNodes = Object.keys( oes.ExitNode.instances).reduce( function (res, nodeObjIdStr) {\n    return res + sim.objects[nodeObjIdStr].inputQueue.length\n  }, 0);\n  var nmrOfDepObjects = Object.keys( oes.ExitNode.instances).reduce( function (res, nodeObjIdStr) {\n    return res + sim.objects[nodeObjIdStr].nmrOfDepartedObjects\n  }, 0);\n  if (nmrOfArrObjects !== nmrOfObjectsAtProcNodes + nmrOfObjectsAtExitNodes + nmrOfDepObjects) {\n    msg = \"The object preservation constraint is violated at step \"+ sim.step +\n        (params && params.add ? params.add : \"\") +\n        \" (nmrOfArrObjects: \"+ nmrOfArrObjects +\n        \", nmrOfObjectsInSystem: \"+ String(nmrOfObjectsAtProcNodes+nmrOfObjectsAtExitNodes) +\n        \", nmrOfDepObjects: \"+ nmrOfDepObjects +\")\";\n    if (params && params.log) console.log( msg);\n    else errMsgs.push( msg);\n  }\n  // PNC2: if a proc. node has a proc. end event, its input queue must be non-empty\n  evts = sim.FEL.getEventsOfType(\"pROCESSINGaCTIVITYeND\");\n  evts.forEach( function (procEndEvt) {\n    var pN = procEndEvt.procNode, inpQ = pN.inputQueue;\n    if (inpQ.length === 0 || !inpQ[0]) {\n      msg = \"At step \"+ sim.step +\" \"+ (params && params.add ? params.add : \"\") +\n          \", the proc. node \"+ (pN.name||pN.id) +\" has an empty input queue.\";\n      if (params && params.log) console.log( msg);\n      else errMsgs.push( msg);\n    }\n  });\n  return errMsgs;\n};\n/******************************************************************************\n *** Experiment Classes *******************************************************\n ******************************************************************************/\n/**\n * A complex datatype for experiment parameter definitions\n * @author Gerd Wagner\n */\noes.ExperimentParamDef = new cLASS({\n  Name: \"eXPERIMENTpARAMdEF\",\n  isComplexDatatype: true,  // do not collect instances\n  properties: {\n    \"name\": {range: \"Identifier\", label:\"Name\"},\n    \"values\": {\n      range: cLASS.ArrayList(\"Number\"),\n      label:\"Values\",\n      val2str: function (v) {\n        return v.toString();  // JSON.stringify( v);\n      },\n      str2val: function (str) {\n        return JSON.parse( str);\n      },\n    }\n  }\n});\n/**\n * An experiment is defined for a scenario, which is defined for a model.\n */\noes.ExperimentDef = new cLASS({\n  Name: \"eXPERIMENTdEF\",\n  properties: {\n    \"id\": {range: \"AutoNumber\"},\n    \"model\": {range: \"NonEmptyString\", label:\"Model name\", optional:true},\n    \"scenarioNo\": {range: \"PositiveInteger\", label:\"Scenario number\"},\n    \"experimentNo\": {range: \"PositiveInteger\", label:\"Experiment number\",\n        hint:\"The sequence number relative to the underlying simulation scenario\"},\n    \"experimentTitle\": {range: \"NonEmptyString\", optional:true, label:\"Experiment title\"},\n    \"replications\": {range:\"PositiveInteger\", label:\"Number of replications\"},\n    \"parameterDefs\": {range: \"eXPERIMENTpARAMdEF\", minCard: 0, maxCard: Infinity,\n        isOrdered:true, label:\"Parameter definitions\"},\n    \"seeds\": {range: Array, optional:true}  // seeds.length = replications\n  }\n});\noes.ExperimentDef.idCounter = 0;  // retrieve actual value from IDB\n\noes.ExperimentRun = new cLASS({\n  Name: \"eXPERIMENTrUN\",\n  properties: {\n    \"id\": {range: \"AutoNumber\", label:\"ID\"},  // possibly a timestamp\n    \"experimentDef\": {range: \"eXPERIMENTdEF\", label:\"Experiment def.\"},\n    \"dateTime\": {range: \"DateTime\", label:\"Date/time\"}\n  }\n});\noes.ExperimentRun.getAutoId = function () {\n  return (new Date()).getTime();\n};\n\noes.ExperimentScenarioRun = new cLASS({\n  Name: \"eXPERIMENTsCENARIOrUN\",\n  properties: {\n    \"id\": {range: \"AutoNumber\"},  // possibly a timestamp\n    \"experimentRun\": {range: \"eXPERIMENTrUN\"},\n    \"experimentScenarioNo\": {range: \"NonNegativeInteger\"},\n    \"parameterValueCombination\": {range: Array},\n    \"outputStatistics\": {range: Object,\n      label:\"Output statistics\",\n      val2str: function (v) {\n        return JSON.stringify( v);\n      },\n      str2val: function (str) {\n        return JSON.parse( str);\n      },\n    }\n  }\n});\noes.ExperimentScenarioRun.getAutoId = function () {\n  return (new Date()).getTime();\n};\n\n/******************************************************************************\n *** Lists of predefined cLASSes as reserved names for constraint checks ******\n ******************************************************************************/\noes.predefinedObjectTypes = [\"oBJECT\",\"pROCESSINGoBJECT\",\"pROCESSINGnODE\",\"eNTRYnODE\",\"eXITnODE\"];\noes.predefinedEventTypes = [\"eVENT\",\"aCTIVITYsTART\",\"aCTIVITYeND\",\"aRRIVAL\",\n    \"pROCESSINGaCTIVITYsTART\",\"pROCESSINGaCTIVITYeND\",\"dEPARTURE\"];\noes.predefinedActivityTypes = [\"aCTIVITY\",\"pROCESSINGaCTIVITY\"];\n\n/******************************************************************************\n *** OES Model Objects scenario/experiment/config/model/statistics/etc. *******\n ******************************************************************************/\nsim.scenario = sim.scenario || {};\n// Define the schema of the model object \"scenario\"\nsim.scenario.objectName = \"scenario\";\nsim.scenario.properties = {\n    \"simulationEndTime\": {range:\"Time\", label:\"Duration:\", hint:\"Simulation duration\"},\n    \"name\": {range:\"NonEmptyString\", optional: true, label:\"Name\", hint:\"Scenario name\"},\n    \"title\": {range:\"NonEmptyString\", optional: true, label:\"Title\", hint:\"Scenario title\"},\n    \"shortDescription\": {range:\"String\", optional: true, label:\"Scenario description\",\n        hint:\"Short description of the simulation scenario\"},\n    \"creator\": {range:\"String\", optional: true, label:\"Creator\",\n        hint:\"Creator of simulation model\"},\n    \"created\": {range:\"String\", optional: true, label:\"Created on\",\n        hint:\"Creation date\"},\n    \"modified\": {range:\"String\", optional: true, label:\"Modified on\",\n      hint:\"Modification date\"},\n    \"idCounter\": {range:\"NonNegativeInteger\", optional: true, label:\"ID counter\"},\n    \"randomSeed\": {range:\"PositiveInteger\", optional: true, label:\"Random seed\"}\n};\n\nsim.experiment = {\n  objectName: \"experiment\",\n  properties: {\n    \"experimentNo\": {range:\"AutoNumber\", label:\"Experiment number\",\n        hint:\"Automatically assigned sequence number for experiment\"},\n    \"experimentTitle\": {range:\"String\", optional: true, label:\"Experiment title\"},\n    \"replications\": {range:\"PositiveInteger\", label:\"Number of replications\",\n        hint:\"Number of replications/repetitions per experiment scenario\"},\n    \"parameterDefs\": {\n        range: \"eXPERIMENTpARAMdEF\", maxCard: Infinity,\n        label:\"Experiment parameters\",\n        hint:\"Define experiment parameters by name and value set specification\"\n    },\n    \"seeds\": {range: Array, optional: true},\n  },\n  replications: 0,\n  parameters: [],\n  scenarios:[],  // are created by the simulator\n  validate: function () {\n    var errMsgs=[], exp = sim.experiment;\n    if (exp.replications > 0) {\n      if (exp.seeds) {\n        if (!Array.isArray( exp.seeds)) {\n          errMsgs.push(\"The experiment 'seeds' parameter must have an array value! Illegal value: \"+ JSON.stringify(exp.seeds));\n        } else if (exp.seeds.length < exp.replications) {\n          errMsgs.push(\"Not enough seeds for number of replications!\");\n        }\n      }\n      if (exp.parameterDefs.length > 0) {\n        exp.parameterDefs.forEach( function (paramDef) {\n          if (!paramDef.values && !(paramDef.startValue && paramDef.endValue)) {\n            errMsgs.push(\"Experiment parameter \"+ paramDef.name +\" has neither a 'values' \" +\n                \"nor 'startValue'/'endValue' attribute(s)!\");\n          }\n        })\n      }\n      if (exp.timeSeriesStatisticsVariables) {\n        exp.timeSeriesStatisticsVariables.forEach( function (varName) {\n          if (!(varName in sim.model.statistics)) {\n            errMsgs.push(\"'timeSeriesStatisticsVariables' contains a name (\"+ varName +\") that does not \" +\n                \"correspond to a sim.model.statistics variable!\");\n          }\n        })\n      }\n    }\n    return errMsgs;\n  }\n};\n\n// Define the schema of the model object \"config\"\nsim.config = {\n  objectName: \"config\",\n  properties: {\n    \"createLog\": {range:\"Boolean\", optional: true, label:\"Log\", hint:\"Create simulation log? (yes/no)\"},\n    \"visualize\": {range:\"Boolean\", optional: true, initialValue: true, label:\"Visualization\",\n        hint:\"Visualize a simulation run? (yes/no)\"},\n    \"stepDuration\": {range:\"NonNegativeInteger\", optional: true, label:\"Step duration:\",\n        hint:\"How long is a simulation step to take? [ms]\"},\n    \"userInteractive\": {range:\"Boolean\", optional: true, label:\"User-interactive\",\n      hint:\"Enable user interactions? (yes/no)\"}\n  }\n};\n// Define the schema of the model object \"sim\"\nsim.objectName = \"sim\";\nsim.properties = {\n  \"step\": {range:\"NonNegativeInteger\", label:\"Step:\", hint:\"Simulation step\"},\n  \"time\": {range:\"Number\", label:\"Time:\", hint:\"Simulation time\"}\n};\nsim.space = {overlayGrid: {}};\n\n// Define the schema of the observationUI\nsim.config.observationUI = {\n  objectName: \"observationUI\",\n  canvas: {},\n  properties: {\n    \"spaceView\": {range: Object, label: \"Space view\"},\n    \"objectViews\": {range: Object, label: \"Object views\"}\n  }\n};\n// define the observationUI.monitor\nsim.config.observationUI.monitor = {};\n// Define the schema of the observationUI.spaceView\nsim.config.observationUI.spaceView = {\n  objectName: \"spaceView\",\n  properties: {\n    \"type\": {range: \"NonEmptyString\", label: \"Space view type\"},\n    \"gridCellSize\": {range: \"PositiveInteger\", label: \"Grid cell size\"}\n  }\n};\n// define the visualization record for non-spatial models\nsim.config.observationUI.vis = {SVG:{}};\n// define the objectViews definition map\nsim.config.observationUI.objectViews = {};\n// define the map for runtime objectViews\nsim.objectViews = {};\n\n// Define the schema of the model object \"model\"\nsim.model = sim.model || {};\nsim.model.v = {};  // definitions of (global) model variables available in sim.v\nsim.model.f = {};  // (global) model functions\n\n//TODO: can this be dropped?\noes.defineSimModelSchema = function () {\n  sim.model.objectName = \"model\";\n  sim.model.properties = {\n    \"name\": {range:\"NonEmptyString\", label:\"Name\"},\n    \"title\": {range:\"NonEmptyString\", label:\"Title\", hint:\"Model title\"},\n    \"shortDescription\": {range:\"String\", optional: true, label:\"Model description\",\n      hint:\"Short description of the simulation model\"},\n    \"systemNarrative\": {range:\"String\", optional: true, label:\"System narrative\",\n        hint:\"Narrative of the system under investigation\"},\n    \"license\": {range:\"String\", optional: true, label:\"License\",\n      hint:\"Copyright license\"},\n    \"creator\": {range:\"String\", optional: true, label:\"Creator\",\n      hint:\"Creator of simulation model\"},\n    \"created\": {range:\"String\", optional: true, label:\"Created on\",\n      hint:\"Creation date\"},\n    \"modified\": {range:\"String\", optional: true, label:\"Modified on\",\n      hint:\"Modification date\"},\n    \"time\": {range:[\"discrete\",\"continuous\"], optional: true,\n      label:\"Time model\", hint:\"Either 'discrete' (default) or 'continuous'\"},\n    \"timeUnit\": {range:[\"ms\",\"s\",\"m\",\"h\",\"D\",\"W\",\"M\",\"Y\"], optional: true,\n        label:\"Time unit\", hint:\"A time unit like 'ms', 's' or 'm'\"},\n    \"timeIncrement\": {range:\"Decimal\", optional: true, label:\"Time increment\",\n        hint:\"By default: 1\"},\n    \"objectTypes\": {range: Array, label:\"Object types\"},\n    \"eventTypes\": {range: Array, label:\"Event types\"},\n    \"activityTypes\": {range: Array, optional: true, label:\"Activity types\"}\n  };\n  // Define the schema of the model object \"model.space\"\n  sim.model.space.objectName = \"spaceModel\";\n  sim.model.space.properties = {\n      \"type\": {range:[\"1D-Grid\",\"IntegerGrid\",\"ObjectGrid\",\"3D-Grid\",\"1D\",\"2D\",\"3D\"], label:\"Space type\"},\n      \"geometry\": {range:[\"TOROIDAL\",\"EUCLIDEAN\"], optional: true, label:\"Space geometry\",\n        hint:\"Either 'TOROIDAL' (default) or 'EUCLIDEAN'\"},\n      \"xMax\": {range:\"NonNegativeInteger\", label:\"Width\", hint:\"Maximum x value\"},\n      \"yMax\": {range:\"NonNegativeInteger\", optional: true, label:\"Height\", hint:\"Maximum y value\"},\n      \"zMax\": {range:\"NonNegativeInteger\", optional: true, label:\"Depth\", hint:\"Maximum z value\"}\n  };\n};\nsim.model.objectName = \"model\";\nsim.model.properties = {\n  \"name\": {range:\"NonEmptyString\", label:\"Name\"},\n  \"title\": {range:\"NonEmptyString\", label:\"Title\", hint:\"Model title\"},\n  \"shortDescription\": {range:\"String\", optional: true, label:\"Model description\",\n    hint:\"Short description of the simulation model\"},\n  \"systemNarrative\": {range:\"String\", optional: true, label:\"System narrative\",\n    hint:\"Narrative of the system under investigation\"},\n  \"license\": {range:\"String\", optional: true, label:\"License\",\n    hint:\"Copyright license\"},\n  \"creator\": {range:\"String\", optional: true, label:\"Creator\",\n    hint:\"Creator of simulation model\"},\n  \"created\": {range:\"String\", optional: true, label:\"Created on\",\n    hint:\"Creation date\"},\n  \"modified\": {range:\"String\", optional: true, label:\"Modified on\",\n    hint:\"Modification date\"},\n  \"time\": {range:[\"discrete\",\"continuous\"], optional: true,\n    label:\"Time model\", hint:\"Either 'discrete' (default) or 'continuous'\"},\n  \"timeUnit\": {range:[\"ms\",\"s\",\"m\",\"h\",\"D\",\"W\",\"M\",\"Y\"], optional: true,\n    label:\"Time unit\", hint:\"A time unit like 'ms', 's' or 'm'\"},\n  \"timeIncrement\": {range:\"Decimal\", optional: true, label:\"Time increment\",\n    hint:\"By default: 1\"},\n  \"objectTypes\": {range: Array, label:\"Object types\"},\n  \"eventTypes\": {range: Array, label:\"Event types\"},\n  \"activityTypes\": {range: Array, optional: true, label:\"Activity types\"}\n};\n// Define the schema of the model object \"model.space\"\nsim.model.space = sim.model.space || {};\nsim.model.space.objectName = \"spaceModel\";\nsim.model.space.properties = {\n  \"type\": {range:[\"1D-Grid\",\"IntegerGrid\",\"ObjectGrid\",\"3D-Grid\",\"1D\",\"2D\",\"3D\"], label:\"Space type\"},\n  \"geometry\": {range:[\"TOROIDAL\",\"EUCLIDEAN\"], optional: true, label:\"Space geometry\",\n    hint:\"Either 'TOROIDAL' (default) or 'EUCLIDEAN'\"},\n  \"xMax\": {range:\"NonNegativeInteger\", label:\"Width\", hint:\"Maximum x value\"},\n  \"yMax\": {range:\"NonNegativeInteger\", optional: true, label:\"Height\", hint:\"Maximum y value\"},\n  \"zMax\": {range:\"NonNegativeInteger\", optional: true, label:\"Depth\", hint:\"Maximum z value\"}\n};\n\n// Define the schema of the model object \"scenario.initialState\"\nsim.scenario.initialState = {\n  objectName: \"initialState\",\n  properties: {\n    // a map, and therefore an instance of Object\n    \"objects\": {range: Object, optional: true, label:\"Initial objects\"},\n    // a map, and therefore an instance of Object\n    \"events\": {range: Object, optional: true, label:\"Initial events\"}\n  },\n  validate: function () {\n    var errors=[];\n    var isProcNetSim = this.objects &&\n            Object.keys( this.objects).some( function (objIdStr) {\n              return this.objects[objIdStr].typeName === \"eNTRYnODE\";\n            }, this);\n    if (!this.events && !isProcNetSim &&\n        !(sim.model.timeIncrement || sim.model.OnEachTimeStep)) {\n      errors.push(\"There must be at least one initial event when neither \" +\n          \"a time increment nor an 'OnEachTimeStep' method has been defined.\");\n    }\n    if (!this.objects) return;\n    Object.keys( this.objects).forEach( function (objIdStr) {\n      var slots={}, Class=null;\n      // check object IDs\n      if (String( parseInt( objIdStr)) !== objIdStr) {\n        errors.push(\"An object has a non-integer ID: \"+ objIdStr);\n      }\n      slots = this.objects[objIdStr];\n      Class = cLASS[slots.typeName];\n      Object.keys( slots).forEach( function (p) {\n        var decl = Class.properties[p], constrVio=null;\n        if (decl) {\n          constrVio = cLASS.check( p, decl, slots[p]);\n          if (!(constrVio instanceof NoConstraintViolation)) {\n            errors.push( slots.typeName +\"(\"+ objIdStr +\"): \"+ constrVio.message);\n          }\n        }\n      });\n    }, this);\n    return errors;\n  }\n};\n// Define the schema of the model object \"scenario.initialStateUI\"\nsim.scenario.initialStateUI = {\n  objectName: \"initialStateUI\",\n  properties: {\n    \"editableProperties\": {range: Object, label:\"Editable properties\"}\n  },\n  validate: function () {\n    if (!this.editableProperties) return;\n    Object.keys( this.editableProperties).forEach( function (className) {\n      // ...\n    }, this);\n  }\n};\nsim.scenario.initialStateUI.editableProperties = {};\n\n/**\n * Check correctness of scenario/model definitions\n * @method\n * @author Gerd Wagner\n */\noes.verifySimulation = function () {\n  var errMsgs=[];\n\n  function checkModelObject( mo) {  // mo = model object\n    var props = mo.properties, errors=[];\n    if (!props) {\n      errors.push(\"The model object \"+ mo.objectName +\" does not have a declaration of 'properties'!\");\n      return;\n    }\n    // check property slots\n    Object.keys( props).forEach( function (prop) {\n      var constrVio = cLASS.check( prop, props[prop], mo[prop]);\n      if (!(constrVio instanceof NoConstraintViolation)) {\n        errors.push( constrVio.constructor.name +\": \"+ constrVio.message);\n      }\n    });\n    if (mo.validate) {  // invoke specific check method\n      errors.merge( mo.validate());\n    }\n    if (errors.length > 0) {\n      errors.forEach( function (err, i) {\n        errors[i] = \"[\"+ mo.objectName +\"] \" + err;\n      });\n    }\n    return errors;\n  }\n  // check model definition\n  errMsgs.merge( checkModelObject( sim.model));\n  // check SPACE model definition\n  if (sim.model.space.type) {\n    errMsgs.merge( checkModelObject( sim.model.space));\n  }\n  // check scenario definition\n  errMsgs.merge( checkModelObject( sim.scenario));\n  // check experiment definition\n  if (sim.experiment.replications > 0) errMsgs.merge( checkModelObject( sim.experiment));\n  // check initial state definition\n  errMsgs.merge( checkModelObject( sim.scenario.initialState));\n  // check definitions of STATISTICS variables\n  if (sim.model.statistics) {\n    Object.keys( sim.model.statistics).forEach( function (varName) {\n      var statVar = sim.model.statistics[varName],\n          OT = statVar.objectType,\n          aggrFunc = statVar.aggregationFunction;\n      // statistics variable bound to a model variable\n      if (statVar.globalVariable) {\n        if (sim.model.v[statVar.globalVariable] === undefined)\n          errMsgs.push( \"[Statistics] Global model variable <var>\"+\n              statVar.globalVariable +\"</var> has not been defined!\");\n      }\n      if (OT && !sim.model.objectTypes.includes( OT)) {\n        errMsgs.push( \"[Statistics] Specified object type <var>\"+\n            OT +\"</var> is not included in sim.model.objectTypes!\");\n      }\n      // variable bound to specific object\n      if (statVar.objectIdRef && !sim.objects[statVar.objectIdRef]) {\n        errMsgs.push( \"[Statistics] Invalid definition of statistics variable <var>\"+\n            varName +\"</var>: There is no object with ID \"+ statVar.objectIdRef +\"!\");\n      }\n      // aggregation function must be defined\n      if (aggrFunc && typeof( oes.stat[aggrFunc]) !== 'function') {\n        errMsgs.push( \"[Statistics] Invalid definition of statistics variable <var>\"+\n            varName +\"</var>: <code>\"+ aggrFunc +\n            \"</code> is not an admissible aggregation function name!\");\n      }\n      // if variable is bound to a property, objectIdRef or objectType must be provided\n      if (statVar.property && !statVar.objectIdRef && !(OT && cLASS[OT])) {\n        errMsgs.push( \"[Statistics] Invalid definition of statistics variable <var>\"+\n            varName +\"</var>:\"+ (!OT ? \" object type name missing!\" :\n                                 !cLASS[OT] ? \" object type \"+ OT +\" not defined!\" :\n                                 !aggrFunc ? \" aggregationFunction missing!\":\"\"));\n      }\n      //TODO: add further checks!\n    });\n  }\n  errMsgs.concat( oes.checkModelConstraints());\n  return errMsgs;\n};\n/**\n * Determine if a simulation is based on a PN model\n */\noes.isProcNetModel = function () {\n  var initState = sim.scenario.initialState,\n      initialObjDefs = initState.objects,\n      initialObj= [], keys=[], key=\"\", i=0;\n  if (initialObjDefs) {  // a map of object definitions\n    keys = Object.keys( initialObjDefs);\n    for (i=0; i < keys.length; i++) {\n      key = keys[i];\n      initialObj = initialObjDefs[key];\n      if (initialObj.typeName === \"eNTRYnODE\") return true;\n    }\n  }\n  return false;\n};\n/**\n * Check model constraints\n * @method\n * @author Gerd Wagner\n */\noes.checkModelConstraints = function (params) {\n  var errMsgs=[];\n  if (sim.model.constraints) {\n    Object.keys( sim.model.constraints).forEach( function (constrName) {\n      var constraint = sim.model.constraints[constrName], msg=\"\";\n      if (!constraint()) {\n        msg = \"The constraint '\"+ constrName +\"' is violated at step \"+ sim.step;\n        if (params && params.log) console.log( msg);\n        else errMsgs.push( msg);\n      }\n    })\n  }\n  return errMsgs;\n};\n/**\n * Set up Storage Management\n *\n * @method\n * @author Gerd Wagner\n */\noes.setupStorageManagement = function (dbName) {\n  var storageAdapter = {dbName: dbName};\n  if (!('indexedDB' in self)) {\n    console.log(\"This browser doesn't support IndexedDB. Falling back to LocalStorage.\");\n    storageAdapter.name = \"LocalStorage\";\n  } else {\n    storageAdapter.name = \"IndexedDB\";\n  }\n  sim.storeMan = new sTORAGEmANAGER( storageAdapter);\n  //sim.storeMan.createEmptyDb().then( oes.setupFrontEndSimEnv);\n  // last step in setupFrontEndSimEnv, then wait for user actions\n  sim.storeMan.createEmptyDb([oes.ExperimentRun, oes.ExperimentScenarioRun]).then( function () {\n    console.log(\"Empty IndexedDB created.\");\n  });\n};\n/**\n * Set up front-end simulation environment\n *\n * @method\n * @author Gerd Wagner\n */\noes.setupFrontEndSimEnv = function () {\n  var errors=[], el=null;\n  sim.initializeSimulator();\n  // set up initial state\n  sim.initializeModelVariables();\n  sim.createInitialObjEvt();\n  if (Object.keys( oes.EntryNode.instances).length > 0) {\n    oes.setupProcNetStatistics();\n  }\n  // initialize statistics\n  if (sim.model.statistics) oes.stat.initialize();\n  // check simulation definition constraints\n  if (oes.loadManager && oes.loadManager.codeLoadingMode !== \"deploy\") {\n    errors = oes.verifySimulation();\n    if (errors.length > 0) {\n      el = dom.createElement(\"div\", {id:\"errors\"});\n      el.appendChild( dom.createElement(\"h1\", {content: \"Errors\"}));\n      errors.forEach( function (err) {\n        el.appendChild( dom.createElement(\"p\", {content: err}));\n      });\n      document.body.insertBefore( el, document.body.firstElementChild);\n    } else {\n      console.log(\"No errors detected in \"+ oes.loadManager.codeLoadingMode + \" mode.\");\n    }\n  }\n  // set up the UI\n  oes.ui.setupUI();\n  // visualize initial state (step 0)\n  if (sim.config.visualize) oes.ui.visualizeStep();\n};\n\n/*******************************************************************************\n * EventList maintains an ordered list of events using Binary Heap\n * \n * @copyright Copyright 2018 Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Luis Gustavo Nardin\n ******************************************************************************/\nvar oes = oes || {};\noes.EventList = function EventList ( a ) {\n  this.heap = new BinaryHeap( function ( e ) {\n    return e.occTime;\n  } );\n};\noes.EventList.prototype.add = function ( e ) {\n  if (sim.model.timeRoundingDecimalPlaces) {\n    e.occTime = Math.round( e.occTime * sim.timeRoundingFactor) /\n        sim.timeRoundingFactor;\n  }\n  this.heap.push( e );\n};\noes.EventList.prototype.getNextOccurrenceTime = function () {\n  if ( !this.heap.isEmpty() ) {\n    return this.heap.getFirst().occTime;\n  } else {\n    return 0;\n  }\n};\noes.EventList.prototype.getNextEvent = function () {\n  if ( !this.heap.isEmpty() ) {\n    return this.heap.pop();\n  } else {\n    return null;\n  }\n};\noes.EventList.prototype.getAllEvents = function () {\n  return this.heap.content;\n};\noes.EventList.prototype.isEmpty = function () {\n  return this.heap.isEmpty();\n};\noes.EventList.prototype.removeNextEvents = function () {\n  var nextTime = 0, nextEvents = [];\n  if ( this.heap.isEmpty() ) {\n    return [];\n  }\n  nextTime = this.heap.getFirst().occTime;\n  while ( !this.heap.isEmpty() &&\n      this.heap.getFirst().occTime === nextTime ) {\n    nextEvents.push( this.heap.pop() );\n  }\n  return nextEvents;\n};\noes.EventList.prototype.clear = function ( e ) {\n  this.heap.clear();\n};\n\noes.EventList.prototype.containsEventOfType = function ( evtType ) {\n  return this.heap.getContent().some( function (evt) {\n    return evt.constructor.Name === evtType;\n  } );\n};\noes.EventList.prototype.getEventsOfType = function ( evtType ) {\n  return this.heap.getContent().filter( function (evt) {\n    return evt.constructor.Name === evtType;\n  } );\n};\noes.EventList.prototype.toString = function () {\n  var str = \"\";\n  if ( !this.heap.isEmpty() ) {\n    str = this.heap.getContent().reduce( function ( serialization, e ) {\n      return serialization + \", \" + e.toLogString();\n    }, \"\" );\n    str = str.slice( 1 );\n  }\n  return str;\n};\n\n/**\n * @fileOverview Variables and procedures for (ex-post) statitsics\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Mircea Diaconescu\n * @author Gerd Wagner\n * @license The MIT License (MIT)\n */\n// create namespace oes if not already created by some other \"module\"\nif (typeof oes !== \"object\") var oes = {};\n/**\n * Computation of the simulation statistics.\n *\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Mircea Diaconescu\n * @license The MIT License (MIT)\n */\noes.stat = {\n  timeSeriesCompressionSteps: 1 // length of array values to be compressed into one value\n};\nsim.stat = {  // run-time statistics variables\n  timeSeries: {}\n};\nsim.aux = sim.aux || {}; // auxiliary variables\nsim.aux.stat = {\n  prevValue: {}\n};\n/**\n * Initialize the ex-post statistics\n */\noes.stat.initialize = function () {\n  var aggReturnType = {  // stores the return types of various aggregation functions\n    'avg': 'Decimal'\n  };\n  Object.keys( sim.model.statistics).forEach( function (varName) {\n    var statVar = sim.model.statistics[varName],\n        initialVal = statVar.initialValue || 0,\n        OT=\"\", objIdRefStr=\"\", objectRef=null,\n        propDecl=\"\", globVar=\"\";\n    statVar.name = varName;\n    // is the statistics variable bound to a global variable?\n    if (statVar.globalVariable) {\n      globVar = statVar.globalVariable;\n      if (typeof sim.model.v[globVar] === \"object\") {\n        initialVal = sim.model.v[globVar].initialValue || 0;\n      } else initialVal = sim.model.v[globVar];\n    } else if (statVar.property && statVar.objectIdRef) {\n      // the variable is bound to a property slot of a specific object\n      objIdRefStr = String( statVar.objectIdRef);\n      if (statVar.objectType) OT = statVar.objectType;\n      else OT = sim.objects[objIdRefStr].constructor.Name;\n      objectRef = cLASS[OT].instances[objIdRefStr];\n      if (objectRef) {\n        statVar.objectRef = objectRef;  // store reference to the object\n        // the statistics variable default range is the property range\n        if (!statVar.range) {\n          if (statVar.aggregationFunction &&\n              aggReturnType[statVar.aggregationFunction]) {\n            statVar.range = aggReturnType[statVar.aggregationFunction];\n          } else {\n            propDecl = cLASS[objectRef.constructor.Name].properties[statVar.property];\n            statVar.range = propDecl.range;\n          }\n        }\n        initialVal = objectRef[statVar.property];\n      }\n    } else if (statVar.property && statVar.objectType) {\n      OT = statVar.objectType;\n      if (statVar.aggregationFunction) {\n        initialVal = 0;\n        if (aggReturnType[statVar.aggregationFunction]) {\n          statVar.range = aggReturnType[statVar.aggregationFunction];\n        }\n      } else { // the variable is bound to a collection of property slots\n        /*\n        propDecl = cLASS[OT].properties[statVar.property];\n        statVar.range = propDecl.range;\n        */\n        statVar.hasRecordRange = true;\n        initialVal = {};\n        Object.keys( cLASS[OT].instances).forEach( function (objIdStr) {\n          initialVal[objIdStr] = cLASS[OT].instances[objIdStr][statVar.property];\n        });\n      }\n    } else if (statVar.gridCellProperty && sim.space.grid) {\n      // statistics variable for grid cell property\n      if (!statVar.range) {\n        if (statVar.aggregationFunction &&\n          aggReturnType[statVar.aggregationFunction]) {\n          statVar.range = aggReturnType[statVar.aggregationFunction];\n        } else {\n          propDecl = sim.space.grid[0][0].constructor.properties[statVar.gridCellProperty];\n          if (propDecl)  statVar.range = propDecl.range;\n        }\n      }\n    }\n    // is the variable's time series to be created?\n    statVar.createTimeSeries = (statVar.showTimeSeries || sim.experiment.timeSeriesStatisticsVariables &&\n        sim.experiment.timeSeriesStatisticsVariables.includes( statVar));\n    if (statVar.createTimeSeries) {\n      if (sim.timeIncrement === undefined){\n        sim.stat.timeSeries[varName] = [[],[]];\n      } else {\n        sim.stat.timeSeries[varName] = [];\n      }\n    }\n    // is variable bound to a time series aggregation?\n    statVar.isBoundToTimeSeriesAggregate = (statVar.aggregationFunction &&\n        (statVar.objectIdRef && statVar.property || statVar.globalVariable));\n    // is variable bound to an aggregate over an ObjectType population?\n    statVar.isBoundToPopulationAggregate =\n        (!statVar.objectIdRef && statVar.property && OT);\n    // determine Integer range\n    if (statVar.range) {\n      statVar.hasIntegerRange = cLASS.isIntegerType( statVar.range);\n    } else if (statVar.globalVariable && typeof sim.model.v[globVar] === \"object\" &&\n             statVar.aggregationFunction && statVar.aggregationFunction !== \"avg\") {\n      statVar.hasIntegerRange = cLASS.isIntegerType( sim.model.v[globVar].range);\n    } else {\n      statVar.hasIntegerRange = false;\n    }\n    // initialize runtime statistics variables in sim.stat\n    if (statVar.hasIntegerRange) sim.stat[varName] = parseInt( initialVal);\n    else sim.stat[varName] = initialVal;\n    // store as previous value\n    sim.aux.stat.prevValue[varName] = sim.stat[varName];\n  });\n  // initialize resource utilization statistics\n  if (sim.model.activityTypes && sim.model.activityTypes.length > 0) {\n    sim.stat.resUtil = {};\n    sim.model.activityTypes.forEach( function (aT) {\n      sim.stat.resUtil[aT] = {};\n    });\n  }\n  // initialize PN statistics\n  if (Object.keys( oes.ProcessingNode.instances).length > 0) {\n    sim.stat.resUtil = sim.stat.resUtil || {};\n    sim.stat.resUtil[\"pROCESSINGaCTIVITY\"] = {};\n  }\n};\n/**\n * The timeSeries arrays are limited in length for two reasons:\n * - large arrays results in slowing down the simulation\n * - we have limited pixels on the screen to show the statistics graphs\n *\n * Actually, the maximum length is limited to the number of pixels\n * available for the statistics graphs, so one time series value for\n * each one physical pixels. This is achieved by compressing the\n * array, averaging groups of values to one value.\n *\n * @param maxLength\n *    the maximum allowed length of the timeSeries array\n */\noes.stat.prepareTimeSeriesCompression = function (maxLength) {\n  maxLength = maxLength || sim.scenario.simulationEndTime; // defaults to \"no restriction - all steps\"\n  oes.stat.timeSeriesCompressionSteps = Math.floor(sim.scenario.simulationEndTime / maxLength);\n  if (oes.stat.timeSeriesCompressionSteps < 1) oes.stat.timeSeriesCompressionSteps = 1;\n  console.log(\"Statistics: timeSeriesCompressionSteps=\"\n    + oes.stat.timeSeriesCompressionSteps + \" (1 means no compression)\");\n};\n/**\n * Reset the statistics variables. This means that any computed\n * value is reset to the initial value and all the connection with\n * object(s) references are recreated.\n */\noes.stat.reset = function () {\n  oes.stat.initialize();\n};\n\n/**\n * Update the statistic variables at the end of each simulation step.\n */\noes.stat.updateStatistics = function () {\n  var i=0, statVar=null,\n      statVarNames = Object.keys( sim.model.statistics),\n      n = statVarNames.length;\n  for (i=0; i<n; i++) {\n    statVar = sim.model.statistics[statVarNames[i]];\n    // computeOnlyAtEnd statistic variables are ignored at this point\n    if (!statVar.computeOnlyAtEnd) oes.stat.updateStatisticsVariable( statVar);\n  }\n};\n\n/**\n * Update a statistics variable X and assign the result to sim.stat[\"X\"]\n * @param statVar  the statistics variable declaration\n */\noes.stat.updateStatisticsVariable = function (statVar) {\n  var varName = statVar.name, valueAtCurrentStep;\n  var cellsOnX = 0, cellsOnY = 0, i = 0, j = 0;\n  var grid=null, sum=0, pName=\"\", OT=null;\n  // expression/function is used to compute the value\n  if (typeof statVar.expression === 'function') {\n    valueAtCurrentStep = statVar.expression() || 0;\n  } else if (statVar.globalVariable) { // value obtained from a global variable\n    valueAtCurrentStep = sim.v[statVar.globalVariable] || 0;\n  } else if (statVar.objectRef) { // value obtained from an object's property slot\n    valueAtCurrentStep = statVar.objectRef[statVar.property] || 0;\n  } else if (statVar.property && statVar.objectType && !statVar.aggregationFunction) {\n    // the variable is bound to a collection of property slots\n    valueAtCurrentStep = {};\n    OT = cLASS[statVar.objectType];\n    Object.keys( OT.instances).forEach( function (objIdStr) {\n      valueAtCurrentStep[objIdStr] = OT.instances[objIdStr][statVar.property];\n    });\n  } else if (statVar.entryNode) { // PN statistics\n    valueAtCurrentStep = statVar.entryNode.nmrOfArrivedObjects || 0;\n  } else if (statVar.exitNode) { // PN statistics\n    valueAtCurrentStep = statVar.exitNode.nmrOfDepartedObjects || 0;\n  } else if (statVar.gridCellProperty) {\n    grid = sim.space.grid;\n    cellsOnX = grid.length;\n    cellsOnY = grid[0].length;\n    pName = statVar.gridCellProperty;\n    for (i = 0; i < cellsOnX; i++) {\n      for (j = 0; j < cellsOnY; j++) sum += (grid[i][j])[pName];\n    }\n    valueAtCurrentStep = sum / (cellsOnX * cellsOnY);\n    if (statVar.aggregationFunction) {\n      valueAtCurrentStep = oes.stat[statVar.aggregationFunction](\n        sim.aux.stat.prevValue[varName], valueAtCurrentStep);\n    }\n  } else {  // value computed manually in the simulation scenario\n    valueAtCurrentStep = sim.stat[varName];\n  }\n  //TODO: support TimeSeriesAggregate of PopulationAggregate\n  if (statVar.isBoundToTimeSeriesAggregate) {\n    valueAtCurrentStep = oes.stat[statVar.aggregationFunction](\n        sim.aux.stat.prevValue[varName], valueAtCurrentStep);\n  } else if (statVar.isBoundToPopulationAggregate) {\n    valueAtCurrentStep = oes.stat.computePopulationAggregate(statVar);\n  }\n  // format integer values\n  if (statVar.hasIntegerRange) sim.stat[varName] = parseInt( valueAtCurrentStep);\n  else sim.stat[varName] = valueAtCurrentStep;\n  // check if the variable's time series has to be stored/returned\n  if (statVar.createTimeSeries) {\n    if (sim.timeIncrement) {\n      //sim.stat.timeSeries[varName][sim.step] = sim.stat[varName];\n      sim.stat.timeSeries[varName].push( sim.stat[varName]);\n      if (oes.stat.timeSeriesCompressionSteps > 1\n          && sim.step % oes.stat.timeSeriesCompressionSteps === 0) {\n        oes.stat.compressTimeSeries( sim.stat.timeSeries[varName]);\n      }\n    } else {  // next-event time progression\n      sim.stat.timeSeries[varName][0][sim.step] = sim.time;\n      // TODO: check how we can average steps for time progression case\n      sim.stat.timeSeries[varName][1][sim.step] = sim.stat[varName];\n      // TODO: check how we can average statistic values for time progression case\n    }\n  }\n  // assign current value to previous value\n  sim.aux.stat.prevValue[varName] = sim.stat[varName];\n};\n\n/**\n * Compress time series to keep its length in a specified\n * range, avoiding long arrays that slow down the simulation.\n * @param ts\n *    the time series to compress\n */\noes.stat.compressTimeSeries = function (ts) {\n  var avgLen = oes.stat.timeSeriesCompressionSteps;\n  var i = 0, n = ts.length, avg = 0;\n  // compute average value for the latest set, which will be compressed\n  for (i = n - avgLen; i < n; i++) avg += ts[i];\n  // remove averaged values and append the compressed (average) value\n  ts.splice(n-avgLen-1, avgLen, avg /= avgLen);\n};\n\n/**\n * Compute a Population Aggregate\n */\noes.stat.computePopulationAggregate = function (statVar) {\n  var OT = statVar.objectType,\n      objIDs = Object.keys( cLASS[OT].instances),\n      n = objIDs.length,\n      aggrF = statVar.aggregationFunction,\n      aggr=0, i=0;\n  switch (aggrF) {\n  case \"min\":\n  case \"max\":\n    for (i=0; i < n; i++) {\n      aggr = Math[aggrF]( aggr, cLASS[OT].instances[String(id)][statVar.property]);\n    }\n    break;\n  case \"sum\":\n  case \"avg\":\n    for (i=0; i < n; i++) {\n      aggr += cLASS[OT].instances[String(id)][statVar.property];\n    }\n    if (aggrF === \"avg\") aggr = aggr/n;\n    break;\n  }\n  return aggr;\n};\n/**\n * Compute the values of the statistic variables which are only required\n * to be computed at the simulation end. This method has to be called when\n * the simulation ends.\n */\noes.stat.computeOnlyAtEndStatistics = function () {\n  Object.keys( sim.model.statistics).forEach( function (varName) {\n    var statVar = sim.model.statistics[varName];\n    if (statVar.computeOnlyAtEnd) oes.stat.updateStatisticsVariable( statVar);\n  });\n};\n\n/**\n * Compute the <code>max</code> aggregation function value.\n * @param oldValue\n * @param newValue\n *\n */\noes.stat.max = function (oldValue, newValue) {\n  return Math.max( oldValue, newValue);\n};\n\n/**\n * Compute the <code>min</code> aggregation function value.\n * @param oldValue\n * @param newValue\n *\n */\noes.stat.min = function (oldValue, newValue) {\n  return Math.min( oldValue, newValue);\n};\n/**\n * Compute the <code>sum</code> aggregation function value.\n * @param oldValue\n * @param newValue\n *\n */\noes.stat.sum = function (oldValue, newValue) {\n  return oldValue + newValue;\n};\n/**\n * Compute the <code>avg</code> (average, arithmetic mean) aggregation function value.\n * @param oldValue\n * @param newValue\n *\n */\noes.stat.avg = function (oldValue, newValue) {\n  if (sim.step >= 1) return (oldValue + (newValue - oldValue) / (sim.step + 1));\n  else return oldValue;\n};\n/**\n * Summary statistics record\n */\noes.stat.summary = {\n  average: {label:\"Average\", f: math.mean},\n  stdDev: {label:\"Std.dev.\", f: math.stdDev},\n  min: {label:\"Minimum\", f: Array.min},\n  max: {label:\"Maximum\", f: Array.max},\n  confIntLowerBound: {label: \"Conf.Int.Lower\", f: function ( data ) {\n    sim.stat.CurrentCI = math.confInt( data ); // {lowerBound: x, upperBound: y}\n    return sim.stat.CurrentCI.lowerBound;\n  }},\n  confIntUpperBound: {label: \"Conf.Int.Upper\", f: function () {\n    return sim.stat.CurrentCI.upperBound;\n  }}\n};\n/**\n * @fileOverview A JavaScript implementation of an Object-Event Simulator defined as\n * a JS object \"sim\". The simulator is associated with a simulation model (sim.model)\n * and one or more simulation scenarios (sim.scenarios).\n *\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Gerd Wagner\n * @license The MIT License (MIT)\n *\n * Integrity *constraints* that must be satisfied at any simulation step can be defined\n * as Boolean functions in the map \"model.constraints\" with constraint names being the\n * keys. They are currently checked for the initial state only (in \"setupInitialState\").\n * In future versions there may be an option that constraints are checked in all\n * simulation steps for catching more model errors.\n */\n/*\nImprovements/extensions\nv1\n - support the definition of a \"warm-up period\"\n - drop the activityType attribute of ProcessingActivityStart (and -End?) since it is always \"pROCESSINGaCTIVITY\"\n - allow creating new events \n   (a) without an occTime setting, such that they are scheduled with a delay of nextMomentDeltaT\n   (b) without an occTime setting, but with a \"delay\"\n - refactor createInitialObjEvt into a create and a reset procedure such that already created initial objects\n    are not deleted, but reset, when rerunning a simulation\n - make constraint checking on object/event creation conditional depending on\n       areConstraintsToBeChecked = sim.isConstraintCheckingTurnedOn ||\n          sim.isConstraintCheckingTurnedOn === undefined && oes.loadManager &&\n          oes.loadManager.codeLoadingMode !== \"deploy\";\n - improve the initial state definition UI:\n   + support value changes via IndexedDB\n   + allow adding/dropping objects in the ClassPopulationWidget\n   + support enumeration attributes in the ClassPopulationWidget\n - Add observation UIs for visualizing variables in \"monitors\"\n\n - make a sims/basic-tests.html that invokes one or more seeded scenario simulations and checks statistics results\n - Define set/get for scenario.visualize and use the setter for dropping/setting-up the visualization (canvas)\n\n - Find out what is the meaning of \"variable\" versus \"parameter\" in AnyLogic\n\n - run experiment scenarios in parallel worker threads using the navigator.hardwareConcurrency information\n   (see https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency)\n\n - improve clock-time measuring and support real-time simulation enabled by realtimeFactor set to 1\n - Refactor the simulation step/loop by parametrizing pre-defined events from an extension library (such as \"PN Models\")\n - New model constraint checks:\n   + prevent the use of pre-defined cLASS names (\"aRRIVAL\", etc.) and predefined property names (oes.predfinedProperties)\n\n - Implement support for the \"recurrence\" attribute of entry nodes\n - Allow setting a waiting timeout for the input queues of processing nodes (corresponding\n   to AnyLogic's \"Enable exit on timeout\")\n - Implement support for the \"capacity\" attribute of processing nodes (by popping/forwarding\n   more than one processing objects)\n - Allow processing nodes to specify a maximum queue length (limited queue capacity)\n\n *** later ***\n - Add exploration model\n - Support using variants of the same model (sim.models)\n - UI for defining ex-post statistics\n\nv2\n - extend mODELcLASS with object pools\n - analyze use of modules\n - concurrent event processing with deferred state changes\n - add agents\n - add participation model\n */\n\n/*******************************************************\n Initializations\n ********************************************************/\nsim.ui = sim.ui || {}; // runtime UI components\n/*******************************************************\n Add object to simulation objects\n *******************************************************\n * @author Gerd Wagner\n * @method\n * @param o  the object to be added\n */\nsim.addObject = function (o) {\n  if (!(o instanceof oes.Object)) {\n    console.log( o.toString() +\" is not an oBJECT!\");\n    return;\n  }\n  if (!o.id) o.id = sim.idCounter++;\n  sim.objects[String(o.id)] = o;\n  if (o.name) {\n    if (typeof o.name !== \"string\" ) {\n      console.log(\"oBJECT \"+ o.toString() +\" has a non-string name\"+ o.name);\n      return;\n    } else sim.namedObjects[o.name] = o;\n  }\n  return o;\n};\nsim.addObjects = function (objArr) {\n  objArr.forEach( function (o) {sim.addObject(o)});\n  return objArr;\n};\n/*******************************************************\n Remove an object from the set of simulation objects\n *******************************************************\n * @author Gerd Wagner\n * @method\n * @param o  the object to be removed\n */\nsim.removeObject = function (o) {\n  var ObjectClass=null;\n  if (!(o instanceof oes.Object)) {\n    console.log( JSON.stringify(o) +\" is not an OES object!\");\n    return;\n  }\n  if (!sim.objects[String(o.id)]) {\n    console.log( JSON.stringify(o) +\"@\"+ sim.time +\n        \" has not been registered as a simulation object!\");\n    return;\n  }\n  ObjectClass = o.constructor;\n  delete ObjectClass.instances[String(o.id)];\n  delete sim.objects[String(o.id)];\n};\nsim.removeObjectById = function (id) {\n  var ObjectClass=null;\n  if (typeof id === \"string\") id = parseInt(id);\n  if (!Number.isInteger( id)) {\n    console.log( JSON.stringify(id) +\" is not an integer!\");\n    return;\n  }\n  if (!sim.objects[String(id)]) {\n    console.log( JSON.stringify(id) +\" is not an ID of a registered simulation object!\");\n    return;\n  }\n  ObjectClass = o.constructor;\n  delete ObjectClass.instances[id];\n  delete sim.objects[id];\n};\n/*******************************************************\n Schedule an event by adding it to the FEL\n *******************************************************\n * @author Gerd Wagner\n * @method\n * @param e  the event to be scheduled\n */\nsim.scheduleEvent = function (e) {\n  if (e instanceof oes.Event) sim.FEL.add(e);\n  else {\n    console.log( e.toString() +\" is not an eVENT!\");\n  }\n};\n/********************************************************\n * Initialize Model Variables\n ********************************************************/\nsim.initializeModelVariables = function (expParamSlots) {\n  sim.v = {};  // a map of global variables (accessible by name)\n  // set up the map of model variables\n  sim.model.v = sim.model.v || {};\n  Object.keys( sim.model.v).forEach( function (varName) {\n    var mv = sim.model.v[varName];\n    if (typeof expParamSlots === \"object\" && expParamSlots[varName]) {\n      // assign experiment parameter value\n      sim.v[varName] = expParamSlots[varName];\n    } else {\n      sim.v[varName] = (mv.value !== undefined) ? mv.value : mv.initialValue;\n    }\n  });\n}\n/********************************************************\n * Create Initial Objects and Events\n ********************************************************/\nsim.createInitialObjEvt = function () {\n  var initState = sim.scenario.initialState,\n      initialEvtDefs=null, initialObjDefs=null, entryNodes={};\n  // clear initial state data structures\n  sim.objects = {};  // a map of all objects (accessible by ID)\n  sim.namedObjects = {};  // a map of objects accessible by a unique name\n  sim.FEL.clear();\n  sim.ongoingActivities = {};  // a map of all ongoing activities accessible by ID\n  // clear the cLASS populations of model-specific object types\n  sim.model.objectTypes.forEach( function (objTypeName) {\n    cLASS[objTypeName].instances = {};\n  });\n  // clear the cLASS populations of pre-defined object and activity types\n  [\"eNTRYnODE\",\"pROCESSINGnODE\",\"eXITnODE\",\"pROCESSINGoBJECT\",\"pROCESSINGaCTIVITY\"].\n      forEach( function (objTypeName) {cLASS[objTypeName].instances = {};});\n  // allow parametrized object/event definitions\n  if (typeof sim.scenario.setupInitialState === \"function\") {\n    sim.scenario.setupInitialState();\n  }\n  // register initial objects\n  initialObjDefs = initState.objects;\n  if (initialObjDefs) {  // a map of object definitions\n    Object.keys( initialObjDefs).forEach( function (objIdStr) {\n      var objSlots = util.cloneObject( initialObjDefs[objIdStr]),\n          objTypeName = objSlots.typeName,\n          ObjType = cLASS[objTypeName], obj=null;\n      // fatal error: object type class not found\n      if (!ObjType) throw \"Missing object type class '\" + objTypeName + \"'!\";\n      objSlots.id = parseInt( objIdStr);\n      delete objSlots.typeName;  // remove typeName slot\n      try {obj = new ObjType( objSlots);}\n      catch (e) {\n        if (typeof e !== \"object\") console.log( e);\n        else console.log( e.constructor.name +\": \"+ e.message);\n        obj = null;\n      }\n      if (obj) sim.addObject( obj);\n    })\n  }\n  // convert ID references to object references (in a second pass)\n  Object.keys( sim.objects).forEach( function (objIdStr) {\n    var obj = sim.objects[objIdStr],\n        propDefs = cLASS[obj.constructor.Name].properties;\n    Object.keys( obj).forEach( function (p) {\n      if (!propDefs[p]) {\n        if (typeof obj[p] !== \"function\" && !oes.predfinedProperties.includes(p)) {\n          console.log(\"Undeclared prop: \"+ p +\" for obj \"+ objIdStr);\n        }\n        return;\n      }\n      var range = propDefs[p].range, val = obj[p], rangeClasses=[];\n      if (typeof range === \"string\" && typeof val !== \"object\" &&\n          (cLASS[range] || range.includes(\"|\"))) {\n        if (range.includes(\"|\")) {\n          rangeClasses = range.split(\"|\");\n          // check referential integrity: val must be in some range class\n          if (!rangeClasses.some( function (rc) {\n                return cLASS[rc].instances[String(val)];\n              })) {\n            throw \"Referential integrity violation: \"+ val +\" does not reference any of \"+\n                range +\"!\";\n          }\n        } else if (!(sim.objects[String(val)] instanceof cLASS[range])) {  // also allows superclasses\n            throw \"Referential integrity violation: \"+ val +\" does not reference a \"+ range +\"!\";\n        }\n        obj[p] = sim.objects[String(val)];\n      }\n    });\n  });\n  // schedule initial events\n  initialEvtDefs = initState.events;\n  if (initialEvtDefs) {  // an array of JS object definitions\n    initialEvtDefs.forEach( function (evt) {\n      var e = util.cloneObject( evt),  // clone event object definition\n          evtTypeName = e.typeName,\n          EvtType = cLASS[evtTypeName];\n      // fatal error: event type class not found\n      if (!EvtType) throw Error(\"Missing class for event type '\" + evtTypeName + \"'!\");\n      delete e.typeName;  // remove type slot\n      sim.scheduleEvent( new EvtType( e));\n    })\n  }\n  /**************************************************************\n   * Special settings for PN models\n   **************************************************************/\n  entryNodes = oes.EntryNode.instances;\n  // schedule initial arrival events for the entry nodes of a PN\n  Object.keys( entryNodes).forEach( function (nodeIdStr) {\n    var occT=0, arrEvt=null, entryNode = entryNodes[nodeIdStr];\n    // has no arrival recurrence function been defined for this entry node?\n    if (!entryNode.arrivalRecurrence) {\n      // use the default recurrence\n      occT = oes.Arrival.defaultRecurrence();\n    } else {\n      occT = entryNode.arrivalRecurrence();\n    }\n    arrEvt = new oes.Arrival({ occTime: occT, entryNode: entryNode});\n    sim.scheduleEvent( arrEvt);\n  });\n};\n/*************************************************************\n * Update initial state objects (after modifications via the UI)\n ************************************************************/\nsim.updateInitialStateObjects = function () {\n  // reset the initial objects map\n  sim.scenario.initialState.objects = {};\n  // loop over all object types\n  sim.model.objectTypes.forEach( function (objTypeName) {\n    var objects = cLASS[objTypeName].instances;\n    // loop over all instances of this object type\n    Object.keys( objects).forEach( function (objIdStr) {\n      var obj = objects[objIdStr],\n          objRec = util.createRecordFromObject( obj);\n      objRec.typeName = objTypeName;\n      delete objRec.id;\n      sim.scenario.initialState.objects[objIdStr] = objRec;\n    });\n  });\n};\n/*************************************************************\n * Initialize the simulator on start up\n * Settings that do not vary across scenarios in an experiment\n ************************************************************/\nsim.initializeSimulator = function (dbName) {\n  var x=0, i=0;\n  sim.FEL = new oes.EventList();  // the Future Events List (FEL)\n  // complete model definition by setting objectTypes and eventTypes if not defined\n  if (!sim.model.objectTypes) sim.model.objectTypes = [];\n  if (!sim.model.eventTypes) sim.model.eventTypes = [];\n  // set timeIncrement for fixed-increment time progression\n  if (sim.model.timeIncrement) {\n    sim.timeIncrement = sim.model.timeIncrement;\n  } else {\n    if (sim.model.OnEachTimeStep) sim.timeIncrement = 1;\n  }\n  if (sim.model.time === \"continuous\") {\n    if (sim.model.timeRoundingDecimalPlaces) {\n      sim.timeRoundingFactor = Math.pow( 10, sim.model.timeRoundingDecimalPlaces);\n    } else {\n      if (sim.timeIncrement) {  // fixed-increment time progression\n        // determine rounding factor\n        x = sim.timeIncrement - Math.trunc( sim.timeIncrement);\n        if (x === 0) sim.timeRoundingFactor = 1;\n        else if (x >= 0.1) sim.timeRoundingFactor = 10;\n        else if (x >= 0.01) sim.timeRoundingFactor = 100;\n        else sim.timeRoundingFactor = 1000;\n      }\n    }\n    // define the minimal time delay until the next moment\n    if (sim.model.nextMomentDeltaT) {\n      sim.nextMomentDeltaT = sim.model.nextMomentDeltaT;\n    } else if (sim.timeRoundingFactor) {\n      sim.nextMomentDeltaT = 1 / sim.timeRoundingFactor;\n    } else {  // default\n      sim.nextMomentDeltaT = 0.000001;\n    }\n  } else {  // discrete time\n    sim.nextMomentDeltaT = 1;\n  }\n  // initialize space model\n  if (sim.model.space.type) oes.space.initialize();\n  // set up a default random variate sampling method\n  if (sim.scenario.randomSeed) {  // use the Mersenne Twister RNG\n    rand = new Random( sim.scenario.randomSeed);\n  } else {  // use the JS built-in RNG\n    rand = new Random();\n  }\n  // initialize experiment(s)\n  if (sim.experiment.replications) {  // an experiment has been defined\n    if (!sim.experiment.parameterDefs) sim.experiment.parameterDefs = [];\n    sim.experiment.parameterDefs.forEach( function (paramDef, i, a) {\n      if (paramDef.constructor !== oes.ExperimentParamDef) {\n        a[i] = new oes.ExperimentParamDef( paramDef);\n      }\n    });\n    if (sim.experiment.constructor !== oes.ExperimentDef) {\n      sim.experiment = new oes.ExperimentDef( sim.experiment);\n    }\n  }\n  if (dbName) oes.setupStorageManagement( dbName);\n};\n/*******************************************************************\n * Initialize a (standalone or experiment scenario) simulation run *\n *******************************************************************/\nsim.initializeSimulationRun = function (expParamSlots, seed) {\n  var logInfo={};\n  var isExperimentRun = expParamSlots !== undefined || seed;\n  sim.step = 0;  // simulation loop steps\n  sim.time = 0;  // simulation time\n  // get ID counter from simulation scenario, or set to default value\n  sim.idCounter = sim.scenario.idCounter || 1000;\n  // set up a default random variate sampling method\n  if (!isExperimentRun && sim.scenario.randomSeed) {  // use the Mersenne Twister RNG\n    rand = new Random( sim.scenario.randomSeed);\n  } else if (seed) {  // experiment-defined replication-specific seed\n    rand = new Random( seed);\n  } else {  // use the JS built-in RNG\n    rand = new Random();\n  }\n  // set up initial state\n  sim.initializeModelVariables( expParamSlots);\n  sim.createInitialObjEvt();\n  if (Object.keys( oes.EntryNode.instances).length > 0) oes.setupProcNetStatistics();\n  if (sim.model.statistics) {\n    // initialize statistics\n    oes.stat.initialize();\n    // create statistics for initial state\n    oes.stat.updateStatistics();\n  }\n  // get stepDuration from simulation config, or set to default value\n  sim.stepDuration = sim.config.stepDuration || 0;\n  // log initial state (visualized before in oes.setupFrontEndSimEnv)\n  if (sim.config.createLog) {\n    logInfo = sim.createStepLogInfo();\n    if (!sim.useWorker) {  // main thread\n      if (typeof sim.logStep === \"function\") sim.logStep( logInfo);\n    } else {  // worker thread\n      self.postMessage({  // send log data to main thread\n        simStep: sim.step,\n        simTime: logInfo.simTime,\n        systemStateInfo: logInfo.systemStateInfo,\n        evtInfo: logInfo.evtInfo\n      });\n    }\n  }\n};\n/*******************************************************\n Run a Standalone Scenario\n********************************************************/\nsim.runScenario = function (useWorker) {\n  var msgRec = {},\n      simTimeTenth = parseInt( sim.scenario.simulationEndTime / 10),\n      nextProgressIncrement = simTimeTenth,\n      areConstraintsToBeChecked = sim.isConstraintCheckingTurnedOn ||\n          sim.isConstraintCheckingTurnedOn === undefined && oes.loadManager &&\n          oes.loadManager.codeLoadingMode !== \"deploy\";\n  if (!useWorker) {  // running in main thread\n    sim.useWorker = false;\n    sim.initializeSimulationRun();\n    sim.runScenarioStep();  // loops by self-invocation via setTimeout\n  } else {  // running in worker thread\n    sim.useWorker = true;\n    sim.initializeSimulationRun();\n    while (sim.time < sim.scenario.simulationEndTime) {\n      sim.runScenarioStep();\n      if (areConstraintsToBeChecked) {\n        oes.checkModelConstraints({log:true});\n        if (oes.isProcNetModel()) oes.checkProcNetConstraints({log:true});\n      }\n      // update the progress bar and the simulation step/time\n      if (sim.time > nextProgressIncrement) {\n        self.postMessage({\n            progressIncrement: 10,\n            simStep: sim.step,\n            simTime: sim.time\n        });\n        nextProgressIncrement += simTimeTenth;\n      }\n      // end simulation if no time increment and no more events\n      if (!sim.timeIncrement && sim.FEL.isEmpty()) {\n        break;\n      }\n    }\n    if (sim.model.statistics) {\n      oes.stat.computeOnlyAtEndStatistics();\n      msgRec.simStat = sim.stat;\n    }\n    self.postMessage( msgRec);\n  }\n};\n/*******************************************************\n Standalone Scenario Simulation Step\n (when executed in main thread, it loops by self-invocation via setTimeout)\n********************************************************/\nsim.runScenarioStep = function (followupEvents) {\n  var nextEvents=[], i=0, j=0,\n      EventClass=null, participantRoles={}, nextExoEvt=null, e=null,\n      nextEvtTime = sim.FEL.getNextOccurrenceTime(),  // 0 if there is no next event\n      stepStartTime = (new Date()).getTime(),\n      totalStepTime = 0, stepDiffTimeDelay = 0,\n      uia = sim.scenario.userInteractions,  // shortcut\n      uiViewModel=null, eventTypeName=\"\", logInfo={};\n  function advanceSimulationTime () {\n    // increment the step counter\n    sim.step += 1;\n    // advance simulation time\n    if (sim.timeIncrement) {  // fixed-increment time progression\n      if (nextEvtTime > sim.time && nextEvtTime < sim.time + sim.timeIncrement) {\n        sim.time = nextEvtTime;\n      } else {\n        sim.time += sim.timeIncrement;\n        if (sim.model.OnEachTimeStep) sim.model.OnEachTimeStep();\n      }\n    } else if (nextEvtTime > 0) {  // next-event time progression\n      sim.time = nextEvtTime;\n    }\n  }\n  //-----------------------------------------------------\n  if (!sim.useWorker) {\n    if (sim.stopRequested) {   // interrupt simulation\n      sim.stopRequested = false;\n      oes.ui.updateUiOnStop();\n      return;\n    }\n    if (sim.time >= sim.scenario.simulationEndTime)  {  // terminate simulation\n      if (sim.model.statistics) oes.stat.computeOnlyAtEndStatistics();\n      oes.ui.updateUiOnSimulationEnd();\n      return;\n    }\n  }\n  if (followupEvents) {  // runScenarioStep was called from user action event handler\n    // schedule follow-up events\n    for (j=0; j < followupEvents.length; j++) {\n      sim.FEL.add( followupEvents[j]);\n    }\n    // clear followUpEvents list\n    followupEvents = [];\n  } else {  // normal invocation of runScenarioStep\n    followupEvents = [];\n    advanceSimulationTime();\n    // update the sim-control UI via the fields' data binding to UI output elements\n    if (!sim.useWorker) {\n      sim.ui[\"sim\"].dataBinding[\"step\"].value = sim.step;\n      sim.ui[\"sim\"].dataBinding[\"time\"].value = sim.time;\n    }\n    // extract and process next events\n    if (sim.time === nextEvtTime) {\n      nextEvents = sim.FEL.removeNextEvents();\n      /*\n      if (nextEvents.length > 1) {\n        console.log(\"nextEvents: \"+ nextEvents[0].occTime +\" + \"+ nextEvents[1].occTime);\n      }\n      */\n      if (nextEvents.length > 1) nextEvents.sort( oes.Event.rank);  // priority order\n      for (i=0; i < nextEvents.length; i++) {\n        e = nextEvents[i];\n        eventTypeName = e.constructor.Name;\n        // retrieve event class\n        EventClass = cLASS[eventTypeName];\n        // test if EventClass represents an exogenous event type\n        if (typeof EventClass.recurrence === \"function\") {\n          // create and schedule next exogenous event\n          if (typeof e.createNextEvent === \"function\") {\n            sim.FEL.add( e.createNextEvent());\n          } else if (EventClass.createNextEvent) {  // old syntax (class-level method)\n            sim.FEL.add( EventClass.createNextEvent( e));\n          } else {\n            //TODO: filter participantRoles in a pre-processing step in initModel\n            //let participantRoles = EventClass.properties;  TODO: for ES6 version\n            participantRoles = EventClass.properties;\n            nextExoEvt = new EventClass();\n            nextExoEvt.occTime = e.occTime + EventClass.recurrence();\n            // copy event participants\n            Object.keys( participantRoles).forEach( function (pR) {\n              nextExoEvt[pR] = e[pR];\n            });\n            sim.FEL.add( nextExoEvt);\n          }\n        }\n        // check if a user interaction has been triggered\n        if (sim.config.userInteractive && uia && uia[eventTypeName]) {\n          // check also the triggering event condition, if defined\n          if (!uia[eventTypeName].trigEvtCondition || uia[eventTypeName].trigEvtCondition(e)) {\n            // make sure that the user interaction triggering event is last in nextEvents list\n            if (i === nextEvents.length - 1) {\n              sim.currentEvents[eventTypeName] = e;\n              uiViewModel = uia[eventTypeName];\n              Object.keys( uiViewModel.outputFields).forEach( function (outFldN) {\n                var fldEl = uiViewModel.dataBinding[outFldN],\n                    val = uiViewModel.outputFields[outFldN].value;\n                if (typeof val === \"function\") fldEl.value = val();\n                else fldEl.value = val || \"\";\n              });\n              uiViewModel.domElem.style.display = \"block\";\n              return;  // interrupt simulator & transfer control to UI\n            } else {\n              util.swapArrayElements( nextEvents, i, length-1);\n            }\n          }\n        }\n        followupEvents = e.onEvent();\n        // render event appearances if defined\n        if (sim.config.visualize && sim.ui.animations && sim.ui.animations[eventTypeName]) {\n          sim.ui.animations[eventTypeName].play();\n        }\n        // schedule follow-up events\n        for (j=0; j < followupEvents.length; j++) {\n          sim.FEL.add( followupEvents[j]);\n        }\n        // clear followUpEvents list\n        followupEvents = [];\n      }\n    }\n  }\n  // update statistics\n  if (sim.model.statistics) oes.stat.updateStatistics();\n  // create simulation log\n  if (sim.config.createLog) {\n    logInfo = sim.createStepLogInfo();\n    if (!sim.useWorker) {  // main thread\n      if (typeof sim.logStep === \"function\") sim.logStep( logInfo);\n    } else {  // worker thread\n      self.postMessage({\n        simStep: sim.step,\n        simTime: logInfo.simTime,\n        systemStateInfo: logInfo.systemStateInfo,\n        evtInfo: logInfo.evtInfo\n      });\n    }\n  }\n  // update state visualization (NOT in worker mode)\n  if (sim.config.visualize) oes.ui.visualizeStep();\n  // compute the time needed for executing this step\n  totalStepTime = (new Date()).getTime() - stepStartTime;\n  // check if we need some delay, because of the stepDuration parameter\n  if (sim.stepDuration > totalStepTime) {\n    stepDiffTimeDelay = sim.stepDuration - totalStepTime\n  } else {\n    stepDiffTimeDelay = 0;\n  }\n  if (!sim.useWorker) {  // main thread\n    // end simulation if no time increment and no more events\n    if (!sim.timeIncrement && sim.FEL.isEmpty()) {\n      if (sim.model.statistics) oes.stat.computeOnlyAtEndStatistics();\n      oes.ui.updateUiOnSimulationEnd();\n      return;\n    } else {\n      // continue simulation loop\n      // in the browser, use setTimeout to prevent script blocking\n      setTimeout( sim.runScenarioStep, stepDiffTimeDelay);\n    }\n  }\n};\n/*******************************************************\n Run an Experiment (in a JS worker)\n ********************************************************/\nsim.runExperiment = function () {\n  var exp = sim.experiment, cp=[], valueSets=[], i=0, j=0, k=0, M=0,\n      N = exp.parameterDefs.length, increm=0, x=0, expPar={},\n      expRunId = (new Date()).getTime(),\n      valueCombination=[], expParamSlots={},\n      tenthRunLength=0,  // a tenth of the total run time\n      nextProgressIncrementStep=0;  // thresholds for updating the progress bar\n  try {\n    sim.storeMan.add( oes.ExperimentRun, {\n      id: expRunId,\n      experimentDef: exp.id,\n      dateTime: (new Date()).toISOString(),\n    });\n  } catch (e) {\n    console.log( JSON.stringify(e));\n  }\n  // create preliminary definitions of implicit PN statistics variables\n  if (oes.isProcNetModel()) {\n    if (!sim.model.statistics[\"arrivedObjects\"]) {\n      sim.model.statistics[\"arrivedObjects\"] = {label:\"Arrived objects\"};\n    }\n    if (!sim.model.statistics[\"departedObjects\"]) {\n      sim.model.statistics[\"departedObjects\"] = {label:\"Departed objects\"};\n    }\n    if (!sim.model.statistics[\"meanTimeInSystem\"]) {\n      sim.model.statistics[\"meanTimeInSystem\"] = {label:\"Mean time in system\"};\n    }\n  }\n  if (N === 0) {  // simple experiment (without parameters)\n    cp = [[]];  // only 1 empty parameter value combination\n    // initialize replication statistics record\n    exp.replicStat = {};\n    Object.keys( sim.model.statistics).forEach( function (varName) {\n      if (sim.model.statistics[varName].label) {  // output statistics\n        exp.replicStat[varName] = [];  // an array per statistics variable\n      }\n    });\n  } else {\n    for (i=0; i < N; i++) {\n      expPar = exp.parameterDefs[i];\n      if (!expPar.values) {\n        // create value set\n        expPar.values = [];\n        increm = expPar.stepSize || 1;\n        for (x = expPar.startValue; x <= expPar.endValue; x += increm) {\n          expPar.values.push( x);\n        }\n      }\n      valueSets.push( expPar.values);\n    }\n    cp = util.cartesianProduct( valueSets);\n  }\n  M = cp.length;  // size of cartesian product\n  tenthRunLength = (M * exp.replications) / 10;\n  nextProgressIncrementStep = tenthRunLength;\n  // loop over all combinations of experiment parameter values\n  for (i=0; i < M; i++) {\n    valueCombination = cp[i];  // a JS array\n    // initialize the scenario record\n    exp.scenarios[i] = {stat:{}};\n    exp.scenarios[i].parameterValues = valueCombination;\n    // initialize experiment scenario statistics\n    Object.keys( sim.model.statistics).forEach( function (varName) {\n      var statVar = sim.model.statistics[varName];\n      if (statVar.label) {  // output statistics\n        if (statVar.property && statVar.objectType &&\n            !statVar.aggregationFunction) {\n          exp.scenarios[i].stat[varName] = {};\n        } else exp.scenarios[i].stat[varName] = 0;\n      }\n    });\n    // create experiment parameter slots for assigning corresponding model variables\n    for (j=0; j < N; j++) {\n      expParamSlots[exp.parameterDefs[j].name] = valueCombination[j];\n    }\n    // run experiment scenario replications\n    for (k=0; k < exp.replications; k++) {\n      if (exp.seeds) {\n        sim.initializeSimulationRun( expParamSlots, exp.seeds[k]);\n      } else {\n        sim.initializeSimulationRun( expParamSlots);\n      }\n      while (sim.time < sim.scenario.simulationEndTime) {\n        sim.runExperimentScenarioStep();\n        if (sim.config.isConstraintCheckingTurnedOn) {\n          oes.checkModelConstraints({log:true});\n          if (oes.isProcNetModel()) {\n            oes.checkProcNetConstraints({log:true, add:\" in repl. \"+ String(k+1)});\n          }\n        }\n        // end simulation if no time increment and no more events\n        if (!sim.timeIncrement && sim.FEL.isEmpty()) break;\n      }\n      oes.stat.computeOnlyAtEndStatistics();\n      if (N > 0) {  // experiment with parameters\n        // for the first replication, initialize experiment scenario statistics\n        if (k === 0) {\n          Object.keys( sim.model.statistics ).forEach( function ( varName ) {\n            if ( sim.model.statistics[ varName ].label ) {  // output statistics\n              exp.scenarios[ i ].stat[ varName ] = 0;\n            }\n          } );\n        }\n        // aggregate replication statistics from sim.stat to sim.experiment.scenarios[i].stat\n        Object.keys( sim.model.statistics).forEach( function (varName) {\n          if (sim.model.statistics[varName].label) {  // output statistics\n            exp.scenarios[i].stat[varName] += sim.stat[varName];\n          }\n        });\n        if (exp.storeEachExperimentScenarioRun) {\n          sim.storeMan.add( oes.ExperimentScenarioRun, {\n            id: expRunId + i * exp.replications + k + 1,\n            experimentRun: expRunId,\n            experimentScenarioNo: i,\n            parameterValueCombination: exp.scenarios[i].parameterValues,\n            outputStatistics: Object.assign({}, sim.stat)  // clone\n          });\n        }\n      } else {  // simple experiment\n        // store replication statistics\n        Object.keys( sim.model.statistics).forEach( function (varName) {\n          if (sim.model.statistics[varName].label) {  // output statistics\n            exp.replicStat[varName][k] = sim.stat[varName];\n          }\n        });\n        sim.storeMan.add( oes.ExperimentScenarioRun, {\n          id: expRunId + i * exp.replications + k + 1,\n          experimentRun: expRunId,\n          outputStatistics: Object.assign({}, sim.stat)  // clone\n        });\n      }\n      // update the progress bar\n      if (i*k > nextProgressIncrementStep) {\n        self.postMessage({progressIncrement: 10});\n        nextProgressIncrementStep += tenthRunLength;\n      }\n    }\n    if (N === 0) {  // simple experiment (without parameters)\n      // aggregate replication statistics in sim.experiment.scenarios[i].stat\n      Object.keys( sim.model.statistics).forEach( function (varName) {\n        if (sim.model.statistics[varName].label) {  // output statistics\n          if (!sim.model.statistics[varName].hasRecordRange) {\n            exp.scenarios[i].stat[varName] = {};\n            Object.keys( oes.stat.summary).forEach( function (aggr) {\n              var aggrF = oes.stat.summary[aggr].f;\n              exp.scenarios[i].stat[varName][aggr] = aggrF( exp.replicStat[varName]);\n            });\n          } else {\n            //TODO: loop over record fields\n          }\n        }\n      });\n    }\n    if (N > 0) {  // experiment with parameters\n      // send statistics to main thread\n      self.postMessage({\n        expScenNo: i,\n        expScenParamValues: exp.scenarios[i].parameterValues,\n        expScenStat: exp.scenarios[i].stat\n      });\n      if (!exp.storeEachExperimentScenarioRun) {\n        // store the average statistics aggregated over all exp. scenario runs\n        try {\n          sim.storeMan.add( oes.ExperimentScenarioRun, {\n            experimentRun: expRunId,\n            experimentScenarioNo: i,\n            parameterValueCombination: exp.scenarios[i].parameterValues,\n            outputStatistics: exp.scenarios[i].stat\n          });\n        } catch (e) {\n          console.log( JSON.stringify(e));\n        }\n      }\n    } else {  // simple experiment (without parameters)\n      // send statistics to main thread\n      self.postMessage({\n        expReplicStat: exp.replicStat,\n        expScenStat: exp.scenarios[i].stat\n      });\n    }\n  }\n  self.postMessage({endOfExp: true});\n};\n/*******************************************************\n Experiment Scenario Simulation Step\n ********************************************************/\nsim.runExperimentScenarioStep = function () {\n  var nextEvents=[], i=0, j=0,\n      EventClass=null, participantRoles={}, nextExoEvt=null, e=null,\n      nextEvtTime = sim.FEL.getNextOccurrenceTime(),  // 0 if there is no next event\n      eventTypeName=\"\", followupEvents=[];\n  function advanceSimulationTime () {\n    // increment the step counter\n    sim.step += 1;\n    // advance simulation time\n    if (sim.timeIncrement) {  // fixed-increment time progression\n      // fixed-increment time progression simulations may also have events\n      if (nextEvtTime > sim.time && nextEvtTime < sim.time + sim.timeIncrement) {\n        sim.time = nextEvtTime;  // an event occurring before the next incremented time\n      } else {\n        sim.time += sim.timeIncrement;\n        if (sim.model.OnEachTimeStep) sim.model.OnEachTimeStep();\n      }\n    } else if (nextEvtTime > 0) {  // next-event time progression\n      sim.time = nextEvtTime;\n    }\n    if (sim.model.time === \"continuous\" && sim.timeRoundingFactor) {\n      sim.time = Math.round( sim.time * sim.timeRoundingFactor) /\n          sim.timeRoundingFactor;\n      nextEvtTime = Math.round( nextEvtTime * sim.timeRoundingFactor) /\n          sim.timeRoundingFactor;\n    }\n  }\n  //-----------------------------------------------------\n  advanceSimulationTime();\n  // extract and process next events\n  if (sim.time === nextEvtTime) {\n    nextEvents = sim.FEL.removeNextEvents();\n    if (nextEvents.length > 1) nextEvents.sort( oes.Event.rank);  // priority order\n    for (i=0; i < nextEvents.length; i++) {\n      e = nextEvents[i];\n      eventTypeName = e.constructor.Name;\n      // retrieve event class\n      EventClass = cLASS[eventTypeName];\n      // does EventClass represent an exogenous event type?\n      if (EventClass.recurrence) {\n        // create and schedule next exogenous event\n        if (e.createNextEvent) {  // new syntax\n          sim.FEL.add( e.createNextEvent());\n        } else if (EventClass.createNextEvent) {  // old syntax (class-level method)\n          sim.FEL.add( EventClass.createNextEvent( e));\n        } else {\n          //TODO: filter participantRoles in a pre-processing step in initModel\n          //let participantRoles = EventClass.properties;  TODO: for ES6 versio\n          participantRoles = EventClass.properties;\n          nextExoEvt = new EventClass();\n          nextExoEvt.occTime = e.occTime + EventClass.recurrence();\n          // copy event participants\n          Object.keys( participantRoles).forEach( function (pR) {\n            nextExoEvt[pR] = e[pR];\n          });\n          sim.FEL.add( nextExoEvt);\n        }\n      }\n      followupEvents = e.onEvent();\n      // schedule follow-up events\n      for (j=0; j < followupEvents.length; j++) {\n        sim.FEL.add( followupEvents[j]);\n      }\n      // clear followUpEvents list\n      followupEvents = [];\n    }\n  }\n  // update statistics\n  if (sim.model.statistics) oes.stat.updateStatistics();\n};\n/*******************************************************\n Create step log info\n ********************************************************/\nsim.createStepLogInfo = function () {\n  var simTime = sim.model.time === \"continuous\" && sim.timeRoundingFactor ?\n      Math.round( sim.time * sim.timeRoundingFactor) / sim.timeRoundingFactor :\n      sim.time;\n  var systemStateInfo = Object.keys( sim.v).reduce( function (serialization, varName, i) {\n    var varDecl = sim.model.v[varName], slotSerialization=\"\";\n    if (varDecl.shortLabel) {\n      slotSerialization = varDecl.shortLabel +\": \"+ sim.v[varName];\n      return i>0 ? serialization +\", \"+ slotSerialization : slotSerialization;\n    } else return serialization;\n  }, \"\");\n  if (systemStateInfo && Object.keys( sim.objects).length > 0) systemStateInfo += \", \";\n  systemStateInfo += Object.keys( sim.objects).reduce( function (serialization, objIdStr, i) {\n    var o = sim.objects[objIdStr];\n    if (o.shortLabel || o.constructor.shortLabel) {\n      return i>0 ? serialization +\", \"+ o.toLogString() : o.toLogString();\n    } else return serialization;\n  }, \"\");\n  return {simTime: String(simTime), systemStateInfo: systemStateInfo, evtInfo: sim.FEL.toString()}\n};","date":"2019-04-16T15:44:34.153Z","updated":"2019-04-16T15:44:34.153Z","path":"sims/framework/simulation-worker-core.js","layout":"false","title":"","comments":1,"_id":"cjx8wr3j2000oj1h5lbke9jtg"},{"_content":"/* jshint browser: true */\n'use strict';\n\n/**\n * Compute the max/min of an array\n * Notice that apply requires a context object, which is not really used\n * in the case of a static function such as Math.max\n */\nArray.max = function (array) {\n  return Math.max.apply( Math, array);\n};\nArray.min = function (array) {\n  return Math.min.apply( Math, array);\n};\n/**\n * Clone an array\n */\nArray.prototype.clone = function () {\n  return this.slice(0);\n};\n/**\n * Merge an array with another one\n */\nArray.prototype.merge = function (anotherArray) {\n  return Array.prototype.push.apply( this, anotherArray);\n};\n/**\n * Test if an array is equal to another\n */\nArray.prototype.isEqualTo = function (a2) {\n  return (this.length === a2.length) && this.every( function( el, i) {\n        return el === a2[i]; });\n};\n\n/**\n * @fileOverview  Defines error classes (also called \"exception\" classes)\n * @author Gerd Wagner\n */\n\nfunction ConstraintViolation( msg, culprit) {\n  this.message = msg;\n  if (culprit) this.culprit = culprit;\n}\nfunction NoConstraintViolation( v) {\n  if (v !== undefined) this.checkedValue = v;\n  this.message = \"\";\n}\nNoConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nNoConstraintViolation.prototype.constructor = NoConstraintViolation;\n\n/*\n * Property Constraint Violations\n */\nfunction MandatoryValueConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nMandatoryValueConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nMandatoryValueConstraintViolation.prototype.constructor = MandatoryValueConstraintViolation;\n\nfunction RangeConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nRangeConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nRangeConstraintViolation.prototype.constructor = RangeConstraintViolation;\n\nfunction StringLengthConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nStringLengthConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nStringLengthConstraintViolation.prototype.constructor = StringLengthConstraintViolation;\n\nfunction IntervalConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nIntervalConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nIntervalConstraintViolation.prototype.constructor = IntervalConstraintViolation;\n\nfunction PatternConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nPatternConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nPatternConstraintViolation.prototype.constructor = PatternConstraintViolation;\n\nfunction UniquenessConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nUniquenessConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nUniquenessConstraintViolation.prototype.constructor = UniquenessConstraintViolation;\n\nfunction CardinalityConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nCardinalityConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nCardinalityConstraintViolation.prototype.constructor = CardinalityConstraintViolation;\n\nfunction ReferentialIntegrityConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nReferentialIntegrityConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nReferentialIntegrityConstraintViolation.prototype.constructor = ReferentialIntegrityConstraintViolation;\n\nfunction FrozenValueConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nFrozenValueConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nFrozenValueConstraintViolation.prototype.constructor = FrozenValueConstraintViolation;\n\nfunction OtherConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nOtherConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nOtherConstraintViolation.prototype.constructor = OtherConstraintViolation;\n\n/*\n * Entity Type Constraint Violations\n */\nfunction EntityTypeConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nEntityTypeConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nEntityTypeConstraintViolation.prototype.constructor = EntityTypeConstraintViolation;\n\nfunction ModelClassConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nModelClassConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nModelClassConstraintViolation.prototype.constructor = ModelClassConstraintViolation;\n\nfunction ViewConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nViewConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nViewConstraintViolation.prototype.constructor = ViewConstraintViolation;\n\nfunction ObjectTypeConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nObjectTypeConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nObjectTypeConstraintViolation.prototype.constructor = ObjectTypeConstraintViolation;\n\nfunction AgentTypeConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nAgentTypeConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nAgentTypeConstraintViolation.prototype.constructor = AgentTypeConstraintViolation;\n\nfunction KindConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nKindConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nKindConstraintViolation.prototype.constructor = KindConstraintViolation;\n\nfunction RoleConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nRoleConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nRoleConstraintViolation.prototype.constructor = RoleConstraintViolation;\n\n/*******************************************************************************\n * @fileOverview A collection of utilities: methods, objects, etc used all over the code.\n * @author Mircea Diaconescu\n * @copyright Copyright © 2014 Gerd Wagner, Mircea Diaconescu et al,\n *            Chair of Internet Technology, Brandenburg University of Technology, Germany.\n * @date July 08, 2014, 11:04:23\n * @license The MIT License (MIT)\n ******************************************************************************/\nvar util = {};  //typeof util === undefined ? {} : util;\n\n/**\n * Serialize a Date object as an ISO date string\n * @return  YYYY-MM-DD\n */\nutil.createIsoDateString = function (d) {\n  return d.toISOString().substring(0,10);\n};\n/**\n * Return the next year value (e.g. if now is 2013 the function will return 2014)\n * @return {number}  the integer representing the next year value\n */\nutil.nextYear = function () {\n  var date = new Date();\n  return (date.getFullYear() + 1);\n};\n/**\n * Capitalize the first character of a string\n * @param {string} str\n * @return {string}\n */\nutil.capitalizeFirstChar = function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n/**\n * Copy all own (property and method) slots of a number of untyped objects\n * to a new untyped object.\n * @author Gerd Wagner\n * @return {object}  The merge result.\n */\nutil.mergeObjects = function () {\n  var i = 0, k = 0, n = arguments.length, m = 0,\n      foundArrayArg = false,\n      foundObjectArg = false,\n      arg = null, mergedResult,\n      keys=[], key=\"\";\n  for (i = 0; i < n; i++) {\n    arg = arguments[i];\n    if (arg === undefined) {\n      continue;\n    }\n    if (Array.isArray( arg)) {\n      if (!foundObjectArg) {\n        mergedResult = mergedResult ? mergedResult : [];\n        foundArrayArg = true;\n        mergedResult = mergedResult.concat( arg);\n      } else {\n        throw \"util.mergeObjects: incompatible objects were found! Trying to merge \"+\n              \"an Array with an Object! Expected Array arguments only!\";\n      }\n    } else if (typeof arg === 'object') {\n      if (!foundArrayArg) {\n        mergedResult = mergedResult ? mergedResult : {};\n        foundObjectArg = true;\n        keys = Object.keys( arg);\n        m = keys.length;\n        for (k = 0; k < m; k++) {\n          key = keys[k];\n          mergedResult[key] = arg[key];\n        }\n      } else {\n        throw \"util.mergeObjects: incompatible objects were found! Trying to merge \"+\n              \"an Object with an Array! Expected Object arguments only!\";\n      }\n    } else {\n      throw \"util.mergeObjects: only arguments of type Array or Object are allowed, but '\" +\n             typeof arguments[i] + \"' type was found for argument number \" + i;\n    }\n  }\n  return mergedResult;\n};\n/**********************************************\n * Name conversions\n **********************************************/\n// Example 1: EnglishTeacher => english_teachers\n// Example 2: eXPERIMENTdEF => EXPERIMENT_DEFS\nutil.class2TableName = function (className) {\n  var tableName=\"\";\n  if (className.charAt(0) === className.charAt(0).toUpperCase()) { // starts with upper case\n    if (className.charAt( className.length-1) === \"y\") {\n      tableName = util.camelToLowerCase( className.slice( 0, className.length-1)) + \"ies\";\n    } else {\n      tableName = util.camelToLowerCase( className) + \"s\";\n    }\n    return tableName;\n  } else { // inverse camel case (starts with lower case)\n    if (className.charAt( className.length-1) === \"Y\") {\n      tableName = util.invCamelToUppercase( className.slice( 0, className.length-1)) + \"IES\";\n    } else {\n      tableName = util.invCamelToUppercase( className) + \"S\";\n    }\n    return tableName;\n  }\n};\n// Example: books => Book\nutil.table2ClassName = function (tableName) {\n  var result = util.lowercaseToCamel( tableName);\n  result = result.charAt( 0).toUpperCase() + result.slice( 1);\n  // if there is an 's' at the end, drop it\n  if (result.charAt( result.length - 1) === 's') {\n    result = result.slice( 0, result.length - 1);\n  }\n  /*\n  if (!util.JsIdentifierPattern.test( result)) {\n    throw Error(\"util.camelToLowerCase: the provided 'identifier' (\" + result +\n        \") is not a valid JS identifier!\");\n  }\n  */\n  return result;\n};\n// Example: dateOfBirth => date_of_birth\nutil.property2ColumnName = function (propertyName) {\n  return util.camelToLowerCase( propertyName);\n};\n// Example: date_of_birth => dateOfBirth\nutil.column2PropertyName = function (columnName) {\n  return util.lowercaseToCamel( columnName);\n};\nutil.camelToLowerCase = function (identifier) {\n  var result = '';\n  // if the first is a A-Z char, replace it with its lower case equivalent\n  identifier = identifier.charAt( 0).toLowerCase() + identifier.slice( 1);\n  // replace upper case letter with '_' followed by the lower case equivalent leter\n  result = identifier.replace( /([A-Z])/g, function( $1) {\n    return \"_\" + $1.toLowerCase();\n  });\n  return result;\n};\nutil.invCamelToUppercase = function (name) {\n  var result = '';\n  // if the first is a a-z, replace it with corresponding upper case\n  name = name.charAt(0).toUpperCase() + name.slice( 1);\n  // replace lower case letter with '_' followed by the corresponding upper case\n  result = name.replace( /([a-z])/g, function( $1) {\n    return \"_\" + $1.toUpperCase();\n  });\n  return result;\n};\nutil.lowercaseToCamel = function (identifier) {\n  var result = '';\n  // replace upper case letter with '_' followed by the lower case equivalent letter\n  result = identifier.replace( /(\\_[a-z])/g, function ($1) {\n    return $1.toUpperCase().replace( '_', '');\n  });\n  return result;\n};\n\n/** REGEX to check if valid JS identifier **/\nutil.JsIdentifierPattern = /^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc][$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc0-9\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19b0-\\u19c0\\u19c8\\u19c9\\u19d0-\\u19d9\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1dc0-\\u1de6\\u1dfc-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f]*$/;\n\n//***** NOT USED IN cLASSjs ************************\n/**\n * Verifies if a value represents an integer or integer string\n * @param {string} x\n * @return {boolean}\n */\nutil.isIntegerString = function (x) {\n  return typeof(x) === \"string\" && x.search(/^-?[0-9]+$/) == 0;\n};\n/**\n * Extract the data record part of an object. The extracted property values\n * are either primitive data values, Date objects, or arrays of primitive\n * data values.\n * @param {object} obj\n */\nutil.createRecordFromObject = function (obj) {\n  var record={}, p=\"\", val;\n  for (p in obj) {\n    val = obj[p];\n    if (obj.hasOwnProperty(p) && (typeof(val) === \"string\" ||\n            typeof(val) === \"number\" || typeof(val) === \"boolean\" ||\n            val instanceof Date ||\n            Array.isArray( val) &&  // array list of data values\n            !val.some( function (el) {\n              return typeof(el) === \"object\";\n            })\n        )) {\n      if (val instanceof Date) record[p] = val.toISOString();\n      else if (Array.isArray( val)) record[p] = val.slice(0);\n      else record[p] = val;\n    }\n  }\n  return record;\n};\n// create an alias for cloning records\nutil.cloneRecord = util.createRecordFromObject;\n\n/**\n * Create a \"deep\" clone of a JS object at the level of own properties/slots\n * @param o  the object to be cloned\n * @return {object}\n */\nutil.cloneObject = function (o) {\n  var clone = Array.isArray(o) ? [] : {};\n  Object.keys(o).forEach( function (key) {\n    clone[key] = (typeof o[key] === \"object\") ? util.cloneObject(o[key]) : o[key];\n  });\n  return clone;\n};\n/**\n * Copy all own (property and method) slots of a number of (untyped) objects\n * to a new (untyped) object.\n * @author Gerd Wagner\n * @return {object}  The merge result.\n *\nutil.mergeObjects = function () {\n  var i=0, k=0, obj=null, mergeObj={}, keys=[], key=\"\";\n  for (i=0; i < arguments.length; i++) {\n    obj = arguments[i];\n    if (obj && typeof obj === \"object\") {\n      keys = Object.keys( obj);\n      for (k=0; k < keys.length; k++) {\n        key = keys[k];\n        mergeObj[key] = obj[key];\n      }\n    }\n  }\n  return mergeObj;\n};\n */\n/**\n * Swap two elements of an array\n * using the ES6 method Object.assign for creating a shallow clone of an object\n * @param a  the array\n * @param i  the first index\n * @param i  the 2nd index\n */\nutil.swapArrayElements = function (a,i,j) {\n  var tempStore = (typeof a[i] === \"object\") ? Object.assign( {}, a[i]) : a[i];\n  a[i] = (typeof a[j] === \"object\") ? Object.assign( {}, a[j]) : a[j];\n  a[j] = tempStore;\n};\n/**\n * Shuffles array in place using the Fisher-Yates shuffle algorithm\n * @param {Array} a - An array of items to be shuffled\n */\nutil.shuffleArray = function (a) {\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n    j = Math.floor( Math.random() * (i + 1) );\n    x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n};\n/**\n * Compute the Cartesian Product of an array of arrays\n * From https://stackoverflow.com/a/36234242/2795909\n * @param {Array} arr - An array of arrays of values to be combined\n */\nutil.cartesianProduct = function (arr) {\n  return arr.reduce( function (a,b) {\n    return a.map( function (x) {\n      return b.map( function (y) {\n        return x.concat(y);\n      })\n    }).reduce( function (a,b) {return a.concat(b)}, [])\n  }, [[]])\n};\n/**\n * Load a script\n * @param {Array} arr - An array of arrays of values to be combined\n */\nutil.loadScript = function (pathAndFilename, basePath, callback, errCallback) {\n  var loadEl = document.createElement('script');\n  // if a full URL is provided, the base path is ignored\n  if (pathAndFilename.indexOf(\"://\") === -1)\n    pathAndFilename = basePath + pathAndFilename;\n  // if no callback(s) provided, define an empty function\n  callback = typeof callback === \"function\" ? callback : function () {};\n  errCallback = typeof errCallback === \"function\" ? errCallback : function () {};\n  loadEl.src = pathAndFilename;\n  loadEl.onload = function () {\n    callback(loadEl);\n  };\n  loadEl.onerror = function (e) {\n    console.log(\"Failed loading file '\" + pathAndFilename + \"'!\");\n    loadEl.remove();\n    errCallback(e);\n  };\n  document.head.appendChild( loadEl);\n};\n\n/****************************************************************\n * Math Library\n ****************************************************************/\nvar math = {};\n/**\n * Compute the sum of an array of numbers\n * @param {Array} data - An array of numbers\n */\nmath.sum = function (data) {\n  function add( a, b) {return a + b;}\n  return data.reduce( add, 0);\n};\n/**\n * Compute the arithmetic mean of an array of numbers\n * @param {Array} data - An array of numbers\n */\nmath.mean = function (data) {\n  return math.sum( data) / data.length;\n};\n/**\n * Compute the standard deviation of an array of numbers\n * @param {Array} data - An array of numbers\n */\nmath.stdDev = function (data) {\n  var m = math.mean( data);\n  return Math.sqrt( data.reduce( function (acc, x) {\n    return acc + Math.pow( x - m, 2);}, 0) / (data.length - 1));\n};\n/**\n * Compute the bootstrap confidence interval of an array of numbers. Based on\n *   Efron, B. (1985). Bootstrap confidence intervals for a class of parametric\n *   problems. Biometrika, 72(1), 45-58.\n * @param {Array} data - An array of numbers\n * @param {integer} samples - Number of bootstrap samples (default 10000)\n * @param {decimal} alpha - Confidence interval to estimate [0,1] (default 0.95)\n * @returns {Array} Lower and upper confidence interval\n */\nmath.bootstrapConfInt = function ( data, samples, alpha ) {\n  var n = samples || 10000;\n  var p = alpha || 0.95;\n  var i, j, t;\n  var mu = Array( n );\n  var m = math.mean( data );\n  var len = data.length;\n\n  /* Calculate bootstrap samples */\n  for ( i = 0; i < n; i += 1 ) {\n    t = 0;\n    for ( j = 0; j < len; j += 1 ) {\n      t += data[ Math.floor( Math.random() * len ) ];\n    }\n    mu[ i ] = ( t / len ) - m;\n  }\n\n  /* Sort in ascending order */\n  mu.sort( function ( a, b ) {\n    return a - b;\n  } );\n\n  /* Return the lower and upper bootstrap confidence interval */\n  return [\n    m - mu[ Math.floor( Math.min( n - 1, n * ( 1 - ( (1 - p ) / 2 ) ) ) ) ],\n    m - mu[ Math.floor( Math.max( 0, n * ( ( 1 - p ) / 2 ) ) ) ]\n  ];\n};\n/**\n * Compute the lower confidence interval of an array of numbers.\n * @param {Array} data - An array of numbers\n * @returns {decimal} Lower confidence interval\n */\nmath.confIntLower = function ( data ) {\n  return math.bootstrapConfInt( data )[ 0 ];\n};\n/**\n * Compute the upper confidence interval of an array of numbers.\n * @param {Array} data - An array of numbers\n * @returns {decimal} Upper confidence interval\n */\nmath.confIntUpper = function ( data ) {\n  return math.bootstrapConfInt( data )[ 1 ];\n};\n/**\n * Predefined class for creating enumerations as special JS objects.\n * @copyright Copyright 2014 Gerd Wagner, Chair of Internet Technology,\n *   Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Gerd Wagner\n * @constructor\n * @this {eNUMERATION}\n * @param {string} name  The name of the new enumeration data type.\n * @param {array} enumArg  The labels array or code list map of the enumeration\n *\n * An eNUMERATION has the following properties:\n * labels         an array list of label strings such that enumLabel = labels[enumIndex-1]\n * enumLitNames\n *\n */\n/* globals eNUMERATION */\nfunction eNUMERATION( name, enumArg) {\n  var i = 0, lbl = \"\", LBL = \"\";\n  if (typeof name !== \"string\") {\n    throw new Error(\n      \"The first constructor argument of an enumeration must be a string!\");\n  }\n  this.name = name;\n  if (Array.isArray(enumArg)) {\n    // a simple enum defined by a list of labels\n    if (!enumArg.every(function (n) {\n        return (typeof n === \"string\");\n      })) {\n      throw new Error(\"A list of enumeration labels as the second \" +\n        \"constructor argument must be an array of strings!\");\n    }\n    this.labels = enumArg;\n    this.enumLitNames = this.labels;\n    this.codeList = null;\n  } else if (typeof enumArg === \"object\" && Object.keys(enumArg).length > 0) {\n    // a code list defined by a map\n    if (!Object.keys(enumArg).every(function (code) {\n        return (typeof enumArg[code] === \"string\");\n      })) {\n      throw new Error(\"All values of a code list map must be strings!\");\n    }\n    this.codeList = enumArg;\n    // use codes as the names of enumeration literals\n    this.enumLitNames = Object.keys( this.codeList);\n    this.labels = this.enumLitNames.map(function (c) {\n      return enumArg[c] + \" (\" + c + \")\";\n    });\n  } else {\n    throw new Error(\n      \"Invalid Enumeration constructor argument: \" + enumArg);\n  }\n  this.MAX = this.enumLitNames.length;\n  // generate the enumeration literals by capitalizing/normalizing the names\n  for (i = 1; i <= this.enumLitNames.length; i++) {\n    // replace \" \" and \"-\" with \"_\"\n    lbl = this.enumLitNames[i - 1].replace(/( |-)/g, \"_\");\n    // convert to array of words, capitalize them, and re-convert\n    LBL = lbl.split(\"_\").map(function (lblPart) {\n      return lblPart.toUpperCase();\n    }).join(\"_\");\n    // assign enumeration index\n    this[LBL] = i;\n  }\n  // protect the enumeration from change attempts\n  Object.freeze( this);\n  // add new enumeration to the population of all enumerations\n  eNUMERATION.instances[this.name] = this;\n}\n/*\n * Check if a value represents an enumeration literal or a valid index\n */\neNUMERATION.prototype.isValidEnumLitOrIndex = function (v) {\n  return (Number.isInteger(v) && v > 0 && v < this.MAX);\n};\n/*\n * Serialize a list of enumeration literals/indexes as a list of\n * enumeration literal names\n */\neNUMERATION.prototype.enumIndexesToNames = function (a) {\n  if (!Array.isArray(a)) {\n    throw new Error(\n      \"The argument must be an Array!\");\n  }\n  var listStr = a.map(function (enumInt) {\n    return this.enumLitNames[enumInt - 1];\n  }, this).join(\", \");\n  return listStr;\n};\n/*\n * Define a map of all enumerations as a class-level property\n */\neNUMERATION.instances = {};\n\n /*******************************************************************************\n * cLASS allows defining constructor-based JavaScript classes and\n * class hierarchies based on a declarative description of the form:\n *\n *   var Student = new cLASS({\n *     Name: \"Student\",\n *     supertypeName: \"Person\",\n *     properties: {\n *       \"university\": {range:\"String\", label:\"University\", max: 50, ...}\n *     },\n *     methods: {\n *     }\n *   });\n *   var stud1 = new Student({id: 1, university:\"MIT\"});\n *   // test if direct instance\n *   if (stud1.constructor.Name === \"Student\") ...\n *   // test if instance\n *   if (stud1 instanceof Student) ...\n *\n * Notice that it is assumed that a class has (or inherits) an \"id\" attribute\n * as its standard ID attribute.\n *\n *\n * @copyright Copyright 2015-2017 Gerd Wagner, Chair of Internet Technology,\n *   Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Gerd Wagner\n ******************************************************************************/\n/* globals cLASS */\nfunction cLASS (classSlots) {\n  var propDefs = classSlots.properties || {},  // property declarations\n      methods = classSlots.methods || {},\n      supertypeName = classSlots.supertypeName,\n      superclass=null, constr=null, missingRangeProp=\"\",\n      propsWithInitialValFunc = [];\n  // check Class definition constraints\n  if (supertypeName && !cLASS[supertypeName]) {\n    throw \"Specified supertype \"+ supertypeName +\" has not been defined!\";\n  }\n  if (!Object.keys( propDefs).every( function (p) {\n        if (!propDefs[p].range) missingRangeProp = p;\n        return (propDefs[p].range !== undefined);\n      }) ) {\n    throw \"No range defined for property \"+ missingRangeProp +\n        \" of class \"+ classSlots.Name +\" !\";\n  }\n  // define a constructor function for creating a new object\n  constr = function (instanceSlots) {\n    if (!instanceSlots) return;\n    if (supertypeName) {\n      // invoke supertype constructor\n      cLASS[supertypeName].call( this, instanceSlots);\n    }\n    // assign own properties  TODO: use the checked value from validationResult\n    Object.keys( propDefs).forEach( function (p) {\n      var pDef = propDefs[p], range = pDef.range, Class=null,\n          val, rangeTypes=[], i=0, validationResult=null;\n      if (typeof instanceSlots === \"object\" && p in instanceSlots) {\n        // property p has an initialization slot\n        val = instanceSlots[p];\n        validationResult = cLASS.check( p, pDef, val);\n        if (!(validationResult instanceof NoConstraintViolation)) throw validationResult;\n        // is range a cLASS collection datatype?\n        if (typeof range === \"object\" && range.dataType !== undefined) {\n          this[p] = Array.isArray( val) ? val.slice(0) : Object.assign({}, val);  // assign clone\n        } else if (typeof range === \"string\" && typeof val !== \"object\" &&\n            (cLASS[range] || range.includes(\"|\"))) {\n          // is range a class (or class disjunction)?\n          if (range.includes(\"|\")) {\n            rangeTypes = range.split(\"|\");\n            for (i=0; i < rangeTypes.length; i++) {\n              Class = cLASS[rangeTypes[i]];\n              if (Class) {  // type disjunct is a cLASS\n                if (Class.instances[String(val)])  {\n                  // convert IdRef to object reference\n                  this[p] = Class.instances[String(val)];\n                  break;\n                }\n              }\n            }\n            if (!this[p]) this[p] = val;\n          } else {  // range is a class\n            // convert IdRef to object reference\n            this[p] = cLASS[range].instances[String(val)] || val;\n          }\n        } else this[p] = val;\n      } else if (pDef.initialValue !== undefined) {  // assign initial value\n        if (typeof pDef.initialValue === \"function\") {\n          propsWithInitialValFunc.push(p);\n        } else this[p] = pDef.initialValue;\n      } else if (p === \"id\" && range === \"AutoNumber\") {    // assign auto-ID\n        if (typeof this.constructor.getAutoId === \"function\") {\n          this[p] = this.constructor.getAutoId();\n        } else if (this.constructor.idCounter !== undefined) {\n          this[p] = ++this.constructor.idCounter;\n        }\n      } else if (!pDef.optional) {  // assign default values to mandatory properties\n        if (pDef.maxCard > 1) {\n          if (pDef.minCard === 0) {  // optional multi-valued property\n            if (pDef.range in cLASS && !pDef.isOrdered) this[p] = {};  // map\n            else this[p] = [];  // array list\n          } else throw \"A non-empty collection value for \"+ p +\" is required!\";\n        } else if (cLASS.isIntegerType(range) || cLASS.isDecimalType(range)) {\n          this[p] = 0;\n        } else if (range === \"String\") {\n          this[p] = \"\";\n        } else if (range === \"Boolean\") {\n          this[p] = false;\n        } else if (typeof range === \"object\") {\n          if ([\"Array\", \"ArrayList\"].includes(range.dataType)) {\n            this[p] = [];\n          } else if (range.dataType === \"Map\") {\n            this[p] = {};\n          }\n        } else {\n          throw \"A value for \"+ p +\" is required when creating a(n) \"+ classSlots.Name;\n          console.log(\"instanceSlots = \", JSON.stringify(instanceSlots));\n        }\n      }\n      // initialize historical properties\n      if (pDef.historySize) {\n        this.history = this.history || {};  // a map\n        this.history[p] = pDef.decimalPlaces ?\n            new cLASS.RingBuffer( pDef.range, pDef.historySize,\n                {decimalPlaces: pDef.decimalPlaces}) :\n            new cLASS.RingBuffer( pDef.range, pDef.historySize);\n      }\n    }, this);\n    // call the functions for initial value expressions\n    propsWithInitialValFunc.forEach( function (p) {\n      this[p] = propDefs[p].initialValue.call(this);\n    }, this);\n    // assign remaining fields not defined as properties by the object's class\n    if (typeof( instanceSlots) === \"object\") {\n      Object.keys( instanceSlots).forEach( function (f) {\n        if (!propDefs[f]) this[f] = instanceSlots[f];\n      }, this);\n    }\n    // take care of cLASS-specific provisions (e.g., update a materialized view)\n    if (\"onConstruction\" in methods) this.onConstruction();\n    // is the class neither a complex DT nor abstract and does the object have an ID slot?\n    if (!classSlots.isComplexDatatype && !classSlots.isAbstract && \"id\" in this) {\n      // add new object to the population/extension of the class\n      cLASS[classSlots.Name].instances[String(this.id)] = this;\n    }\n  };\n  // assign class-level (meta-)properties\n  constr.constructor = cLASS;\n  constr.Name = classSlots.Name;\n  if (classSlots.isComplexDatatype) constr.isComplexDatatype = true;\n  if (classSlots.isAbstract) constr.isAbstract = true;\n  if (classSlots.label) constr.label = classSlots.label;\n  if (classSlots.shortLabel) constr.shortLabel = classSlots.shortLabel;\n  if (classSlots.primaryKey) constr.primaryKey = classSlots.primaryKey;\n  if (classSlots.tableName) constr.tableName = classSlots.tableName;\n  if (supertypeName) {\n    constr.supertypeName = supertypeName;\n    superclass = cLASS[supertypeName];\n    // apply classical inheritance pattern for methods\n    constr.prototype = Object.create( superclass.prototype);\n    constr.prototype.constructor = constr;\n    // merge superclass property declarations with own property declarations\n    constr.properties = Object.create( superclass.properties);\n   //  assign own property declarations, possibly overriding super-props\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n    Object.keys( propDefs).forEach( function (p) {\n      constr.properties[p] = propDefs[p];\n    });\n  } else {  // if class is root class\n    constr.properties = propDefs;\n    /***************************************************/\n    constr.prototype.set = function ( prop, val) {\n    /***************************************************/\n      // this = object\n      var validationResult = cLASS.check( prop, this.constructor.properties[prop], val);\n      if (validationResult instanceof NoConstraintViolation) {\n        this[prop] = validationResult.checkedValue;\n      } else {\n        throw validationResult;\n      }\n    };\n    /***************************************************/\n    // overwrite and improve the standard toString method\n    constr.prototype.toString = function () {\n    /***************************************************/\n      var str1=\"\", str2=\"\", i=0;\n      if (this.name) str1 = this.name;\n      else {\n        str1 = this.constructor.shortLabel || this.constructor.Name;\n        if (this.id) str1 += \":\"+ this.id;\n      }\n      str2 = \"{ \";\n      Object.keys( this).forEach( function (key) {\n        var propDecl = cLASS[this.constructor.Name].properties[key],\n            propLabel = propDecl ? (propDecl.shortLabel || propDecl.label) : key,\n            valStr = \"\";\n        // is the slot of a declared reference property?\n        if (propDecl && typeof propDecl.range === \"string\" && cLASS[propDecl.range]) {\n          // is the property multi-valued?\n          if (propDecl.maxCard && propDecl.maxCard > 1) {\n            if (Array.isArray( this[key])) {\n              valStr = this[key].map( function (o) {return o.id;}).toString();\n            } else valStr = JSON.stringify( Object.keys( this[key]));\n          } else {  // if the property is single-valued\n            valStr = String( this[key].id);\n          }\n        } else if (typeof this[key] === \"function\") {\n          // the slot is an instance-level method slot\n          valStr = \"a function\";\n        } else {  // the slot is an attribute slot or an undeclared reference property slot\n          valStr = JSON.stringify( this[key]);\n        }\n        if (this[key] !== undefined && propLabel) {\n          str2 += (i>0 ? \", \" : \"\") + propLabel +\": \"+ valStr;\n          i = i+1;\n        }\n      }, this);\n      str2 += \"}\";\n      if (str2 === \"{ }\") str2 = \"\";\n      return str1 + str2;\n    };\n    /***************************************************/\n    constr.prototype.toRecord = function () {\n    /***************************************************/\n      var obj = this, rec={}, propDecl={}, valuesToConvert=[], range, val;\n      Object.keys( obj).forEach( function (p) {\n        if (obj[p] !== undefined) {\n          val = obj[p];\n          propDecl = obj.constructor.properties[p];\n          range = propDecl.range;\n          if (propDecl.maxCard && propDecl.maxCard > 1) {\n            if (range.constructor && range.constructor === cLASS) { // object reference(s)\n              if (Array.isArray( val)) {\n                valuesToConvert = val.slice(0);  // clone;\n              } else {  // val is a map from ID refs to obj refs\n                valuesToConvert = Object.values( val);\n              }\n            } else if (Array.isArray( val)) {\n              valuesToConvert = val.slice(0);  // clone;\n            } else console.log(\"Invalid non-array collection in toRecord!\");\n          } else {  // maxCard=1\n            valuesToConvert = [val];\n          }\n          valuesToConvert.forEach( function (v,i) {\n            // alternatively: enum literals as labels\n            // if (range instanceof eNUMERATION) rec[p] = range.labels[val-1];\n            if ([\"number\",\"string\",\"boolean\"].includes( typeof(v)) || !v) {\n              valuesToConvert[i] = String( v);\n            } else if (range === \"Date\") {\n              valuesToConvert[i] = util.createIsoDateString( v);\n            } else if (range.constructor && range.constructor === cLASS) { // object reference(s)\n              valuesToConvert[i] = v.id;\n            } else if (Array.isArray( v)) {  // JSON-compatible array\n              valuesToConvert[i] = v.slice(0);  // clone\n            } else valuesToConvert[i] = JSON.stringify( v);\n          });\n          if (!propDecl.maxCard || propDecl.maxCard <= 1) {\n            rec[p] = valuesToConvert[0];\n          } else {\n            rec[p] = valuesToConvert;\n          }\n        }\n      });\n      return rec;\n    };\n    /***************************************************/\n    // Convert property value to (form field) string.\n    constr.prototype.getValueAsString = function ( prop) {\n    /***************************************************/\n      // make sure the eNUMERATION meta-class object can be checked if available\n      var eNUMERATION = typeof eNUMERATION === \"undefined\" ? undefined : eNUMERATION;\n      var propDecl = this.constructor.properties[prop],\n          range = propDecl.range, val = this[prop];\n      var valuesToConvert=[], displayStr=\"\", k=0,\n          listSep = \", \";\n      if (val === undefined || val === null) return \"\";\n      if (propDecl.maxCard && propDecl.maxCard > 1) {\n        if (Array.isArray( val)) {\n          valuesToConvert = val.length>0 ? val.slice(0) : [];  // clone;\n        } else if (typeof val === \"object\") {\n          valuesToConvert = Object.keys( val);\n        } else console.log(\"The value of a multi-valued \" +\n            \"property like \"+ prop +\" must be an array or a map!\");\n      } else valuesToConvert = [val];\n      valuesToConvert.forEach( function (v,i) {\n        if (typeof propDecl.val2str === \"function\") {\n          valuesToConvert[i] = propDecl.val2str( v);\n        } else if (eNUMERATION && range instanceof eNUMERATION) {\n          valuesToConvert[i] = range.labels[v-1];\n        } else if ([\"number\",\"string\",\"boolean\"].includes( typeof v) || !v) {\n          valuesToConvert[i] = String( v);\n        } else if (range === \"Date\") {\n          valuesToConvert[i] = util.createIsoDateString( v);\n        } else if (Array.isArray( v)) {  // JSON-compatible array\n          valuesToConvert[i] = v.slice(0);  // clone\n        } else if (typeof range === \"string\" && cLASS[range]) {\n          if (typeof v === \"object\" && v.id !== undefined) {\n            valuesToConvert[i] = v.id;\n          } else {\n            valuesToConvert[i] = v.toString();\n            propDecl.stringified = true;\n            console.log(\"Property \"+ this.constructor.Name +\"::\"+ prop +\" has a cLASS object value without an 'id' slot!\");\n          }\n        } else {\n          valuesToConvert[i] = JSON.stringify( v);\n          propDecl.stringified = true;\n        }\n      }, this);\n      if (valuesToConvert.length === 0) displayStr = \"[]\";\n      else {\n        displayStr = valuesToConvert[0];\n        if (propDecl.maxCard && propDecl.maxCard > 1) {\n          displayStr = \"[\" + displayStr;\n          for (k=1; k < valuesToConvert.length; k++) {\n            displayStr += listSep + valuesToConvert[k];\n          }\n          displayStr = displayStr + \"]\";\n        }\n      }\n      return displayStr;\n    };\n    /***************************************************/\n\n    /***************************************************\n     * A class-level de-serialization method\n     ***************************************************/\n    constr.createObjectFromRecord = function (record) {\n      var obj={};\n      try {\n        obj = new constr( record);\n      } catch (e) {\n        console.log( e.constructor.name + \" while deserializing a \"+\n            constr.Name +\" record: \" + e.message);\n        obj = null;\n      }\n      return obj;\n    };\n  }\n  // assign instance-level methods\n  Object.keys( methods).forEach( function (m) {\n    constr.prototype[m] = methods[m];\n  });\n  // store class/constructor as value associated with its name in a map\n  cLASS[classSlots.Name] = constr;\n  // initialize the class-level instances property\n   if (!classSlots.isAbstract) {\n     cLASS[classSlots.Name].instances = {};\n   }\n  // return the constructor as the object constructed with new cLASS\n  return constr;\n}\n /**\n  * Determine if a type is an integer type.\n  * @method\n  * @author Gerd Wagner\n  * @param {string|eNUMERATION} T  The type to be checked.\n  * @return {boolean}\n  */\ncLASS.isIntegerType = function (T) {\n  return [\"Integer\",\"PositiveInteger\",\"AutoNumber\",\"NonNegativeInteger\"].includes(T) ||\n      T instanceof eNUMERATION;\n};\n /**\n  * Determine if a type is a decimal type.\n  * @method\n  * @author Gerd Wagner\n  * @param {string} T  The type to be checked.\n  * @return {boolean}\n  */\n cLASS.isDecimalType = function (T) {\n   return [\"Number\",\"Decimal\",\"Percent\",\"ClosedUnitInterval\",\"OpenUnitInterval\"].includes(T);\n };\n /**\n  * Constants\n  */\n cLASS.patterns = {\n   ID: /^([a-zA-Z0-9][a-zA-Z0-9_\\-]+[a-zA-Z0-9])$/,\n   // defined in WHATWG HTML5 specification\n   EMAIL: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n   // proposed by Diego Perini (https://gist.github.com/729294)\n   URL: /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i,\n   INT_PHONE_NO: /^\\+(?:[0-9] ?){6,14}[0-9]$/\n };\n /**\n  * Generic method for checking the integrity constraints defined in property declarations.\n  * The values to be checked are first parsed/deserialized if provided as strings.\n  * Copied from the cOMPLEXtYPE class of oNTOjs\n  *\n  * min/max: numeric (or string length) minimum/maximum\n  * optional: true if property is single-valued and optional (false by default)\n  * range: String|NonEmptyString|Integer|...\n  * pattern: a regular expression to be matched\n  * minCard/maxCard: minimum/maximum cardinality of a multi-valued property\n  *     By default, maxCard is 1, implying that the property is single-valued, in which\n  *     case minCard is meaningless/ignored. maxCard may be Infinity.\n  *\n  * @method\n  * @author Gerd Wagner\n  * @param {string} fld  The property for which a value is to be checked.\n  * @param {object} decl  The property's declaration.\n  * @param {string|number|boolean|object} val  The value to be checked.\n  * @param optParams.checkRefInt  Check referential integrity\n  * @return {ConstraintViolation}  The constraint violation object.\n  */\n cLASS.check = function (fld, decl, val, optParams) {\n   var constrVio=null, valuesToCheck=[],\n       msg = decl.patternMessage || \"\",\n       minCard = decl.minCard!==\"umdefined\" ? decl.minCard : decl.optional?0:1,  // by default, a property is mandatory\n       maxCard = decl.maxCard || 1,  // by default, a property is single-valued\n       min = decl.min || 0, max = decl.max,\n       range = decl.range,\n       pattern = decl.pattern;\n   // check Mandatory Value Constraint\n   if (val === undefined || val === \"\") {\n     if (decl.optional) return new NoConstraintViolation();\n     else {\n       return new MandatoryValueConstraintViolation(\n           \"A value for \"+ fld +\" is required!\");\n     }\n   }\n   if (maxCard === 1) {  // single-valued property\n     valuesToCheck = [val];\n   } else {  // multi-valued properties can be array-valued or map-valued\n     if (Array.isArray( val) ) {\n       valuesToCheck = val;\n     } else if (typeof range === \"string\" && cLASS[range]) {\n       if (!decl.isOrdered) {\n         valuesToCheck = Object.keys( val).map( function (id) {\n           return val[id];\n         });\n       } else {\n         return new RangeConstraintViolation(\"Values for the ordered property \"+ fld +\n             \" must be arrays, and not maps!\");\n       }\n     } else {\n       return new RangeConstraintViolation(\"Values for \"+ fld +\n           \" must be arrays or maps of IDs to cLASS instances!\");\n     }\n   }\n   // convert integer strings to integers\n   if (cLASS.isIntegerType( range)) {\n     valuesToCheck.forEach( function (v,i) {\n       if (typeof v === \"string\") valuesToCheck[i] = parseInt( v);\n     });\n   }\n   // convert decimal strings to decimal numbers\n   if (cLASS.isDecimalType( range)) {\n     valuesToCheck.forEach( function (v,i) {\n       if (typeof v === \"string\") valuesToCheck[i] = parseFloat( v);\n     });\n   }\n   /*********************************************************************\n    ***  Convert value strings to values and check range constraints ****\n    ********************************************************************/\n   switch (range) {\n     case \"String\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\") {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be strings!\");\n         }\n       });\n       break;\n     case \"NonEmptyString\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\" || v.trim() === \"\") {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be non-empty strings!\");\n         }\n       });\n       break;\n     case \"Identifier\":  // add regexp test\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\" || v.trim() === \"\" || !cLASS.patterns.ID.test( v)) {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be valid identifiers/names!\");\n         }\n       });\n       break;\n     case \"Email\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\" || !cLASS.patterns.EMAIL.test( v)) {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be valid email addresses!\");\n         }\n       });\n       break;\n     case \"URL\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\" || !cLASS.patterns.URL.test( v)) {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be valid URLs!\");\n         }\n       });\n       break;\n     case \"PhoneNumber\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\" || !cLASS.patterns.INT_PHONE_NO.test( v)) {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be valid international phone numbers!\");\n         }\n       });\n       break;\n     case \"Integer\":\n       valuesToCheck.forEach( function (v) {\n         if (!Number.isInteger(v)) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be an integer!\");\n         }\n       });\n       break;\n     case \"NonNegativeInteger\":\n       valuesToCheck.forEach( function (v) {\n         if (!Number.isInteger(v) || v < 0) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a non-negative integer!\");\n         }\n       });\n       break;\n     case \"AutoNumber\":\n       if (valuesToCheck.length === 1) {\n         if (!Number.isInteger( valuesToCheck[0]) || valuesToCheck[0] < 1) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a positive integer!\");\n         }\n       } else {\n         constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n             \" must not be a collection like \"+ valuesToCheck);\n       }\n       break;\n     case \"PositiveInteger\":\n       valuesToCheck.forEach( function (v) {\n         if (!Number.isInteger(v) || v < 1) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a positive integer!\");\n         }\n       });\n       break;\n     case \"Number\":\n     case \"Decimal\":\n     case \"Percent\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"number\") {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a (decimal) number!\");\n         }\n       });\n       break;\n     case \"ClosedUnitInterval\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"number\") {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a (decimal) number!\");\n         } else if (v<0 || v>1) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a number in [0,1]!\");\n         }\n       });\n       break;\n     case \"OpenUnitInterval\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"number\") {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a (decimal) number!\");\n         } else if (v<=0 || v>=1) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a number in (0,1)!\");\n         }\n       });\n       break;\n     case \"Boolean\":\n       valuesToCheck.forEach( function (v,i) {\n         if (typeof v === \"string\") {\n           if ([\"true\",\"yes\"].includes(v)) valuesToCheck[i] = true;\n           else if ([\"no\",\"false\"].includes(v)) valuesToCheck[i] = false;\n           else constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n                 \" must be either 'true'/'yes' or 'false'/'no'!\");\n         } else if (typeof v !== \"boolean\") {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be either 'true' or 'false'!\");\n         }\n       });\n       break;\n     case \"Date\":\n       valuesToCheck.forEach( function (v,i) {\n         if (typeof v === \"string\" &&\n             /\\d{4}-(0\\d|1[0-2])-([0-2]\\d|3[0-1])/.test(v) && !isNaN( Date.parse(v))) {\n           valuesToCheck[i] = new Date(v);\n         } else if (!(v instanceof Date)) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be either a Date value or an ISO date string. \"+\n               v +\" is not admissible!\");\n         }\n       });\n       break;\n     case \"DateTime\":\n       valuesToCheck.forEach( function (v,i) {\n         if (typeof v === \"string\" && !isNaN( Date.parse(v))) {\n           valuesToCheck[i] = new Date(v);\n         } else if (!(v instanceof Date)) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be either a Date value or an ISO date-time string. \"+\n               v +\" is not admissible!\");\n         }\n       });\n       break;\n     default:\n       if (range instanceof eNUMERATION || typeof range === \"string\" && eNUMERATION[range]) {\n         if (typeof range === \"string\") range = eNUMERATION[range];\n         valuesToCheck.forEach( function (v) {\n           if (!Number.isInteger( v) || v < 1 || v > range.MAX) {\n             constrVio = new RangeConstraintViolation(\"The value \"+ v +\n                 \" is not an admissible enumeration integer for \"+ fld);\n           }\n         });\n       } else if (Array.isArray( range)) {\n         // *** Ad-hoc enumeration ***\n         valuesToCheck.forEach( function (v) {\n           if (range.indexOf(v) === -1) {\n             constrVio = new RangeConstraintViolation(\"The \"+ fld +\" value \"+ v +\n                 \" is not in value list \"+ range.toString());\n           }\n         });\n       } else if (typeof range === \"string\" && cLASS[range]) {\n         valuesToCheck.forEach( function (v, i) {\n           var recFldNames=[], propDefs={};\n           if (!cLASS[range].isComplexDatatype && !(v instanceof cLASS[range])) {\n             // convert IdRef to object reference\n             if (cLASS[range].instances[String(v)]) {\n               v = valuesToCheck[i] = cLASS[range].instances[String(v)];\n             } else if (optParams && optParams.checkRefInt) {\n               constrVio = new ReferentialIntegrityConstraintViolation(\"The value \" + v +\n                   \" of property '\"+ fld +\"' is not an ID of any \" + range + \" object!\");\n             }\n           } else if (cLASS[range].isComplexDatatype && typeof v === \"object\") {\n             v = Object.assign({}, v);  // use a clone\n             // v is a record that must comply with the complex datatype\n             recFldNames = Object.keys(v);\n             propDefs = cLASS[range].properties;\n             // test if all mandatory properties occur in v and if all fields of v are properties\n             if (Object.keys( propDefs).every( function (p) {return !!propDefs[p].optional || p in v;}) &&\n                 recFldNames.every( function (fld) {return !!propDefs[fld];})) {\n               recFldNames.forEach( function (p) {\n                 var validationResult = cLASS.check( p, propDefs[p], v[p]);\n                 if (validationResult instanceof NoConstraintViolation) {\n                   v[p] = validationResult.checkedValue;\n                 } else {\n                   throw validationResult;\n                 }\n               })\n             } else {\n               constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                   \" must be an instance of \"+ range +\" or a compatible record!\"+\n                   JSON.stringify(v) + \" is not admissible!\");\n             }\n/* DROP\n           } else {  // v may be a (numeric or string) ID ref\n             if (typeof v === \"string\") {\n               if (!isNaN( parseInt(v))) v = valuesToCheck[i] = parseInt(v);\n             } else if (!Number.isInteger(v)) {\n               constrVio = new RangeConstraintViolation(\"The value (\" + JSON.stringify(v) +\n                   \") of property '\" +fld + \"' is neither an integer nor a string!\");\n             }\n*/\n           }\n         });\n       } else if (typeof range === \"string\" && range.includes(\"|\")) {\n         valuesToCheck.forEach( function (v, i) {\n           var rangeTypes=[];\n           rangeTypes = range.split(\"|\");\n           if (typeof v === \"object\") {\n             if (!rangeTypes.some( function (rc) {\n               return v instanceof cLASS[rc];\n             })) {\n               constrVio = ReferentialIntegrityConstraintViolation(\"The object \" + JSON.stringify(v) +\n                   \" is not an instance of any class from \" + range + \"!\");\n             } else {\n               v = valuesToCheck[i] = v.id;  // convert to IdRef\n             }\n           } else if (Number.isInteger(v)) {\n             if (optParams && optParams.checkRefInt) {\n               if (!cLASS[range].instances[String(v)]) {\n                 constrVio = new ReferentialIntegrityConstraintViolation(\"The value \" + v +\n                     \" of property '\"+ fld +\"' is not an ID of any \" + range + \" object!\");\n               }\n             }\n           } else if (typeof v === \"string\") {\n             if (!isNaN( parseInt(v))) v = valuesToCheck[i] = parseInt(v);\n           } else {\n             constrVio = new RangeConstraintViolation(\"The value (\" + v + \") of property '\" +\n                 fld + \"' is neither an integer nor a string!\");\n           }\n         });\n       } else if (typeof range === \"object\" && range.dataType !== undefined) {\n         // the range is a (collection) datatype declaration record\n         valuesToCheck.forEach( function (v) {\n           var i = 0;\n           if (typeof v !== \"object\") {\n             constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                 \" must be an object! \" + JSON.stringify(v) + \" is not admissible!\");\n           }\n           switch (range.dataType) {\n           case \"Array\":\n             if (!Array.isArray(v)) {\n               constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                   \" must be an array! \" + JSON.stringify(v) + \" is not admissible!\");\n               break;\n             }\n             if (v.length !== range.size) {\n               constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                   \" must be an array of length \" + range.size + \"! \" + JSON.stringify(v) + \" is not admissible!\");\n               break;\n             }\n             for (i = 0; i < v.length; i++) {\n               if (!cLASS.isOfType(v[i], range.itemType)) {\n                 constrVio = new RangeConstraintViolation(\"The items of \" + fld +\n                     \" must be of type \" + range.itemType + \"! \" + JSON.stringify(v) +\n                     \" is not admissible!\");\n               }\n             }\n             break;\n           case \"ArrayList\":\n             if (!Array.isArray(v)) {\n               constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                   \" must be an array! \" + JSON.stringify(v) + \" is not admissible!\");\n               break;\n             }\n             for (i = 0; i < v.length; i++) {\n               if (!cLASS.isOfType(v[i], range.itemType)) {\n                 constrVio = new RangeConstraintViolation(\"The items of \" + fld +\n                     \" must be of type \" + range.itemType + \"! \" + JSON.stringify(v) +\n                     \" is not admissible!\");\n               }\n             }\n             break;\n           }\n         });\n       } else if (range === Object) {\n         valuesToCheck.forEach(function (v) {\n           if (!(v instanceof Object)) {\n             constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                 \" must be a JS object! \" + JSON.stringify(v) + \" is not admissible!\");\n           }\n         });\n       }\n   }\n   // return constraint violation found in range switch\n   if (constrVio) return constrVio;\n\n   /********************************************************\n    ***  Check constraints that apply to several ranges  ***\n    ********************************************************/\n   if (range === \"String\" || range === \"NonEmptyString\") {\n     valuesToCheck.forEach( function (v) {\n       if (min !== undefined && v.length < min) {\n         constrVio = new StringLengthConstraintViolation(\"The length of \"+\n             fld + \" must not be smaller than \"+ min);\n       } else if (max !== undefined && v.length > max) {\n         constrVio = new StringLengthConstraintViolation(\"The length of \"+\n             fld + \" must not be greater than \"+ max);\n       } else if (pattern !== undefined && !pattern.test( v)) {\n         constrVio = new PatternConstraintViolation( msg || v +\n             \"does not comply with the pattern defined for \"+ fld);\n       }\n     });\n   }\n   if (range === \"Integer\" || range === \"NonNegativeInteger\" ||\n       range === \"PositiveInteger\") {\n     valuesToCheck.forEach( function (v) {\n       if (min !== undefined && v < min) {\n         constrVio = new IntervalConstraintViolation( fld +\n             \" must be greater than \"+ min);\n       } else if (max !== undefined && v > max) {\n         constrVio = new IntervalConstraintViolation( fld +\n             \" must be smaller than \"+ max);\n       }\n     });\n   }\n   if (constrVio) return constrVio;\n\n   /********************************************************\n    ***  Check cardinality constraints  *********************\n    ********************************************************/\n   if (maxCard > 1) { // (a multi-valued property can be array- or map-valued)\n     // check minimum cardinality constraint\n     if (minCard > 0 && valuesToCheck.length < minCard) {\n       return new CardinalityConstraintViolation(\"A collection of at least \"+\n           minCard +\" values is required for \"+ fld);\n     }\n     // check maximum cardinality constraint\n     if (valuesToCheck.length > maxCard) {\n       return new CardinalityConstraintViolation(\"A collection value for \"+\n           fld +\" must not have more than \"+ maxCard +\" members!\");\n     }\n   }\n   // return deserialized value available in validationResult.checkedValue\n   return new NoConstraintViolation( maxCard === 1 ? valuesToCheck[0] : valuesToCheck);\n };\n /**\n  * Map range datatype to JS datatype.\n  * @method\n  * @author Gerd Wagner\n  * @return {string}\n  */\n cLASS.range2JsDataType = function ( range) {\n   var jsDataType=\"\";\n   switch (range) {\n     case \"String\":\n     case \"NonEmptyString\":\n     case \"Email\":\n     case \"URL\":\n     case \"PhoneNumber\":\n     case \"Date\":\n       jsDataType = \"string\";\n       break;\n     case \"Integer\":\n     case \"NonNegativeInteger\":\n     case \"PositiveInteger\":\n     case \"Number\":\n     case \"AutoNumber\":\n     case \"Decimal\":\n     case \"Percent\":\n     case \"ClosedUnitInterval\":\n     case \"OpenUnitInterval\":\n       jsDataType = \"number\";\n       break;\n     case \"Boolean\":\n       jsDataType = \"boolean\";\n       break;\n     default:\n       if (range instanceof eNUMERATION) {\n         jsDataType = \"number\";\n       } else if (typeof range === \"string\" && cLASS[range]) {\n         jsDataType = \"string\";  // for the standard ID (TODO: can also be \"number\")\n       } else if (typeof range === \"object\") {  // a.g. Array or Object\n         jsDataType = \"object\";\n       }\n   }\n   return jsDataType;\n };\n /**\n  * Check if a value is of some type.\n  * @method\n  * @author Gerd Wagner\n  * @return {boolean}\n  */\n cLASS.isOfType = function ( v, Type) {\n   switch (Type) {\n     case \"String\": return (typeof v === \"string\");\n     case \"NonEmptyString\": return (typeof v === \"string\" && v.trim() !== \"\");\n     case \"Integer\": return Number.isInteger(v);\n     case \"NonNegativeInteger\": return (Number.isInteger(v) && v >= 0);\n     case \"PositiveInteger\": return (Number.isInteger(v) && v > 0);\n     case \"Decimal\": return (typeof v === \"number\");\n     case \"ClosedUnitInterval\":\n       return (typeof v === \"number\" && v>=0 && v<=1);\n     case \"OpenUnitInterval\":\n       return (typeof v === \"number\" && v>0 && v<1);\n     default: return true;\n   }\n };\n\n /********************************************************\n  ***  Collection datatypes  *****************************\n  ********************************************************/\n/*\n * cLASS datatypes, such as collection types, are defined in the form of\n * cOLLECTIONdATATYPE objects that specify the collection type, the\n * item type and the size of the collection.\n */\n cLASS.cOLLECTIONdATATYPE = function (typeName, itemType, size, optParams) {\n   this.type = typeName;\n   this.itemType = itemType;\n   this.size = size;\n   this.optParams = optParams;\n };\n cLASS.Array = function (itemType, size, optParams) {\n  if (this instanceof cLASS.Array) {\n    // called with new, so return an array object\n    this.type = \"Array\";\n    this.itemType = itemType;\n    this.size = size;\n    if (optParams) {\n      if (optParams.constraints) this.constraints = optParams.constraints; //TODO\n      if (optParams.decimalPlaces) this.decimalPlaces = optParams.decimalPlaces;\n    }\n    this.array = new Array( size);\n  } else {\n    // called without new, return an object representing an Array datatype\n    return new cLASS.cOLLECTIONdATATYPE(\"Array\",\n        {itemType:itemType, size:size, optParams:optParams});\n  }\n };\ncLASS.ArrayList = function (itemType, constraints) {\n   if (constraints) {\n     return {dataType:\"ArrayList\", itemType: itemType, constraints: constraints};\n   } else return {dataType:\"ArrayList\", itemType: itemType};\n };\ncLASS.Map = function (itemType, constraints) {\n  if (constraints) {\n    return {dataType:\"Map\", itemType: itemType, constraints: constraints};\n  } else return {dataType:\"Map\", itemType: itemType};\n};\n\ncLASS.RingBuffer = function (itemType, size, optParams) {\n  if (this instanceof cLASS.RingBuffer) {\n    // called with new, so return a ring buffer object\n    this.type = \"RingBuffer\";\n    this.itemType = itemType;\n    this.size = size;\n    if (optParams) {\n      if (optParams.constraints) this.constraints = optParams.constraints; //TODO\n      if (optParams.decimalPlaces) this.decimalPlaces = optParams.decimalPlaces;\n    }\n    this.first = 0;  // index of first item\n    this.last = -1;  // index of last item\n    this.buffer = new Array( size);\n  } else {\n    // called without new, return an object representing a RingBuffer datatype\n    return new cLASS.cOLLECTIONdATATYPE(\"RingBuffer\",\n        {itemType:itemType, size:size, optParams:optParams});\n  }\n};\ncLASS.RingBuffer.prototype.nmrOfItems = function () {\n  if (this.last === -1) return 0;\n  else if (this.first <= this.last) return this.last - this.first + 1;\n  else return this.last + this.size - this.first + 1;\n};\ncLASS.RingBuffer.prototype.add = function (item) {\n  if (this.nmrOfItems() < this.size) {\n   this.last++;  // still filling the buffer\n  } else {  // buffer is full, move both pointers\n   this.first = (this.first+1) % this.size;\n   this.last = (this.last+1) % this.size;\n  }\n  this.buffer[this.last] = item;\n};\ncLASS.RingBuffer.prototype.toString = function (n) {\n  var i=0, str = \"[\", item, roundingFactor=1,\n      N = this.nmrOfItems(),\n      outputLen = n ? Math.min( n, N) : N;\n  if (N === 0) return \" \";\n  for (i=0; i < outputLen; i++) {\n    item = this.buffer[(this.first+i) % this.size];\n    // serialize enum values as labels\n    if (this.itemType instanceof eNUMERATION) item = this.itemType.labels[item-1];\n    else if (cLASS.isDecimalType( this.itemType)) {\n      //decimalPlaces:\n      roundingFactor = Math.pow( 10, this.decimalPlaces);\n      item = Math.round( item * roundingFactor) / roundingFactor;\n    }\n    str += item;\n    if (i < outputLen-1) str += \", \";\n  }\n  return str + \"]\";\n };\n// Simple Moving Average (SMA)\n cLASS.RingBuffer.prototype.getSMA = function (n) {\n   var N = this.nmrOfItems(), i=0, val=0, sum=0;\n   if (n) N = Math.min( n, N);\n   for (i=0; i < N; i++) {\n     val = this.buffer[(this.first+i) % this.size];\n     sum += val;\n   }\n   return sum / N;\n };\n\n /**\n * @fileOverview  A library of DOM element creation methods and \n * other DOM manipulation methods.\n * \n * @author Gerd Wagner\n */\n\nvar dom = {\n  /**\n   * Create an element\n   *\n   * @param {string} elemType\n   * @param {object} slots\n   * @return {object}\n   */\n  createElement: function (elemType, slots) {\n    var el = document.createElement( elemType);\n    if (slots) {\n      if (slots.id) el.id = slots.id;\n      if (slots.classValues) el.className = slots.classValues;\n      if (slots.title) el.title = slots.title;\n      if (slots.content) el.innerHTML = slots.content;\n      if (slots.borderColor) el.style.borderColor = slots.borderColor;\n    }\n    return el;\n  },\n   /**\n    * Create a time element from a Date object\n    *\n    * @param {object} d\n    * @return {object}\n    */\n   createTime: function (d) {\n     var tEl = document.createElement(\"time\");\n     tEl.textContent = d.toLocaleDateString();\n     tEl.setAttribute(\"datetime\", d.toISOString());\n     return tEl;\n   },\n   /**\n    * Create an img element\n    * \n    * @param {string} id\n    * @param {string} classValues\n    * @param {object} content\n    * @return {object}\n    */\n    createImg: function (slots) {\n      var el = document.createElement(\"img\");\n      el.src = slots.src;\n      if (slots.id) el.id = slots.id;\n      if (slots.classValues) el.className = slots.classValues;\n      return el;\n    },\n  /**\n   * Create an option element\n   * \n   * @param {object} content\n   * @return {object}\n   */\n  createOption: function (slots) {\n    var el = document.createElement(\"option\");\n    if (slots.text) el.textContent = slots.text;\n    if (slots.value !== undefined) el.value = slots.value;\n    return el;\n  },\n  /**\n   * Create a button element\n   * \n   * @param {string} id\n   * @param {string} classValues\n   * @param {object} content\n   * @return {object}\n   */\n  createButton: function (slots) {\n    var el = document.createElement(\"button\");\n    if (!slots.type) el.type = \"button\";\n    else el.type = slots.type;\n    if (slots.id) el.id = slots.id;\n    if (slots.name) el.name = slots.name;\n    if (slots.classValues) el.className = slots.classValues;\n    if (slots.title) el.title = slots.title;\n    if (slots.handler) el.addEventListener( 'click', slots.handler);\n    if (slots.content) el.innerHTML = slots.content;\n    else el.textContent = slots.label || slots.name;\n    return el;\n  },\n  /**\n   * Create a labeled output field\n   * \n   * @param {{labelText: string, name: string?, value: string?}}\n   *        slots  The view definition slots.\n   * @return {object}\n   */\n  createLabeledOutputField: function (slots) {\n    var outpEl = document.createElement(\"output\"),\n        lblEl = document.createElement(\"label\");\n    if (slots.name) outpEl.name = slots.name;\n    if (slots.value !== undefined) outpEl.value = slots.value;\n    lblEl.textContent = slots.labelText;\n    lblEl.appendChild( outpEl);\n    return lblEl;\n  },\n  /**\n   * Create a labeled input field\n   *\n   * @param {{labelText: string, name: string?, type: string?,\n   *          value: string?, disabled: string?}}\n   *        slots  The view definition slots.\n   * @return {object}\n   */\n  createLabeledInputField: function (slots) {\n    var inpEl = document.createElement(\"input\"),\n        lblEl = document.createElement(\"label\");\n    if (slots.name) inpEl.name = slots.name;\n    if (slots.type) inpEl.type = slots.type;\n    else inpEl.type = \"text\";\n    if (slots.value !== undefined) inpEl.value = slots.value;\n    if (slots.disabled) inpEl.disabled = \"disabled\";\n    lblEl.textContent = slots.labelText;\n    lblEl.appendChild( inpEl);\n    return lblEl;\n  },\n  /**\n  * Create a radio button or checkbox element\n  *\n  * @param {{labelText: string, name: string?, type: string?,\n  *          value: string?, disabled: string?}}\n  *        slots  The view definition slots.\n  * @return {object}\n  */\n  createLabeledChoiceControl: function (t,n,v,lblTxt) {\n    var ctrlEl = document.createElement(\"input\"),\n        lblEl = document.createElement(\"label\");\n    ctrlEl.type = t;\n    ctrlEl.name = n;\n    ctrlEl.value = v;\n    lblEl.appendChild( ctrlEl);\n    lblEl.appendChild( !lblTxt.includes(\"</\") ?\n        document.createTextNode( lblTxt) :\n        dom.createElement(\"div\", {content: lblTxt})\n    );\n    return lblEl;\n  },\n  /**\n  * Create a labeled select element\n  *\n  * @param {{labelText: string, name: string?, index: integer?}}\n  *     slots  The view definition slots.\n  * @return {object}\n  */\n  createLabeledSelect: function (slots) {\n    var selEl = document.createElement(\"select\"),\n        lblEl = document.createElement(\"label\");\n    if (slots.name) selEl.name = slots.name;\n    if (slots.index !== undefined) selEl.index = slots.index;\n    lblEl.textContent = slots.labelText;\n    lblEl.appendChild( selEl);\n    return lblEl;\n  },\n  /**\n  * Create option elements from an array list of option text strings\n  * and insert them into a selection list element\n  *\n  * @param {object} selEl  A select(ion list) element\n  * @param {object} options  An array list of records or text items\n  * @param {object} optPar  A record of optional parameters\n  */\n  fillSelectWithOptionsFromArrayList: function (selEl, options, optPar) {\n    selEl.innerHTML = \"\";\n    if (!selEl.multiple) {\n      selEl.add( dom.createOption({text:\" --- \", value:\"\"}), null);\n    }\n    options.forEach( function (opt,i) {\n      var optEl = null,\n          id = optPar && optPar.primaryKey ? opt[optPar.primaryKey] : opt.id;\n      if (typeof opt === \"string\") optEl = dom.createOption({text: opt, value: i});\n      else optEl = dom.createOption({\n        text: optPar && optPar.displayProp ? opt[optPar.displayProp] : id,\n        value: id\n      });\n      if (selEl.multiple && optPar && optPar.selection &&\n          optPar.selection.includes(i+1)) {\n        // flag the option element with this value as selected\n        optEl.selected = true;\n      }\n      selEl.add( optEl, null);\n    });\n  },\n   /**\n    * Create option elements from a map of ID values to entity objects/records\n    * and insert them into a selection list element\n    *\n    * @param {object} selEl  A select(ion list) element\n    * @param {object} entityMap  A map of entity IDs to entity records\n    * @param {object} optPar  A record of optional parameters\n    */\n   fillSelectWithOptionsFromEntityMap: function (selEl, entityMap, optPar) {\n     var i=0, keys=[], obj={}, optEl=null, txt=\"\";\n     selEl.innerHTML = \"\";\n     if (!optPar || !optPar.noVoidOption) {\n       selEl.add( dom.createOption({value:\"\", text:\"---\"}), null);\n     }\n     keys = Object.keys( entityMap);\n     for (i=0; i < keys.length; i++) {\n       obj = entityMap[keys[i]];\n       if (optPar && optPar.displayProp) txt = obj[optPar.displayProp];\n       else txt = obj.id;\n       optEl = dom.createOption({ value: obj.id, text: txt });\n       // if invoked with a selection argument, flag the selected options\n       if (selEl.multiple && optPar && optPar.selection &&\n           optPar.selection[keys[i]]) {\n         // flag the option element with this value as selected\n         optEl.selected = true;\n       }\n       selEl.add( optEl, null);\n     }\n   }\n};\n /**\n  * Insert a new node/element after another one\n  *\n  * @return {object}  tbody element object\n  */\ndom.insertAfter = function (newNode, referenceNode) {\n   referenceNode.parentNode.insertBefore( newNode, referenceNode.nextSibling);\n};\n /* Polyfill for ChildNode.remove()\n    from: https://github.com/jserz/js_piece/blob/master/DOM/ChildNode/remove()/remove().md\n */\n (function (arr) {\n   arr.forEach(function (item) {\n     if (item.hasOwnProperty('remove')) {\n       return;\n     }\n     Object.defineProperty(item, 'remove', {\n       configurable: true,\n       enumerable: true,\n       writable: true,\n       value: function remove() {\n         if (this.parentNode !== null)\n           this.parentNode.removeChild(this);\n       }\n     });\n   });\n })([Element.prototype, CharacterData.prototype, DocumentType.prototype]);\n\n/**\n * @fileOverview  This file contains the definition of the class ObjectView.\n * @author Gerd Wagner\n * @copyright Copyright 2015 Gerd Wagner, Chair of Internet Technology,\n *   Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n */\n/**\n * Class for creating (and rendering) view models based on \"model objects\". A view model\n * is a (logical) UI model consisting of (input and output) fields, which are typically\n * based on model properties, and user action types, defined as named JS methods that can\n * be used as event handlers for UI events.\n *\n * A view model may have a field order definition and field group definitions\n * in the constructor parameter \"fields\", which is processed into a \"fields\" map\n * of field definition records and a field order definition list \"fieldOrder\".\n * The constructor parameter \"fields\" may contain additional fields not based\n * on model object properties. When a view model is created without a \"fields\"\n * argument, the view fields are generated from the labeled properties of the\n * underlying model object.\n *\n * In addition to the field definition map \"fields\", there is a field value map\n * \"fieldValues\", which has a top-down databinding to corresponding model object\n * properties (via implicit setters). The underlying model object is associated\n * with a view field via the record field \"moName\" of the corresponding \"fields\"\n * definition record and the view's map \"modelObjects\".\n *\n * A view (or 'view model') is a logical representation of the interaction\n * elements of a UI, which typically correspond to properties and methods\n * of a model object. A view consists of (input/output) fields and of user\n * action types, such as \"run\", \"saveSimulationState\", etc.\n *\n * A view field has an I/O mode of either \"I/O\" (input/output) or \"O\". When a view\n * is rendered, its fields are rendered as HTML UI elements in the following way:\n *\n * 1) ordinary fields as form fields (HTML input/output elements),\n * 2) Boolean fields as HTML checkbox-typed input elements,\n * 3) enumeration and reference fields as choice widgets (radio button groups or\n *    checkbox groups, HTML select elements or other selection list widgets)\n *\n * or as any HTML element that allows for text content, or as special UI widgets\n * (such as calendar date selection widgets or color pickers). User action\n * types are exposed in the form of HTML buttons or other actionable (e.g.\n * clickable) HTML elements.\n *\n * A view's UI with its view-field-based input/output elements and widgets\n * is rendered by invoking the ender method on the view. UI fields/widgets are\n * subsequently synchronized with view field values and model object property values\n * by means of a top-down data binding mechanism: value changes of UI fields are\n * propagated to corresponding view fields (typically in a change event listener)\n * and then to model object properties in the setter of the fields.<fld>.value property.\n * TODO: implement this two-step data binding mechanism\n *\n * A user action type is a named JS function where the name indicates the\n * intended meaning of the user action (such as \"saveSimulationState\"). It\n * binds a UI event type, such as clicking on a button, to a view method as\n * its \"event handler\".\n\n * TODO: bottom-up data binding from model object properties to view fields:\n * When a view field is bound to a model object property, its value is updated\n * whenever the corresponding property value of the model object is updated.\n *\n * TODO: Support multiple model objects when using field definitions instead of names\n *\n * A view can be rendered in two different ways:\n * - (normally) By creating all required DOM elements (form elements with controls), and\n *    appending them to the child elements of the body element, if the document\n *    does not contain suitable form elements.\n * - By accessing existing form elements and controls, just setting/updating their\n *    contents (and dynamic parts)\n *\n * Notice that slots.fields is an array of property names or view field definitions\n * while this.fields is a map of view field definitions.\n *\n * Example invocation:\n\n // create a view based on a single model object\n var view = new oBJECTvIEW({\n      modelObject: sim.scenario,\n\t  // create a horizontal field group\n      fields: [[\"simulationEndTime\", \"stepDuration\", \"visualize\", \"createLog\"]],\n      userActions: {\n        \"run\": function () {...}\n\t  }\n  })\n // render the view and store its databinding\n view.dataBinding = view.render();\n\n // create a view based on multiple model objects\n var view = new oBJECTvIEW({\n     modelObjects: {\"scenario\":sim.scenario, \"model\":sim.model},\n\t   // create a horizontal field group\n     fields: [[\"scenario.simulationEndTime\", \"model.timeUnit\", \"scenario.stepDuration\", ...]],\n     userActions: {\n        \"run\": function () {...}\n\t   }\n })\n +\n * @constructor\n * @this {oBJECTvIEW}\n * @param {{modelObject: Object, fields: Array, methods: Map?}}\n *        slots  The view definition slots\n */\n/* globals oBJECTvIEW */\nvar oBJECTvIEW = function (slots) {\n  var properties={},\n      multipleModelObjects = slots.modelObjects && slots.modelObjects instanceof Object;\n  // check oBJECTvIEW definition constraints\n  if (!(slots.modelObject && (slots.modelObject instanceof Object)) &&\n      !multipleModelObjects) {\n    throw ViewConstraintViolation(\"Creating an object view requires a (set of) model object(s)!\");\n  }\n  if (multipleModelObjects) {\n    if (!slots.fields) {\n      throw ViewConstraintViolation(\n          \"A view def with multiple model objects requires field definitions!\");\n    }\n    if (!slots.fields.every( function (fGrp) {\n        // turn single field into singleton field group\n        if (!Array.isArray(fGrp)) fGrp = [fGrp];\n        return fGrp.every( function (f) {\n            return typeof f === \"string\" && f.indexOf(\".\") > -1;});\n        })) {\n      throw ViewConstraintViolation(\"Field definitions based on multiple model objects \" +\n          \"need to be two-part strings with a dot as separator!\");\n    }\n  }\n  // check if i18n translation function is defined\n  if (typeof i18n !== \"object\" || !i18n.t) {\n    // define dummy function\n    i18n = {t: function (txt) {return txt;}}\n  }\n  if (multipleModelObjects) {\n    this.modelObjects = slots.modelObjects;\n  } else {\n    this.modelObject = slots.modelObject;\n    // store the modelObject also in the modelObjects map\n    this.modelObjects = {};\n    this.modelObjects[slots.modelObject.objectName] = slots.modelObject;\n  }\n  this.heading = slots.heading;\n  // Process the \"slots.fields\" array (or the properties map) into a \"fields\" map\n  // of view field declarations and a field order definition array \"fieldOrder\"\n  this.fields = {};\n  this.fieldValues = {};\n  this.fieldOrder = [];\n  if (slots.suppressNoValueFields === undefined) this.suppressNoValueFields = true;  // default\n  else this.suppressNoValueFields = slots.suppressNoValueFields;\n  if (slots.fields) {\n    slots.fields.forEach( function (el) {\n      var j=0, fld, fldGrp=[], fldOrdEl=[], moName=\"\", mo=null, pos=0;\n      // turn single field into singleton field group\n      if (!Array.isArray( el)) fldGrp = [el];\n      else fldGrp = el;        // field group\n      for (j=0; j < fldGrp.length; j++) {\n        fld = fldGrp[j];\n        if (typeof fld === \"string\") {  // name of property-induced field\n          if (multipleModelObjects) {  // two-part field name\n            pos = fld.indexOf(\".\");\n            moName = fld.substring( 0, pos);\n            mo = this.modelObjects[moName];\n            fld = fld.substring( pos+1);  // proper field name\n          } else {\n            mo = this.modelObject;\n          }\n          properties = mo.properties;\n          if (!properties[fld]) {\n            throw new ViewConstraintViolation(\n                \"View field \"+ fld +\" does not correspond to a model property!\");\n          }\n          if (this.suppressNoValueFields && mo[fld] === undefined) continue;\n          // else\n          this.fields[fld] = util.cloneRecord( properties[fld]);\n          // in case range is a JS constructor function or object\n          if (typeof properties[fld].range !== \"string\") {\n            if (cLASS[properties[fld].range.Name]) {\n              this.fields[fld].range = properties[fld].range.Name;\n            } else {\n              this.fields[fld].range = properties[fld].range;\n            }\n          }\n          this.fields[fld].moName = mo.objectName;\n          this.fields[fld].inputOutputMode = \"I/O\";\n          this.fields[fld].label = i18n.t( this.fields[fld].label);\n          if (this.fields[fld].hint) {\n            this.fields[fld].hint = i18n.t( this.fields[fld].hint);\n          }\n          fldOrdEl.push( fld);\n        } else if (typeof fld === \"object\") {  // field definition\n          properties = this.modelObject.properties;\n          this.fields[fld.name] = {\n            moName: this.modelObject.objectName,\n            label: i18n.t( fld.label || properties[fld.name].label),\n            hint: i18n.t( fld.hint || properties[fld.name].hint),\n            range: fld.range || properties[fld.name].range,\n            inputOutputMode: fld.inputOutputMode\n          };\n          fldOrdEl.push( fld.name);\n          if (fldGrp.derivationFunction) {\n            this.fields[fld.name].derivationFunction = fld.derivationFunction;\n          }\n          if (fld.optional) this.fields[fld.name].optional = true;\n        } else {  // neither property field nor defined field\n          throw new ViewConstraintViolation(\n              \"Neither property field nor defined field: \"+ fld);\n        }\n      }\n      if (fldGrp.length === 1) this.fieldOrder.push( fldOrdEl[0]);\n      else this.fieldOrder.push( fldOrdEl);\n    }, this);\n  } else {  // no view field definitions provided in constructor slots\n    properties = this.modelObject.properties;\n    // create view fields from labeled model properties\n    Object.keys( properties).forEach( function (prop) {\n      if (properties[prop].label &&\n          (!this.suppressNoValueFields ||\n           this.modelObject[prop] !== undefined ||\n           properties[prop].dependsOn  !== undefined)) {\n        this.fieldOrder.push( prop);\n        this.fields[prop] = util.cloneRecord( properties[prop]);\n        this.fields[prop].inputOutputMode = \"I/O\";\n        this.fields[prop].label = i18n.t( this.fields[prop].label);\n        if (this.fields[prop].hint) {\n          this.fields[prop].hint = i18n.t( this.fields[prop].hint);\n        }\n      }\n    }, this);\n  }\n  this.maxNmrOfEnumLitForChoiceButtonRendering =\n      slots.maxNmrOfEnumLitForChoiceButtonRendering || 7;\n  this.methods = slots.methods || {};\n  this.userActions = slots.userActions || {};\n  //this.fieldGroupSeparator = slots.fieldGroupSeparator || \", \";\n  /**\n   * Generic setter for view fields\n   * this = view object\n   * @method\n   * @author Gerd Wagner\n   * TODO: what about derived view fields?\n   */\n  this.methods.set = function (f,v) {\n    var el=null, elems=null, i=0,\n        mo = this.modelObjects[this.fields[f].moName],\n        properties = mo.properties,\n        fldGrpSep = this.fieldGroupSeparator,\n        range = properties[f].range,\n        uiEl = this.dataBinding[this.viewMode][f];\n    if (v === undefined) {\n      if (properties[f] && properties[f].maxCard) v = [];\n      else v = \"\";\n      this[f] = v;\n      return;\n    }\n    // assign view field\n    if (Array.isArray(v)) this[f] = v.clone();\n    else this[f] = v;\n    // bottom-up data-binding: assign UI/form field\n    if (uiEl.tagName === \"INPUT\" || uiEl.tagName === \"OUTPUT\") {\n      if (!Array.isArray(v)) {\n        uiEl.value = cLASS.getValueAsString( mo, f, v);\n      } else {\n        v.forEach( function (el,i) {\n          var ds = cLASS.getValueAsString( mo, f, el);\n          if (i===0) uiEl.value = ds;\n          else uiEl.value += fldGrpSep + ds;\n        });\n      }\n    } else if (uiEl.tagName === \"FIELDSET\" &&\n        uiEl.classList.contains(\"radio-button-group\")) {\n      elems = uiEl.querySelectorAll(\"input[type='radio']\");\n      for (i=0; i < elems.length; i++) {\n        el = elems[i];\n        if (el.value === String(v)) el.checked = true;\n      }\n    } else if (uiEl.tagName === \"FIELDSET\" &&\n        uiEl.classList.contains(\"checkbox-group\")) {\n      elems = uiEl.querySelectorAll(\"input[type='checkbox']\");\n      for (i=0; i < elems.length; i++) {\n        el = elems[i];\n        if (v.indexOf( parseInt( el.value)) > -1) el.checked = true;\n        else el.checked = false;\n      }\n    } else if (uiEl.tagName === \"SELECT\" && uiEl.multiple !== \"multiple\") {\n      uiEl.selectedIndex = v;\n    } else {\n      uiEl.setAttribute(\"data-value\", v);\n    }\n  };\n};\n/**\n * Render the HTML form DOM of a model object's view model\n * this = view model object\n * @author Gerd Wagner\n * @method\n * @return {object} dataBinding\n */\noBJECTvIEW.maxCardButtonGroup = 7;\noBJECTvIEW.prototype.render = function (objViewParentEl) {\n  var fields = this.fields,  // fields map\n      fieldOrder = this.fieldOrder,  // field order array\n      mObject = this.modelObject,  // model object\n      mObjects = this.modelObjects,  // model objects\n      // a map for storing the bindings of UI elems to view fields\n      dataBinding = {},\n      userActions = this.userActions,\n      validateOnInput = true,\n      uiElemType = \"form\", parentEl=null,\n      maxELforButton = 7,\n      uiContainerEl=null, footerEl=null, i=0;\n  /* ==================================================================== */\n  /**\n   * Create a labeled text field. When validation is not performed on input\n   * it is performed on blur in the case of \"Create\" for catching mandatory\n   * value constraint violations, and on change in the case of \"Update\".\n   * @method\n   */\n  function createLabeledTextField( fld) {\n    var fldEl = null, lblEl = document.createElement(\"label\"),\n        fDef = fields[fld];   // field definition\n    if (fDef.inputOutputMode === \"O\") {\n      fldEl = document.createElement(\"output\");\n    } else {\n      fldEl = document.createElement(\"input\");\n      fldEl.type = \"text\";\n      if (validateOnInput) {\n        fldEl.addEventListener(\"input\", function () {\n          fldEl.setCustomValidity( cLASS.check( fld, fDef, fldEl.value).message);\n        });\n      } else {\n        fldEl.addEventListener(\"blur\", function () {\n          fldEl.setCustomValidity( cLASS.check( fld, fDef, fldEl.value).message);\n        });\n      }\n      fldEl.addEventListener(\"change\", function () {\n        var v = fldEl.value;\n        if (!validateOnInput) {\n          fldEl.setCustomValidity( cLASS.check( fld, fDef, v).message);\n        }\n        // UI element to model property data binding (top-down)\n        if (fldEl.validity.valid) mObjects[fDef.moName][fld] = v;\n      });\n    }\n    // store data binding assignment of UI element to view field\n    dataBinding[fld] = fldEl;\n    // render text input element\n    fldEl.name = fld;\n    fldEl.value = typeof mObject[fld] === \"object\" ? JSON.stringify( mObject[fld]) : mObject[fld] || \"\";\n    fldEl.size = 7;\n    if (fields[fld].hint) lblEl.title = fields[fld].hint;\n    lblEl.textContent = fields[fld].label;\n    lblEl.appendChild( fldEl);\n    return lblEl;\n  }\n  /**\n   * Create a labeled Yes/No field.\n   * @method\n   */\n  function createLabeledYesNoField( fld) {\n    var fldEl = null, lblEl = document.createElement(\"label\"),\n        fDef = fields[fld];   // field declaration\n    if (fields[fld].inputOutputMode === \"O\") {\n      fldEl = document.createElement(\"output\");\n    } else {\n      fldEl = document.createElement(\"input\");\n      fldEl.type = \"checkbox\";\n      fldEl.addEventListener(\"change\", function () {\n        mObjects[fDef.moName][fld] = fldEl.checked;  // UI element to model property data binding\n      });\n    }\n    // store data binding assignment of UI element to view field\n    dataBinding[fld] = fldEl;\n    fldEl.name = fld;\n    fldEl.checked = mObject[fld];\n    lblEl.textContent = fields[fld].label;\n    if (fields[fld].hint) lblEl.title = fields[fld].hint;\n    lblEl.appendChild( fldEl);\n    return lblEl;\n  }\n  /**\n   * Create a choice control group in a container element.\n   * A choice control is either an HTML radio button or an HTML checkbox.\n   * @method\n   */\n  function createChoiceButtonGroup( fld) {\n    var j=0, btnType=\"\", containerEl=null, el=null, choiceItems=[],\n        range = fields[fld].range;\n    el = document.createElement(\"legend\");\n    el.textContent = fields[fld].label;\n    containerEl = document.createElement(\"fieldset\");\n    containerEl.appendChild( el);\n    containerEl.setAttribute(\"data-bind\", fld);\n    // store data binding of UI element\n    dataBinding[fld] = containerEl;\n    // if maxCard is defined, use checkboxes\n    if (fields[fld].maxCard) {\n      btnType = \"checkbox\";\n      containerEl.className = \"checkbox-group\";\n    } else {\n      btnType = \"radio\";\n      containerEl.className = \"radio-button-group\";\n    }\n    if (range instanceof eNUMERATION) {\n      choiceItems = range.labels;\n    } else if (Array.isArray(range)) {  // range is an ad-hoc enumeration\n      choiceItems = range;\n    } else {  // range is an entity type\n      choiceItems = Object.keys( range.instances);\n    }\n    for (j=0; j < choiceItems.length; j++) {\n      // button values = 1..n\n      el = dom.createLabeledChoiceControl( btnType, fld, j+1, choiceItems[j]);\n      containerEl.appendChild( el);\n      el.firstElementChild.addEventListener(\"click\", function (e) {\n        // UI element to model property data binding (top-down)\n        var btnEl = e.target, i=0,\n            mo = mObjects[fields[fld].moName],\n            val = parseInt( btnEl.value);\n        if (btnType === \"radio\") {\n          if (val !== mo[fld]) {\n            mo[fld] = val;\n          } else if (fields[fld].optional) {\n            // turn off radio button\n            btnEl.checked = false;\n            mo[fld] = undefined;\n          }\n        } else {  // checkbox\n          i = mo[fld].indexOf( val);\n          if (i > -1) {  // delete from value list\n            mo[fld].splice(i, 1);\n          } else {  // add to value list\n            mo[fld].push( val);\n          }\n        }\n      });\n    }\n    return containerEl;\n  }\n  /**\n   * Create a selection list\n   * @method\n   */\n  function createSelectionList( fld) {\n    var choiceItems = [],\n        selEl = document.createElement(\"select\"),\n        lblEl = document.createElement(\"label\"),\n        range  = fields[fld].range;\n    lblEl.textContent = fields[fld].label;\n    lblEl.appendChild( selEl);\n    selEl.setAttribute(\"data-bind\", fld);\n    // store data binding assignment of UI element to view field\n    dataBinding[fld] = selEl;\n    // if maxCard is defined, make a multi-selection list\n    if (fields[fld].maxCard) selEl.multiple = \"multiple\";\n    if (range instanceof eNUMERATION) {\n      choiceItems = range.labels;\n    } else if (Array.isArray(range)) {  // range is an ad-hoc enumeration\n      choiceItems = range;\n    } else {  // range is an entity type\n      choiceItems = Object.keys( range.instances);\n    }\n    dom.fillSelectWithOptionsFromArrayList( selEl, choiceItems);\n    selEl.addEventListener(\"change\", function () {\n      var mo = mObjects[fields[fld].moName];\n      // UI element to model property data binding (top-down)\n      if (selEl.value !== \"\") {\n        if (oBJECTvIEW.isIntegerType( range)) {\n          mo[fld] = parseInt( selEl.value);\n          // increment by 1 for enumerations\n          if (range instanceof eNUMERATION) mo[fld]++;\n        } else if (fields[fld].range === \"Date\") {\n          mo[fld] = new Date( selEl.value);\n        } else {\n          mo[fld] = selEl.value;\n        }\n      }\n    });\n    return lblEl;\n  }\n  /**\n   * Create UI elements for view fields\n   * depends on: fieldOrder\n   * @method\n   */\n  function createUiElemsForVmFields() {\n    //============= Inner Function ==============================\n    function createUiElemForVmField (containerEl, fld) {\n      var fDef = fields[fld],\n          range = fDef.range,\n          isEnum = range instanceof eNUMERATION,\n          isArr = Array.isArray( range);\n      // convert cLASS Name to cLASS object\n      if (typeof range === \"string\" && cLASS[range]) range = cLASS[range];\n      // retrieve model object for views based on multiple model objects\n      if (mObjects) mObject = mObjects[fDef.moName];\n      if (isEnum || isArr) {  // (ad-hoc) enumeration\n        if (isEnum && range.MAX <= maxELforButton ||\n            isArr && range.length <= maxELforButton) {\n          containerEl = createChoiceButtonGroup( fld);\n          if (!containerEl.className) containerEl.className = \"choice\";\n        } else {\n          if (!containerEl.className) containerEl.className = \"select\";\n          containerEl.appendChild( createSelectionList( fld));\n        }\n      } else if (range && range.constructor === cLASS && range.isComplexDatatype) {\n        if (fDef.maxCard && fDef.maxCard > 1) {\n          if (!containerEl.className) containerEl.className = \"RecordTableWidget\";\n          containerEl.appendChild( oBJECTvIEW.createRecordTableWidget(\n              {type: range, records: mObject[fld], tableTitle: fDef.label}));\n        }\n      } else if (range === \"Boolean\") {\n        if (!containerEl.className) containerEl.className = \"yes-no-field\";\n        containerEl.appendChild( createLabeledYesNoField( fld));\n      } else {  // string/numeric property field\n        if (!containerEl.className) containerEl.className = \"I-O-field\";\n        containerEl.appendChild( createLabeledTextField( fld));\n      }\n      if (fDef.dependsOn) {\n        if (mObject[fDef.dependsOn]) containerEl.style.display = \"block\";\n        else containerEl.style.display = \"none\";\n        dataBinding[fDef.dependsOn].addEventListener(\"change\", function () {\n          // toggle CSS style.display of containerEl\n          containerEl.style.display = (containerEl.style.display === \"none\") ? \"block\" : \"none\";\n        });\n      }\n    }\n    //=========================================================\n    fieldOrder.forEach( function (fldOrdEl) {\n      var containerEl = document.createElement(\"div\");\n      if (!Array.isArray( fldOrdEl)) {  // single field\n        createUiElemForVmField( containerEl, fldOrdEl);\n      } else {  // field group\n        containerEl.className = \"field-group\";\n        fldOrdEl.forEach( function (fld) {\n          createUiElemForVmField( containerEl, fld);\n        });\n      }\n      uiContainerEl.appendChild( containerEl);\n    });\n  }\n  /**\n   * Create UI elements (like buttons) for all user actions of the view\n   * depends on: fieldOrder\n   * @method\n   */\n  function createUiElemsForUserActions( parentEl) {\n    var containerEl = dom.createElement(\"div\", {\n      classValues:\"action-group\"\n    });\n    Object.keys( userActions).forEach( function (usrAct) {\n      var renderActBtn = typeof userActions[usrAct].showCondition !== \"function\" ||\n          userActions[usrAct].showCondition();\n      if (renderActBtn) {\n        containerEl.appendChild( dom.createButton({\n          name: usrAct,\n          label: userActions[usrAct].label || util.capitalizeFirstChar( usrAct),\n          title: userActions[usrAct].hint,\n          handler: userActions[usrAct]\n        }));\n        parentEl.appendChild( containerEl);\n      }\n    });\n  }\n  /* ==================================================================== */\n  /* MAIN CODE of render                                                  */\n  /* ==================================================================== */\n  // check if objView is descendant of a \"form\" element\n  parentEl = objViewParentEl;\n  while (parentEl && parentEl.tagName !== \"BODY\") {\n    if (parentEl.tagName === \"FORM\") {\n      uiElemType = \"div\";\n      break;\n    } else {\n      parentEl = parentEl.parentElement;\n    }\n  }\n  uiContainerEl = dom.createElement(\n    uiElemType,\n    {id: this.modelObject ?\n         this.modelObject.objectName : Object.keys( this.modelObjects)[0],\n     classValues:\"oBJECTvIEW\"}\n   );\n  if (this.heading) {\n    uiContainerEl.appendChild( dom.createElement(\"h2\", {content:this.heading}));\n  }\n  // store the object view's DOM element\n  this.domElem = uiContainerEl;\n  if (!objViewParentEl) objViewParentEl = document.querySelector(\"#uiContainerEl\");\n  if (!objViewParentEl) {\n    objViewParentEl = document.body;\n    footerEl = document.querySelector(\"html>body>footer\");\n    if (footerEl) {\n      document.body.insertBefore( uiContainerEl, footerEl);\n    } else {\n      document.body.appendChild( uiContainerEl);\n    }\n  } else objViewParentEl.appendChild( uiContainerEl);\n  if (uiContainerEl.tagName === \"FORM\") {  // reset custom validity\n    for (i=0; i < uiContainerEl.elements.length; i++) {\n      uiContainerEl.elements[i].setCustomValidity(\"\");\n    }\n    uiContainerEl.reset();\n  }\n  // create DOM elements for all UI/view fields\n  createUiElemsForVmFields();\n  // create DOM elements (like buttons) for all user actions of the UI/view model\n  createUiElemsForUserActions( uiContainerEl);\n  return dataBinding;  // a map of field names to corresponding DOM elements \n};\n/**\n * Set up a tabular UI for defining/editing entity records of a given\n * entity type or data records of a given complex datatype\n * @author Gerd Wagner\n * @method\n * @param slots.type  a cLASS\n * @param slots.records?  a collection (array list or map) of records\n * @return {object}  the created DOM element object\n */\noBJECTvIEW.createRecordTableWidget = function (slots) {\n  var tableEl = dom.createElement(\"table\", {classValues: \"RecTbl\"});\n  var headerRowEl=null, cell=null, rowIdx=0, obj=null, rowEl=null, N=0,\n      rowObjects=[], colProperties=[],  colHeadings=[], colTypes=[],\n      maxNmrOfRows = slots.maxNmrOfRows || 13,  // default is 13\n      tBody = document.createElement(\"tBody\"),\n      Class=null, propDefs=null, tableTitle = \"\",\n      keys=[], records=null, nmrOfRecords=0, p=\"\";\n  if (!slots.type) {\n    throw Error(\"No type provided when calling 'createRecordTableWidget'!\")\n  }\n  // convert cLASS name to cLASS object reference\n  if (typeof slots.type === \"string\" && cLASS[slots.type]) {\n    Class = cLASS[slots.type];\n  } else if (slots.type.constructor === cLASS) {\n    Class = slots.type;\n  } else {\n    throw Error(\"No cLASS type provided when calling 'createRecordTableWidget'!\")\n  }\n  propDefs = Class.properties;\n  tableEl.appendChild( tBody);\n  tableTitle = i18n.t( slots.tableTitle || Class.label || Class.Name);\n  if (!Class.isComplexDatatype) {\n    if (slots.editableProperties) colProperties = slots.editableProperties;\n    records = slots.records || Class.instances;\n    keys = Object.keys( records);\n    nmrOfRecords = keys.length;\n  } else if (Array.isArray( slots.records)) {\n    records = slots.records || [];\n    nmrOfRecords = records.length;\n  } else if (typeof slots.records === \"object\") { // a map\n    records = slots.records || {};\n    keys = Object.keys( records);\n    nmrOfRecords = keys.length;\n  }\n  if (propDefs.id) {\n    if (propDefs.name) colHeadings[0] = \"ID/Name\";\n    else colHeadings[0] = \"ID\";\n  } else if (propDefs.name) {\n    colHeadings[0] = \"Name\";\n  }\n  // loop over all property definitions (including inherited ones)\n  for (p in propDefs) {\n    if (p !== \"id\" && p !== \"name\" && propDefs[p].label) {\n      colProperties.push( p);\n      colHeadings.push( i18n.t( propDefs[p].label));\n      colTypes.push( propDefs[p].range);\n    }\n  }\n  // store properties displayed in table  TODO: currently not used...\n  tableEl.setAttribute(\"data-properties\", colProperties.join(\" \"));\n  // create table heading\n  tableEl.appendChild( document.createElement(\"thead\"));\n  // create row for table name\n  headerRowEl = tableEl.tHead.insertRow();\n  cell = headerRowEl.insertCell();\n  cell.textContent = tableTitle;\n  cell.colSpan = colHeadings.length;\n  // create row for column names\n  headerRowEl = tableEl.tHead.insertRow();\n  // create table column headings\n  colHeadings.forEach( function (cH) {\n    var c = headerRowEl.insertCell();\n    c.textContent = cH;\n  });\n  // create table rows\n  N = Math.min( nmrOfRecords, maxNmrOfRows);\n  for (rowIdx=0; rowIdx < N; rowIdx++) {\n    obj = keys.length>0 ? records[keys[rowIdx]] : records[rowIdx];\n    rowEl = tBody.insertRow();\n    // create object row\n    rowObjects[rowIdx] = obj;\n    if (obj.id) {\n      rowEl.insertCell().textContent = obj.name ? obj.id +\" / \"+ obj.name : obj.id;\n    } else if (obj.name) {\n      rowEl.insertCell().textContent = obj.name;\n    }\n    // create property value cells\n    colProperties.forEach( function (p) {\n      var c=null;\n      c = rowEl.insertCell();\n      //c.textContent = cLASS.convertPropValToStr( Class, p, obj[p]);\n      c.textContent = obj.getValueAsString( p);\n      // save value for being able to restore it\n      c.setAttribute(\"data-oldVal\", c.textContent);\n      if (!propDefs || !propDefs[p].stringified) {\n        c.setAttribute(\"contenteditable\",\"true\");\n        c.title = \"Click to edit!\";\n      }\n      c.addEventListener(\"blur\", function (e) {\n        var tdEl = e.target,\n            val = tdEl.textContent,\n            colNo = tdEl.cellIndex - 1, // skip first column (name/ID)\n            rowNo = tdEl.parentElement.rowIndex - 2,  // rowIndex includes 2 tHead rows\n            prop = colProperties[colNo],\n            constrVio = cLASS.check( prop, propDefs[prop], val);\n        if (constrVio.message) {\n          alert( constrVio.message);\n          tdEl.textContent = tdEl.getAttribute(\"data-oldVal\");\n        } else {\n          val = constrVio.checkedValue;\n          // update corresponding object slot\n          rowObjects[rowNo][prop] = val;\n          tdEl.setAttribute(\"data-oldVal\", tdEl.textContent);\n        }\n      });\n    });\n  }\n  // create an overflow indication row\n  if (nmrOfRecords > maxNmrOfRows) {\n    rowEl = tBody.insertRow();\n    if (obj.id) rowEl.insertCell().textContent = \"...\";\n    Object.keys( propDefs).forEach( function (p) {\n      var c=null;\n      if (colProperties.includes( p)) {\n        c = rowEl.insertCell();\n        c.textContent = \"...\";\n      }\n    });\n  }\n  // create an AddRow button\n  //oBJECTvIEW.createUiElemsForUserActions( popTableEl, this.userActions);\n  return tableEl;\n};\n/**\n * Create UI elements (like buttons) for all user actions of the view\n * depends on: fieldOrder\n * @method\n */\noBJECTvIEW.createUiElemsForUserActions = function (userActions) {\n  var containerEl = dom.createElement(\"div\", {\n    classValues:\"action-group\"\n  });\n  Object.keys( userActions).forEach( function (usrAct) {\n    containerEl.appendChild( dom.createButton({\n      name: usrAct,\n      label: userActions[usrAct].label || util.capitalizeFirstChar( usrAct),\n      handler: userActions[usrAct]\n    }));\n  });\n  return containerEl;\n};\n/**\n * Render an HTML form based on a view model (an abstract UI definition)\n *\n * The viewModel.fieldValues map holds the name-value slots of fields that\n * have been changed in the UI.\n *\n * @author Gerd Wagner\n * @method\n */\noBJECTvIEW.createUiFromViewModel = function (viewModel) {\n  var outFields = viewModel.outputFields || {},  // map of field definitions\n      inFields = viewModel.inputFields || {},  // map of field definitions\n      fields = {},\n      // list of field names or field name lists\n      fieldOrder = viewModel.fieldOrder ||\n          Object.keys( outFields).concat( Object.keys( inFields)),\n      fieldValues = viewModel.fieldValues,\n      userActions = viewModel.userActions || {},\n      // a map for storing the bindings of view fields to UI elems/widgets\n      dataBinding = {},\n      validateOnInput = viewModel.validateOnInput || true,\n      fldGrpSep = viewModel.fieldGroupSeparator,\n      uiContainerEl=null;\n  /* ==================================================================== */\n  /**\n   * Create a labeled text field. When validation is not performed on input\n   * it is performed on blur in the case of \"Create\" for catching mandatory\n   * value constraint violations, and on change in the case of \"Update\".\n   * @method\n   */\n  function createLabeledTextField( fld) {\n    var fldEl = null, lblEl = document.createElement(\"label\"),\n        fldDef = fields[fld],   // field declaration\n        range = fldDef.range;\n    if (fldDef.inputOutputMode === \"O\") {\n      fldEl = document.createElement(\"output\");\n    } else {\n      fldEl = document.createElement(\"input\");\n      if (cLASS.isIntegerType( range) || cLASS.isDecimalType( range)) {\n        fldEl.type = \"number\";\n        if (cLASS.isDecimalType( range)) {\n          if (!isNaN( parseInt( fldDef.decimalPlaces))) {\n            fldEl.step = \"0.\" + \"000000000\".substring( 0, fldDef.decimalPlaces-1) + \"1\";\n          } else fldEl.step = \"0.01\";  // default\n        }\n      } else fldEl.type = \"text\";\n      if (validateOnInput) {\n        fldEl.addEventListener(\"input\", function () {\n          fldEl.setCustomValidity( cLASS.check( fld, fldDef, fldEl.value).message);\n        });\n      } else {\n        fldEl.addEventListener(\"blur\", function () {\n          fldEl.setCustomValidity( cLASS.check( fld, fldDef, fldEl.value).message);\n        });\n      }\n      fldEl.addEventListener(\"change\", function () {\n        var v = fldEl.value, validationResult = {};\n        if (typeof fldDef.str2val === \"function\") v = fldDef.str2val(v);\n        validationResult = cLASS.check( fld, fldDef, v);\n        if (!validateOnInput) fldEl.setCustomValidity( validationResult.message);\n        // UI element to view model property data binding (top-down)\n        if (fldEl.validity.valid) fieldValues[fld] = validationResult.checkedValue;\n      });\n    }\n    // store data binding assignment of UI element to view field\n    dataBinding[fld] = fldEl;\n    // render text input element\n    fldEl.name = fld;\n    if (typeof fldDef.value === \"function\") {\n      fldEl.value = fldDef.value();\n    } else if (typeof fldDef.val2str === \"function\") {\n      fldEl.value = fldDef.val2str( fldDef.value);\n    } else if (typeof fldDef.value === \"object\") {\n      fldEl.value = JSON.stringify( fldDef.value);\n    } else {\n      fldEl.value = fldDef.value || fldDef.initialValue || \"\";\n    }\n    fldEl.size = fldDef.inputFieldSize || 7;\n    if (fldDef.hint) lblEl.title = fldDef.hint;\n    lblEl.textContent = fldDef.label;\n    lblEl.appendChild( fldEl);\n    return lblEl;\n  }\n  /**\n   * Create a labeled Yes/No field.\n   * @method\n   */\n  function createLabeledYesNoField( fld) {\n    var fldEl = null, lblEl = document.createElement(\"label\");\n    if (fields[fld].inputOutputMode === \"O\") {\n      fldEl = document.createElement(\"output\");\n    } else {\n      fldEl = document.createElement(\"input\");\n      fldEl.type = \"checkbox\";\n      fldEl.addEventListener(\"change\", function () {\n        fieldValues[fld] = fldEl.checked;  // UI element to view model property data binding\n      });\n    }\n    // store data binding assignment of UI element to view field\n    dataBinding[fld] = fldEl;\n    fldEl.name = fld;\n    fldEl.checked = fieldValues[fld];\n    lblEl.textContent = fields[fld].label;\n    if (fields[fld].hint) lblEl.title = fields[fld].hint;\n    lblEl.appendChild( fldEl);\n    return lblEl;\n  }\n  /**\n   * Create a choice control group in a container element.\n   * A choice control is either an HTML radio button or an HTML checkbox.\n   * @method\n   */\n  function createChoiceButtonGroup( fld) {\n    var j=0, btnType=\"\", containerEl=null, el=null, choiceItems=[],\n        range = fields[fld].range;\n    el = document.createElement(\"legend\");\n    el.textContent = fields[fld].label;\n    containerEl = document.createElement(\"fieldset\");\n    containerEl.appendChild( el);\n    containerEl.setAttribute(\"data-bind\", fld);\n    // store data binding of UI element\n    dataBinding[fld] = containerEl;\n    // if maxCard is defined, use checkboxes\n    if (fields[fld].maxCard) {\n      btnType = \"checkbox\";\n      containerEl.className = \"checkbox-group\";\n    } else {\n      btnType = \"radio\";\n      containerEl.className = \"radio-button-group\";\n    }\n    if (range instanceof eNUMERATION) {\n      choiceItems = range.labels;\n    } else if (Array.isArray(range)) {  // range is an ad-hoc enumeration\n      choiceItems = range;\n    } else {  // range is an entity type\n      choiceItems = Object.keys( range.instances);\n    }\n    for (j=0; j < choiceItems.length; j++) {\n      // button values = 1..n\n      el = dom.createLabeledChoiceControl( btnType, fld, j+1, choiceItems[j]);\n      containerEl.appendChild( el);\n      el.firstElementChild.addEventListener(\"click\", function (e) {\n        // data binding of UI element to model property (top-down)\n        var btnEl = e.target, i=0,\n            val = parseInt( btnEl.value);\n        if (btnType === \"radio\") {\n          if (val !== fieldValues[fld]) {\n            fieldValues[fld] = val;\n          } else if (fields[fld].optional) {\n            // turn off radio button\n            btnEl.checked = false;\n            fieldValues[fld] = undefined;\n          }\n        } else {  // checkbox\n          i = fieldValues[fld].indexOf( val);\n          if (i > -1) {  // delete from value list\n            fieldValues[fld].splice(i, 1);\n          } else {  // add to value list\n            fieldValues[fld].push( val);\n          }\n        }\n      });\n    }\n    return containerEl;\n  }\n  /**\n   * Create a selection list\n   * @method\n   */\n  function createSelectionList( fld) {\n    var choiceItems = [],\n        selEl = document.createElement(\"select\"),\n        lblEl = document.createElement(\"label\"),\n        range  = fields[fld].range;\n    lblEl.textContent = fields[fld].label;\n    lblEl.appendChild( selEl);\n    selEl.setAttribute(\"data-bind\", fld);\n    // store data binding assignment of UI element to view field\n    dataBinding[fld] = selEl;\n    // if maxCard is defined, make a multi-selection list\n    if (fields[fld].maxCard) selEl.multiple = \"multiple\";\n    if (range instanceof eNUMERATION) {\n      choiceItems = range.labels;\n    } else if (Array.isArray(range)) {  // range is an ad-hoc enumeration\n      choiceItems = range;\n    } else {  // range is an entity type\n      choiceItems = Object.keys( range.instances);\n    }\n    dom.fillSelectWithOptionsFromArrayList( selEl, choiceItems);\n    selEl.addEventListener(\"change\", function () {\n      // UI element to model property data binding (top-down)\n      if (selEl.value !== \"\") {\n        if (oBJECTvIEW.isIntegerType( range)) {\n          fieldValues[fld] = parseInt( selEl.value);\n          // increment by 1 for enumerations\n          if (range instanceof eNUMERATION) fieldValues[fld]++;\n        } else if (fields[fld].range === \"Date\") {\n          fieldValues[fld] = new Date( selEl.value);\n        } else {\n          fieldValues[fld] = selEl.value;\n        }\n      }\n    });\n    return lblEl;\n  }\n  /**\n   * Create UI elements for view fields\n   * depends on: fieldOrder\n   * @method\n   */\n  function createUiElemsForVmFields() {\n    //============= Inner Function ==============================\n    function createUiElemForVmField (containerEl, fld) {\n      var range = fields[fld].range,\n          isEnum = range instanceof eNUMERATION,\n          isArr = Array.isArray( range);\n      if (isEnum || isArr) {  // (ad-hoc) enumeration\n        if (isEnum && range.MAX <= oBJECTvIEW.maxCardButtonGroup ||\n            isArr && range.length <= oBJECTvIEW.maxCardButtonGroup) {\n          containerEl.appendChild( createChoiceButtonGroup( fld));\n          if (!containerEl.className) containerEl.className = \"choice\";\n        } else {\n          if (!containerEl.className) containerEl.className = \"select\";\n          containerEl.appendChild( createSelectionList( fld));\n        }\n      } else if (range === \"Boolean\") {\n        if (!containerEl.className) containerEl.className = \"yes-no-field\";\n        containerEl.appendChild( createLabeledYesNoField( fld));\n      } else {  // string/numeric property field\n        if (!containerEl.className) containerEl.className = \"I-O-field\";\n        containerEl.appendChild( createLabeledTextField( fld));\n      }\n      if (fields[fld].dependsOn) {\n        if (fieldValues[fields[fld].dependsOn]) containerEl.style.display = \"block\";\n        else containerEl.style.display = \"none\";\n        dataBinding[fields[fld].dependsOn].addEventListener(\"change\", function () {\n          // toggle CSS style.display of containerEl\n          containerEl.style.display = (containerEl.style.display === \"none\") ? \"block\" : \"none\";\n        });\n      }\n    }\n    //=========================================================\n    fieldOrder.forEach( function (fldOrdEl) {\n      var containerEl = document.createElement(\"div\");\n      if (!Array.isArray( fldOrdEl)) {  // single field\n        createUiElemForVmField( containerEl, fldOrdEl);\n      } else {  // field group\n        containerEl.className = \"field-group\";\n        fldOrdEl.forEach( function (fld) {\n          createUiElemForVmField( containerEl, fld);\n        });\n      }\n      uiContainerEl.appendChild( containerEl);\n    });\n  }\n  /**\n   * Create UI elements (like buttons) for all user actions of the view\n   * depends on: fieldOrder\n   * @method\n   */\n  function createUiElemsForUserActions( parentEl) {\n    var containerEl = dom.createElement(\"div\", {\n      classValues:\"action-group\"\n    });\n    Object.keys( userActions).forEach( function (usrAct) {\n      containerEl.appendChild( dom.createButton({\n        name: usrAct,\n        label: userActions[usrAct].label || util.capitalizeFirstChar( usrAct),\n        handler: userActions[usrAct]\n      }));\n      parentEl.appendChild( containerEl);\n    });\n  }\n  /* ====================================================================\n     M A I N\n     ==================================================================== */\n  if (!fieldValues) fieldValues = viewModel.fieldValues = {};\n  Object.keys( outFields).forEach( function (fld) {\n    outFields[fld].inputOutputMode = \"O\";\n  });\n  fields = util.mergeObjects( outFields, inFields);\n  uiContainerEl = dom.createElement(\"form\");\n  if (viewModel.formID) uiContainerEl.id = viewModel.formID;\n  if (viewModel.title) {\n    uiContainerEl.appendChild( dom.createElement(\"h1\", {content:viewModel.title}));\n  }\n  // store the view model's DOM element\n  viewModel.domElem = uiContainerEl;\n  /*\n  // reset custom validity\n  for (i=0; i < uiContainerEl.elements.length; i++) {\n    uiContainerEl.elements[i].setCustomValidity(\"\");\n  }\n  uiContainerEl.reset();\n  */\n  // create UI elements for all view fields\n  createUiElemsForVmFields();\n  // create actionable UI elements (like buttons) for all user actions of the view model\n  createUiElemsForUserActions( uiContainerEl);\n  // store the view model's data binding (map field names to corresponding DOM elements)\n  viewModel.dataBinding = dataBinding;\n  return uiContainerEl;\n};\n\n\n'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n\n/**\n * @fileOverview  This file contains the definition of the library class\n * sTORAGEmANAGER.\n * @author Gerd Wagner\n * @copyright Copyright 2015 Gerd Wagner, Chair of Internet Technology,\n *   Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n */\n/**\n * Library class providing storage management methods for a number of predefined\n * storage adapters\n *\n * @constructor\n * @this {sTORAGEmANAGER}\n * @param storageAdapter: object\n */\nfunction sTORAGEmANAGER( storageAdapter) {\n  if (typeof storageAdapter !== 'object' ||\n      typeof storageAdapter.name !== \"string\" ||\n      !([\"LocalStorage\",\"IndexedDB\",\"MariaDB\"].includes( storageAdapter.name))) {\n    throw new ConstraintViolation(\"Invalid storage adapter name!\");\n  } else if (!storageAdapter.dbName) {\n    throw new ConstraintViolation(\"Storage adapter: missing DB name!\");\n  } else {\n    this.adapter = storageAdapter;\n    // if \"LocalStorage\", create a main memory DB\n    if (storageAdapter.name === \"LocalStorage\") {\n      Object.keys( cLASS).forEach( function (key) {\n        // load all cLASSes\n        if (cLASS[key].instances) {\n          sTORAGEmANAGER.adapters[\"LocalStorage\"].retrieveLsTable( cLASS[key]);\n        }\n      });\n    }\n  }\n  // copy storage adapter to the corresponding adapter's storage management method library\n  sTORAGEmANAGER.adapters[this.adapter.name].currentAdapter = storageAdapter;\n}\n/**\n * Generic method for creating an empty DB\n * @method\n */\nsTORAGEmANAGER.prototype.createEmptyDb = function (classes) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName;\n  return new Promise( function (resolve) {\n    var modelClasses=[];\n    if (Array.isArray( classes) && classes.length > 0) {\n      modelClasses = classes;\n    } else {\n      Object.keys( cLASS).forEach( function (key) {\n        // test if cLASS[key] represents a cLASS\n        if (typeof cLASS[key] === \"function\" && cLASS[key].properties) {\n          // collect all non-abstract cLASSes that are not datatype classes\n          if (!cLASS[key].isAbstract && !cLASS[key].isComplexDatatype) {\n            modelClasses.push( cLASS[key]);\n          }\n        }\n      });\n    }\n    sTORAGEmANAGER.adapters[adapterName].createEmptyDb( dbName, modelClasses)\n    .then( resolve);\n  });\n};\n/**\n * Generic method for creating and \"persisting\" new model objects\n * @method\n * @param {object} mClass  The model cLASS concerned\n * @param {object} rec  A record or record list\n */\nsTORAGEmANAGER.prototype.add = function (mClass, rec) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName,\n      createLog = this.createLog,\n      checkConstraints = this.validateBeforeSave,\n      records=[], validRecords=[];\n  if (typeof rec === \"object\" && !Array.isArray(rec)) {\n    records = [rec];\n  } else if (Array.isArray(rec) && rec.every( function (r) {\n             return typeof r === \"object\" && !Array.isArray(r)})) {\n    records = rec;\n  } else throw Error(\"2nd argument of 'add' must be a record or record list!\");\n  // create auto-IDs if required\n  if (mClass.properties.id && mClass.properties.id.range === \"AutoNumber\") {\n    records.forEach( function (r) {\n      if (!r.id) {  // do not overwrite assigned ID values\n        if (typeof mClass.getAutoId === \"function\") r.id = mClass.getAutoId();\n        else if (mClass.idCounter !== undefined) r.id = ++mClass.idCounter;\n      }\n    })\n  }\n  // check constraints before save if required\n  if (checkConstraints) {\n    records.forEach( function (r) {\n      var newObj=null;\n      if (r instanceof mClass) {\n        validRecords.push( r);\n      } else {\n        try {newObj = new mClass( r);}  // check constraints\n        catch (e) {\n          if (e instanceof ConstraintViolation) {\n            console.log( e.constructor.name +\": \"+ e.message);\n          } else console.log( e);\n        }\n        if (newObj) validRecords.push( newObj);\n      }\n    });\n    records = validRecords;\n  }\n  return new Promise( function (resolve) {\n    sTORAGEmANAGER.adapters[adapterName].add( dbName, mClass, records).then( function () {\n      if (createLog) console.log( records.length +\" \"+ mClass.Name +\"(s) added.\");\n      if (typeof resolve === \"function\") resolve();\n    }).catch( function (error) {\n      console.log( error.name +\": \"+ error.message);\n    });\n  });\n};\n/**\n * Generic method for loading/retrieving a model object\n * @method\n * @param {object} mc  The model cLASS concerned\n * @param {string|number} id  The object ID value\n */\nsTORAGEmANAGER.prototype.retrieve = function (mc, id) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName;\n  return new Promise( function (resolve) {\n    sTORAGEmANAGER.adapters[adapterName].retrieve( dbName, mc, id)\n    .then( function (obj) {\n      if (!obj) {\n        obj = null;\n        console.log(\"There is no \" + mc.Name + \" with ID value \" + id + \" in the database!\");\n      }\n      resolve( obj);\n    });\n  });\n};\n/**\n * Generic method for loading all table rows and converting them\n * to model objects\n *\n * @method\n * @param {object} mc  The model cLASS concerned\n */\nsTORAGEmANAGER.prototype.retrieveAll = function (mc) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName,\n      createLog = this.createLog,\n      validateAfterRetrieve = this.validateAfterRetrieve;\n  return new Promise( function (resolve) {\n    sTORAGEmANAGER.adapters[adapterName].retrieveAll( dbName, mc)\n    .then( function (records) {\n      var i=0, newObj=null;\n      if (createLog) {\n        console.log( records.length +\" \"+ mc.Name +\" records retrieved.\")\n      }\n      if (validateAfterRetrieve) {\n        for (i=0; i < records.length; i++) {\n          try {\n            newObj = new mc( records[i]);\n          } catch (e) {\n            if (e instanceof ConstraintViolation) {\n              console.log( e.constructor.name +\": \"+ e.message);\n            } else console.log( e.name +\": \"+ e.message);\n          }\n        }\n      }\n      resolve( records);\n    })\n  });\n};\n/**\n * Generic method for updating model objects\n * @method\n * @param {object} mc  The model cLASS concerned\n * @param {string|number} id  The object ID value\n * @param {object} slots  The object's update slots\n */\nsTORAGEmANAGER.prototype.update = function (mc, id, slots) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName, \n      currentSM = this;\n  return new Promise( function (resolve) {\n    var objectBeforeUpdate = null, properties = mc.properties,\n        updatedProperties=[], noConstraintViolated = true,\n        updSlots = util.cloneObject( slots);\n    // first check if object exists\n    currentSM.retrieve( mc, id).then( function (objToUpdate) {\n      if (objToUpdate) {\n        if (typeof objToUpdate === \"object\" && objToUpdate.constructor !== mc) {\n          // if the retrieved objToUpdate is not of type mc, check integrity constraints\n          objToUpdate = mc.createObjectFromRecord( objToUpdate);\n          if (!objToUpdate) return;  // constraint violation\n        }\n        objectBeforeUpdate = util.cloneObject( objToUpdate);\n        try {\n          Object.keys( slots).forEach( function (prop) {\n            var oldVal = objToUpdate[prop],\n                newVal = slots[prop],\n                propDecl = properties[prop];\n            if (prop !== \"id\") {\n              if (propDecl.maxCard === undefined || propDecl.maxCard === 1) {  // single-valued\n                if (Number.isInteger( oldVal) && newVal !== \"\") {\n                  newVal = parseInt( newVal);\n                } else if (typeof oldVal === \"number\" && newVal !== \"\") {\n                  newVal = parseFloat( newVal);\n                } else if (oldVal===undefined && newVal===\"\") {\n                  newVal = undefined;\n                }\n                if (newVal !== oldVal) {\n                  updatedProperties.push( prop);\n                  objToUpdate.set( prop, newVal);  // also checking constraints\n                } else {\n                  delete updSlots[prop];\n                }\n              } else {   // multi-valued\n                if (oldVal.length !== newVal.length ||\n                    oldVal.some( function (vi,i) { return (vi !== newVal[i]);})) {\n                  objToUpdate.set(prop, newVal);\n                  updatedProperties.push(prop);\n                } else {\n                  delete updSlots[prop];\n                }\n              }\n            }\n          });\n        } catch (e) {\n          console.log( e.constructor.name +\": \"+ e.message);\n          noConstraintViolated = false;\n          // restore object to its state before updating\n          objToUpdate = objectBeforeUpdate;\n        }\n        if (noConstraintViolated) {\n          if (updatedProperties.length > 0) {\n            sTORAGEmANAGER.adapters[adapterName].update( dbName, mc, id, slots, updSlots)\n            .then( function () {\n              console.log(\"Properties \"+ updatedProperties.toString() +\n                  \" of \"+ mc.Name +\" \"+ id +\" updated.\");\n              if (typeof resolve === \"function\") resolve();\n            });\n          } else {\n            console.log(\"No property value changed for \"+ mc.Name +\" \"+ id +\"!\");\n          }\n        }\n      }\n    });\n  });\n};\n/**\n * Generic method for deleting model objects\n * @method\n * @param {object} mc  The model cLASS concerned\n * @param {string|number} id  The object ID value\n */\nsTORAGEmANAGER.prototype.destroy = function (mc, id) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName,\n      currentSM = this;\n  return new Promise( function (resolve) {\n    currentSM.retrieve( mc, id).then( function (record) {\n      if (record) {\n        sTORAGEmANAGER.adapters[adapterName].destroy( dbName, mc, id)\n        .then( function () {\n          console.log( mc.Name +\" \"+ id +\" deleted.\");\n          if (typeof resolve === \"function\") resolve();\n        });\n      } else {\n        console.log(\"There is no \"+ mc.Name +\" with ID value \"+ id +\" in the database!\");\n      }\n    });\n  });\n};\n/**\n * Generic method for clearing the DB table, or object store, of a cLASS\n * @method\n */\nsTORAGEmANAGER.prototype.clearTable = function (mc) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName;\n  return new Promise( function (resolve) {\n    sTORAGEmANAGER.adapters[adapterName].clearTable( dbName, mc)\n    .then( resolve);\n  });\n};\n/**\n * Generic method for clearing the DB of an app\n * @method\n */\nsTORAGEmANAGER.prototype.clearDB = function () {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName;\n  return new Promise( function (resolve) {\n    if ((typeof confirm === \"function\" &&\n        confirm(\"Do you really want to delete all data?\")) ||\n        typeof confirm !== \"function\") {\n      sTORAGEmANAGER.adapters[adapterName].clearDB( dbName)\n      .then( resolve);\n    }\n  });\n};\n/**\n * Generic method for storing unsaved data on page unload\n * @method\n */\nsTORAGEmANAGER.prototype.saveOnUnload = function () {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName;\n  sTORAGEmANAGER.adapters[adapterName].saveOnUnload( dbName);\n};\n\nsTORAGEmANAGER.adapters = {};\n\n\n/*****************************************************************************\n * Storage management methods for the \"LocalStorage\" adapter\n * Only in the case of \"LocalStorage\", due to its non-concurrent architecture,\n * the entire data is loaded into a kind of main memory DB, which is saved\n * back to LocalStorage on page unload.\n ****************************************************************************/\nsTORAGEmANAGER.adapters[\"LocalStorage\"] = {\n  //-----------------------------------------------------------------\n  createEmptyDb: function (dbName, modelClasses) {\n  //-----------------------------------------------------------------\n    // nothing to do\n    return new Promise( function (resolve) {\n      resolve();\n    });\n  },\n  //------------------------------------------------\n  add: function (dbName, mc, records) {  // does not access localStorage\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var newObj=null;\n      if (!Array.isArray( records)) {  // single record insertion\n        records = [records];\n      }\n      records.forEach( function (rec) {\n        newObj = new mc( rec);\n        mc.instances[newObj.id] = newObj;\n      })\n      resolve( newObj);\n    });\n  },\n  //------------------------------------------------\n  retrieve: function (dbName, mc, id) {  // does not access localStorage\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      resolve( mc.instances[id]);\n    });\n  },\n  //-------------------------------------------------------------\n  // *** A LocalStorage-specific, and not an interface method ***\n  //-------------------------------------------------------------\n  retrieveLsTable: function (mc) {\n  //-------------------------------------------------------------\n    var key=\"\", keys=[], i=0,\n        tableString=\"\", table={},\n        tableName = util.class2TableName( mc.Name);\n    try {\n      if (localStorage[tableName]) {\n        tableString = localStorage[tableName];\n      }\n    } catch (e) {\n      console.log( \"Error when reading from Local Storage\\n\" + e);\n    }\n    if (tableString) {\n      table = JSON.parse( tableString);\n      keys = Object.keys( table);\n      console.log( keys.length + \" \" + mc.Name + \" records loaded.\");\n      for (i=0; i < keys.length; i++) {\n        key = keys[i];\n        mc.instances[key] = mc.createObjectFromRecord( table[key]);\n      }\n    }\n  },\n  //------------------------------------------------\n  retrieveAll: function (dbName, mc) {\n    //------------------------------------------------\n    var  currentSM = this;\n    return new Promise( function (resolve) {\n      var records=[];\n      /* OLD\n      function retrieveAll (mc) {\n        var key = \"\", keys = [], i = 0,\n            tableString = \"\", table={},\n            tableName = util.class2TableName( mc.Name);\n        // do no retrieve the same class population twice\n        if (Object.keys( mc.instances).length > 0) return;\n        // first retrieve the population of the classes that are ranges of reference properties\n        Object.keys( mc.properties).forEach( function (p) {\n          var range = mc.properties[p].range;\n          if (range instanceof cLASS) retrieveAll( range);\n        });\n        currentSM.retrieveTable( mc);      }\n      retrieveAll( mc);\n      */\n      // convert entity map mc.instances to an array list\n      records = Object.keys( mc.instances).map( function (key) {return mc.instances[key];});\n      resolve( records);\n    });\n  },\n  //------------------------------------------------\n  update: function (dbName, mc, id, slots) {  // does not access localStorage\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      // in-memory object has already been updated in the generic update\n      /*\n      Object.keys( slots).forEach( function (prop) {\n        obj = mc.instances[id];\n        obj[prop] = slots[prop];\n      });\n      */\n      resolve();\n    });\n  },\n  //------------------------------------------------\n  destroy: function (dbName, mc, id) {  // does not access localStorage\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      delete mc.instances[id];\n      resolve();\n    });\n  },\n  //------------------------------------------------\n  clearTable: function (dbName, mc) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      mc.instances = {};\n      try {\n        localStorage[tableName] = JSON.stringify({});\n        console.log(\"Table \"+ tableName +\" cleared.\");\n      } catch (e) {\n        console.log(\"Error when writing to Local Storage\\n\" + e);\n      }\n      resolve();\n    });\n  },\n  //------------------------------------------------\n  clearDB: function () {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      Object.keys( cLASS).forEach( function (key) {\n        var tableName=\"\";\n        if (!cLASS[key].isComplexDatatype && Object.keys( cLASS[key].instances).length > 0) {\n          cLASS[key].instances = {};\n          tableName = mc.tableName || util.class2TableName( cLASS[key].Name);\n          try {\n            localStorage[tableName] = JSON.stringify({});\n          } catch (e) {\n            console.log(\"Error when writing to Local Storage\\n\" + e);\n          }\n        }\n      });\n      resolve();\n    });\n  },\n  //------------------------------------------------\n  saveOnUnload: function () {\n  //------------------------------------------------\n    Object.keys( cLASS).forEach( function (key) {\n      var id=\"\", table={}, obj=null, i=0, mc=null,\n          keys=[], tableName=\"\";\n      if (cLASS[key].instances) {\n        mc = cLASS[key];\n        keys = Object.keys( mc.instances)\n        tableName = util.class2TableName( mc.Name);\n        for (i=0; i < keys.length; i++) {\n          id = keys[i];\n          obj = mc.instances[id];\n          table[id] = obj.toRecord();\n        }\n        try {\n          localStorage[tableName] = JSON.stringify( table);\n          console.log( keys.length +\" \"+ mc.Name +\" records saved.\");\n        } catch (e) {\n          console.log(\"Error when writing to Local Storage\\n\" + e);\n        }\n      }\n    });\n  }\n};\n/**\n * @fileOverview  Storage management methods for the \"IndexedDB\" adapter\n * @author Gerd Wagner\n * @copyright Copyright 2017 Gerd Wagner, Chair of Internet Technology,\n *   Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n */\nsTORAGEmANAGER.adapters[\"IndexedDB\"] = {\n  //------------------------------------------------\n  createEmptyDb: function (dbName, modelClasses) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      idb.open( dbName, 1, function (upgradeDb) {\n        modelClasses.forEach( function (mc) {\n          var tableName = mc.tableName || util.class2TableName( mc.Name),\n              keyPath = mc.primaryKey || \"id\";\n          if (!upgradeDb.objectStoreNames.contains( tableName)) {\n            upgradeDb.createObjectStore( tableName, {keyPath: keyPath});\n          }\n        })\n      }).then( resolve);\n    });\n  },\n  //------------------------------------------------\n  add: function (dbName, mc, records) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readwrite\");\n        var os = tx.objectStore( tableName);\n        // Promise.all takes a list of promises and resolves if all of them do\n        return Promise.all( records.map( function (rec) {return os.add( rec);}))\n            .then( function () {return tx.complete;});\n      }).then( resolve)\n      .catch( function (err) {\n        console.log( err.name +\": \"+ err.message +\"Table: \"+ tableName);}\n      );\n    });\n  },\n  //------------------------------------------------\n  retrieve: function (dbName, mc, id) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readonly\");\n        var os = tx.objectStore( tableName);\n        return os.get( id);\n      }).then( function( result) {\n        if (result === undefined) result = null;\n        resolve( result);\n      }).catch( function (err) {console.log( err.name +\": \"+ err.message);});\n    });\n  },\n  //------------------------------------------------\n  retrieveAll: function (dbName, mc) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readonly\");\n        var os = tx.objectStore( tableName);\n        return os.getAll();\n      }).then( function (results) {\n        if (results === undefined) results = [];\n        resolve( results);\n      }).catch( function (err) {console.log( err.name +\": \"+ err.message);});\n    });\n  },\n  //------------------------------------------------\n  update: function (dbName, mc, id, slots) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readwrite\");\n        var os = tx.objectStore( tableName);\n        slots[\"id\"] = id;\n        os.put( slots);\n        return tx.complete;\n      }).then( resolve)\n      .catch( function (err) {\n        console.log( err.name +\": \"+ err.message +\"Table: \"+ tableName);}\n      );\n    });\n  },\n  //------------------------------------------------\n  destroy: function (dbName, mc, id) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readwrite\");\n        var os = tx.objectStore( tableName);\n        os.delete( id);\n        return tx.complete;\n      }).then( resolve)\n      .catch( function (err) {console.log( err.name +\": \"+ err.message);});\n    });\n  },\n  //------------------------------------------------\n  clearTable: function (dbName, mc) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readwrite\");\n        var os = tx.objectStore( tableName);\n        os.clear();\n        return tx.complete;\n      }).then( resolve)\n      .catch( function (err) {console.log( err.name +\": \"+ err.message);});\n    });\n  },\n  //------------------------------------------------\n  clearDB: function (dbName) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( idbCx.objectStoreNames, \"readwrite\");\n        // Promise.all takes a list of promises and resolves if all of them do\n        return Promise.all( Array.from( idbCx.objectStoreNames,\n            function (osName) {return tx.objectStore( osName).clear();}))\n            .then( function () {return tx.complete;});\n      }).then( resolve)\n      .catch( function (err) {console.log( err.name +\": \"+ err.message);});\n    });\n  },\n  //------------------------------------------------\n  saveOnUnload: function (dbName) {  // not yet implemented\n  //------------------------------------------------\n  }\n};\n /**\n * @fileOverview  A library of DOM element creation methods and \n * other DOM manipulation methods.\n * \n * @author Gerd Wagner\n */\n /**\n  * Create a progress bar\n  * @param {string} title\n  * @return {object}  an element object\n  */\n dom.createProgressBar = function (title, initialProgress) {\n   var progressContainer = document.createElement(\"div\"),\n       progress = document.createElement(\"progress\"),\n       progressTitle = document.createElement(\"h1\"),\n       progressInfo = document.createElement(\"p\");\n   progress.max = 100;  // for 100%\n   progress.value = initialProgress || 10;  // initial value, 10% by default\n   progressTitle.textContent = title;\n   progressContainer.id = \"progress-container\";\n   progressContainer.appendChild( progressTitle);\n   progressContainer.appendChild( progress);\n   progressContainer.appendChild( progressInfo);\n   return progressContainer\n };\n /**\n  * Create an expandable UI panel\n  * @param {object} slots\n  * @return {object} uiPanelEl  element object\n  */\n dom.createExpandablePanel = function (slots) {\n   var uiPanelEl = dom.createElement(\"div\", slots),\n       contentEl = dom.createElement(\"div\", {classValues:\"xpanel-content\"}),\n       expandButtonEl = dom.createElement(\"button\", {content:\"+\"});\n   uiPanelEl.classList.add(\"expandablePanel\");\n   uiPanelEl.appendChild( dom.createElement(\"h2\", {\n     content:\"<span>\"+ slots.heading +\"</span>\",\n     title: slots.hint\n   }));\n   uiPanelEl.appendChild( contentEl);\n   uiPanelEl.firstElementChild.insertBefore(\n       expandButtonEl, uiPanelEl.firstElementChild.firstElementChild);\n   expandButtonEl.addEventListener(\"click\", function (e) {\n     // toggle display of main content\n     if (contentEl.style.display !== \"none\") {\n       contentEl.style.display = \"none\";\n       e.target.textContent = \"+\";  // or \"►\" = \"&#9654;\"\n     }\n     else {\n       contentEl.style.display = \"block\";\n       e.target.textContent = \"−\";  // = \"&minus;\" or \"▼\"\n     }\n     e.preventDefault();\n   });\n   uiPanelEl.style.overflowX = \"auto\";  // horizontal scrolling\n   contentEl.style.display = \"none\";\n   return uiPanelEl;\n };\n /**\n  * Create a Modal Window/Panel\n  *\n  * @param {object} slots\n  * @return {object} uiPanelEl  element object\n  */\n dom.createModal = function (slots) {\n   var modalEl = dom.createElement(\"div\", {classValues:\"modal\"}),\n       el = document.getElementById(\"overlay\"),\n       overlayEl = el ? el : dom.createElement(\"div\", {id:\"overlay\"}),\n       h1El=null;\n   if (slots.id) modalEl.id = slots.id;\n   if (slots.classValues) modalEl.className += \" \"+ slots.classValues;\n   if (slots.width) modalEl.style.width = slots.width;\n   if (!slots.title) slots.title = \"No Title?\";\n   h1El = dom.createElement(\"h1\", {content: \"<span class='title'>\"+ slots.title +\"</span>\"});\n     //  \"</span><span class='closeButton'>&times;</span>\"});\n   if (!slots.classValues || !slots.classValues.includes(\"action-required\")) {\n     el = dom.createElement(\"span\", {classValues:\"closeButton\", content:\"&times;\"});\n     el.addEventListener(\"click\", function () {\n       overlayEl.style.display = \"none\";\n       modalEl.style.display = \"none\";\n     });\n     h1El.appendChild( el);\n   }\n   modalEl.appendChild( h1El);\n   if (slots.fromElem) {\n     modalEl.appendChild( slots.fromElem);\n     slots.fromElem.classList.add(\"modal-body\");\n   } else {\n     el = dom.createElement(\"div\", {classValues:\"modal-body\"});\n     if (slots.textContent) el.textContent = slots.textContent;\n     modalEl.appendChild( el);\n   }\n   overlayEl.appendChild( modalEl);\n   document.body.appendChild( overlayEl);\n   return modalEl;\n };\n /**\n  * Create a Draggable Modal Window/Panel\n  *\n  * @param {object} slots\n  * @return {object} uiPanelEl  element object\n  */\n dom.createDraggableModal = function (slots) {\n   var modalEl = dom.createModal( slots),\n       overlayEl = document.getElementById(\"overlay\");\n   // make the element draggable\n   modalEl.draggable = true;\n   if (!modalEl.id) modalEl.id = \"dragMod\";\n   modalEl.addEventListener(\"dragstart\", dom.handleDragStart);\n   overlayEl.addEventListener(\"dragover\", dom.handleDragOver);\n   overlayEl.addEventListener(\"drop\", dom.handleDrop);\n   return modalEl;\n };\n dom.handleDragStart = function (evt) {\n   evt.dataTransfer.dropEffect = 'move';\n   evt.dataTransfer.setData(\"text/plain\", evt.target.id);\n };\n dom.handleDragOver = function (evt) {\n   // allow dropping by preventing the default behavior\n   evt.preventDefault();\n };\n dom.handleDrop = function (evt) {\n   var elId = evt.dataTransfer.getData(\"text/plain\"),\n       el = document.getElementById( elId),\n       x = evt.clientX, y = evt.clientY;\n   evt.preventDefault();\n   el.style.position = \"absolute\";\n   el.style.left = x +\"px\";\n   el.style.top = y +\"px\";\n };\n /**\n  * Convert HTML to Text\n  * @param {string} htmlElemContent\n  * @return {string}\n  */\n dom.convertHtml2Text = function (htmlElemContent) {\n   var blockElem = document.createElement(\"div\");\n   blockElem.innerHTML = htmlElemContent;\n   return blockElem.textContent;\n };\n\n/**\n* SVG library\n* @author Gerd Wagner\n*/\nvar svg = {\n  NS: \"http://www.w3.org/2000/svg\",  // namespace\n  XLINK_NS: \"http://www.w3.org/1999/xlink\",\n  /**\n  * Create an SVG element\n  * \n  * @param {object} params  a lsit of optional parameters\n  * @return {node} svgElement\n  */\n  createSVG: function (params) {\n    var el = document.createElementNS( svg.NS,\"svg\");\n    el.setAttribute(\"version\", \"1.1\");\n    if (params.id) el.id = params.id;\n    if (params.class) el.class = params.class;\n    if (params.width) el.setAttribute(\"width\", params.width);\n    if (params.height) el.setAttribute(\"height\", params.height);\n    if (params.viewBox) el.setAttribute(\"viewBox\", params.viewBox);\n    return el;\n  },\n  createDefs: function () {\n    return document.createElementNS( svg.NS,\"defs\");\n  },\n  setOptionalAttr: function (el, optParams) {\n    if (optParams === undefined) optParams = {};\n    if (optParams.id) el.id = optParams.id;\n    if (optParams.class) el.class = optParams.class;\n    el.setAttribute(\"stroke\", optParams.stroke || \"black\");\n    el.setAttribute(\"stroke-width\", optParams.strokeWidth || \"1\");\n    el.setAttribute(\"fill\", optParams.fill || \"white\");\n  },\n  /**\n  * Create a rect element\n  * \n  * @param {number} x \n  * @param {number} y \n  * @param {number} width \n  * @param {number} height \n  * @param {object} optParams \n  *\n  * @return (object)\n  */\n  createRect: function (x, y, width, height, optParams) {\n    var el = document.createElementNS( svg.NS,\"rect\");\n    el.setAttribute(\"x\", x);\n    el.setAttribute(\"y\", y);\n    el.setAttribute(\"width\", width);\n    el.setAttribute(\"height\", height);\n    svg.setOptionalAttr( el, optParams);\n    return el;\n  },\n  /**\n  * Create a circle element\n  * \n  * @param {number} x \n  * @param {number} y \n  * @param {number} width \n  * @param {number} height \n  * @param {string} color \n  *\n  * @return (object)\n  */\n  createCircle: function ( cx, cy, r, optParams) {\n    var el = document.createElementNS( svg.NS,\"circle\");\n    el.setAttribute(\"cx\", cx);\n    el.setAttribute(\"cy\", cy);\n    el.setAttribute(\"r\", r);\n    svg.setOptionalAttr( el, optParams);\n    return el;\n  },\n  /**\n   * Create a line element \n   * \n   * @param {number} x1 \n   * @param {number} y1 \n   * @param {number} x2 \n   * @param {number} y2 \n   * @param {string} color  the stroke color\n   * @param {number} width \n   * @return {object}\n   */\n  createLine: function (x1, y1, x2, y2, optParams) {\n    var el = document.createElementNS( svg.NS,\"line\");\n    el.setAttribute(\"x1\", x1);\n    el.setAttribute(\"y1\", y1);\n    el.setAttribute(\"x2\", x2);\n    el.setAttribute(\"y2\", y2);\n    svg.setOptionalAttr( el, optParams);\n    return el;\n  },\n  /**\n   * Create a path element\n   * \n   * @param {number} d  the path description\n   * @param {string} color  the stroke color\n   * @param {number} width  the stroke width\n   * @return {object}\n   */\n  createPath: function (d, optParams) {\n    var el = document.createElementNS( svg.NS,\"path\");\n    el.setAttribute(\"d\", d);\n    svg.setOptionalAttr( el, optParams);\n    return el;\n  },\n  /**\n  * Create a group element\n  * \n  * @return gNode\n  */\n  createGroup: function (optParams) {\n    var el = document.createElementNS( svg.NS,\"g\");\n    svg.setOptionalAttr( el, optParams);\n    return el;\n  },\n  /**\n  * Function created for the node Text\n  * @param {number} x start position\n  * @param {number} y start position\n  * @param {string} name the content of the node\n  * @param {number} fontSize of the content\n  * @param {string} color of the content\n  * \n  * @return text object\n  */\n  createText: function ( x, y, txt, style) {\n    var el = document.createElementNS( svg.NS,\"text\");\n    el.textContent = txt;\n    el.setAttribute(\"x\", x);\n    el.setAttribute(\"y\", y);\n    if (style) el.style = style;  // el.setAttribute(\"style\", style);\n    return el;\n  },\n  createShape: function (shape, shapeAttributes, style, obj) {\n    var el = document.createElementNS( svg.NS, shape);\n    Object.keys( shapeAttributes).forEach( function (attrName) {\n      var val;\n      if (typeof shapeAttributes[attrName] === \"function\") {\n        val = shapeAttributes[attrName](obj);\n      } else val = shapeAttributes[attrName];\n      el.setAttribute( attrName, val);\n    })\n    if (style) el.setAttribute(\"style\", style);\n    return el;\n  },\n  createShapeFromDefRec: function (shDefRec, obj) {\n    var el = document.createElementNS( svg.NS, shDefRec.shapeName),\n        shAttribs = shDefRec.shapeAttributes;\n    Object.keys( shAttribs).forEach( function (attrName) {\n      var val;\n      if (typeof shAttribs[attrName] === \"function\") {\n        val = shAttribs[attrName](obj);\n      } else val = shAttribs[attrName];\n      switch (attrName) {\n      case \"textContent\":\n        el.textContent = val;\n        break;\n      case \"file\":\n        el.setAttributeNS( svg.XLINK_NS, \"href\", val);\n        break;\n      default:\n        el.setAttribute( attrName, val);\n        break;\n      }\n    })\n    if (shDefRec.style) el.setAttribute(\"style\", shDefRec.style);\n    return el;\n  },\n  createImageFillPattern: function (id, file, optParams) {\n    var patEl = document.createElementNS( svg.NS,\"pattern\"),\n        imgEl = document.createElementNS( svg.NS,\"image\");\n    if (!optParams) optParams = {};\n    imgEl.setAttributeNS( svg.XLINK_NS, \"href\", file);\n    imgEl.setAttribute(\"width\", optParams.width || 20);\n    imgEl.setAttribute(\"height\", optParams.height || 20);\n    patEl.appendChild( imgEl);\n    patEl.id = id;\n    patEl.setAttribute(\"patternUnits\", \"userSpaceOnUse\");\n    patEl.setAttribute(\"width\", optParams.width || 20);\n    patEl.setAttribute(\"height\", optParams.height || 20);\n    if (optParams.x) patEl.setAttribute(\"x\", optParams.x);\n    if (optParams.y) patEl.setAttribute(\"y\", optParams.y);\n    return patEl;\n  }\n};\n\n\n/**\n * @fileOverview  A port of a C implementation of MT19937, providing a collection of classes\n * and methods used to generate random numbers and random variates. From the Random.js library\n * of SimJS.\n *\n * @copyright Copyright © 1997-2002, Makoto Matsumoto and Takuji Nishimura.\n * @license LGPL\n */\n\n\n/*\n A C-program for MT19937, with initialization improved 2002/1/26.\n Coded by Takuji Nishimura and Makoto Matsumoto.\n\n Before using, initialize the state by using init_genrand(seed)\n or init_by_array(init_key, key_length).\n\n Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\n All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions\n are met:\n\n 1. Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in the\n documentation and/or other materials provided with the distribution.\n\n 3. The names of its contributors may not be used to endorse or promote\n products derived from this software without specific prior written\n permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// default non-seeded random stream based on Math.random\nvar rand = null;\n\n/***\n * The following constructor function definition has been modified\n * Use new Date()).getTime() as seed for getting MT with a randomized seed\n */\nvar Random = function( seed) {\n  if (seed === undefined) {\n    this.random = Math.random;  // use the JS built-in RNG\n  } else {  // use the Mersenne Twister\n    if (!Number.isInteger( seed)) {\n      throw new TypeError(\"Seed value must be an integer\");\n    }\n    /* Period parameters */\n    this.N = 624;\n    this.M = 397;\n    this.MATRIX_A = 0x9908b0df;   /* constant vector a */\n    this.UPPER_MASK = 0x80000000; /* most significant w-r bits */\n    this.LOWER_MASK = 0x7fffffff; /* least significant r bits */\n\n    this.mt = new Array(this.N); /* the array for the state vector */\n    this.mti=this.N+1; /* mti==N+1 means mt[N] is not initialized */\n\n    //this.init_genrand(seed);\n    this.init_by_array([seed], 1);\n  }\n};\n\n/* initializes mt[N] with a seed */\nRandom.prototype.init_genrand = function(s) {\n  this.mt[0] = s >>> 0;\n  for (this.mti=1; this.mti<this.N; this.mti++) {\n    var s = this.mt[this.mti-1] ^ (this.mt[this.mti-1] >>> 30);\n    this.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253)\n        + this.mti;\n    /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\n    /* In the previous versions, MSBs of the seed affect   */\n    /* only MSBs of the array mt[].                        */\n    /* 2002/01/09 modified by Makoto Matsumoto             */\n    this.mt[this.mti] >>>= 0;\n    /* for >32 bit machines */\n  }\n};\n\n/* initialize by an array with array-length */\n/* init_key is the array for initializing keys */\n/* key_length is its length */\n/* slight change for C++, 2004/2/26 */\nRandom.prototype.init_by_array = function(init_key, key_length) {\n  var i, j, k;\n  this.init_genrand(19650218);\n  i=1; j=0;\n  k = (this.N>key_length ? this.N : key_length);\n  for (; k; k--) {\n    var s = this.mt[i-1] ^ (this.mt[i-1] >>> 30);\n    this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525)))\n        + init_key[j] + j; /* non linear */\n    this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\n    i++; j++;\n    if (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }\n    if (j>=key_length) j=0;\n  }\n  for (k=this.N-1; k; k--) {\n    var s = this.mt[i-1] ^ (this.mt[i-1] >>> 30);\n    this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941))\n        - i; /* non linear */\n    this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\n    i++;\n    if (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }\n  }\n\n  this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */\n};\n\n/* generates a random number on [0,0xffffffff]-interval */\nRandom.prototype.genrand_int32 = function() {\n  var y;\n  var mag01 = new Array(0x0, this.MATRIX_A);\n  /* mag01[x] = x * MATRIX_A  for x=0,1 */\n\n  if (this.mti >= this.N) { /* generate N words at one time */\n    var kk;\n\n    if (this.mti == this.N+1)   /* if init_genrand() has not been called, */\n      this.init_genrand(5489); /* a default initial seed is used */\n\n    for (kk=0;kk<this.N-this.M;kk++) {\n      y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);\n      this.mt[kk] = this.mt[kk+this.M] ^ (y >>> 1) ^ mag01[y & 0x1];\n    }\n    for (;kk<this.N-1;kk++) {\n      y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);\n      this.mt[kk] = this.mt[kk+(this.M-this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];\n    }\n    y = (this.mt[this.N-1]&this.UPPER_MASK)|(this.mt[0]&this.LOWER_MASK);\n    this.mt[this.N-1] = this.mt[this.M-1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n    this.mti = 0;\n  }\n\n  y = this.mt[this.mti++];\n\n  /* Tempering */\n  y ^= (y >>> 11);\n  y ^= (y << 7) & 0x9d2c5680;\n  y ^= (y << 15) & 0xefc60000;\n  y ^= (y >>> 18);\n\n  return y >>> 0;\n};\n\n/* generates a random number on [0,0x7fffffff]-interval */\nRandom.prototype.genrand_int31 = function() {\n  return (this.genrand_int32()>>>1);\n};\n\n/* generates a random number on [0,1]-real-interval */\nRandom.prototype.genrand_real1 = function() {\n  return this.genrand_int32()*(1.0/4294967295.0);\n  /* divided by 2^32-1 */\n};\n\n/* generates a random number on [0,1)-real-interval */\nRandom.prototype.random = function() {\n  if (this.pythonCompatibility) {\n    if (this.skip) {\n      this.genrand_int32();\n    }\n    this.skip = true;\n  }\n  return this.genrand_int32()*(1.0/4294967296.0);\n  /* divided by 2^32 */\n};\n\n/* generates a random number on (0,1)-real-interval */\nRandom.prototype.genrand_real3 = function() {\n  return (this.genrand_int32() + 0.5)*(1.0/4294967296.0);\n  /* divided by 2^32 */\n};\n\n/* generates a random number on [0,1) with 53-bit resolution*/\nRandom.prototype.genrand_res53 = function() {\n  var a=this.genrand_int32()>>>5, b=this.genrand_int32()>>>6;\n  return(a*67108864.0+b)*(1.0/9007199254740992.0);\n};\n\n/* These real versions are due to Isaku Wada, 2002/01/09 added */\n\n\n/**************************************************************************/\nRandom.prototype.LOG4 = Math.log(4.0);\nRandom.prototype.SG_MAGICCONST = 1.0 + Math.log(4.5);\n\nRandom.prototype.exponential = function (lambda) {\n  if (arguments.length != 1) {                         // ARG_CHECK\n    throw new SyntaxError(\"exponential() must \"     // ARG_CHECK\n        + \" be called with 'lambda' parameter\"); // ARG_CHECK\n  }                                                   // ARG_CHECK\n  var r = this.random();\n  return -Math.log(r) / lambda;\n};\n\nRandom.prototype.gamma = function (alpha, beta) {\n  if (arguments.length != 2) {                         // ARG_CHECK\n    throw new SyntaxError(\"gamma() must be called\"  // ARG_CHECK\n        + \" with alpha and beta parameters\"); // ARG_CHECK\n  }                                                   // ARG_CHECK\n  /* Based on Python 2.6 source code of random.py.\n   */\n  if (alpha > 1.0) {\n    var ainv = Math.sqrt(2.0 * alpha - 1.0);\n    var bbb = alpha - this.LOG4;\n    var ccc = alpha + ainv;\n    while (true) {\n      var u1 = this.random();\n      if ((u1 < 1e-7) || (u > 0.9999999)) {\n        continue;\n      }\n      var u2 = 1.0 - this.random();\n      var v = Math.log(u1 / (1.0 - u1)) / ainv;\n      var x = alpha * Math.exp(v);\n      var z = u1 * u1 * u2;\n      var r = bbb + ccc * v - x;\n      if ((r + this.SG_MAGICCONST - 4.5 * z >= 0.0) || (r >= Math.log(z))) {\n        return x * beta;\n      }\n    }\n  } else if (alpha == 1.0) {\n    var u = this.random();\n    while (u <= 1e-7) {\n      u = this.random();\n    }\n    return - Math.log(u) * beta;\n  } else {\n    while (true) {\n      var u = this.random();\n      var b = (Math.E + alpha) / Math.E;\n      var p = b * u;\n      if (p <= 1.0) {\n        var x = Math.pow(p, 1.0 / alpha);\n      } else {\n        var x = - Math.log((b - p) / alpha);\n      }\n      var u1 = this.random();\n      if (p > 1.0) {\n        if (u1 <= Math.pow(x, (alpha - 1.0))) {\n          break;\n        }\n      } else if (u1 <= Math.exp(-x)) {\n        break;\n      }\n    }\n    return x * beta;\n  }\n\n};\n\nRandom.prototype.normal = function (mu, sigma) {\n  if (arguments.length != 2) {                          // ARG_CHECK\n    throw new SyntaxError(\"normal() must be called\"  // ARG_CHECK\n        + \" with mu and sigma parameters\");      // ARG_CHECK\n  }                                                    // ARG_CHECK\n  var z = this.lastNormal;\n  this.lastNormal = NaN;\n  if (!z) {\n    var a = this.random() * 2 * Math.PI;\n    var b = Math.sqrt(-2.0 * Math.log(1.0 - this.random()));\n    z = Math.cos(a) * b;\n    this.lastNormal = Math.sin(a) * b;\n  }\n  return mu + z * sigma;\n};\n\nRandom.prototype.pareto = function (alpha) {\n  if (arguments.length != 1) {                         // ARG_CHECK\n    throw new SyntaxError(\"pareto() must be called\" // ARG_CHECK\n        + \" with alpha parameter\");             // ARG_CHECK\n  }                                                   // ARG_CHECK\n  var u = this.random();\n  return 1.0 / Math.pow((1 - u), 1.0 / alpha);\n};\n\nRandom.prototype.weibull = function (alpha, beta) {\n  if (arguments.length != 2) {                         // ARG_CHECK\n    throw new SyntaxError(\"weibull() must be called\" // ARG_CHECK\n        + \" with alpha and beta parameters\");    // ARG_CHECK\n  }                                                   // ARG_CHECK\n  var u = 1.0 - this.random();\n  return alpha * Math.pow(-Math.log(u), 1.0 / beta);\n};\n\nRandom.prototype.triangular = function (lower, upper, mode) {\n  // http://en.wikipedia.org/wiki/Triangular_distribution\n  if (arguments.length != 3) {\n    throw new SyntaxError(\"triangular() must be called\"\n        + \" with 3 parameters (lower, upper and mode)\");\n  }\n  if (!(lower < upper && lower <= mode && mode <= upper)) {\n    throw new SyntaxError(\"The lower, upper and mode parameters \" +\n        \"must satisfy the conditions l < U and l <= m <= u!\");\n  }\n  var c = (mode - lower) / (upper - lower);\n  var u = this.random();\n  if (u <= c) {\n    return lower + Math.sqrt(u * (upper - lower) * (mode - lower));\n  } else {\n    return upper - Math.sqrt((1 - u) * (upper - lower) * (upper - mode));\n  }\n};\n\nRandom.prototype.uniform = function (lower, upper) {\n  if (arguments.length === 1) {\n    throw new SyntaxError(\"uniform(lower, upper) must be called\"\n        + \" 1. with lower and upper parameters [e.g., uniform(lower, upper)] or \"\n        + \" 2. without any parameter [e.g., uniform()]\");\n  } else if (arguments.length >= 2) {\n    return lower + this.random() * (upper - lower);\n  } else {\n    return this.random();\n  }\n};\n/***\n Added by Gerd Wagner (20160921)\n */\nRandom.prototype.uniformInt = function (lower, upper) {\n  if (arguments.length != 2 ||\n      !(Number.isInteger(lower) && Number.isInteger(upper))) {\n    throw new SyntaxError(\"uniformInt() must be called\"\n        + \" with lower and upper integer values!\");\n  }\n  return lower + Math.floor( this.random() * (upper - lower + 1));\n};\n\nRandom.prototype.frequency = function (freqMap) {\n  if (typeof freqMap !== \"object\") {\n    throw new SyntaxError(\"rand.frequency() must be called\"\n        + \" with a frequency map argument!\");\n  }\n  var probabilities = Object.values( freqMap);\n  if (math.sum( probabilities) !== 1 ) {\n    throw new SyntaxError(\"rand.frequency(): rel. frequency values \" +\n        \"do not add up to 1!\");\n  }\n  var cumProb=0;\n  var cumProbs = probabilities.map( function (p) {\n    cumProb += p;\n    return cumProb;\n  });\n  var valueStrings = Object.keys( freqMap);\n  var valuesAreNumeric = !isNaN( parseInt( valueStrings[0]));\n  var randX = this.random(), i=0;\n  for (i=0; i <= cumProbs.length; i++) {\n    if (randX < cumProbs[i]) return valuesAreNumeric ?\n        parseInt( valueStrings[i]) : valueStrings[i];\n  }\n};\n\n/**\n * Shuffles array in place using the Fisher-Yates shuffle algorithm\n * @param {Array} a - An array of items to be shuffled\n */\nRandom.prototype.shuffleArray = function (a) {\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i -= 1) {\n    j = Math.floor( this.random() * (i + 1) );\n    x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n};\n/* PrismJS 1.15.0\nhttps://prismjs.com/download.html#themes=prism&languages=clike+javascript */\nvar _self=\"undefined\"!=typeof window?window:\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},Prism=function(){var e=/\\blang(?:uage)?-([\\w-]+)\\b/i,t=0,n=_self.Prism={manual:_self.Prism&&_self.Prism.manual,disableWorkerMessageHandler:_self.Prism&&_self.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof r?new r(e.type,n.util.encode(e.content),e.alias):\"Array\"===n.util.type(e)?e.map(n.util.encode):e.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/\\u00a0/g,\" \")},type:function(e){return Object.prototype.toString.call(e).match(/\\[object (\\w+)\\]/)[1]},objId:function(e){return e.__id||Object.defineProperty(e,\"__id\",{value:++t}),e.__id},clone:function(e,t){var r=n.util.type(e);switch(t=t||{},r){case\"Object\":if(t[n.util.objId(e)])return t[n.util.objId(e)];var a={};t[n.util.objId(e)]=a;for(var l in e)e.hasOwnProperty(l)&&(a[l]=n.util.clone(e[l],t));return a;case\"Array\":if(t[n.util.objId(e)])return t[n.util.objId(e)];var a=[];return t[n.util.objId(e)]=a,e.forEach(function(e,r){a[r]=n.util.clone(e,t)}),a}return e}},languages:{extend:function(e,t){var r=n.util.clone(n.languages[e]);for(var a in t)r[a]=t[a];return r},insertBefore:function(e,t,r,a){a=a||n.languages;var l=a[e];if(2==arguments.length){r=arguments[1];for(var i in r)r.hasOwnProperty(i)&&(l[i]=r[i]);return l}var o={};for(var s in l)if(l.hasOwnProperty(s)){if(s==t)for(var i in r)r.hasOwnProperty(i)&&(o[i]=r[i]);o[s]=l[s]}var u=a[e];return a[e]=o,n.languages.DFS(n.languages,function(t,n){n===u&&t!=e&&(this[t]=o)}),o},DFS:function(e,t,r,a){a=a||{};for(var l in e)e.hasOwnProperty(l)&&(t.call(e,l,e[l],r||l),\"Object\"!==n.util.type(e[l])||a[n.util.objId(e[l])]?\"Array\"!==n.util.type(e[l])||a[n.util.objId(e[l])]||(a[n.util.objId(e[l])]=!0,n.languages.DFS(e[l],t,l,a)):(a[n.util.objId(e[l])]=!0,n.languages.DFS(e[l],t,null,a)))}},plugins:{},highlightAll:function(e,t){n.highlightAllUnder(document,e,t)},highlightAllUnder:function(e,t,r){var a={callback:r,selector:'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'};n.hooks.run(\"before-highlightall\",a);for(var l,i=a.elements||e.querySelectorAll(a.selector),o=0;l=i[o++];)n.highlightElement(l,t===!0,a.callback)},highlightElement:function(t,r,a){for(var l,i,o=t;o&&!e.test(o.className);)o=o.parentNode;o&&(l=(o.className.match(e)||[,\"\"])[1].toLowerCase(),i=n.languages[l]),t.className=t.className.replace(e,\"\").replace(/\\s+/g,\" \")+\" language-\"+l,t.parentNode&&(o=t.parentNode,/pre/i.test(o.nodeName)&&(o.className=o.className.replace(e,\"\").replace(/\\s+/g,\" \")+\" language-\"+l));var s=t.textContent,u={element:t,language:l,grammar:i,code:s};if(n.hooks.run(\"before-sanity-check\",u),!u.code||!u.grammar)return u.code&&(n.hooks.run(\"before-highlight\",u),u.element.textContent=u.code,n.hooks.run(\"after-highlight\",u)),n.hooks.run(\"complete\",u),void 0;if(n.hooks.run(\"before-highlight\",u),r&&_self.Worker){var g=new Worker(n.filename);g.onmessage=function(e){u.highlightedCode=e.data,n.hooks.run(\"before-insert\",u),u.element.innerHTML=u.highlightedCode,a&&a.call(u.element),n.hooks.run(\"after-highlight\",u),n.hooks.run(\"complete\",u)},g.postMessage(JSON.stringify({language:u.language,code:u.code,immediateClose:!0}))}else u.highlightedCode=n.highlight(u.code,u.grammar,u.language),n.hooks.run(\"before-insert\",u),u.element.innerHTML=u.highlightedCode,a&&a.call(t),n.hooks.run(\"after-highlight\",u),n.hooks.run(\"complete\",u)},highlight:function(e,t,a){var l={code:e,grammar:t,language:a};return n.hooks.run(\"before-tokenize\",l),l.tokens=n.tokenize(l.code,l.grammar),n.hooks.run(\"after-tokenize\",l),r.stringify(n.util.encode(l.tokens),l.language)},matchGrammar:function(e,t,r,a,l,i,o){var s=n.Token;for(var u in r)if(r.hasOwnProperty(u)&&r[u]){if(u==o)return;var g=r[u];g=\"Array\"===n.util.type(g)?g:[g];for(var c=0;c<g.length;++c){var h=g[c],f=h.inside,d=!!h.lookbehind,m=!!h.greedy,p=0,y=h.alias;if(m&&!h.pattern.global){var v=h.pattern.toString().match(/[imuy]*$/)[0];h.pattern=RegExp(h.pattern.source,v+\"g\")}h=h.pattern||h;for(var b=a,k=l;b<t.length;k+=t[b].length,++b){var w=t[b];if(t.length>e.length)return;if(!(w instanceof s)){if(m&&b!=t.length-1){h.lastIndex=k;var _=h.exec(e);if(!_)break;for(var j=_.index+(d?_[1].length:0),P=_.index+_[0].length,A=b,x=k,O=t.length;O>A&&(P>x||!t[A].type&&!t[A-1].greedy);++A)x+=t[A].length,j>=x&&(++b,k=x);if(t[b]instanceof s)continue;I=A-b,w=e.slice(k,x),_.index-=k}else{h.lastIndex=0;var _=h.exec(w),I=1}if(_){d&&(p=_[1]?_[1].length:0);var j=_.index+p,_=_[0].slice(p),P=j+_.length,N=w.slice(0,j),S=w.slice(P),C=[b,I];N&&(++b,k+=N.length,C.push(N));var E=new s(u,f?n.tokenize(_,f):_,y,_,m);if(C.push(E),S&&C.push(S),Array.prototype.splice.apply(t,C),1!=I&&n.matchGrammar(e,t,r,b,k,!0,u),i)break}else if(i)break}}}}},tokenize:function(e,t){var r=[e],a=t.rest;if(a){for(var l in a)t[l]=a[l];delete t.rest}return n.matchGrammar(e,r,t,0,0,!1),r},hooks:{all:{},add:function(e,t){var r=n.hooks.all;r[e]=r[e]||[],r[e].push(t)},run:function(e,t){var r=n.hooks.all[e];if(r&&r.length)for(var a,l=0;a=r[l++];)a(t)}}},r=n.Token=function(e,t,n,r,a){this.type=e,this.content=t,this.alias=n,this.length=0|(r||\"\").length,this.greedy=!!a};if(r.stringify=function(e,t,a){if(\"string\"==typeof e)return e;if(\"Array\"===n.util.type(e))return e.map(function(n){return r.stringify(n,t,e)}).join(\"\");var l={type:e.type,content:r.stringify(e.content,t,a),tag:\"span\",classes:[\"token\",e.type],attributes:{},language:t,parent:a};if(e.alias){var i=\"Array\"===n.util.type(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(l.classes,i)}n.hooks.run(\"wrap\",l);var o=Object.keys(l.attributes).map(function(e){return e+'=\"'+(l.attributes[e]||\"\").replace(/\"/g,\"&quot;\")+'\"'}).join(\" \");return\"<\"+l.tag+' class=\"'+l.classes.join(\" \")+'\"'+(o?\" \"+o:\"\")+\">\"+l.content+\"</\"+l.tag+\">\"},!_self.document)return _self.addEventListener?(n.disableWorkerMessageHandler||_self.addEventListener(\"message\",function(e){var t=JSON.parse(e.data),r=t.language,a=t.code,l=t.immediateClose;_self.postMessage(n.highlight(a,n.languages[r],r)),l&&_self.close()},!1),_self.Prism):_self.Prism;var a=document.currentScript||[].slice.call(document.getElementsByTagName(\"script\")).pop();return a&&(n.filename=a.src,n.manual||a.hasAttribute(\"data-manual\")||(\"loading\"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(n.highlightAll):window.setTimeout(n.highlightAll,16):document.addEventListener(\"DOMContentLoaded\",n.highlightAll))),_self.Prism}();\"undefined\"!=typeof module&&module.exports&&(module.exports=Prism),\"undefined\"!=typeof global&&(global.Prism=Prism);\nPrism.languages.clike={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"class-name\":{pattern:/((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\\\]/}},keyword:/\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\"boolean\":/\\b(?:true|false)\\b/,\"function\":/[a-z0-9_]+(?=\\()/i,number:/\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,operator:/--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,punctuation:/[{}[\\];(),.:]/};\nPrism.languages.javascript=Prism.languages.extend(\"clike\",{\"class-name\":[Prism.languages.clike[\"class-name\"],{pattern:/(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,lookbehind:!0}],keyword:[{pattern:/((?:^|})\\s*)(?:catch|finally)\\b/,lookbehind:!0},/\\b(?:as|async|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\\b/],number:/\\b(?:(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+)n?|\\d+n|NaN|Infinity)\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\"function\":/[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*\\(|\\.(?:apply|bind|call)\\()/,operator:/-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/}),Prism.languages.javascript[\"class-name\"][0].pattern=/(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/,Prism.languages.insertBefore(\"javascript\",\"keyword\",{regex:{pattern:/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[[^\\]\\r\\n]+]|\\\\.|[^\\/\\\\\\[\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})\\]]))/,lookbehind:!0,greedy:!0},\"function-variable\":{pattern:/[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:function\\b|(?:\\([^()]*\\)|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i,alias:\"function\"},constant:/\\b[A-Z][A-Z\\d_]*\\b/}),Prism.languages.insertBefore(\"javascript\",\"string\",{\"template-string\":{pattern:/`(?:\\\\[\\s\\S]|\\${[^}]+}|[^\\\\`])*`/,greedy:!0,inside:{interpolation:{pattern:/\\${[^}]+}/,inside:{\"interpolation-punctuation\":{pattern:/^\\${|}$/,alias:\"punctuation\"},rest:Prism.languages.javascript}},string:/[\\s\\S]+/}}}),Prism.languages.markup&&Prism.languages.insertBefore(\"markup\",\"tag\",{script:{pattern:/(<script[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,lookbehind:!0,inside:Prism.languages.javascript,alias:\"language-javascript\",greedy:!0}}),Prism.languages.js=Prism.languages.javascript;\n\n/*******************************************************************************\n * Binary Heap function based on the Appendix 2 Binary Heaps of M. Haverbeke\n * \"Eloquent JavaScript\", 3rd Edition\n * \n * @copyright Copyright 2018 Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Luis Gustavo Nardin\n ******************************************************************************/\nfunction BinaryHeap ( scoreFunction ) {\n  this.content = [];\n  this.scoreFunction = scoreFunction;\n}\nBinaryHeap.prototype.push = function ( element ) {\n  this.content.push( element );\n  this.bubbleUp( this.content.length - 1 );\n};\nBinaryHeap.prototype.pop = function () {\n  var result = this.content[0];\n  var end = this.content.pop();\n  \n  if ( this.content.length > 0 ) {\n    this.content[0] = end;\n    this.sinkDown( 0 );\n  }\n  return result;\n};\nBinaryHeap.prototype.remove = function ( element ) {\n  var len = this.content.length;\n  var end;\n  for ( var i = 0; i < len; i += 1 ) {\n    if ( this.content[i] !== element ) {\n      continue;\n    }\n    \n    end = this.content.pop();\n    if ( i === len - 1 ) {\n      break;\n    }\n    \n    this.content[i] = end;\n    this.bubbleUp( i );\n    this.sinkDown( i );\n    break;\n  }\n};\nBinaryHeap.prototype.getContent = function () {\n  return this.content;\n};\nBinaryHeap.prototype.getFirst = function () {\n  if ( this.content.length > 0 ) {\n    return this.content[0];\n  }\n  return [];\n};\nBinaryHeap.prototype.clear = function () {\n  this.content = [];\n};\nBinaryHeap.prototype.isEmpty = function () {\n  return this.content.length <= 0;\n};\nBinaryHeap.prototype.size = function () {\n  return this.content.length;\n};\nBinaryHeap.prototype.bubbleUp = function ( n ) {\n  var element = this.content[n];\n  var score = this.scoreFunction( element );\n  var parentN, parent;\n  \n  while ( n > 0 ) {\n    parentN = Math.floor( (n + 1) / 2 ) - 1;\n    parent = this.content[parentN];\n    if ( score >= this.scoreFunction( parent ) ) {\n      break;\n    }\n    \n    this.content[parentN] = element;\n    this.content[n] = parent;\n    n = parentN;\n  }\n};\nBinaryHeap.prototype.sinkDown = function ( n ) {\n  var length = this.content.length;\n  var element = this.content[n];\n  var elemScore = this.scoreFunction( element );\n  var swap, child1, child2, child1N, child2N, child1Score, child2Score;\n\n  while ( true ) {\n    child2N = (n + 1) * 2;\n    child1N = child2N - 1;\n    swap = null;\n    if ( child1N < length ) {\n      child1 = this.content[child1N];\n      child1Score = this.scoreFunction( child1 );\n      if ( child1Score < elemScore ) {\n        swap = child1N;\n      }\n    }\n    if ( child2N < length ) {\n      child2 = this.content[child2N];\n      child2Score = this.scoreFunction( child2 );\n      if ( child2Score < (swap == null ? elemScore : child1Score) ) {\n        swap = child2N;\n      }\n    }\n    if ( swap == null ) break;\n\n    this.content[n] = this.content[swap];\n    this.content[swap] = element;\n    n = swap;\n  }\n};\n\n/*******************************************************************************\n * This library file contains several OES foundation elements\n * @copyright Copyright 2016 Gerd Wagner, BTU (Germany) + ODU (VA, USA)\n * @license The MIT License (MIT)\n * @author Gerd Wagner\n ******************************************************************************/\nvar oes = oes || {};\nvar sim = sim || {};\n\noes.defaults = {\n  license: \"CC BY-SA\",\n  imgFolder: \"img/\",\n  validateOnInput: false,\n  expostStatDecimalPlaces: 2\n};\noes.predfinedProperties = [\"shortLabel\", \"history\"];\n\noes.Object = new cLASS({\n  Name: \"oBJECT\",\n  isAbstract: true,\n  properties: {\n    \"id\": {range: \"Integer\"},\n    \"name\": {range: \"NonEmptyString\", optional:true}\n  },\n  methods: {\n    \"toLogString\": function () {\n      var str1=\"\", str2=\"\", i=0;\n      if (!this.constructor.shortLabel && !this.name) return \"\";\n      else {  // show class name + object ID\n        str1 = this.name || this.constructor.shortLabel +\"-\"+ this.id;\n      }\n      str2 = \"{ \";\n      Object.keys( this).forEach( function (key) {\n        var propDecl = cLASS[this.constructor.Name].properties[key],\n            val = this[key], propLabel=\"\", valStr=\"\", listOfActTypeNames=[];\n        if (key===\"activityState\") {\n          listOfActTypeNames = Object.keys( val);\n          valStr = JSON.stringify( listOfActTypeNames.map( function (atn) {\n            var shortLabel = cLASS[atn].shortLabel;\n            return shortLabel || atn;\n          }));\n          propLabel = \"actState\";\n        } else if (propDecl && propDecl.shortLabel) {\n          propLabel = propDecl.shortLabel;\n          if (cLASS[propDecl.range]) {  // a reference property\n            // is the property multi-valued?\n            if (propDecl.maxCard && propDecl.maxCard > 1) {\n              if (Array.isArray( val)) {\n                valStr = JSON.stringify( val.map( function (o) {return o.id;}));\n              } else valStr = JSON.stringify( Object.keys( val));\n            } else {  // if the property is single-valued\n              valStr = val.id;\n            }\n          } else {  // if the property is not a reference property\n            if (typeof val === \"number\" && !Number.isInteger(val) && sim.timeRoundingFactor) {\n              valStr = JSON.stringify( Math.round(\n                         val * sim.timeRoundingFactor) / sim.timeRoundingFactor);\n            } else valStr = JSON.stringify( val);\n          }\n        }\n        if (this[key] !== undefined && propLabel) {\n          str2 += (i>0 ? \", \" : \"\") + propLabel +\": \"+ valStr;\n          i = i+1;\n        }\n      }, this);\n      str2 += \"}\";\n      if (str2 === \"{ }\") str2 = \"\";\n      return str1 + str2;\n    }\n  }\n});\n/***\n * Events subsume activities. While instantaneous events have an occTime,\n * activities may not have an occTime on creation, but only a startTime.\n * For events with duration it holds that occTime = startTime + duration.\n */\noes.Event = new cLASS({\n  Name: \"eVENT\",\n  isAbstract: true,\n  properties: {\n    \"occTime\": {range: \"NonNegativeNumber\", optional:true},\n    \"priority\": {range: \"NonNegativeNumber\", optional:true},\n    // only meaningful for events with duration\n    \"startTime\": {range: \"NonNegativeNumber\", optional:true},\n    \"duration\": {range: \"NonNegativeNumber\", optional:true}\n  },\n  methods: {\n    \"toLogString\": function () {\n      var occT = sim.model.time === \"continuous\" && sim.timeRoundingFactor ?\n          Math.round( this.occTime * sim.timeRoundingFactor) / sim.timeRoundingFactor :\n          this.occTime;\n      var str1=\"\", str2=\"\", evtStr=\"\", i=0,\n          eventTypeName = this.constructor.Name, AT=null,\n          propDs={}, slots={};\n      switch (eventTypeName) {\n      case \"aCTIVITYsTART\":\n        AT = cLASS[this.activityType];\n        if (!AT.shortLabel) return \"\";\n        str1 = AT.shortLabel + \"Start\";\n        propDs = AT.properties;\n        slots = this.resources;\n        break;\n      case \"pROCESSINGaCTIVITYsTART\":\n        break;\n      case \"aCTIVITYeND\":\n        AT = cLASS[this.activityType];\n        if (!AT.shortLabel) return \"\";\n        str1 = AT.shortLabel + \"End\";\n        propDs = AT.properties;\n        slots = {\"activityIdRef\": this.activityIdRef};\n        break;\n      default:\n        if (!this.constructor.shortLabel) return \"\";\n        str1 = this.constructor.shortLabel;\n        propDs = cLASS[eventTypeName].properties;\n        slots = this;\n      }\n      str2 = \"{\";\n      Object.keys( slots).forEach( function (p) {\n        var propDecl = propDs[p], val = slots[p], propLabel=\"\", valStr=\"\";\n        if (propDecl && propDecl.shortLabel) {\n          propLabel = propDecl.shortLabel;\n          if (cLASS[propDecl.range]) {  // a reference property\n            valStr = val.id;\n          } else {  // if the property is not a reference property\n            if (typeof val === \"number\" && !Number.isInteger(val) && sim.timeRoundingFactor) {\n              valStr = JSON.stringify( Math.round(\n                      val * sim.timeRoundingFactor) / sim.timeRoundingFactor);\n            } else valStr = JSON.stringify( val);\n          }\n        }\n        if (val !== undefined && propLabel) {\n          str2 += (i>0 ? \", \" : \"\") + propLabel +\":\"+ valStr;\n          i = i+1;\n        }\n      });\n/*\n      Object.keys( this).forEach( function (key) {\n        var propDecl = cLASS[eventTypeName].properties[key],\n            val = this[key], propLabel=\"\", valStr=\"\";\n        if (propDecl && propDecl.shortLabel) {\n          propLabel = propDecl.shortLabel;\n          if (cLASS[propDecl.range]) {  // a reference property\n            valStr = val.id;\n          } else {  // if the property is not a reference property\n            if (typeof val === \"number\" && !Number.isInteger(val) && sim.timeRoundingFactor) {\n              valStr = JSON.stringify( Math.round(\n                      val * sim.timeRoundingFactor) / sim.timeRoundingFactor);\n            } else valStr = JSON.stringify( val);\n          }\n        }\n        if (this[key] !== undefined && propLabel) {\n          str2 += (i>0 ? \", \" : \"\") + propLabel +\":\"+ valStr;\n          i = i+1;\n        }\n      }, this);\n*/\n      str2 += \"}\";\n      if (str2 === \"{}\") str2 = \"\";\n      evtStr = str1 + str2 + \"@\" + occT;\n      return evtStr;\n    }\n  }\n});\n// compare function for Array.sort\noes.Event.rank = function (e1, e2) {\n  var p1=0, p2=0;\n  if (e1.constructor.priority) p1 = e1.constructor.priority;\n  if (e2.constructor.priority) p2 = e2.constructor.priority;\n  return p2 - p1;\n}\n/******************************************************************************\n *** Activities Package *******************************************************\n ******************************************************************************/\n/**\n *  Activities are events having some duration and using resources. Their duration\n *  may be either pre-set to a fixed value or to a random value (in which case they\n *  have a scheduled end), or it may be determined by the occurrence of an activity\n *  end event that is caused by another simulation event (in which case they have an\n *  open end). The duration of a pre-set duration activity can be defined in 3 ways:\n *  either for all activities of some type AT by a) a class-level attribute\n *  AT.fixedDuration or b) a class-level method AT.randomDuration(), or\n *  c) by setting the attribute \"duration\" of its aCTIVITYsTART event.\n *\n *  Activities may consume, and also produce, resources. The actor(s)\n *  that (jointly) perform(s) an activity can be viewed as (a) special resource(s).\n *  At any simulation step there is a (possibly empty) set of ongoing activities.\n *  The objects that participate in an ongoing activity as resources are in a\n *  certain activity state (e.g., \"printing\", \"service-performing\"), in which they\n *  are no more available for other activities that try to allocate them as\n *  resources, if their resource role is exclusive/non-shareable.\n *\n *  For any resource of an activity, its utilization by that activity during\n *  a certain time period is measured by the simulator and can be included\n *  in the ex-post statistics.\n *\n *  An activity type is defined as a subtype of the OES class \"aCTIVITY\" with a\n *  mandatory class-level method \"generateId\" and a mandatory class-level attribute\n *  \"resourceTypes\", and an optional class-level method \"randomDuration\" or,\n *  alternatively, an optional class-level attribute \"fixedDuration\".\n *\n *  A pre-defined event type oes.ActivityStart is used for creating activity start\n *  events with a constructor parameter \"resources\" defining a resource roles map\n *  assigning resource object references to resource role names. When an activity\n *  start event occurs, a JS object representing the activity is created, the\n *  resource roles map is copied to corresponding property slots of the activity,\n *  and the value of the activityState property of all resource objects is updated\n *  by adding the activity type name (the activityState is a set/map of the names\n *  of those types of activities, in which the object is participating).\n */\noes.Activity = new cLASS({\n  Name: \"aCTIVITY\",\n  supertypeName: \"eVENT\",\n  isAbstract: true,\n  properties: {\n    \"id\": {range: \"Integer\"},\n    // on activity creation resource roles are copied to corresp. property slots\n    \"resources\": {range: cLASS.Map(\"oBJECT\"), optional:true}\n  },\n  methods: {}\n});\noes.ActivityStart = new cLASS({\n  Name: \"aCTIVITYsTART\",\n  supertypeName: \"eVENT\",\n  properties: {\n    \"activityType\": {range: \"NonEmptyString\"},  //TODO: should allow type names (like IdRefs)\n    \"resources\": {range: cLASS.Map(\"oBJECT\"), optional:true}\n  },\n  methods: {\n    \"toLogString\": function () {\n      var occT = sim.model.time === \"continuous\" && sim.timeRoundingFactor ?\n          Math.round( this.occTime * sim.timeRoundingFactor) / sim.timeRoundingFactor :\n          this.occTime;\n      var str1 = cLASS[this.activityType].shortLabel, str2 = \"\";\n      if (!str1) return \"\";\n      str1 += \"Start\";\n      Object.keys( this.resources).forEach( function (resRole) {\n        var resObj = this.resources[resRole];\n        str2 += (resObj.name || String(resObj.id)) +\", \";\n      }, this);\n      return str1 +\"(\"+ str2.slice(0, -2) +\")\" + \"@\" + occT;\n    },\n    \"onEvent\": function () {\n      var slots={}, acty=null, followupEvents=[];\n      var AT = cLASS[this.activityType];\n      if (this.duration > 0) slots.duration = this.duration;\n      else if (AT.fixedDuration) slots.duration = AT.fixedDuration;\n      else if (AT.randomDuration) slots.duration = AT.randomDuration();\n      Object.keys( this.resources).forEach( function (resRole) {\n        var resObj = this.resources[resRole];\n        // copy resource def. slots as ref. prop. slots\n        if (!slots[resRole]) slots[resRole] = resObj;\n        // set activity state for resource object\n        if (!resObj.activityState) resObj.activityState = {};\n        resObj.activityState[this.activityType] = true;\n      }, this);\n      slots.id = sim.idCounter++;  // activities need an ID\n      slots.startTime = this.occTime;\n      // create new activity\n      acty = new AT( slots);\n      // assign resources map to new activity\n      acty.resources = this.resources;\n      // register new activity as an ongoing activity\n      sim.ongoingActivities[acty.id] = acty;\n      // define initial. slots for ActivityEnd event\n      slots = {\n        occTime: this.occTime + acty.duration,\n        activityType: AT.Name,\n        activityIdRef: acty.id\n      };\n      if (this.actor) slots.actor = this.actor;\n      // if there is an onActivityStart procedure, execute it\n      if (typeof acty.onActivityStart === \"function\") {\n        followupEvents = acty.onActivityStart();\n      }\n      // schedule activity end event\n      followupEvents.push( new oes.ActivityEnd( slots));\n      return followupEvents;\n    }\n  }\n});\noes.ActivityEnd = new cLASS({\n  Name: \"aCTIVITYeND\",\n  supertypeName: \"eVENT\",\n  properties: {\n    \"activityType\": {range: \"NonEmptyString\"},\n    \"activityIdRef\": {range: \"Integer\"}\n  },\n  methods: {\n    \"toLogString\": function () {\n      var occT = sim.model.time === \"continuous\" && sim.timeRoundingFactor ?\n          Math.round( this.occTime * sim.timeRoundingFactor) / sim.timeRoundingFactor :\n          this.occTime;\n      var str1 = cLASS[this.activityType].shortLabel, str2 = \"\",\n          resources = sim.ongoingActivities[this.activityIdRef].resources;\n      if (!str1) return \"\";\n      str1 += \"End\";\n      Object.keys( resources).forEach( function (resRole) {\n        var resObj = resources[resRole];\n        str2 += (resObj.name || String(resObj.id)) +\", \";\n      }, this);\n      return str1 +\"(\"+ str2.slice(0, -2) +\")\" + \"@\" + occT;\n    },\n    \"onEvent\": function () {\n      var followupEvents=[];\n      var acty = sim.ongoingActivities[this.activityIdRef];  // retrieve activity\n      // if there is an onActivityEnd procedure, execute it\n      if (acty.onActivityEnd) followupEvents = acty.onActivityEnd();\n      // set occTime and duration if there was no pre-set duration\n      if (!acty.duration) {\n        acty.occTime = this.occTime;\n        acty.duration = acty.occTime - acty.startTime;\n      }\n      // compute resource utilization per resource role\n      Object.keys( acty.resources).forEach( function (resRole) {\n        var objIdStr = String(acty[resRole].id),\n            resUtilMap = sim.stat.resUtil[this.activityType];\n        if (resUtilMap[objIdStr] === undefined) resUtilMap[objIdStr] = 0;\n        resUtilMap[objIdStr] += acty.duration;\n        // update the activity state of resource objects\n        delete acty[resRole].activityState[this.activityType];\n      }, this);\n      // drop activity from list of ongoing activities\n      delete sim.ongoingActivities[String( this.activityIdRef)];\n      return followupEvents;\n    }\n  }\n});\n/******************************************************************************\n *** Processing Network Package ***********************************************\n ******************************************************************************/\n/**\n * Processing nodes are objects that play an resource role in processing\n * activities. The definition of a processing node combines defining both an\n * object (as resource) and an implicit activity type, possibly with\n * duration, resource types and onActivityStart/onActivityEnd event rule methods.\n *\n * A simple processing node has an input queue for processing objects and a\n * successor processing node. Processing objects may be either of a generic\n * type \"pROCESSINGoBJECT\" or of a model-specific subtype of \"pROCESSINGoBJECT\"\n * (such as \"Customer\").\n *\n * A processing node object may be defined with a value for its \"fixedDuration\"\n * property or with a \"randomDuration\" function, applying to its processing\n * activities. If neither a fixedDuration nor a randomDuration method are defined,\n * the exponential distribution with an event rate of 1 is used as a default function\n * for sampling processing durations. By default, a processing node processes one\n * processing object at a time, but it may also have its \"capacity\" attribute set to\n * a value greater than 1.\n *\n * In the general case, a processing node may have several input object types,\n * and an input queue for each of them, and either a successor processing node or\n * else an (automatically generated) output queue for each type of output object.\n * By default, when no explicit transformation of inputs to outputs is modeled by\n * specifying an outputTypes map, there is no transformation and it holds that\n * outputs = inputs.\n *\n * TODO: Add resourceTypes\n */\noes.ProcNodeStatusEL = new eNUMERATION( \"ProcNodeStatusEL\",\n    [\"idle\", \"busy\", \"down\"] );\noes.ProcessingNode = new cLASS({\n  Name: \"pROCESSINGnODE\",\n  label: \"Processing Node\",\n  shortLabel: \"PN\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"inputQueue\": {range:\"oBJECT\", minCard: 0, maxCard: Infinity, isOrdered:true,\n        label:\"Input Queue\", shortLabel:\"inpQ\"},\n    \"inputType\": {range:\"oBJECTtYPE\", optional:true},  // default: \"pROCESSINGoBJECT\"\n    \"status\": {range: \"ProcessingNodeStatusEL\", shortLabel:\"stat\",\n        initialValue: oes.ProcNodeStatusEL.IDLE},\n    \"successorNode\": {range: \"pROCESSINGnODE|eXITnODE\", optional:true},\n    \"fixedDuration\": {range: \"PositiveInteger\", optional:true},\n    \"capacity\": {range: \"PositiveInteger\", optional:true},\n    // Ex: {\"lemons\": {type:\"Lemon\", quantity:2}, \"ice\": {type:\"IceCubes\", quantity:[0.2,\"kg\"]},...\n    \"inputTypes\": {range: cLASS.Map( Object), optional:true},\n    // Ex: {\"lemonade\": {type:\"Lemonade\", quantity:[1,\"l\"]}, ...\n    \"outputTypes\": {range: cLASS.Map( Object), optional:true},\n    // a map with PN object names as keys and conditions as values for (X)OR/AND splitting\n    \"successorNodes\": {range: cLASS.Map( Function), optional:true}\n  },\n  methods: {}\n});\n/**\n * Processing Objects are generic objects that arrive at an entry node of a PN\n * and are processed at one or more processing nodes before they leave the\n * PN at an exit node.\n */\noes.ProcessingObject = new cLASS({\n  Name: \"pROCESSINGoBJECT\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"arrivalTime\": { range: \"Number\", label: \"Arrival time\", shortLabel: \"arrT\"}\n  }\n});\n/**\n * Processing Activities are activities that have inputs and outputs and are\n * performed by a processing node (as their actor). The input types/roles,\n * output types/roles and duration of a processing activity are defined in its\n * underlying processing node, which is associated via its \"procNode\" property.\n *\n * A processing node object definition may have slots for defining a \"fixedDuration\"\n * attribute or a \"randomDuration\" method.\n */\noes.ProcessingActivity = new cLASS({\n  Name: \"pROCESSINGaCTIVITY\",\n  label: \"Processing Activity\",\n  shortLabel: \"Proc\",  // for the log\n  supertypeName: \"aCTIVITY\",\n  properties: {\n    \"procNode\": {range: \"pROCESSINGnODE\"}\n  },\n  methods: {}\n});\n// define the exponential distribution as the default inter-arrival time\noes.ProcessingActivity.defaultEventRate = 1;\noes.ProcessingActivity.defaultDuration = function () {\n  return rand.exponential( oes.ProcessingActivity.defaultEventRate)\n};\n\noes.ProcessingActivityStart = new cLASS({\n  Name: \"pROCESSINGaCTIVITYsTART\",\n  supertypeName: \"aCTIVITYsTART\",\n  properties: {\n    \"procNode\": {range: \"pROCESSINGnODE\"}\n  },\n  methods: {\n    \"onConstruction\": function () {\n      if (this.resources) {\n        // make sure that processing node is a resource\n        this.resources[\"procNode\"] = this.procNode;\n      }\n    },\n    \"onEvent\": function () {\n      var slots={}, pN = this.procNode, acty=null, followupEvents=[];\n      if (!pN.inputQueue[0]) {\n        console.log(\"ProcessingActivityStart with empty inputQueue at \"+ pN.name +\n            \" at step \"+ sim.step);\n      }\n      // create slots for constructing new ProcessingActivity\n      if (this.duration) slots.duration = this.duration;\n      else if (pN.fixedDuration) slots.duration = pN.fixedDuration;\n      else if (pN.randomDuration) slots.duration = pN.randomDuration();\n      else slots.duration = oes.ProcessingActivity.defaultDuration();\n      pN.status = oes.ProcNodeStatusEL.BUSY;\n      Object.keys( this.resources).forEach( function (resRole) {\n        var resObj = this.resources[resRole];\n        // copy resource def. slots as ref. prop. slots\n        if (!slots[resRole]) slots[resRole] = resObj;\n        // set activity state for resource object\n        if (!resObj.activityState) resObj.activityState = {};\n        resObj.activityState[this.activityType] = true;\n      }, this);\n      slots.id = sim.idCounter++;  // activities need an ID\n      slots.startTime = this.occTime;\n      // create new activity\n      acty = new oes.ProcessingActivity( slots);\n      acty.resources = this.resources;  // assign resources map\n      sim.ongoingActivities[acty.id] = acty;\n      // create slots for constructing a ProcessingActivityEnd event\n      slots = {\n        occTime: this.occTime + acty.duration,\n        activityType: \"pROCESSINGaCTIVITY\",\n        activityIdRef: acty.id\n      };\n      slots.procNode = pN;\n      // if there is an onActivityStart procedure, execute it\n      if (typeof pN.onActivityStart === \"function\") {\n        followupEvents = pN.onActivityStart();\n      }\n      // schedule activity end event\n      followupEvents.push( new oes.ProcessingActivityEnd( slots));\n      return followupEvents;\n    }\n  }\n});\noes.ProcessingActivityEnd = new cLASS({\n  Name: \"pROCESSINGaCTIVITYeND\",\n  supertypeName: \"aCTIVITYeND\",\n  properties: {\n    \"procNode\": {range: \"pROCESSINGnODE\"}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var procObj=null, nextNode=null, followupEvt1=null, followupEvt2=null,\n          followupEvents=[], pN = this.procNode;\n      // retrieve activity\n      var acty = sim.ongoingActivities[this.activityIdRef];\n      // if there is an onActivityEnd procedure, execute it\n      if (pN.onActivityEnd) followupEvents = pN.onActivityEnd();\n      // set occTime and duration if there was no pre-set duration\n      if (!acty.duration) {\n        acty.occTime = this.occTime;\n        acty.duration = acty.occTime - acty.startTime;\n      }\n      // compute resource utilization per resource role\n      Object.keys( acty.resources).forEach( function (resRole) {\n        var objIdStr = String(acty[resRole].id),\n            resUtilMap = sim.stat.resUtil[this.activityType];\n        if (resUtilMap[objIdStr] === undefined) resUtilMap[objIdStr] = 0;\n        resUtilMap[objIdStr] += acty.duration;\n        // update the activity state of resource objects\n        delete acty[resRole].activityState[this.activityType];\n      }, this);\n      // drop activity from list of ongoing activities\n      delete sim.ongoingActivities[String( this.activityIdRef)];\n      // the successor node may be dynamically assigned by a.onActivityEnd()\n      nextNode = pN.successorNode || acty.successorNode;\n      // pop processing object from the input queue\n      procObj = pN.inputQueue.shift();\n      // push object to the input queue of the next node\n      nextNode.inputQueue.push( procObj);\n      // is the next node a processing node?\n      if (nextNode.constructor.Name === \"pROCESSINGnODE\") {\n        // is the next processing node available?\n        if (nextNode.inputQueue.length === 1 &&\n            nextNode.status === oes.ProcNodeStatusEL.IDLE) {\n          // then start its ProcessingActivity\n          nextNode.status = oes.ProcNodeStatusEL.BUSY;\n          followupEvt1 = new oes.ProcessingActivityStart({\n            occTime: this.occTime + sim.nextMomentDeltaT,\n            activityType: \"pROCESSINGaCTIVITY\",\n            procNode: nextNode,\n            resources: acty.resources || {}\n          });\n          followupEvents.push( followupEvt1);\n        }\n      } else {  // the next node is an exit node\n        followupEvents.push( new oes.Departure({\n          occTime: this.occTime + sim.nextMomentDeltaT,\n          exitNode: nextNode\n        }));\n      }\n      // are there more items in the input queue and no BREAK happened?\n      if (pN.status === oes.ProcNodeStatusEL.BUSY) {\n        if (pN.inputQueue.length > 0) {\n          followupEvt2 = new oes.ProcessingActivityStart({\n            occTime: this.occTime + sim.nextMomentDeltaT,\n            activityType: \"pROCESSINGaCTIVITY\",\n            procNode: pN,\n            resources: {}\n          });\n          followupEvents.push( followupEvt2);\n        } else pN.status = oes.ProcNodeStatusEL.IDLE;\n      }\n      return followupEvents;\n    }\n  }\n});\n/**\n * Entry nodes are objects that participate in exogenous arrival events\n * leading to the creation of processing objects, which are either routed to a\n * successor node or pushed to an output queue. The definition of an entry\n * node combines defining both a (possibly spatial) object and an associated\n * implicit arrival event type, possibly with an \"onArrival\" event rule method.\n *\n * Entry node object definitions may include (1) a \"successorNode\" attribute slot\n * for assigning a successor node to which processing objects are routed; (2) a\n * \"maxNmrOfArrivals\" attribute slot for defining a maximum number of arrival\n * events after which no more arrival events will be created (and, consequently,\n * the simulation may run out of future events); (3) either an \"arrivalRate\"\n * attribute slot for defining the event rate parameter of an exponential pdf\n * used for computing the time between two consecutive arrival events, or a per-\n * instance-defined \"arrivalRecurrence\" method slot for computing the recurrence\n * of arrival events; (4) a per-instance-defined \"outputType\" slot for defining\n * a custom output type (instead of the default \"pROCESSINGoBJECT\"). If neither an\n * \"arrivalRate\" nor an \"arrivalRecurrence\" method are defined, the exponential\n * distribution with an event rate of 1 is used as a default recurrence.\n *\n * Entry nodes have a built-in (read-only) statistics attribute \"nmrOfArrivedObjects\"\n * counting the number of objects that have arrived at the given entry node.\n *\n * TODO: If no successor node is defined for an entry node, an output queue is\n * automatically created.\n */\noes.EntryNode = new cLASS({\n  Name: \"eNTRYnODE\",\n  label: \"Entry Node\",\n  shortLabel: \"Entry\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"outputType\": {range: \"oBJECTtYPE\", optional:true},  // default: \"pROCESSINGoBJECT\"\n    \"successorNode\": {range: \"pROCESSINGnODE\", optional:true},\n    \"maxNmrOfArrivals\": {range: \"PositiveInteger\", optional:true},\n    \"arrivalRate\": {range: \"Decimal\", optional:true},\n    \"nmrOfArrivedObjects\": {range: \"NonNegativeInteger\", shortLabel: \"arrObj\", optional:true}\n  }\n});\n/**\n * Exit nodes are objects that participate in departure events leading to the\n * destruction of the departing object. The definition of an exit node combines\n * defining both a (possibly spatial) object and an associated implicit departure\n * event type, possibly with an \"onDeparture\" event rule method.\n *\n * Exit nodes have two built-in statistics attributes: (1) \"nmrOfDepartedObjects\"\n * counting the number of objects that have departed at the given exit node, and\n * (2) \"cumulativeTimeInSystem\" for adding up the times in system of all departed\n * objects.\n */\noes.ExitNode = new cLASS({\n  Name: \"eXITnODE\",\n  label: \"Exit Node\",\n  shortLabel: \"Exit\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"inputQueue\": {range:\"oBJECT\", minCard: 0, maxCard: Infinity, isOrdered:true,\n      label:\"Input Queue\", shortLabel:\"inpQ\"},\n    \"nmrOfDepartedObjects\": {range: \"NonNegativeInteger\", shortLabel: \"depObj\", optional:true},\n    \"cumulativeTimeInSystem\": {range: \"NonNegativeDecimal\", optional:true}\n  }\n});\n/**\n * Set up PN statistics\n * - for any entry node, define the implicit statistics variable \"arrivedObjects\"\n * - for any exit node, define the implicit statistics variables \"departedObjects\"\n *   and \"meanTimeInSystem\"\n */\noes.setupProcNetStatistics = function () {\n  var entryNodes = oes.EntryNode.instances,\n      exitNodes = oes.ExitNode.instances;\n  var initState = sim.scenario.initialState,\n      initialObjDefs = initState.objects;\n  if (!sim.model.statistics) sim.model.statistics = {};\n  // define default statistics variables for PN entry node statistics\n  Object.keys( entryNodes).forEach( function (nodeIdStr) {\n    var suppressDefaultEntry=false,\n        entryNode = entryNodes[nodeIdStr],\n        varName = Object.keys( entryNodes).length === 1 ?\n            \"arrivedObjects\" : entryNode.name +\"_arrivedObjects\";\n    entryNode.nmrOfArrivedObjects = 0;\n    if (sim.model.statistics[varName] && !sim.model.statistics[varName].label) {\n      // model-defined suppression of default statistics\n      suppressDefaultEntry = true;\n    }\n    if (!suppressDefaultEntry) {\n      if (!sim.model.statistics[varName]) sim.model.statistics[varName] = {};\n      sim.model.statistics[varName].range = \"NonNegativeInteger\";\n      if (!sim.model.statistics[varName].label) {\n        sim.model.statistics[varName].label = \"Arrived objects\";\n      }\n      sim.model.statistics[varName].entryNode = entryNode;\n      sim.model.statistics[varName].computeOnlyAtEnd = true;\n    }\n  });\n  // define default statistics variables for PN exit node statistics\n  Object.keys( exitNodes).forEach( function (nodeIdStr) {\n    var suppressDefaultEntry=false,\n        exitNode = exitNodes[nodeIdStr],\n        varName = Object.keys( exitNodes).length === 1 ?\n            \"departedObjects\" : exitNode.name +\"_departedObjects\";\n    exitNode.nmrOfDepartedObjects = 0;\n    if (sim.model.statistics[varName] && !sim.model.statistics[varName].label) {\n      // model-defined suppression of default statistics\n      suppressDefaultEntry = true;\n    }\n    if (!suppressDefaultEntry) {\n      if (!sim.model.statistics[varName]) sim.model.statistics[varName] = {};\n      sim.model.statistics[varName].range = \"NonNegativeInteger\";\n      if (!sim.model.statistics[varName].label) {\n        sim.model.statistics[varName].label = \"Departed objects\";\n      }\n      sim.model.statistics[varName].exitNode = exitNode;\n      sim.model.statistics[varName].computeOnlyAtEnd = true;\n    }\n    exitNode.cumulativeTimeInSystem = 0;\n    varName = Object.keys( exitNodes).length === 1 ?\n        \"meanTimeInSystem\" : exitNode.name +\"_meanTimeInSystem\";\n    if (sim.model.statistics[varName] && !sim.model.statistics[varName].label) {\n      // model-defined suppression of default statistics\n      suppressDefaultEntry = true;\n    }\n    if (!suppressDefaultEntry) {\n      if (!sim.model.statistics[varName]) sim.model.statistics[varName] = {};\n      sim.model.statistics[varName].range = \"Decimal\";\n      if (!sim.model.statistics[varName].label) {\n        sim.model.statistics[varName].label = \"Mean time in system\";\n      }\n      sim.model.statistics[varName].exitNode = exitNode;\n      sim.model.statistics[varName].computeOnlyAtEnd = true;\n      sim.model.statistics[varName].expression = function () {\n        return exitNode.cumulativeTimeInSystem / exitNode.nmrOfDepartedObjects\n      };\n    }\n  });\n};\n\n/**\n * Arrival events are associated with an entry node.\n * They may define a quantity of arrived processing objects, which is 1 by default.\n * Viewing an arrival not as an arrival of processing objects, but as an arrival of\n * a customer order, the quantity attribute would allow to define an order\n * quantity that results in the same quantity of processing objects (or production\n * orders) pushed to the entry node's succeeding processing node.\n */\noes.Arrival = new cLASS({\n  Name: \"aRRIVAL\",\n  label: \"Arrival\",\n  shortLabel: \"Arr\",\n  supertypeName: \"eVENT\",\n  properties: {\n    \"entryNode\": {range: \"eNTRYnODE\"},\n    \"quantity\": {range: \"PositiveInteger\", optional:true}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var occT=0, procObj=null, ProcessingObject=null, followupEvents=[];\n      if (this.entryNode.outputType) {\n        ProcessingObject = cLASS[this.entryNode.outputType];\n      } else {  // default\n        ProcessingObject = oes.ProcessingObject;\n      }\n      // update statistics\n      this.entryNode.nmrOfArrivedObjects++;\n      // create newly arrived processing object\n      procObj = new ProcessingObject({arrivalTime: this.occTime});\n      sim.addObject( procObj);\n      // invoke onArrival event rule method\n      if (this.entryNode.onArrival) followupEvents = this.entryNode.onArrival();\n      if (this.entryNode.successorNode) {\n        // push newly arrived object to the inputQueue of the next node\n        this.entryNode.successorNode.inputQueue.push( procObj);\n        // is the follow-up processing node available?\n        if (this.entryNode.successorNode.status === oes.ProcNodeStatusEL.IDLE) {\n          this.entryNode.successorNode.status = oes.ProcNodeStatusEL.BUSY;\n          followupEvents.push( new oes.ProcessingActivityStart({\n            occTime: this.occTime + sim.nextMomentDeltaT,\n            activityType: \"pROCESSINGaCTIVITY\",\n            procNode: this.entryNode.successorNode,\n            resources: this.entryNode.resources || {}\n          }));\n        }\n      }\n      // implement the recurrence of aRRIVAL events\n      if (!this.entryNode.maxNmrOfArrivals ||\n          this.entryNode.nmrOfArrivedObjects < this.entryNode.maxNmrOfArrivals) {\n        // has an arrival recurrence function been defined for the entry node?\n        if (this.entryNode.arrivalRecurrence) {\n          occT = this.occTime + this.entryNode.arrivalRecurrence();\n        } else {  // use the default recurrence\n          occT = this.occTime + oes.Arrival.defaultRecurrence();\n        }\n        sim.scheduleEvent( new oes.Arrival({\n          occTime: occT, entryNode: this.entryNode}));\n      }\n      return followupEvents;\n    }\n  }\n});\n// define the exponential distribution as the default inter-arrival time\noes.Arrival.defaultEventRate = 1;\noes.Arrival.defaultRecurrence = function () {\n  return rand.exponential( oes.Arrival.defaultEventRate);\n};\n/**\n * Departure events have two participants: an exit node and the departing object.\n */\noes.Departure = new cLASS({\n  Name: \"dEPARTURE\",\n  shortLabel: \"Dep\",\n  supertypeName: \"eVENT\",\n  properties: {\n    \"exitNode\": {range: \"eXITnODE\"}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var followupEvents = [];\n      // pop processing object from the input queue\n      var procObj = this.exitNode.inputQueue.shift();\n      // update statistics\n      this.exitNode.nmrOfDepartedObjects++;\n      this.exitNode.cumulativeTimeInSystem += this.occTime - procObj.arrivalTime;\n      // invoke onDeparture event rule method\n      if (typeof this.exitNode.onDeparture === \"function\") {\n        followupEvents = this.exitNode.onDeparture();\n      }\n      // remove object from simulation\n      sim.removeObject( procObj);\n      return followupEvents;\n    }\n  }\n});\n/**\n * Check model constraints\n * @method\n * @author Gerd Wagner\n */\noes.checkProcNetConstraints = function (params) {\n  var errMsgs=[], msg=\"\", evts=[];\n  // PNC1: nmrOfArrObjects = nmrOfObjectsAtProcNodes + nmrOfObjectsAtExitNodes + nmrOfDepObjects\n  var nmrOfArrObjects = Object.keys( oes.EntryNode.instances).reduce( function (res, nodeObjIdStr) {\n    return res + sim.objects[nodeObjIdStr].nmrOfArrivedObjects\n  }, 0);\n  var nmrOfObjectsAtProcNodes = Object.keys( oes.ProcessingNode.instances).reduce( function (res, nodeObjIdStr) {\n    return res + sim.objects[nodeObjIdStr].inputQueue.length\n  }, 0);\n  var nmrOfObjectsAtExitNodes = Object.keys( oes.ExitNode.instances).reduce( function (res, nodeObjIdStr) {\n    return res + sim.objects[nodeObjIdStr].inputQueue.length\n  }, 0);\n  var nmrOfDepObjects = Object.keys( oes.ExitNode.instances).reduce( function (res, nodeObjIdStr) {\n    return res + sim.objects[nodeObjIdStr].nmrOfDepartedObjects\n  }, 0);\n  if (nmrOfArrObjects !== nmrOfObjectsAtProcNodes + nmrOfObjectsAtExitNodes + nmrOfDepObjects) {\n    msg = \"The object preservation constraint is violated at step \"+ sim.step +\n        (params && params.add ? params.add : \"\") +\n        \" (nmrOfArrObjects: \"+ nmrOfArrObjects +\n        \", nmrOfObjectsInSystem: \"+ String(nmrOfObjectsAtProcNodes+nmrOfObjectsAtExitNodes) +\n        \", nmrOfDepObjects: \"+ nmrOfDepObjects +\")\";\n    if (params && params.log) console.log( msg);\n    else errMsgs.push( msg);\n  }\n  // PNC2: if a proc. node has a proc. end event, its input queue must be non-empty\n  evts = sim.FEL.getEventsOfType(\"pROCESSINGaCTIVITYeND\");\n  evts.forEach( function (procEndEvt) {\n    var pN = procEndEvt.procNode, inpQ = pN.inputQueue;\n    if (inpQ.length === 0 || !inpQ[0]) {\n      msg = \"At step \"+ sim.step +\" \"+ (params && params.add ? params.add : \"\") +\n          \", the proc. node \"+ (pN.name||pN.id) +\" has an empty input queue.\";\n      if (params && params.log) console.log( msg);\n      else errMsgs.push( msg);\n    }\n  });\n  return errMsgs;\n};\n/******************************************************************************\n *** Experiment Classes *******************************************************\n ******************************************************************************/\n/**\n * A complex datatype for experiment parameter definitions\n * @author Gerd Wagner\n */\noes.ExperimentParamDef = new cLASS({\n  Name: \"eXPERIMENTpARAMdEF\",\n  isComplexDatatype: true,  // do not collect instances\n  properties: {\n    \"name\": {range: \"Identifier\", label:\"Name\"},\n    \"values\": {\n      range: cLASS.ArrayList(\"Number\"),\n      label:\"Values\",\n      val2str: function (v) {\n        return v.toString();  // JSON.stringify( v);\n      },\n      str2val: function (str) {\n        return JSON.parse( str);\n      },\n    }\n  }\n});\n/**\n * An experiment is defined for a scenario, which is defined for a model.\n */\noes.ExperimentDef = new cLASS({\n  Name: \"eXPERIMENTdEF\",\n  properties: {\n    \"id\": {range: \"AutoNumber\"},\n    \"model\": {range: \"NonEmptyString\", label:\"Model name\", optional:true},\n    \"scenarioNo\": {range: \"PositiveInteger\", label:\"Scenario number\"},\n    \"experimentNo\": {range: \"PositiveInteger\", label:\"Experiment number\",\n        hint:\"The sequence number relative to the underlying simulation scenario\"},\n    \"experimentTitle\": {range: \"NonEmptyString\", optional:true, label:\"Experiment title\"},\n    \"replications\": {range:\"PositiveInteger\", label:\"Number of replications\"},\n    \"parameterDefs\": {range: \"eXPERIMENTpARAMdEF\", minCard: 0, maxCard: Infinity,\n        isOrdered:true, label:\"Parameter definitions\"},\n    \"seeds\": {range: Array, optional:true}  // seeds.length = replications\n  }\n});\noes.ExperimentDef.idCounter = 0;  // retrieve actual value from IDB\n\noes.ExperimentRun = new cLASS({\n  Name: \"eXPERIMENTrUN\",\n  properties: {\n    \"id\": {range: \"AutoNumber\", label:\"ID\"},  // possibly a timestamp\n    \"experimentDef\": {range: \"eXPERIMENTdEF\", label:\"Experiment def.\"},\n    \"dateTime\": {range: \"DateTime\", label:\"Date/time\"}\n  }\n});\noes.ExperimentRun.getAutoId = function () {\n  return (new Date()).getTime();\n};\n\noes.ExperimentScenarioRun = new cLASS({\n  Name: \"eXPERIMENTsCENARIOrUN\",\n  properties: {\n    \"id\": {range: \"AutoNumber\"},  // possibly a timestamp\n    \"experimentRun\": {range: \"eXPERIMENTrUN\"},\n    \"experimentScenarioNo\": {range: \"NonNegativeInteger\"},\n    \"parameterValueCombination\": {range: Array},\n    \"outputStatistics\": {range: Object,\n      label:\"Output statistics\",\n      val2str: function (v) {\n        return JSON.stringify( v);\n      },\n      str2val: function (str) {\n        return JSON.parse( str);\n      },\n    }\n  }\n});\noes.ExperimentScenarioRun.getAutoId = function () {\n  return (new Date()).getTime();\n};\n\n/******************************************************************************\n *** Lists of predefined cLASSes as reserved names for constraint checks ******\n ******************************************************************************/\noes.predefinedObjectTypes = [\"oBJECT\",\"pROCESSINGoBJECT\",\"pROCESSINGnODE\",\"eNTRYnODE\",\"eXITnODE\"];\noes.predefinedEventTypes = [\"eVENT\",\"aCTIVITYsTART\",\"aCTIVITYeND\",\"aRRIVAL\",\n    \"pROCESSINGaCTIVITYsTART\",\"pROCESSINGaCTIVITYeND\",\"dEPARTURE\"];\noes.predefinedActivityTypes = [\"aCTIVITY\",\"pROCESSINGaCTIVITY\"];\n\n/******************************************************************************\n *** OES Model Objects scenario/experiment/config/model/statistics/etc. *******\n ******************************************************************************/\nsim.scenario = sim.scenario || {};\n// Define the schema of the model object \"scenario\"\nsim.scenario.objectName = \"scenario\";\nsim.scenario.properties = {\n    \"simulationEndTime\": {range:\"Time\", label:\"Duration:\", hint:\"Simulation duration\"},\n    \"name\": {range:\"NonEmptyString\", optional: true, label:\"Name\", hint:\"Scenario name\"},\n    \"title\": {range:\"NonEmptyString\", optional: true, label:\"Title\", hint:\"Scenario title\"},\n    \"shortDescription\": {range:\"String\", optional: true, label:\"Scenario description\",\n        hint:\"Short description of the simulation scenario\"},\n    \"creator\": {range:\"String\", optional: true, label:\"Creator\",\n        hint:\"Creator of simulation model\"},\n    \"created\": {range:\"String\", optional: true, label:\"Created on\",\n        hint:\"Creation date\"},\n    \"modified\": {range:\"String\", optional: true, label:\"Modified on\",\n      hint:\"Modification date\"},\n    \"idCounter\": {range:\"NonNegativeInteger\", optional: true, label:\"ID counter\"},\n    \"randomSeed\": {range:\"PositiveInteger\", optional: true, label:\"Random seed\"}\n};\n\nsim.experiment = {\n  objectName: \"experiment\",\n  properties: {\n    \"experimentNo\": {range:\"AutoNumber\", label:\"Experiment number\",\n        hint:\"Automatically assigned sequence number for experiment\"},\n    \"experimentTitle\": {range:\"String\", optional: true, label:\"Experiment title\"},\n    \"replications\": {range:\"PositiveInteger\", label:\"Number of replications\",\n        hint:\"Number of replications/repetitions per experiment scenario\"},\n    \"parameterDefs\": {\n        range: \"eXPERIMENTpARAMdEF\", maxCard: Infinity,\n        label:\"Experiment parameters\",\n        hint:\"Define experiment parameters by name and value set specification\"\n    },\n    \"seeds\": {range: Array, optional: true},\n  },\n  replications: 0,\n  parameters: [],\n  scenarios:[],  // are created by the simulator\n  validate: function () {\n    var errMsgs=[], exp = sim.experiment;\n    if (exp.replications > 0) {\n      if (exp.seeds) {\n        if (!Array.isArray( exp.seeds)) {\n          errMsgs.push(\"The experiment 'seeds' parameter must have an array value! Illegal value: \"+ JSON.stringify(exp.seeds));\n        } else if (exp.seeds.length < exp.replications) {\n          errMsgs.push(\"Not enough seeds for number of replications!\");\n        }\n      }\n      if (exp.parameterDefs.length > 0) {\n        exp.parameterDefs.forEach( function (paramDef) {\n          if (!paramDef.values && !(paramDef.startValue && paramDef.endValue)) {\n            errMsgs.push(\"Experiment parameter \"+ paramDef.name +\" has neither a 'values' \" +\n                \"nor 'startValue'/'endValue' attribute(s)!\");\n          }\n        })\n      }\n      if (exp.timeSeriesStatisticsVariables) {\n        exp.timeSeriesStatisticsVariables.forEach( function (varName) {\n          if (!(varName in sim.model.statistics)) {\n            errMsgs.push(\"'timeSeriesStatisticsVariables' contains a name (\"+ varName +\") that does not \" +\n                \"correspond to a sim.model.statistics variable!\");\n          }\n        })\n      }\n    }\n    return errMsgs;\n  }\n};\n\n// Define the schema of the model object \"config\"\nsim.config = {\n  objectName: \"config\",\n  properties: {\n    \"createLog\": {range:\"Boolean\", optional: true, label:\"Log\", hint:\"Create simulation log? (yes/no)\"},\n    \"visualize\": {range:\"Boolean\", optional: true, initialValue: true, label:\"Visualization\",\n        hint:\"Visualize a simulation run? (yes/no)\"},\n    \"stepDuration\": {range:\"NonNegativeInteger\", optional: true, label:\"Step duration:\",\n        hint:\"How long is a simulation step to take? [ms]\"},\n    \"userInteractive\": {range:\"Boolean\", optional: true, label:\"User-interactive\",\n      hint:\"Enable user interactions? (yes/no)\"}\n  }\n};\n// Define the schema of the model object \"sim\"\nsim.objectName = \"sim\";\nsim.properties = {\n  \"step\": {range:\"NonNegativeInteger\", label:\"Step:\", hint:\"Simulation step\"},\n  \"time\": {range:\"Number\", label:\"Time:\", hint:\"Simulation time\"}\n};\nsim.space = {overlayGrid: {}};\n\n// Define the schema of the observationUI\nsim.config.observationUI = {\n  objectName: \"observationUI\",\n  canvas: {},\n  properties: {\n    \"spaceView\": {range: Object, label: \"Space view\"},\n    \"objectViews\": {range: Object, label: \"Object views\"}\n  }\n};\n// define the observationUI.monitor\nsim.config.observationUI.monitor = {};\n// Define the schema of the observationUI.spaceView\nsim.config.observationUI.spaceView = {\n  objectName: \"spaceView\",\n  properties: {\n    \"type\": {range: \"NonEmptyString\", label: \"Space view type\"},\n    \"gridCellSize\": {range: \"PositiveInteger\", label: \"Grid cell size\"}\n  }\n};\n// define the visualization record for non-spatial models\nsim.config.observationUI.vis = {SVG:{}};\n// define the objectViews definition map\nsim.config.observationUI.objectViews = {};\n// define the map for runtime objectViews\nsim.objectViews = {};\n\n// Define the schema of the model object \"model\"\nsim.model = sim.model || {};\nsim.model.v = {};  // definitions of (global) model variables available in sim.v\nsim.model.f = {};  // (global) model functions\n\n//TODO: can this be dropped?\noes.defineSimModelSchema = function () {\n  sim.model.objectName = \"model\";\n  sim.model.properties = {\n    \"name\": {range:\"NonEmptyString\", label:\"Name\"},\n    \"title\": {range:\"NonEmptyString\", label:\"Title\", hint:\"Model title\"},\n    \"shortDescription\": {range:\"String\", optional: true, label:\"Model description\",\n      hint:\"Short description of the simulation model\"},\n    \"systemNarrative\": {range:\"String\", optional: true, label:\"System narrative\",\n        hint:\"Narrative of the system under investigation\"},\n    \"license\": {range:\"String\", optional: true, label:\"License\",\n      hint:\"Copyright license\"},\n    \"creator\": {range:\"String\", optional: true, label:\"Creator\",\n      hint:\"Creator of simulation model\"},\n    \"created\": {range:\"String\", optional: true, label:\"Created on\",\n      hint:\"Creation date\"},\n    \"modified\": {range:\"String\", optional: true, label:\"Modified on\",\n      hint:\"Modification date\"},\n    \"time\": {range:[\"discrete\",\"continuous\"], optional: true,\n      label:\"Time model\", hint:\"Either 'discrete' (default) or 'continuous'\"},\n    \"timeUnit\": {range:[\"ms\",\"s\",\"m\",\"h\",\"D\",\"W\",\"M\",\"Y\"], optional: true,\n        label:\"Time unit\", hint:\"A time unit like 'ms', 's' or 'm'\"},\n    \"timeIncrement\": {range:\"Decimal\", optional: true, label:\"Time increment\",\n        hint:\"By default: 1\"},\n    \"objectTypes\": {range: Array, label:\"Object types\"},\n    \"eventTypes\": {range: Array, label:\"Event types\"},\n    \"activityTypes\": {range: Array, optional: true, label:\"Activity types\"}\n  };\n  // Define the schema of the model object \"model.space\"\n  sim.model.space.objectName = \"spaceModel\";\n  sim.model.space.properties = {\n      \"type\": {range:[\"1D-Grid\",\"IntegerGrid\",\"ObjectGrid\",\"3D-Grid\",\"1D\",\"2D\",\"3D\"], label:\"Space type\"},\n      \"geometry\": {range:[\"TOROIDAL\",\"EUCLIDEAN\"], optional: true, label:\"Space geometry\",\n        hint:\"Either 'TOROIDAL' (default) or 'EUCLIDEAN'\"},\n      \"xMax\": {range:\"NonNegativeInteger\", label:\"Width\", hint:\"Maximum x value\"},\n      \"yMax\": {range:\"NonNegativeInteger\", optional: true, label:\"Height\", hint:\"Maximum y value\"},\n      \"zMax\": {range:\"NonNegativeInteger\", optional: true, label:\"Depth\", hint:\"Maximum z value\"}\n  };\n};\nsim.model.objectName = \"model\";\nsim.model.properties = {\n  \"name\": {range:\"NonEmptyString\", label:\"Name\"},\n  \"title\": {range:\"NonEmptyString\", label:\"Title\", hint:\"Model title\"},\n  \"shortDescription\": {range:\"String\", optional: true, label:\"Model description\",\n    hint:\"Short description of the simulation model\"},\n  \"systemNarrative\": {range:\"String\", optional: true, label:\"System narrative\",\n    hint:\"Narrative of the system under investigation\"},\n  \"license\": {range:\"String\", optional: true, label:\"License\",\n    hint:\"Copyright license\"},\n  \"creator\": {range:\"String\", optional: true, label:\"Creator\",\n    hint:\"Creator of simulation model\"},\n  \"created\": {range:\"String\", optional: true, label:\"Created on\",\n    hint:\"Creation date\"},\n  \"modified\": {range:\"String\", optional: true, label:\"Modified on\",\n    hint:\"Modification date\"},\n  \"time\": {range:[\"discrete\",\"continuous\"], optional: true,\n    label:\"Time model\", hint:\"Either 'discrete' (default) or 'continuous'\"},\n  \"timeUnit\": {range:[\"ms\",\"s\",\"m\",\"h\",\"D\",\"W\",\"M\",\"Y\"], optional: true,\n    label:\"Time unit\", hint:\"A time unit like 'ms', 's' or 'm'\"},\n  \"timeIncrement\": {range:\"Decimal\", optional: true, label:\"Time increment\",\n    hint:\"By default: 1\"},\n  \"objectTypes\": {range: Array, label:\"Object types\"},\n  \"eventTypes\": {range: Array, label:\"Event types\"},\n  \"activityTypes\": {range: Array, optional: true, label:\"Activity types\"}\n};\n// Define the schema of the model object \"model.space\"\nsim.model.space = sim.model.space || {};\nsim.model.space.objectName = \"spaceModel\";\nsim.model.space.properties = {\n  \"type\": {range:[\"1D-Grid\",\"IntegerGrid\",\"ObjectGrid\",\"3D-Grid\",\"1D\",\"2D\",\"3D\"], label:\"Space type\"},\n  \"geometry\": {range:[\"TOROIDAL\",\"EUCLIDEAN\"], optional: true, label:\"Space geometry\",\n    hint:\"Either 'TOROIDAL' (default) or 'EUCLIDEAN'\"},\n  \"xMax\": {range:\"NonNegativeInteger\", label:\"Width\", hint:\"Maximum x value\"},\n  \"yMax\": {range:\"NonNegativeInteger\", optional: true, label:\"Height\", hint:\"Maximum y value\"},\n  \"zMax\": {range:\"NonNegativeInteger\", optional: true, label:\"Depth\", hint:\"Maximum z value\"}\n};\n\n// Define the schema of the model object \"scenario.initialState\"\nsim.scenario.initialState = {\n  objectName: \"initialState\",\n  properties: {\n    // a map, and therefore an instance of Object\n    \"objects\": {range: Object, optional: true, label:\"Initial objects\"},\n    // a map, and therefore an instance of Object\n    \"events\": {range: Object, optional: true, label:\"Initial events\"}\n  },\n  validate: function () {\n    var errors=[];\n    var isProcNetSim = this.objects &&\n            Object.keys( this.objects).some( function (objIdStr) {\n              return this.objects[objIdStr].typeName === \"eNTRYnODE\";\n            }, this);\n    if (!this.events && !isProcNetSim &&\n        !(sim.model.timeIncrement || sim.model.OnEachTimeStep)) {\n      errors.push(\"There must be at least one initial event when neither \" +\n          \"a time increment nor an 'OnEachTimeStep' method has been defined.\");\n    }\n    if (!this.objects) return;\n    Object.keys( this.objects).forEach( function (objIdStr) {\n      var slots={}, Class=null;\n      // check object IDs\n      if (String( parseInt( objIdStr)) !== objIdStr) {\n        errors.push(\"An object has a non-integer ID: \"+ objIdStr);\n      }\n      slots = this.objects[objIdStr];\n      Class = cLASS[slots.typeName];\n      Object.keys( slots).forEach( function (p) {\n        var decl = Class.properties[p], constrVio=null;\n        if (decl) {\n          constrVio = cLASS.check( p, decl, slots[p]);\n          if (!(constrVio instanceof NoConstraintViolation)) {\n            errors.push( slots.typeName +\"(\"+ objIdStr +\"): \"+ constrVio.message);\n          }\n        }\n      });\n    }, this);\n    return errors;\n  }\n};\n// Define the schema of the model object \"scenario.initialStateUI\"\nsim.scenario.initialStateUI = {\n  objectName: \"initialStateUI\",\n  properties: {\n    \"editableProperties\": {range: Object, label:\"Editable properties\"}\n  },\n  validate: function () {\n    if (!this.editableProperties) return;\n    Object.keys( this.editableProperties).forEach( function (className) {\n      // ...\n    }, this);\n  }\n};\nsim.scenario.initialStateUI.editableProperties = {};\n\n/**\n * Check correctness of scenario/model definitions\n * @method\n * @author Gerd Wagner\n */\noes.verifySimulation = function () {\n  var errMsgs=[];\n\n  function checkModelObject( mo) {  // mo = model object\n    var props = mo.properties, errors=[];\n    if (!props) {\n      errors.push(\"The model object \"+ mo.objectName +\" does not have a declaration of 'properties'!\");\n      return;\n    }\n    // check property slots\n    Object.keys( props).forEach( function (prop) {\n      var constrVio = cLASS.check( prop, props[prop], mo[prop]);\n      if (!(constrVio instanceof NoConstraintViolation)) {\n        errors.push( constrVio.constructor.name +\": \"+ constrVio.message);\n      }\n    });\n    if (mo.validate) {  // invoke specific check method\n      errors.merge( mo.validate());\n    }\n    if (errors.length > 0) {\n      errors.forEach( function (err, i) {\n        errors[i] = \"[\"+ mo.objectName +\"] \" + err;\n      });\n    }\n    return errors;\n  }\n  // check model definition\n  errMsgs.merge( checkModelObject( sim.model));\n  // check SPACE model definition\n  if (sim.model.space.type) {\n    errMsgs.merge( checkModelObject( sim.model.space));\n  }\n  // check scenario definition\n  errMsgs.merge( checkModelObject( sim.scenario));\n  // check experiment definition\n  if (sim.experiment.replications > 0) errMsgs.merge( checkModelObject( sim.experiment));\n  // check initial state definition\n  errMsgs.merge( checkModelObject( sim.scenario.initialState));\n  // check definitions of STATISTICS variables\n  if (sim.model.statistics) {\n    Object.keys( sim.model.statistics).forEach( function (varName) {\n      var statVar = sim.model.statistics[varName],\n          OT = statVar.objectType,\n          aggrFunc = statVar.aggregationFunction;\n      // statistics variable bound to a model variable\n      if (statVar.globalVariable) {\n        if (sim.model.v[statVar.globalVariable] === undefined)\n          errMsgs.push( \"[Statistics] Global model variable <var>\"+\n              statVar.globalVariable +\"</var> has not been defined!\");\n      }\n      if (OT && !sim.model.objectTypes.includes( OT)) {\n        errMsgs.push( \"[Statistics] Specified object type <var>\"+\n            OT +\"</var> is not included in sim.model.objectTypes!\");\n      }\n      // variable bound to specific object\n      if (statVar.objectIdRef && !sim.objects[statVar.objectIdRef]) {\n        errMsgs.push( \"[Statistics] Invalid definition of statistics variable <var>\"+\n            varName +\"</var>: There is no object with ID \"+ statVar.objectIdRef +\"!\");\n      }\n      // aggregation function must be defined\n      if (aggrFunc && typeof( oes.stat[aggrFunc]) !== 'function') {\n        errMsgs.push( \"[Statistics] Invalid definition of statistics variable <var>\"+\n            varName +\"</var>: <code>\"+ aggrFunc +\n            \"</code> is not an admissible aggregation function name!\");\n      }\n      // if variable is bound to a property, objectIdRef or objectType must be provided\n      if (statVar.property && !statVar.objectIdRef && !(OT && cLASS[OT])) {\n        errMsgs.push( \"[Statistics] Invalid definition of statistics variable <var>\"+\n            varName +\"</var>:\"+ (!OT ? \" object type name missing!\" :\n                                 !cLASS[OT] ? \" object type \"+ OT +\" not defined!\" :\n                                 !aggrFunc ? \" aggregationFunction missing!\":\"\"));\n      }\n      //TODO: add further checks!\n    });\n  }\n  errMsgs.concat( oes.checkModelConstraints());\n  return errMsgs;\n};\n/**\n * Determine if a simulation is based on a PN model\n */\noes.isProcNetModel = function () {\n  var initState = sim.scenario.initialState,\n      initialObjDefs = initState.objects,\n      initialObj= [], keys=[], key=\"\", i=0;\n  if (initialObjDefs) {  // a map of object definitions\n    keys = Object.keys( initialObjDefs);\n    for (i=0; i < keys.length; i++) {\n      key = keys[i];\n      initialObj = initialObjDefs[key];\n      if (initialObj.typeName === \"eNTRYnODE\") return true;\n    }\n  }\n  return false;\n};\n/**\n * Check model constraints\n * @method\n * @author Gerd Wagner\n */\noes.checkModelConstraints = function (params) {\n  var errMsgs=[];\n  if (sim.model.constraints) {\n    Object.keys( sim.model.constraints).forEach( function (constrName) {\n      var constraint = sim.model.constraints[constrName], msg=\"\";\n      if (!constraint()) {\n        msg = \"The constraint '\"+ constrName +\"' is violated at step \"+ sim.step;\n        if (params && params.log) console.log( msg);\n        else errMsgs.push( msg);\n      }\n    })\n  }\n  return errMsgs;\n};\n/**\n * Set up Storage Management\n *\n * @method\n * @author Gerd Wagner\n */\noes.setupStorageManagement = function (dbName) {\n  var storageAdapter = {dbName: dbName};\n  if (!('indexedDB' in self)) {\n    console.log(\"This browser doesn't support IndexedDB. Falling back to LocalStorage.\");\n    storageAdapter.name = \"LocalStorage\";\n  } else {\n    storageAdapter.name = \"IndexedDB\";\n  }\n  sim.storeMan = new sTORAGEmANAGER( storageAdapter);\n  //sim.storeMan.createEmptyDb().then( oes.setupFrontEndSimEnv);\n  // last step in setupFrontEndSimEnv, then wait for user actions\n  sim.storeMan.createEmptyDb([oes.ExperimentRun, oes.ExperimentScenarioRun]).then( function () {\n    console.log(\"Empty IndexedDB created.\");\n  });\n};\n/**\n * Set up front-end simulation environment\n *\n * @method\n * @author Gerd Wagner\n */\noes.setupFrontEndSimEnv = function () {\n  var errors=[], el=null;\n  sim.initializeSimulator();\n  // set up initial state\n  sim.initializeModelVariables();\n  sim.createInitialObjEvt();\n  if (Object.keys( oes.EntryNode.instances).length > 0) {\n    oes.setupProcNetStatistics();\n  }\n  // initialize statistics\n  if (sim.model.statistics) oes.stat.initialize();\n  // check simulation definition constraints\n  if (oes.loadManager && oes.loadManager.codeLoadingMode !== \"deploy\") {\n    errors = oes.verifySimulation();\n    if (errors.length > 0) {\n      el = dom.createElement(\"div\", {id:\"errors\"});\n      el.appendChild( dom.createElement(\"h1\", {content: \"Errors\"}));\n      errors.forEach( function (err) {\n        el.appendChild( dom.createElement(\"p\", {content: err}));\n      });\n      document.body.insertBefore( el, document.body.firstElementChild);\n    } else {\n      console.log(\"No errors detected in \"+ oes.loadManager.codeLoadingMode + \" mode.\");\n    }\n  }\n  // set up the UI\n  oes.ui.setupUI();\n  // visualize initial state (step 0)\n  if (sim.config.visualize) oes.ui.visualizeStep();\n};\n\n/*******************************************************\n Simulation Log\n********************************************************/\nsim.logStep = function (stepLog) {\n  var rowEl = sim.ui.logEl.insertRow();  // create new table row\n  rowEl.insertCell().textContent = stepLog.simStep;\n  rowEl.insertCell().textContent = stepLog.simTime;\n  rowEl.insertCell().textContent = stepLog.systemStateInfo;\n  rowEl.insertCell().textContent = stepLog.evtInfo;\n};\n/*******************************************************************************\n * EventList maintains an ordered list of events using Binary Heap\n * \n * @copyright Copyright 2018 Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Luis Gustavo Nardin\n ******************************************************************************/\nvar oes = oes || {};\noes.EventList = function EventList ( a ) {\n  this.heap = new BinaryHeap( function ( e ) {\n    return e.occTime;\n  } );\n};\noes.EventList.prototype.add = function ( e ) {\n  if (sim.model.timeRoundingDecimalPlaces) {\n    e.occTime = Math.round( e.occTime * sim.timeRoundingFactor) /\n        sim.timeRoundingFactor;\n  }\n  this.heap.push( e );\n};\noes.EventList.prototype.getNextOccurrenceTime = function () {\n  if ( !this.heap.isEmpty() ) {\n    return this.heap.getFirst().occTime;\n  } else {\n    return 0;\n  }\n};\noes.EventList.prototype.getNextEvent = function () {\n  if ( !this.heap.isEmpty() ) {\n    return this.heap.pop();\n  } else {\n    return null;\n  }\n};\noes.EventList.prototype.getAllEvents = function () {\n  return this.heap.content;\n};\noes.EventList.prototype.isEmpty = function () {\n  return this.heap.isEmpty();\n};\noes.EventList.prototype.removeNextEvents = function () {\n  var nextTime = 0, nextEvents = [];\n  if ( this.heap.isEmpty() ) {\n    return [];\n  }\n  nextTime = this.heap.getFirst().occTime;\n  while ( !this.heap.isEmpty() &&\n      this.heap.getFirst().occTime === nextTime ) {\n    nextEvents.push( this.heap.pop() );\n  }\n  return nextEvents;\n};\noes.EventList.prototype.clear = function ( e ) {\n  this.heap.clear();\n};\n\noes.EventList.prototype.containsEventOfType = function ( evtType ) {\n  return this.heap.getContent().some( function (evt) {\n    return evt.constructor.Name === evtType;\n  } );\n};\noes.EventList.prototype.getEventsOfType = function ( evtType ) {\n  return this.heap.getContent().filter( function (evt) {\n    return evt.constructor.Name === evtType;\n  } );\n};\noes.EventList.prototype.toString = function () {\n  var str = \"\";\n  if ( !this.heap.isEmpty() ) {\n    str = this.heap.getContent().reduce( function ( serialization, e ) {\n      return serialization + \", \" + e.toLogString();\n    }, \"\" );\n    str = str.slice( 1 );\n  }\n  return str;\n};\n\n/**\n * @fileOverview Variables and procedures for (ex-post) statitsics\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Mircea Diaconescu\n * @author Gerd Wagner\n * @license The MIT License (MIT)\n */\n// create namespace oes if not already created by some other \"module\"\nif (typeof oes !== \"object\") var oes = {};\n/**\n * Computation of the simulation statistics.\n *\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Mircea Diaconescu\n * @license The MIT License (MIT)\n */\noes.stat = {\n  timeSeriesCompressionSteps: 1 // length of array values to be compressed into one value\n};\nsim.stat = {  // run-time statistics variables\n  timeSeries: {}\n};\nsim.aux = sim.aux || {}; // auxiliary variables\nsim.aux.stat = {\n  prevValue: {}\n};\n/**\n * Initialize the ex-post statistics\n */\noes.stat.initialize = function () {\n  var aggReturnType = {  // stores the return types of various aggregation functions\n    'avg': 'Decimal'\n  };\n  Object.keys( sim.model.statistics).forEach( function (varName) {\n    var statVar = sim.model.statistics[varName],\n        initialVal = statVar.initialValue || 0,\n        OT=\"\", objIdRefStr=\"\", objectRef=null,\n        propDecl=\"\", globVar=\"\";\n    statVar.name = varName;\n    // is the statistics variable bound to a global variable?\n    if (statVar.globalVariable) {\n      globVar = statVar.globalVariable;\n      if (typeof sim.model.v[globVar] === \"object\") {\n        initialVal = sim.model.v[globVar].initialValue || 0;\n      } else initialVal = sim.model.v[globVar];\n    } else if (statVar.property && statVar.objectIdRef) {\n      // the variable is bound to a property slot of a specific object\n      objIdRefStr = String( statVar.objectIdRef);\n      if (statVar.objectType) OT = statVar.objectType;\n      else OT = sim.objects[objIdRefStr].constructor.Name;\n      objectRef = cLASS[OT].instances[objIdRefStr];\n      if (objectRef) {\n        statVar.objectRef = objectRef;  // store reference to the object\n        // the statistics variable default range is the property range\n        if (!statVar.range) {\n          if (statVar.aggregationFunction &&\n              aggReturnType[statVar.aggregationFunction]) {\n            statVar.range = aggReturnType[statVar.aggregationFunction];\n          } else {\n            propDecl = cLASS[objectRef.constructor.Name].properties[statVar.property];\n            statVar.range = propDecl.range;\n          }\n        }\n        initialVal = objectRef[statVar.property];\n      }\n    } else if (statVar.property && statVar.objectType) {\n      OT = statVar.objectType;\n      if (statVar.aggregationFunction) {\n        initialVal = 0;\n        if (aggReturnType[statVar.aggregationFunction]) {\n          statVar.range = aggReturnType[statVar.aggregationFunction];\n        }\n      } else { // the variable is bound to a collection of property slots\n        /*\n        propDecl = cLASS[OT].properties[statVar.property];\n        statVar.range = propDecl.range;\n        */\n        statVar.hasRecordRange = true;\n        initialVal = {};\n        Object.keys( cLASS[OT].instances).forEach( function (objIdStr) {\n          initialVal[objIdStr] = cLASS[OT].instances[objIdStr][statVar.property];\n        });\n      }\n    } else if (statVar.gridCellProperty && sim.space.grid) {\n      // statistics variable for grid cell property\n      if (!statVar.range) {\n        if (statVar.aggregationFunction &&\n          aggReturnType[statVar.aggregationFunction]) {\n          statVar.range = aggReturnType[statVar.aggregationFunction];\n        } else {\n          propDecl = sim.space.grid[0][0].constructor.properties[statVar.gridCellProperty];\n          if (propDecl)  statVar.range = propDecl.range;\n        }\n      }\n    }\n    // is the variable's time series to be created?\n    statVar.createTimeSeries = (statVar.showTimeSeries || sim.experiment.timeSeriesStatisticsVariables &&\n        sim.experiment.timeSeriesStatisticsVariables.includes( statVar));\n    if (statVar.createTimeSeries) {\n      if (sim.timeIncrement === undefined){\n        sim.stat.timeSeries[varName] = [[],[]];\n      } else {\n        sim.stat.timeSeries[varName] = [];\n      }\n    }\n    // is variable bound to a time series aggregation?\n    statVar.isBoundToTimeSeriesAggregate = (statVar.aggregationFunction &&\n        (statVar.objectIdRef && statVar.property || statVar.globalVariable));\n    // is variable bound to an aggregate over an ObjectType population?\n    statVar.isBoundToPopulationAggregate =\n        (!statVar.objectIdRef && statVar.property && OT);\n    // determine Integer range\n    if (statVar.range) {\n      statVar.hasIntegerRange = cLASS.isIntegerType( statVar.range);\n    } else if (statVar.globalVariable && typeof sim.model.v[globVar] === \"object\" &&\n             statVar.aggregationFunction && statVar.aggregationFunction !== \"avg\") {\n      statVar.hasIntegerRange = cLASS.isIntegerType( sim.model.v[globVar].range);\n    } else {\n      statVar.hasIntegerRange = false;\n    }\n    // initialize runtime statistics variables in sim.stat\n    if (statVar.hasIntegerRange) sim.stat[varName] = parseInt( initialVal);\n    else sim.stat[varName] = initialVal;\n    // store as previous value\n    sim.aux.stat.prevValue[varName] = sim.stat[varName];\n  });\n  // initialize resource utilization statistics\n  if (sim.model.activityTypes && sim.model.activityTypes.length > 0) {\n    sim.stat.resUtil = {};\n    sim.model.activityTypes.forEach( function (aT) {\n      sim.stat.resUtil[aT] = {};\n    });\n  }\n  // initialize PN statistics\n  if (Object.keys( oes.ProcessingNode.instances).length > 0) {\n    sim.stat.resUtil = sim.stat.resUtil || {};\n    sim.stat.resUtil[\"pROCESSINGaCTIVITY\"] = {};\n  }\n};\n/**\n * The timeSeries arrays are limited in length for two reasons:\n * - large arrays results in slowing down the simulation\n * - we have limited pixels on the screen to show the statistics graphs\n *\n * Actually, the maximum length is limited to the number of pixels\n * available for the statistics graphs, so one time series value for\n * each one physical pixels. This is achieved by compressing the\n * array, averaging groups of values to one value.\n *\n * @param maxLength\n *    the maximum allowed length of the timeSeries array\n */\noes.stat.prepareTimeSeriesCompression = function (maxLength) {\n  maxLength = maxLength || sim.scenario.simulationEndTime; // defaults to \"no restriction - all steps\"\n  oes.stat.timeSeriesCompressionSteps = Math.floor(sim.scenario.simulationEndTime / maxLength);\n  if (oes.stat.timeSeriesCompressionSteps < 1) oes.stat.timeSeriesCompressionSteps = 1;\n  console.log(\"Statistics: timeSeriesCompressionSteps=\"\n    + oes.stat.timeSeriesCompressionSteps + \" (1 means no compression)\");\n};\n/**\n * Reset the statistics variables. This means that any computed\n * value is reset to the initial value and all the connection with\n * object(s) references are recreated.\n */\noes.stat.reset = function () {\n  oes.stat.initialize();\n};\n\n/**\n * Update the statistic variables at the end of each simulation step.\n */\noes.stat.updateStatistics = function () {\n  var i=0, statVar=null,\n      statVarNames = Object.keys( sim.model.statistics),\n      n = statVarNames.length;\n  for (i=0; i<n; i++) {\n    statVar = sim.model.statistics[statVarNames[i]];\n    // computeOnlyAtEnd statistic variables are ignored at this point\n    if (!statVar.computeOnlyAtEnd) oes.stat.updateStatisticsVariable( statVar);\n  }\n};\n\n/**\n * Update a statistics variable X and assign the result to sim.stat[\"X\"]\n * @param statVar  the statistics variable declaration\n */\noes.stat.updateStatisticsVariable = function (statVar) {\n  var varName = statVar.name, valueAtCurrentStep;\n  var cellsOnX = 0, cellsOnY = 0, i = 0, j = 0;\n  var grid=null, sum=0, pName=\"\", OT=null;\n  // expression/function is used to compute the value\n  if (typeof statVar.expression === 'function') {\n    valueAtCurrentStep = statVar.expression() || 0;\n  } else if (statVar.globalVariable) { // value obtained from a global variable\n    valueAtCurrentStep = sim.v[statVar.globalVariable] || 0;\n  } else if (statVar.objectRef) { // value obtained from an object's property slot\n    valueAtCurrentStep = statVar.objectRef[statVar.property] || 0;\n  } else if (statVar.property && statVar.objectType && !statVar.aggregationFunction) {\n    // the variable is bound to a collection of property slots\n    valueAtCurrentStep = {};\n    OT = cLASS[statVar.objectType];\n    Object.keys( OT.instances).forEach( function (objIdStr) {\n      valueAtCurrentStep[objIdStr] = OT.instances[objIdStr][statVar.property];\n    });\n  } else if (statVar.entryNode) { // PN statistics\n    valueAtCurrentStep = statVar.entryNode.nmrOfArrivedObjects || 0;\n  } else if (statVar.exitNode) { // PN statistics\n    valueAtCurrentStep = statVar.exitNode.nmrOfDepartedObjects || 0;\n  } else if (statVar.gridCellProperty) {\n    grid = sim.space.grid;\n    cellsOnX = grid.length;\n    cellsOnY = grid[0].length;\n    pName = statVar.gridCellProperty;\n    for (i = 0; i < cellsOnX; i++) {\n      for (j = 0; j < cellsOnY; j++) sum += (grid[i][j])[pName];\n    }\n    valueAtCurrentStep = sum / (cellsOnX * cellsOnY);\n    if (statVar.aggregationFunction) {\n      valueAtCurrentStep = oes.stat[statVar.aggregationFunction](\n        sim.aux.stat.prevValue[varName], valueAtCurrentStep);\n    }\n  } else {  // value computed manually in the simulation scenario\n    valueAtCurrentStep = sim.stat[varName];\n  }\n  //TODO: support TimeSeriesAggregate of PopulationAggregate\n  if (statVar.isBoundToTimeSeriesAggregate) {\n    valueAtCurrentStep = oes.stat[statVar.aggregationFunction](\n        sim.aux.stat.prevValue[varName], valueAtCurrentStep);\n  } else if (statVar.isBoundToPopulationAggregate) {\n    valueAtCurrentStep = oes.stat.computePopulationAggregate(statVar);\n  }\n  // format integer values\n  if (statVar.hasIntegerRange) sim.stat[varName] = parseInt( valueAtCurrentStep);\n  else sim.stat[varName] = valueAtCurrentStep;\n  // check if the variable's time series has to be stored/returned\n  if (statVar.createTimeSeries) {\n    if (sim.timeIncrement) {\n      //sim.stat.timeSeries[varName][sim.step] = sim.stat[varName];\n      sim.stat.timeSeries[varName].push( sim.stat[varName]);\n      if (oes.stat.timeSeriesCompressionSteps > 1\n          && sim.step % oes.stat.timeSeriesCompressionSteps === 0) {\n        oes.stat.compressTimeSeries( sim.stat.timeSeries[varName]);\n      }\n    } else {  // next-event time progression\n      sim.stat.timeSeries[varName][0][sim.step] = sim.time;\n      // TODO: check how we can average steps for time progression case\n      sim.stat.timeSeries[varName][1][sim.step] = sim.stat[varName];\n      // TODO: check how we can average statistic values for time progression case\n    }\n  }\n  // assign current value to previous value\n  sim.aux.stat.prevValue[varName] = sim.stat[varName];\n};\n\n/**\n * Compress time series to keep its length in a specified\n * range, avoiding long arrays that slow down the simulation.\n * @param ts\n *    the time series to compress\n */\noes.stat.compressTimeSeries = function (ts) {\n  var avgLen = oes.stat.timeSeriesCompressionSteps;\n  var i = 0, n = ts.length, avg = 0;\n  // compute average value for the latest set, which will be compressed\n  for (i = n - avgLen; i < n; i++) avg += ts[i];\n  // remove averaged values and append the compressed (average) value\n  ts.splice(n-avgLen-1, avgLen, avg /= avgLen);\n};\n\n/**\n * Compute a Population Aggregate\n */\noes.stat.computePopulationAggregate = function (statVar) {\n  var OT = statVar.objectType,\n      objIDs = Object.keys( cLASS[OT].instances),\n      n = objIDs.length,\n      aggrF = statVar.aggregationFunction,\n      aggr=0, i=0;\n  switch (aggrF) {\n  case \"min\":\n  case \"max\":\n    for (i=0; i < n; i++) {\n      aggr = Math[aggrF]( aggr, cLASS[OT].instances[String(id)][statVar.property]);\n    }\n    break;\n  case \"sum\":\n  case \"avg\":\n    for (i=0; i < n; i++) {\n      aggr += cLASS[OT].instances[String(id)][statVar.property];\n    }\n    if (aggrF === \"avg\") aggr = aggr/n;\n    break;\n  }\n  return aggr;\n};\n/**\n * Compute the values of the statistic variables which are only required\n * to be computed at the simulation end. This method has to be called when\n * the simulation ends.\n */\noes.stat.computeOnlyAtEndStatistics = function () {\n  Object.keys( sim.model.statistics).forEach( function (varName) {\n    var statVar = sim.model.statistics[varName];\n    if (statVar.computeOnlyAtEnd) oes.stat.updateStatisticsVariable( statVar);\n  });\n};\n\n/**\n * Compute the <code>max</code> aggregation function value.\n * @param oldValue\n * @param newValue\n *\n */\noes.stat.max = function (oldValue, newValue) {\n  return Math.max( oldValue, newValue);\n};\n\n/**\n * Compute the <code>min</code> aggregation function value.\n * @param oldValue\n * @param newValue\n *\n */\noes.stat.min = function (oldValue, newValue) {\n  return Math.min( oldValue, newValue);\n};\n/**\n * Compute the <code>sum</code> aggregation function value.\n * @param oldValue\n * @param newValue\n *\n */\noes.stat.sum = function (oldValue, newValue) {\n  return oldValue + newValue;\n};\n/**\n * Compute the <code>avg</code> (average, arithmetic mean) aggregation function value.\n * @param oldValue\n * @param newValue\n *\n */\noes.stat.avg = function (oldValue, newValue) {\n  if (sim.step >= 1) return (oldValue + (newValue - oldValue) / (sim.step + 1));\n  else return oldValue;\n};\n/**\n * Summary statistics record\n */\noes.stat.summary = {\n  average: {label:\"Average\", f: math.mean},\n  stdDev: {label:\"Std.dev.\", f: math.stdDev},\n  min: {label:\"Minimum\", f: Array.min},\n  max: {label:\"Maximum\", f: Array.max},\n  confIntLowerBound: {label: \"Conf.Int.Lower\", f: function ( data ) {\n    sim.stat.CurrentCI = math.confInt( data ); // {lowerBound: x, upperBound: y}\n    return sim.stat.CurrentCI.lowerBound;\n  }},\n  confIntUpperBound: {label: \"Conf.Int.Upper\", f: function () {\n    return sim.stat.CurrentCI.upperBound;\n  }}\n};\n/**\n * @fileOverview A JavaScript implementation of an Object-Event Simulator defined as\n * a JS object \"sim\". The simulator is associated with a simulation model (sim.model)\n * and one or more simulation scenarios (sim.scenarios).\n *\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Gerd Wagner\n * @license The MIT License (MIT)\n *\n * Integrity *constraints* that must be satisfied at any simulation step can be defined\n * as Boolean functions in the map \"model.constraints\" with constraint names being the\n * keys. They are currently checked for the initial state only (in \"setupInitialState\").\n * In future versions there may be an option that constraints are checked in all\n * simulation steps for catching more model errors.\n */\n/*\nImprovements/extensions\nv1\n - support the definition of a \"warm-up period\"\n - drop the activityType attribute of ProcessingActivityStart (and -End?) since it is always \"pROCESSINGaCTIVITY\"\n - allow creating new events \n   (a) without an occTime setting, such that they are scheduled with a delay of nextMomentDeltaT\n   (b) without an occTime setting, but with a \"delay\"\n - refactor createInitialObjEvt into a create and a reset procedure such that already created initial objects\n    are not deleted, but reset, when rerunning a simulation\n - make constraint checking on object/event creation conditional depending on\n       areConstraintsToBeChecked = sim.isConstraintCheckingTurnedOn ||\n          sim.isConstraintCheckingTurnedOn === undefined && oes.loadManager &&\n          oes.loadManager.codeLoadingMode !== \"deploy\";\n - improve the initial state definition UI:\n   + support value changes via IndexedDB\n   + allow adding/dropping objects in the ClassPopulationWidget\n   + support enumeration attributes in the ClassPopulationWidget\n - Add observation UIs for visualizing variables in \"monitors\"\n\n - make a sims/basic-tests.html that invokes one or more seeded scenario simulations and checks statistics results\n - Define set/get for scenario.visualize and use the setter for dropping/setting-up the visualization (canvas)\n\n - Find out what is the meaning of \"variable\" versus \"parameter\" in AnyLogic\n\n - run experiment scenarios in parallel worker threads using the navigator.hardwareConcurrency information\n   (see https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency)\n\n - improve clock-time measuring and support real-time simulation enabled by realtimeFactor set to 1\n - Refactor the simulation step/loop by parametrizing pre-defined events from an extension library (such as \"PN Models\")\n - New model constraint checks:\n   + prevent the use of pre-defined cLASS names (\"aRRIVAL\", etc.) and predefined property names (oes.predfinedProperties)\n\n - Implement support for the \"recurrence\" attribute of entry nodes\n - Allow setting a waiting timeout for the input queues of processing nodes (corresponding\n   to AnyLogic's \"Enable exit on timeout\")\n - Implement support for the \"capacity\" attribute of processing nodes (by popping/forwarding\n   more than one processing objects)\n - Allow processing nodes to specify a maximum queue length (limited queue capacity)\n\n *** later ***\n - Add exploration model\n - Support using variants of the same model (sim.models)\n - UI for defining ex-post statistics\n\nv2\n - extend mODELcLASS with object pools\n - analyze use of modules\n - concurrent event processing with deferred state changes\n - add agents\n - add participation model\n */\n\n/*******************************************************\n Initializations\n ********************************************************/\nsim.ui = sim.ui || {}; // runtime UI components\n/*******************************************************\n Add object to simulation objects\n *******************************************************\n * @author Gerd Wagner\n * @method\n * @param o  the object to be added\n */\nsim.addObject = function (o) {\n  if (!(o instanceof oes.Object)) {\n    console.log( o.toString() +\" is not an oBJECT!\");\n    return;\n  }\n  if (!o.id) o.id = sim.idCounter++;\n  sim.objects[String(o.id)] = o;\n  if (o.name) {\n    if (typeof o.name !== \"string\" ) {\n      console.log(\"oBJECT \"+ o.toString() +\" has a non-string name\"+ o.name);\n      return;\n    } else sim.namedObjects[o.name] = o;\n  }\n  return o;\n};\nsim.addObjects = function (objArr) {\n  objArr.forEach( function (o) {sim.addObject(o)});\n  return objArr;\n};\n/*******************************************************\n Remove an object from the set of simulation objects\n *******************************************************\n * @author Gerd Wagner\n * @method\n * @param o  the object to be removed\n */\nsim.removeObject = function (o) {\n  var ObjectClass=null;\n  if (!(o instanceof oes.Object)) {\n    console.log( JSON.stringify(o) +\" is not an OES object!\");\n    return;\n  }\n  if (!sim.objects[String(o.id)]) {\n    console.log( JSON.stringify(o) +\"@\"+ sim.time +\n        \" has not been registered as a simulation object!\");\n    return;\n  }\n  ObjectClass = o.constructor;\n  delete ObjectClass.instances[String(o.id)];\n  delete sim.objects[String(o.id)];\n};\nsim.removeObjectById = function (id) {\n  var ObjectClass=null;\n  if (typeof id === \"string\") id = parseInt(id);\n  if (!Number.isInteger( id)) {\n    console.log( JSON.stringify(id) +\" is not an integer!\");\n    return;\n  }\n  if (!sim.objects[String(id)]) {\n    console.log( JSON.stringify(id) +\" is not an ID of a registered simulation object!\");\n    return;\n  }\n  ObjectClass = o.constructor;\n  delete ObjectClass.instances[id];\n  delete sim.objects[id];\n};\n/*******************************************************\n Schedule an event by adding it to the FEL\n *******************************************************\n * @author Gerd Wagner\n * @method\n * @param e  the event to be scheduled\n */\nsim.scheduleEvent = function (e) {\n  if (e instanceof oes.Event) sim.FEL.add(e);\n  else {\n    console.log( e.toString() +\" is not an eVENT!\");\n  }\n};\n/********************************************************\n * Initialize Model Variables\n ********************************************************/\nsim.initializeModelVariables = function (expParamSlots) {\n  sim.v = {};  // a map of global variables (accessible by name)\n  // set up the map of model variables\n  sim.model.v = sim.model.v || {};\n  Object.keys( sim.model.v).forEach( function (varName) {\n    var mv = sim.model.v[varName];\n    if (typeof expParamSlots === \"object\" && expParamSlots[varName]) {\n      // assign experiment parameter value\n      sim.v[varName] = expParamSlots[varName];\n    } else {\n      sim.v[varName] = (mv.value !== undefined) ? mv.value : mv.initialValue;\n    }\n  });\n}\n/********************************************************\n * Create Initial Objects and Events\n ********************************************************/\nsim.createInitialObjEvt = function () {\n  var initState = sim.scenario.initialState,\n      initialEvtDefs=null, initialObjDefs=null, entryNodes={};\n  // clear initial state data structures\n  sim.objects = {};  // a map of all objects (accessible by ID)\n  sim.namedObjects = {};  // a map of objects accessible by a unique name\n  sim.FEL.clear();\n  sim.ongoingActivities = {};  // a map of all ongoing activities accessible by ID\n  // clear the cLASS populations of model-specific object types\n  sim.model.objectTypes.forEach( function (objTypeName) {\n    cLASS[objTypeName].instances = {};\n  });\n  // clear the cLASS populations of pre-defined object and activity types\n  [\"eNTRYnODE\",\"pROCESSINGnODE\",\"eXITnODE\",\"pROCESSINGoBJECT\",\"pROCESSINGaCTIVITY\"].\n      forEach( function (objTypeName) {cLASS[objTypeName].instances = {};});\n  // allow parametrized object/event definitions\n  if (typeof sim.scenario.setupInitialState === \"function\") {\n    sim.scenario.setupInitialState();\n  }\n  // register initial objects\n  initialObjDefs = initState.objects;\n  if (initialObjDefs) {  // a map of object definitions\n    Object.keys( initialObjDefs).forEach( function (objIdStr) {\n      var objSlots = util.cloneObject( initialObjDefs[objIdStr]),\n          objTypeName = objSlots.typeName,\n          ObjType = cLASS[objTypeName], obj=null;\n      // fatal error: object type class not found\n      if (!ObjType) throw \"Missing object type class '\" + objTypeName + \"'!\";\n      objSlots.id = parseInt( objIdStr);\n      delete objSlots.typeName;  // remove typeName slot\n      try {obj = new ObjType( objSlots);}\n      catch (e) {\n        if (typeof e !== \"object\") console.log( e);\n        else console.log( e.constructor.name +\": \"+ e.message);\n        obj = null;\n      }\n      if (obj) sim.addObject( obj);\n    })\n  }\n  // convert ID references to object references (in a second pass)\n  Object.keys( sim.objects).forEach( function (objIdStr) {\n    var obj = sim.objects[objIdStr],\n        propDefs = cLASS[obj.constructor.Name].properties;\n    Object.keys( obj).forEach( function (p) {\n      if (!propDefs[p]) {\n        if (typeof obj[p] !== \"function\" && !oes.predfinedProperties.includes(p)) {\n          console.log(\"Undeclared prop: \"+ p +\" for obj \"+ objIdStr);\n        }\n        return;\n      }\n      var range = propDefs[p].range, val = obj[p], rangeClasses=[];\n      if (typeof range === \"string\" && typeof val !== \"object\" &&\n          (cLASS[range] || range.includes(\"|\"))) {\n        if (range.includes(\"|\")) {\n          rangeClasses = range.split(\"|\");\n          // check referential integrity: val must be in some range class\n          if (!rangeClasses.some( function (rc) {\n                return cLASS[rc].instances[String(val)];\n              })) {\n            throw \"Referential integrity violation: \"+ val +\" does not reference any of \"+\n                range +\"!\";\n          }\n        } else if (!(sim.objects[String(val)] instanceof cLASS[range])) {  // also allows superclasses\n            throw \"Referential integrity violation: \"+ val +\" does not reference a \"+ range +\"!\";\n        }\n        obj[p] = sim.objects[String(val)];\n      }\n    });\n  });\n  // schedule initial events\n  initialEvtDefs = initState.events;\n  if (initialEvtDefs) {  // an array of JS object definitions\n    initialEvtDefs.forEach( function (evt) {\n      var e = util.cloneObject( evt),  // clone event object definition\n          evtTypeName = e.typeName,\n          EvtType = cLASS[evtTypeName];\n      // fatal error: event type class not found\n      if (!EvtType) throw Error(\"Missing class for event type '\" + evtTypeName + \"'!\");\n      delete e.typeName;  // remove type slot\n      sim.scheduleEvent( new EvtType( e));\n    })\n  }\n  /**************************************************************\n   * Special settings for PN models\n   **************************************************************/\n  entryNodes = oes.EntryNode.instances;\n  // schedule initial arrival events for the entry nodes of a PN\n  Object.keys( entryNodes).forEach( function (nodeIdStr) {\n    var occT=0, arrEvt=null, entryNode = entryNodes[nodeIdStr];\n    // has no arrival recurrence function been defined for this entry node?\n    if (!entryNode.arrivalRecurrence) {\n      // use the default recurrence\n      occT = oes.Arrival.defaultRecurrence();\n    } else {\n      occT = entryNode.arrivalRecurrence();\n    }\n    arrEvt = new oes.Arrival({ occTime: occT, entryNode: entryNode});\n    sim.scheduleEvent( arrEvt);\n  });\n};\n/*************************************************************\n * Update initial state objects (after modifications via the UI)\n ************************************************************/\nsim.updateInitialStateObjects = function () {\n  // reset the initial objects map\n  sim.scenario.initialState.objects = {};\n  // loop over all object types\n  sim.model.objectTypes.forEach( function (objTypeName) {\n    var objects = cLASS[objTypeName].instances;\n    // loop over all instances of this object type\n    Object.keys( objects).forEach( function (objIdStr) {\n      var obj = objects[objIdStr],\n          objRec = util.createRecordFromObject( obj);\n      objRec.typeName = objTypeName;\n      delete objRec.id;\n      sim.scenario.initialState.objects[objIdStr] = objRec;\n    });\n  });\n};\n/*************************************************************\n * Initialize the simulator on start up\n * Settings that do not vary across scenarios in an experiment\n ************************************************************/\nsim.initializeSimulator = function (dbName) {\n  var x=0, i=0;\n  sim.FEL = new oes.EventList();  // the Future Events List (FEL)\n  // complete model definition by setting objectTypes and eventTypes if not defined\n  if (!sim.model.objectTypes) sim.model.objectTypes = [];\n  if (!sim.model.eventTypes) sim.model.eventTypes = [];\n  // set timeIncrement for fixed-increment time progression\n  if (sim.model.timeIncrement) {\n    sim.timeIncrement = sim.model.timeIncrement;\n  } else {\n    if (sim.model.OnEachTimeStep) sim.timeIncrement = 1;\n  }\n  if (sim.model.time === \"continuous\") {\n    if (sim.model.timeRoundingDecimalPlaces) {\n      sim.timeRoundingFactor = Math.pow( 10, sim.model.timeRoundingDecimalPlaces);\n    } else {\n      if (sim.timeIncrement) {  // fixed-increment time progression\n        // determine rounding factor\n        x = sim.timeIncrement - Math.trunc( sim.timeIncrement);\n        if (x === 0) sim.timeRoundingFactor = 1;\n        else if (x >= 0.1) sim.timeRoundingFactor = 10;\n        else if (x >= 0.01) sim.timeRoundingFactor = 100;\n        else sim.timeRoundingFactor = 1000;\n      }\n    }\n    // define the minimal time delay until the next moment\n    if (sim.model.nextMomentDeltaT) {\n      sim.nextMomentDeltaT = sim.model.nextMomentDeltaT;\n    } else if (sim.timeRoundingFactor) {\n      sim.nextMomentDeltaT = 1 / sim.timeRoundingFactor;\n    } else {  // default\n      sim.nextMomentDeltaT = 0.000001;\n    }\n  } else {  // discrete time\n    sim.nextMomentDeltaT = 1;\n  }\n  // initialize space model\n  if (sim.model.space.type) oes.space.initialize();\n  // set up a default random variate sampling method\n  if (sim.scenario.randomSeed) {  // use the Mersenne Twister RNG\n    rand = new Random( sim.scenario.randomSeed);\n  } else {  // use the JS built-in RNG\n    rand = new Random();\n  }\n  // initialize experiment(s)\n  if (sim.experiment.replications) {  // an experiment has been defined\n    if (!sim.experiment.parameterDefs) sim.experiment.parameterDefs = [];\n    sim.experiment.parameterDefs.forEach( function (paramDef, i, a) {\n      if (paramDef.constructor !== oes.ExperimentParamDef) {\n        a[i] = new oes.ExperimentParamDef( paramDef);\n      }\n    });\n    if (sim.experiment.constructor !== oes.ExperimentDef) {\n      sim.experiment = new oes.ExperimentDef( sim.experiment);\n    }\n  }\n  if (dbName) oes.setupStorageManagement( dbName);\n};\n/*******************************************************************\n * Initialize a (standalone or experiment scenario) simulation run *\n *******************************************************************/\nsim.initializeSimulationRun = function (expParamSlots, seed) {\n  var logInfo={};\n  var isExperimentRun = expParamSlots !== undefined || seed;\n  sim.step = 0;  // simulation loop steps\n  sim.time = 0;  // simulation time\n  // get ID counter from simulation scenario, or set to default value\n  sim.idCounter = sim.scenario.idCounter || 1000;\n  // set up a default random variate sampling method\n  if (!isExperimentRun && sim.scenario.randomSeed) {  // use the Mersenne Twister RNG\n    rand = new Random( sim.scenario.randomSeed);\n  } else if (seed) {  // experiment-defined replication-specific seed\n    rand = new Random( seed);\n  } else {  // use the JS built-in RNG\n    rand = new Random();\n  }\n  // set up initial state\n  sim.initializeModelVariables( expParamSlots);\n  sim.createInitialObjEvt();\n  if (Object.keys( oes.EntryNode.instances).length > 0) oes.setupProcNetStatistics();\n  if (sim.model.statistics) {\n    // initialize statistics\n    oes.stat.initialize();\n    // create statistics for initial state\n    oes.stat.updateStatistics();\n  }\n  // get stepDuration from simulation config, or set to default value\n  sim.stepDuration = sim.config.stepDuration || 0;\n  // log initial state (visualized before in oes.setupFrontEndSimEnv)\n  if (sim.config.createLog) {\n    logInfo = sim.createStepLogInfo();\n    if (!sim.useWorker) {  // main thread\n      if (typeof sim.logStep === \"function\") sim.logStep( logInfo);\n    } else {  // worker thread\n      self.postMessage({  // send log data to main thread\n        simStep: sim.step,\n        simTime: logInfo.simTime,\n        systemStateInfo: logInfo.systemStateInfo,\n        evtInfo: logInfo.evtInfo\n      });\n    }\n  }\n};\n/*******************************************************\n Run a Standalone Scenario\n********************************************************/\nsim.runScenario = function (useWorker) {\n  var msgRec = {},\n      simTimeTenth = parseInt( sim.scenario.simulationEndTime / 10),\n      nextProgressIncrement = simTimeTenth,\n      areConstraintsToBeChecked = sim.isConstraintCheckingTurnedOn ||\n          sim.isConstraintCheckingTurnedOn === undefined && oes.loadManager &&\n          oes.loadManager.codeLoadingMode !== \"deploy\";\n  if (!useWorker) {  // running in main thread\n    sim.useWorker = false;\n    sim.initializeSimulationRun();\n    sim.runScenarioStep();  // loops by self-invocation via setTimeout\n  } else {  // running in worker thread\n    sim.useWorker = true;\n    sim.initializeSimulationRun();\n    while (sim.time < sim.scenario.simulationEndTime) {\n      sim.runScenarioStep();\n      if (areConstraintsToBeChecked) {\n        oes.checkModelConstraints({log:true});\n        if (oes.isProcNetModel()) oes.checkProcNetConstraints({log:true});\n      }\n      // update the progress bar and the simulation step/time\n      if (sim.time > nextProgressIncrement) {\n        self.postMessage({\n            progressIncrement: 10,\n            simStep: sim.step,\n            simTime: sim.time\n        });\n        nextProgressIncrement += simTimeTenth;\n      }\n      // end simulation if no time increment and no more events\n      if (!sim.timeIncrement && sim.FEL.isEmpty()) {\n        break;\n      }\n    }\n    if (sim.model.statistics) {\n      oes.stat.computeOnlyAtEndStatistics();\n      msgRec.simStat = sim.stat;\n    }\n    self.postMessage( msgRec);\n  }\n};\n/*******************************************************\n Standalone Scenario Simulation Step\n (when executed in main thread, it loops by self-invocation via setTimeout)\n********************************************************/\nsim.runScenarioStep = function (followupEvents) {\n  var nextEvents=[], i=0, j=0,\n      EventClass=null, participantRoles={}, nextExoEvt=null, e=null,\n      nextEvtTime = sim.FEL.getNextOccurrenceTime(),  // 0 if there is no next event\n      stepStartTime = (new Date()).getTime(),\n      totalStepTime = 0, stepDiffTimeDelay = 0,\n      uia = sim.scenario.userInteractions,  // shortcut\n      uiViewModel=null, eventTypeName=\"\", logInfo={};\n  function advanceSimulationTime () {\n    // increment the step counter\n    sim.step += 1;\n    // advance simulation time\n    if (sim.timeIncrement) {  // fixed-increment time progression\n      if (nextEvtTime > sim.time && nextEvtTime < sim.time + sim.timeIncrement) {\n        sim.time = nextEvtTime;\n      } else {\n        sim.time += sim.timeIncrement;\n        if (sim.model.OnEachTimeStep) sim.model.OnEachTimeStep();\n      }\n    } else if (nextEvtTime > 0) {  // next-event time progression\n      sim.time = nextEvtTime;\n    }\n  }\n  //-----------------------------------------------------\n  if (!sim.useWorker) {\n    if (sim.stopRequested) {   // interrupt simulation\n      sim.stopRequested = false;\n      oes.ui.updateUiOnStop();\n      return;\n    }\n    if (sim.time >= sim.scenario.simulationEndTime)  {  // terminate simulation\n      if (sim.model.statistics) oes.stat.computeOnlyAtEndStatistics();\n      oes.ui.updateUiOnSimulationEnd();\n      return;\n    }\n  }\n  if (followupEvents) {  // runScenarioStep was called from user action event handler\n    // schedule follow-up events\n    for (j=0; j < followupEvents.length; j++) {\n      sim.FEL.add( followupEvents[j]);\n    }\n    // clear followUpEvents list\n    followupEvents = [];\n  } else {  // normal invocation of runScenarioStep\n    followupEvents = [];\n    advanceSimulationTime();\n    // update the sim-control UI via the fields' data binding to UI output elements\n    if (!sim.useWorker) {\n      sim.ui[\"sim\"].dataBinding[\"step\"].value = sim.step;\n      sim.ui[\"sim\"].dataBinding[\"time\"].value = sim.time;\n    }\n    // extract and process next events\n    if (sim.time === nextEvtTime) {\n      nextEvents = sim.FEL.removeNextEvents();\n      /*\n      if (nextEvents.length > 1) {\n        console.log(\"nextEvents: \"+ nextEvents[0].occTime +\" + \"+ nextEvents[1].occTime);\n      }\n      */\n      if (nextEvents.length > 1) nextEvents.sort( oes.Event.rank);  // priority order\n      for (i=0; i < nextEvents.length; i++) {\n        e = nextEvents[i];\n        eventTypeName = e.constructor.Name;\n        // retrieve event class\n        EventClass = cLASS[eventTypeName];\n        // test if EventClass represents an exogenous event type\n        if (typeof EventClass.recurrence === \"function\") {\n          // create and schedule next exogenous event\n          if (typeof e.createNextEvent === \"function\") {\n            sim.FEL.add( e.createNextEvent());\n          } else if (EventClass.createNextEvent) {  // old syntax (class-level method)\n            sim.FEL.add( EventClass.createNextEvent( e));\n          } else {\n            //TODO: filter participantRoles in a pre-processing step in initModel\n            //let participantRoles = EventClass.properties;  TODO: for ES6 version\n            participantRoles = EventClass.properties;\n            nextExoEvt = new EventClass();\n            nextExoEvt.occTime = e.occTime + EventClass.recurrence();\n            // copy event participants\n            Object.keys( participantRoles).forEach( function (pR) {\n              nextExoEvt[pR] = e[pR];\n            });\n            sim.FEL.add( nextExoEvt);\n          }\n        }\n        // check if a user interaction has been triggered\n        if (sim.config.userInteractive && uia && uia[eventTypeName]) {\n          // check also the triggering event condition, if defined\n          if (!uia[eventTypeName].trigEvtCondition || uia[eventTypeName].trigEvtCondition(e)) {\n            // make sure that the user interaction triggering event is last in nextEvents list\n            if (i === nextEvents.length - 1) {\n              sim.currentEvents[eventTypeName] = e;\n              uiViewModel = uia[eventTypeName];\n              Object.keys( uiViewModel.outputFields).forEach( function (outFldN) {\n                var fldEl = uiViewModel.dataBinding[outFldN],\n                    val = uiViewModel.outputFields[outFldN].value;\n                if (typeof val === \"function\") fldEl.value = val();\n                else fldEl.value = val || \"\";\n              });\n              uiViewModel.domElem.style.display = \"block\";\n              return;  // interrupt simulator & transfer control to UI\n            } else {\n              util.swapArrayElements( nextEvents, i, length-1);\n            }\n          }\n        }\n        followupEvents = e.onEvent();\n        // render event appearances if defined\n        if (sim.config.visualize && sim.ui.animations && sim.ui.animations[eventTypeName]) {\n          sim.ui.animations[eventTypeName].play();\n        }\n        // schedule follow-up events\n        for (j=0; j < followupEvents.length; j++) {\n          sim.FEL.add( followupEvents[j]);\n        }\n        // clear followUpEvents list\n        followupEvents = [];\n      }\n    }\n  }\n  // update statistics\n  if (sim.model.statistics) oes.stat.updateStatistics();\n  // create simulation log\n  if (sim.config.createLog) {\n    logInfo = sim.createStepLogInfo();\n    if (!sim.useWorker) {  // main thread\n      if (typeof sim.logStep === \"function\") sim.logStep( logInfo);\n    } else {  // worker thread\n      self.postMessage({\n        simStep: sim.step,\n        simTime: logInfo.simTime,\n        systemStateInfo: logInfo.systemStateInfo,\n        evtInfo: logInfo.evtInfo\n      });\n    }\n  }\n  // update state visualization (NOT in worker mode)\n  if (sim.config.visualize) oes.ui.visualizeStep();\n  // compute the time needed for executing this step\n  totalStepTime = (new Date()).getTime() - stepStartTime;\n  // check if we need some delay, because of the stepDuration parameter\n  if (sim.stepDuration > totalStepTime) {\n    stepDiffTimeDelay = sim.stepDuration - totalStepTime\n  } else {\n    stepDiffTimeDelay = 0;\n  }\n  if (!sim.useWorker) {  // main thread\n    // end simulation if no time increment and no more events\n    if (!sim.timeIncrement && sim.FEL.isEmpty()) {\n      if (sim.model.statistics) oes.stat.computeOnlyAtEndStatistics();\n      oes.ui.updateUiOnSimulationEnd();\n      return;\n    } else {\n      // continue simulation loop\n      // in the browser, use setTimeout to prevent script blocking\n      setTimeout( sim.runScenarioStep, stepDiffTimeDelay);\n    }\n  }\n};\n/*******************************************************\n Run an Experiment (in a JS worker)\n ********************************************************/\nsim.runExperiment = function () {\n  var exp = sim.experiment, cp=[], valueSets=[], i=0, j=0, k=0, M=0,\n      N = exp.parameterDefs.length, increm=0, x=0, expPar={},\n      expRunId = (new Date()).getTime(),\n      valueCombination=[], expParamSlots={},\n      tenthRunLength=0,  // a tenth of the total run time\n      nextProgressIncrementStep=0;  // thresholds for updating the progress bar\n  try {\n    sim.storeMan.add( oes.ExperimentRun, {\n      id: expRunId,\n      experimentDef: exp.id,\n      dateTime: (new Date()).toISOString(),\n    });\n  } catch (e) {\n    console.log( JSON.stringify(e));\n  }\n  // create preliminary definitions of implicit PN statistics variables\n  if (oes.isProcNetModel()) {\n    if (!sim.model.statistics[\"arrivedObjects\"]) {\n      sim.model.statistics[\"arrivedObjects\"] = {label:\"Arrived objects\"};\n    }\n    if (!sim.model.statistics[\"departedObjects\"]) {\n      sim.model.statistics[\"departedObjects\"] = {label:\"Departed objects\"};\n    }\n    if (!sim.model.statistics[\"meanTimeInSystem\"]) {\n      sim.model.statistics[\"meanTimeInSystem\"] = {label:\"Mean time in system\"};\n    }\n  }\n  if (N === 0) {  // simple experiment (without parameters)\n    cp = [[]];  // only 1 empty parameter value combination\n    // initialize replication statistics record\n    exp.replicStat = {};\n    Object.keys( sim.model.statistics).forEach( function (varName) {\n      if (sim.model.statistics[varName].label) {  // output statistics\n        exp.replicStat[varName] = [];  // an array per statistics variable\n      }\n    });\n  } else {\n    for (i=0; i < N; i++) {\n      expPar = exp.parameterDefs[i];\n      if (!expPar.values) {\n        // create value set\n        expPar.values = [];\n        increm = expPar.stepSize || 1;\n        for (x = expPar.startValue; x <= expPar.endValue; x += increm) {\n          expPar.values.push( x);\n        }\n      }\n      valueSets.push( expPar.values);\n    }\n    cp = util.cartesianProduct( valueSets);\n  }\n  M = cp.length;  // size of cartesian product\n  tenthRunLength = (M * exp.replications) / 10;\n  nextProgressIncrementStep = tenthRunLength;\n  // loop over all combinations of experiment parameter values\n  for (i=0; i < M; i++) {\n    valueCombination = cp[i];  // a JS array\n    // initialize the scenario record\n    exp.scenarios[i] = {stat:{}};\n    exp.scenarios[i].parameterValues = valueCombination;\n    // initialize experiment scenario statistics\n    Object.keys( sim.model.statistics).forEach( function (varName) {\n      var statVar = sim.model.statistics[varName];\n      if (statVar.label) {  // output statistics\n        if (statVar.property && statVar.objectType &&\n            !statVar.aggregationFunction) {\n          exp.scenarios[i].stat[varName] = {};\n        } else exp.scenarios[i].stat[varName] = 0;\n      }\n    });\n    // create experiment parameter slots for assigning corresponding model variables\n    for (j=0; j < N; j++) {\n      expParamSlots[exp.parameterDefs[j].name] = valueCombination[j];\n    }\n    // run experiment scenario replications\n    for (k=0; k < exp.replications; k++) {\n      if (exp.seeds) {\n        sim.initializeSimulationRun( expParamSlots, exp.seeds[k]);\n      } else {\n        sim.initializeSimulationRun( expParamSlots);\n      }\n      while (sim.time < sim.scenario.simulationEndTime) {\n        sim.runExperimentScenarioStep();\n        if (sim.config.isConstraintCheckingTurnedOn) {\n          oes.checkModelConstraints({log:true});\n          if (oes.isProcNetModel()) {\n            oes.checkProcNetConstraints({log:true, add:\" in repl. \"+ String(k+1)});\n          }\n        }\n        // end simulation if no time increment and no more events\n        if (!sim.timeIncrement && sim.FEL.isEmpty()) break;\n      }\n      oes.stat.computeOnlyAtEndStatistics();\n      if (N > 0) {  // experiment with parameters\n        // for the first replication, initialize experiment scenario statistics\n        if (k === 0) {\n          Object.keys( sim.model.statistics ).forEach( function ( varName ) {\n            if ( sim.model.statistics[ varName ].label ) {  // output statistics\n              exp.scenarios[ i ].stat[ varName ] = 0;\n            }\n          } );\n        }\n        // aggregate replication statistics from sim.stat to sim.experiment.scenarios[i].stat\n        Object.keys( sim.model.statistics).forEach( function (varName) {\n          if (sim.model.statistics[varName].label) {  // output statistics\n            exp.scenarios[i].stat[varName] += sim.stat[varName];\n          }\n        });\n        if (exp.storeEachExperimentScenarioRun) {\n          sim.storeMan.add( oes.ExperimentScenarioRun, {\n            id: expRunId + i * exp.replications + k + 1,\n            experimentRun: expRunId,\n            experimentScenarioNo: i,\n            parameterValueCombination: exp.scenarios[i].parameterValues,\n            outputStatistics: Object.assign({}, sim.stat)  // clone\n          });\n        }\n      } else {  // simple experiment\n        // store replication statistics\n        Object.keys( sim.model.statistics).forEach( function (varName) {\n          if (sim.model.statistics[varName].label) {  // output statistics\n            exp.replicStat[varName][k] = sim.stat[varName];\n          }\n        });\n        sim.storeMan.add( oes.ExperimentScenarioRun, {\n          id: expRunId + i * exp.replications + k + 1,\n          experimentRun: expRunId,\n          outputStatistics: Object.assign({}, sim.stat)  // clone\n        });\n      }\n      // update the progress bar\n      if (i*k > nextProgressIncrementStep) {\n        self.postMessage({progressIncrement: 10});\n        nextProgressIncrementStep += tenthRunLength;\n      }\n    }\n    if (N === 0) {  // simple experiment (without parameters)\n      // aggregate replication statistics in sim.experiment.scenarios[i].stat\n      Object.keys( sim.model.statistics).forEach( function (varName) {\n        if (sim.model.statistics[varName].label) {  // output statistics\n          if (!sim.model.statistics[varName].hasRecordRange) {\n            exp.scenarios[i].stat[varName] = {};\n            Object.keys( oes.stat.summary).forEach( function (aggr) {\n              var aggrF = oes.stat.summary[aggr].f;\n              exp.scenarios[i].stat[varName][aggr] = aggrF( exp.replicStat[varName]);\n            });\n          } else {\n            //TODO: loop over record fields\n          }\n        }\n      });\n    }\n    if (N > 0) {  // experiment with parameters\n      // send statistics to main thread\n      self.postMessage({\n        expScenNo: i,\n        expScenParamValues: exp.scenarios[i].parameterValues,\n        expScenStat: exp.scenarios[i].stat\n      });\n      if (!exp.storeEachExperimentScenarioRun) {\n        // store the average statistics aggregated over all exp. scenario runs\n        try {\n          sim.storeMan.add( oes.ExperimentScenarioRun, {\n            experimentRun: expRunId,\n            experimentScenarioNo: i,\n            parameterValueCombination: exp.scenarios[i].parameterValues,\n            outputStatistics: exp.scenarios[i].stat\n          });\n        } catch (e) {\n          console.log( JSON.stringify(e));\n        }\n      }\n    } else {  // simple experiment (without parameters)\n      // send statistics to main thread\n      self.postMessage({\n        expReplicStat: exp.replicStat,\n        expScenStat: exp.scenarios[i].stat\n      });\n    }\n  }\n  self.postMessage({endOfExp: true});\n};\n/*******************************************************\n Experiment Scenario Simulation Step\n ********************************************************/\nsim.runExperimentScenarioStep = function () {\n  var nextEvents=[], i=0, j=0,\n      EventClass=null, participantRoles={}, nextExoEvt=null, e=null,\n      nextEvtTime = sim.FEL.getNextOccurrenceTime(),  // 0 if there is no next event\n      eventTypeName=\"\", followupEvents=[];\n  function advanceSimulationTime () {\n    // increment the step counter\n    sim.step += 1;\n    // advance simulation time\n    if (sim.timeIncrement) {  // fixed-increment time progression\n      // fixed-increment time progression simulations may also have events\n      if (nextEvtTime > sim.time && nextEvtTime < sim.time + sim.timeIncrement) {\n        sim.time = nextEvtTime;  // an event occurring before the next incremented time\n      } else {\n        sim.time += sim.timeIncrement;\n        if (sim.model.OnEachTimeStep) sim.model.OnEachTimeStep();\n      }\n    } else if (nextEvtTime > 0) {  // next-event time progression\n      sim.time = nextEvtTime;\n    }\n    if (sim.model.time === \"continuous\" && sim.timeRoundingFactor) {\n      sim.time = Math.round( sim.time * sim.timeRoundingFactor) /\n          sim.timeRoundingFactor;\n      nextEvtTime = Math.round( nextEvtTime * sim.timeRoundingFactor) /\n          sim.timeRoundingFactor;\n    }\n  }\n  //-----------------------------------------------------\n  advanceSimulationTime();\n  // extract and process next events\n  if (sim.time === nextEvtTime) {\n    nextEvents = sim.FEL.removeNextEvents();\n    if (nextEvents.length > 1) nextEvents.sort( oes.Event.rank);  // priority order\n    for (i=0; i < nextEvents.length; i++) {\n      e = nextEvents[i];\n      eventTypeName = e.constructor.Name;\n      // retrieve event class\n      EventClass = cLASS[eventTypeName];\n      // does EventClass represent an exogenous event type?\n      if (EventClass.recurrence) {\n        // create and schedule next exogenous event\n        if (e.createNextEvent) {  // new syntax\n          sim.FEL.add( e.createNextEvent());\n        } else if (EventClass.createNextEvent) {  // old syntax (class-level method)\n          sim.FEL.add( EventClass.createNextEvent( e));\n        } else {\n          //TODO: filter participantRoles in a pre-processing step in initModel\n          //let participantRoles = EventClass.properties;  TODO: for ES6 versio\n          participantRoles = EventClass.properties;\n          nextExoEvt = new EventClass();\n          nextExoEvt.occTime = e.occTime + EventClass.recurrence();\n          // copy event participants\n          Object.keys( participantRoles).forEach( function (pR) {\n            nextExoEvt[pR] = e[pR];\n          });\n          sim.FEL.add( nextExoEvt);\n        }\n      }\n      followupEvents = e.onEvent();\n      // schedule follow-up events\n      for (j=0; j < followupEvents.length; j++) {\n        sim.FEL.add( followupEvents[j]);\n      }\n      // clear followUpEvents list\n      followupEvents = [];\n    }\n  }\n  // update statistics\n  if (sim.model.statistics) oes.stat.updateStatistics();\n};\n/*******************************************************\n Create step log info\n ********************************************************/\nsim.createStepLogInfo = function () {\n  var simTime = sim.model.time === \"continuous\" && sim.timeRoundingFactor ?\n      Math.round( sim.time * sim.timeRoundingFactor) / sim.timeRoundingFactor :\n      sim.time;\n  var systemStateInfo = Object.keys( sim.v).reduce( function (serialization, varName, i) {\n    var varDecl = sim.model.v[varName], slotSerialization=\"\";\n    if (varDecl.shortLabel) {\n      slotSerialization = varDecl.shortLabel +\": \"+ sim.v[varName];\n      return i>0 ? serialization +\", \"+ slotSerialization : slotSerialization;\n    } else return serialization;\n  }, \"\");\n  if (systemStateInfo && Object.keys( sim.objects).length > 0) systemStateInfo += \", \";\n  systemStateInfo += Object.keys( sim.objects).reduce( function (serialization, objIdStr, i) {\n    var o = sim.objects[objIdStr];\n    if (o.shortLabel || o.constructor.shortLabel) {\n      return i>0 ? serialization +\", \"+ o.toLogString() : o.toLogString();\n    } else return serialization;\n  }, \"\");\n  return {simTime: String(simTime), systemStateInfo: systemStateInfo, evtInfo: sim.FEL.toString()}\n};\n/**\n * @fileOverview User interface variables and procedures\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Gerd Wagner\n * @license The MIT License (MIT)\n */\n\n/*\nImprovements/extensions\n- format percentages with new Intl.NumberFormat('de-DE',{style:\"percent\",maximumFractionDigits:1}).format( number)\n\n*/\n\nvar oes = oes || {};\noes.ui = oes.ui || {};\noes.ui.vis = {SVG:{}};  // name space for generic UI procedures/functions\nsim.ui = sim.ui || {};  // name space for scenario/model-specific UI settings\n\n// flag used to create UI variations for Client or Server version of the simulation\noes.ui.fullUI = true;\n\n/*******************************************************\n * Create the Model Menu with a \"Narrative\", \"Description\" and \"Code\" button.\n *******************************************************/\noes.ui.createModelMenu = function() {\n  var downloadLink=null, closeBtn=null,\n      menuEl = document.getElementById(\"model-menu\"),\n      el=null,\n      simPageUrl = window.location.href,\n      pos=0, tail=\"\";\n  pos = simPageUrl.indexOf(\"simulation.html\");\n  if (pos === -1) {\n    pos = simPageUrl.indexOf(\"index.html\");\n  }\n  if (pos > -1) {\n    sim.ui.simFolderPath = simPageUrl.substring( 0, pos);\n  } else {\n    pos = simPageUrl.lastIndexOf(\"/\");\n    if (pos === simPageUrl.length-1) {  // last character is a slash\n      sim.ui.simFolderPath = simPageUrl;\n    }\n    else {\n      sim.ui.simFolderPath = simPageUrl.substring( 0, pos+1);\n      // accept paths that end with a simulation number\n      tail = simPageUrl.substring( pos+1);\n      if (/\\d*/.test( tail)) sim.ui.simFolderPath += tail + \"/\";\n    }\n  }\n  sim.ui.showCodeElems = {};  // map of UI elements for showing code\n  // create showCode form element\n  el = document.createElement(\"form\");\n  el.id = \"showCodeForm\";\n  el.style.display = \"none\";\n  el.innerHTML = \"<span class='closeButton'>&times;</span><p>\" +\n      i18n.t(\"Show code of...\") + \"</p><select><option>\"+ i18n.t(\"-- choose file --\") +\n      \"</option></select><p id='download'></p></form>\";\n  menuEl.appendChild( el);\n  document.getElementById(\"download\").innerHTML = i18n.t(\"Or <a>download all</a>\");\n  downloadLink = document.querySelector(\"#showCodeForm a\");\n  downloadLink.href = sim.ui.simFolderPath + \"Download.zip\";\n  downloadLink.title = i18n.t(\"Download simulation code\");\n  closeBtn = document.querySelector(\"#showCodeForm span.closeButton\");\n  closeBtn.addEventListener(\"click\", function () {\n    document.getElementById(\"showCodeBtn\").style.display = \"inline\";\n    document.getElementById(\"showCodeForm\").style.display = \"none\";\n  });\n  // create space size def. activation button\n  if (sim.model.space.type) {\n    if (!document.getElementById(\"spaceSizeDefBtn\")) {\n      el = document.createElement(\"button\");\n      el.id = \"spaceSizeDefBtn\";\n      el.textContent = i18n.t(\"Space\");\n      el.onclick = oes.ui.showSpaceSizeDefUI;\n      menuEl.appendChild( el);\n    }\n  }\n};\noes.ui.showNarrative = function() {\n  var narrativeEl=null;\n  if (!sim.ui.narrativeEl) {\n    narrativeEl = document.createElement(\"div\");\n    narrativeEl.innerHTML = sim.model.systemNarrative;\n    sim.ui.narrativeEl = dom.createModal({\n      fromElem: narrativeEl,\n      title: i18n.t(\"System Narrative\")\n    });\n  }\n  document.getElementById(\"overlay\").style.display = \"block\";\n  sim.ui.narrativeEl.style.display = \"block\";\n};\noes.ui.showDescription = function() {\n  var descrEl=null;\n  if (!sim.ui.descriptionEl) {\n    descrEl = document.createElement(\"div\");\n    descrEl.innerHTML = sim.scenario.shortDescription || sim.model.shortDescription;\n    sim.ui.descriptionEl = dom.createModal({\n      fromElem: descrEl,\n      title: i18n.t(\"Model Description\")\n    });\n  }\n  document.getElementById(\"overlay\").style.display = \"block\";\n  sim.ui.descriptionEl.style.display = \"block\";\n};\noes.ui.showCode = function() {\n  var showCodeBtn = document.getElementById(\"showCodeBtn\"),\n      showCodeForm = document.getElementById(\"showCodeForm\"),\n      codeFileSelEl = document.querySelector(\"#showCodeForm > select\"),\n      showCodeEl=null;\n  if (!sim.ui.simFolderPath) {\n    console.log(\"Cannot show code since folder path is not available!\");\n    return;\n  }\n  showCodeBtn.style.display = \"none\";\n  showCodeForm.style.display = \"inline-block\";\n  if (codeFileSelEl.length === 1) {  // have options not yet been created?\n    codeFileSelEl.appendChild(\n        dom.createOption({text:\"simulation.js\", value:\"simulation\"}));\n    if (sim.model.objectTypes) {\n      sim.model.objectTypes.forEach( function (objT) {\n        codeFileSelEl.appendChild( dom.createOption({text: objT + \".js\", value: objT}));\n      });\n    }\n    if (sim.model.eventTypes) {\n      sim.model.eventTypes.forEach( function (evtT) {\n        codeFileSelEl.appendChild( dom.createOption({text: evtT + \".js\", value: evtT}));\n      });\n    }\n    if (sim.model.activityTypes) {\n      sim.model.activityTypes.forEach( function (actT) {\n        codeFileSelEl.appendChild( dom.createOption({text: actT + \".js\", value: actT}));\n      });\n    }\n    codeFileSelEl.addEventListener(\"change\", function () {\n      var fileName = codeFileSelEl.value;\n\n      function showCode( txt) {\n        var showCodeEl=null;\n        if (!sim.ui.showCodeElems[fileName]) {\n          showCodeEl = document.createElement(\"div\");\n          showCodeEl.innerHTML = \"<pre><code class='language-javascript'>\"+ txt +\"</code></pre>\";\n          sim.ui.showCodeElems[fileName] = dom.createModal({\n            fromElem: showCodeEl,\n            title: i18n.t(\"JavaScript code of \") + fileName +\".js\",\n            width: \"50em\"});\n        }\n        if (typeof Prism === \"object\") Prism.highlightAll();  // run the Prism syntax highligter\n        document.getElementById(\"overlay\").style.display = \"block\";\n        sim.ui.showCodeElems[fileName].style.display = \"block\";\n      }\n\n      if (fileName) {  // a choice has been made\n        fetch( sim.ui.simFolderPath + fileName + \".js\")\n            .then( function (response) {\n              return response.text().then( showCode);\n            })\n      }\n    });\n  }\n};\n/*******************************************************\n UI for Space Definition\n *******************************************************/\noes.ui.showSpaceSizeDefUI = function () {\n  var menuEl = document.getElementById(\"model-menu\"),\n      spaceSizeDefBtn = document.getElementById(\"spaceSizeDefBtn\"),\n      spaceSizeDefForm = document.getElementById(\"spaceSizeDefForm\"),\n      closeBtn=null;\n  if (!spaceSizeDefForm) {\n    // create space size def. form panel element\n    spaceSizeDefForm = document.createElement(\"form\");\n    spaceSizeDefForm.id = \"spaceSizeDefForm\";\n    spaceSizeDefForm.innerHTML = \"<span class='closeButton'>&times;</span>\";\n    spaceSizeDefForm.style.display = \"none\";\n    menuEl.appendChild( spaceSizeDefForm);\n    closeBtn = document.querySelector(\"#spaceSizeDefForm span.closeButton\");\n    closeBtn.addEventListener(\"click\", function () {\n      spaceSizeDefBtn.style.display = \"inline\";\n      spaceSizeDefForm.style.display = \"none\";\n    });\n    sim.ui[\"space\"] = new oBJECTvIEW({\n      modelObject: sim.model.space,\n      fields: [[\"xMax\", \"yMax\", \"zMax\"].slice(0,\n          oes.space.dimensions[sim.model.space.type])],\n      suppressNoValueFields: false,\n      heading: i18n.t(\"Space Size\"),\n      userActions: {\n        \"applyChanges\": function () {\n          sim.updateInitialStateObjects();\n          oes.ui.resetCanvas();\n          // visualize initial state (at start of step 0)\n          if (sim.config.visualize) oes.ui.visualizeStep();\n        }\n      }\n    });\n    sim.ui[\"space\"].userActions[\"applyChanges\"].label = i18n.t(\"Apply changes\");\n    // render view in modalBodyEl and store its data binding\n    sim.ui[\"space\"].dataBinding = sim.ui[\"space\"].render( spaceSizeDefForm);\n  }\n  spaceSizeDefBtn.style.display = \"none\";\n  spaceSizeDefForm.style.display = \"inline-block\";\n};\n/*******************************************************\n * Create the UI page footer.\n *******************************************************/\noes.ui.createPageFooter = function() {\n  var created = new Date( sim.model.created),\n      modified = new Date( sim.model.modified),\n      mainEl = document.querySelector(\"body > main\"),\n      license = sim.model.license || oes.defaults.license,\n      licenseLinks=[], el=null,\n      contributions = !sim.model.contributors ? \"\" :\n          \", \"+ i18n.t(\"with contributions by\") +\" \"+ sim.model.contributors,\n      artworkCredits = !sim.config.artworkCredits ? \"\" :\n          \" | <a href='#' title='\"+ sim.config.artworkCredits + \"'>\" +\n          i18n.t(\"Artwork Credits\") + \"</a>\";\n  var dateFmt = new Intl.DateTimeFormat( i18n.accessLang || \"en-US\");\n  licenseLinks[\"CC BY\"] = \"https://creativecommons.org/licenses/by/4.0/\";\n  licenseLinks[\"CC BY-SA\"] = \"https://creativecommons.org/licenses/by-sa/4.0/\";\n  licenseLinks[\"CC BY-NC\"] = \"https://creativecommons.org/licenses/by-nc/4.0/\";\n  if (licenseLinks[license]) {\n    license = \"<a href='\"+ licenseLinks[license] +\"'>\"+ license +\"</a>\";\n  }\n  if (!document.querySelector(\"body > footer\")) {\n    el = document.createElement(\"footer\");\n    el.innerHTML = \"<hr/><p>&copy; \"+ sim.model.creator +\" (\"+ license +\"), \" +\n        i18n.t(\"created on\") +\" \"+ dateFmt.format( created) +\", \"+\n        i18n.t(\"last modified on\") +\" \"+ dateFmt.format( modified) + contributions +\n        artworkCredits + \" | <a href='https://sim4edu.com/credits.html'>\" + i18n.t(\"OESjs Credits\") +\"</a>\";\n    // insert footer after body > main\n    dom.insertAfter( el, mainEl);\n  }\n};\n\n/*******************************************************\n Set up the simulation UI\n *******************************************************\n * @method\n * @author Gerd Wagner\n */\noes.ui.setupUI = function () {\n  var el=null, el2=null,\n      mainEl = document.querySelector(\"body > main\"),\n      statistics = sim.model.statistics,\n      createTimeSeriesChart = false;\n  oes.ui.timeUnitLabels = {\"ms\":\"milliseconds\", \"s\":\"seconds\", \"m\":\"minutes\", \"h\":\"hours\",\n      \"D\":\"Days\", \"W\":\"Weeks\", \"M\":\"Months\", \"Y\":\"Years\"};\n  /*********************************************************************\n   Create title/headings\n   **********************************************************************/\n  // Set HTML title\n  if (!document.title){\n    document.title = \"OES - \" + (sim.scenario.name || sim.model.name);\n  }\n  //oes.ui.createFrontMatter();\n  oes.ui.createModelMenu();  // rendered underneath the model title\n  /*********************************************************************\n   Set up UI for simulation scenario information\n   *********************************************************************/\n  try {\n    sim.ui[\"scenario\"] = new oBJECTvIEW({\n      heading: sim.scenario.title ? sim.scenario.title : i18n.t(\"Default scenario\"),\n      modelObjects: {\"scenario\":sim.scenario, \"model\":sim.model, \"config\":sim.config},\n      fields: [[\"scenario.simulationEndTime\", \"config.stepDuration\", \"config.createLog\", \"config.visualize\"]],\n      userActions: {\n        \"run\": function () {\n          var statFormEl = document.forms[\"expost-statistics\"],\n              expFormEl = document.forms[\"experiment\"],\n              locale = i18n.accessLang ? i18n.accessLang : \"en-US\",\n              numFmt = new Intl.NumberFormat( locale),\n              statGraphWidth=0, worker=null, msg={}, changedModelVarValues={};\n          var progressContainer = dom.createProgressBar(i18n.t(\"Executing the simulation scenario...\"));\n          document.body.appendChild( progressContainer);\n          // log simulation start time (in the main thread)\n          sim.startTime = (new Date()).getTime();\n          // drop experiment form\n          if (expFormEl) expFormEl.remove();\n          // hide simulation parameters and show simulator controls\n          document.forms[\"scenario\"].style.display = \"none\";\n          document.forms[\"sim\"].style.display = \"block\";\n          // show simulation log table\n          if (sim.config.createLog && oes.ui.fullUI) {\n            oes.ui.setupSimLog();\n          }\n          // disable continue and reset buttons\n          document.forms[\"sim\"].elements[\"continue\"].disabled = true;\n          document.forms[\"sim\"].elements[\"restart\"].disabled = true;\n          // compute statistics compression factor\n          if (statistics) {\n            // since the width is not reported when display=none, we need to reset display\n            statFormEl.style.display = \"block\";\n            statGraphWidth = parseInt( getComputedStyle( statFormEl).width);\n            statFormEl.style.display = \"none\";\n            oes.stat.prepareTimeSeriesCompression( statGraphWidth);\n          }\n          if (window.Worker && !sim.config.visualize) {\n            // start the scenario simulation worker\n            worker = new Worker(\"simulation-worker.js\");\n            msg = {runExperiment: false, endTime: sim.scenario.simulationEndTime,\n              createLog: sim.config.createLog};\n            Object.keys( sim.model.v).forEach( function (varName) {\n              if (sim.model.v[varName].value !== undefined) {\n                changedModelVarValues[varName] = sim.model.v[varName].value;\n              }\n            });\n            if (Object.keys( changedModelVarValues).length > 0) {\n              msg.changedModelVarValues = changedModelVarValues;\n            }\n            worker.postMessage( msg);\n            // on incoming messages from worker\n            worker.onmessage = function (e) {\n              // update progress bar\n              if (e.data.progressIncrement !== undefined) {\n                document.querySelector(\"#progress-container > progress\").value +=\n                    e.data.progressIncrement;\n                // update step/time info only when updating the progress bar\n                sim.ui[\"sim\"].dataBinding[\"step\"].value = numFmt.format( e.data.simStep);\n                sim.ui[\"sim\"].dataBinding[\"time\"].value = numFmt.format( e.data.simTime);\n              } else if (e.data.simTime !== undefined) {\n                // receive step log message\n                sim.logStep( e.data);\n              } else if (e.data.simStat !== undefined) {\n                // receive ex post statistics at simulation end\n                sim.stat = e.data.simStat;\n                oes.ui.updateUiOnSimulationEnd();\n              }\n            };\n          } else {  // start main thread simulator\n            sim.runScenario();\n          }\n        },\n        \"run step\": function () {\n          alert(\"Single step mode is not yet implemented!\");\n        },\n        \"defineExperiment\": function () {\n          var experimentsUiPanelEl = document.getElementById(\"experimentsUI\"),\n              mainContentEl = null;\n          if (experimentsUiPanelEl) {\n            mainContentEl = experimentsUiPanelEl.lastElementChild;\n          } else return;\n          experimentsUiPanelEl.style.display = \"block\";\n          // display the panel's main content element\n          mainContentEl.style.display = \"block\";\n          // hide +Experiment button\n          document.forms[\"scenario\"].defineExperiment.style.display = \"none\";\n          try {\n            sim.experiment.experimentNo = 1;\n            sim.ui[\"experiments\"] = new oBJECTvIEW({\n              modelObject: sim.experiment,\n              //fields: [[\"experimentNo\", \"title\", \"replications\", \"parameters\"]],\n              fields: [[\n                {name: \"experimentNo\",\n                  label: sim.experiment.properties[\"experimentNo\"].label,\n                  range: sim.experiment.properties[\"experimentNo\"].range,\n                  inputOutputMode: \"O\"},\n                \"experimentTitle\", \"replications\", \"parameterDefs\"]],\n              suppressNoValueFields: false,\n              userActions: {\n                \"save\": function () {\n                  alert(\"Sorry! Defining new experiments is not yet implemented!\");\n                }\n              }\n            });\n            /* sim.ui[\"experiments\"].userActions[\"save\"].label = \"Save\"; */\n            // render view and store its data binding\n            sim.ui[\"experiments\"].dataBinding = sim.ui[\"experiments\"].render( mainContentEl);\n          } catch (e) {\n            console.log( e.constructor.name +\": \"+ e.message);\n          }\n        }\n      }\n    });\n  } catch (e) {\n    console.log( e.constructor.name +\": \"+ e.message);\n  }\n  sim.ui[\"scenario\"].userActions[\"run\"].label = \"►\";\n  sim.ui[\"scenario\"].userActions[\"run\"].hint = i18n.t(\"Run simulation scenario\");\n  sim.ui[\"scenario\"].userActions[\"run step\"].label = \"⏯\";  // = \\u23EF = \"&#9199;\"\n  sim.ui[\"scenario\"].userActions[\"run step\"].hint = i18n.t(\"Execute a single simulation step\");\n  sim.ui[\"scenario\"].userActions[\"defineExperiment\"].label = i18n.t(\"+Experiment\");\n  sim.ui[\"scenario\"].userActions[\"defineExperiment\"].hint = i18n.t(\"Define an experiment\");\n  sim.ui[\"scenario\"].userActions[\"defineExperiment\"].showCondition = function () {\n    return !sim.experiment.replications;\n  };\n  // render the view and store its databinding\n  sim.ui[\"scenario\"].dataBinding = sim.ui[\"scenario\"].render( mainEl);\n  // show simulation time unit\n  el = document.querySelector(\"form#scenario input[name*='simulationEndTime']\");\n  if (sim.model.timeUnit) {\n    el2 = document.createElement(\"span\");\n    el2.title = oes.ui.timeUnitLabels[sim.model.timeUnit];\n    el2.textContent = sim.model.timeUnit;\n    dom.insertAfter( el2, el);\n  }\n  // show step duration time unit (ms)\n  el = document.querySelector(\"form#scenario input[name*='stepDuration']\");\n  if (el) dom.insertAfter( document.createTextNode(\" ms\"), el);\n\n  /*********************************************************************\n   Set up UI for showing/modifying model variables within scenario UI\n   **********************************************************************/\n  if (Object.keys( sim.model.v).length > 0) {\n    oes.ui.setupModelVariablesUI( document.forms[\"scenario\"]);\n  }\n  // possibly re-create initial objects/events\n  if (!(sim.scenario.initialState.objects && sim.scenario.initialState.events) &&\n      typeof sim.scenario.setupInitialState === \"function\") {\n    sim.scenario.setupInitialState();\n  }\n  /*********************************************************************\n   Set up UI for modifying the initial objects within scenario UI\n   **********************************************************************/\n  if (Object.keys( sim.objects).length > 0 && !sim.config.suppressInitialStateUI) {\n    oes.ui.setupInitialObjectsUI( document.forms[\"scenario\"]);\n  }\n  /*********************************************************************\n   Set up UI for modifying the initial events within scenario UI\n  **********************************************************************/\n  if (!sim.FEL.isEmpty() && !sim.config.suppressInitialStateUI) {\n    oes.ui.setupInitialEventsUI( document.forms[\"scenario\"]);\n  }\n  /*********************************************************************\n   Set up UI for defining/modifying experiments within scenario UI\n  **********************************************************************/\n  if (sim.experiment.replications && !sim.config.suppressExperimentsUI) {\n    oes.ui.setupExperimentsUI( document.forms[\"scenario\"]);\n  }\n\n  /*********************************************************************\n   Simulator Control UI\n   *********************************************************************/\n  try {\n    sim.ui[\"sim\"] = new oBJECTvIEW({\n      modelObject: sim,\n      fields: [[\n        { name:\"step\", inputOutputMode:\"O\"},  // property-based\n        { name:\"time\", inputOutputMode:\"O\"}   // property-based\n      ]],\n      suppressNoValueFields: false,  // always render fields (even without a value)\n      userActions: {\n        \"stop\": function () {\n          sim.stopRequested = true;\n        },\n        \"continue\": function () {\n          document.forms[\"sim\"].elements[\"stop\"].disabled = false;\n          sim.runStep();\n        },\n        \"restart\": function () {\n          document.getElementById(\"sim\").remove();\n          [\"scenario\",\"experiment\",\"visCanvas\",\"expost-statistics\",\"simLogTbl\"].forEach( function (elemID) {\n            if (document.getElementById( elemID)) document.getElementById( elemID).remove();\n          });\n          //oes.ui.reset();\n          document.getElementsByTagName(\"footer\")[0].remove();\n          oes.setupFrontEndSimEnv();\n        }\n      }\n    });\n    sim.ui[\"sim\"].userActions[\"stop\"].label = \"⏹\";  // = \"&#9209;\"\n    sim.ui[\"sim\"].userActions[\"stop\"].hint = i18n.t(\"Stop simulation\");\n    sim.ui[\"sim\"].userActions[\"continue\"].label = \"►\";  // = \"&#9654;\"\n    sim.ui[\"sim\"].userActions[\"continue\"].hint = i18n.t(\"Continue simulation\");\n    sim.ui[\"sim\"].userActions[\"restart\"].label = \"⏮\";  // = \"&#9198;\"\n    sim.ui[\"sim\"].userActions[\"restart\"].hint = i18n.t(\"Restart simulation\");\n    // render view and store its data binding\n    sim.ui[\"sim\"].dataBinding = sim.ui[\"sim\"].render( mainEl);\n    el = document.querySelector(\"form#sim output[name*='time']\");\n    if (sim.model.timeUnit) {\n      dom.insertAfter( document.createTextNode(\" \"+ sim.model.timeUnit), el);\n    }\n    document.forms[\"sim\"].style.display = \"none\";\n  } catch (e) {\n    console.log( e.constructor.name +\": \"+ e.message);\n  }\n  /*********************************************************************\n   Set up UIs for Visualization, Event Appearances and User Interaction\n   **********************************************************************/\n  if (sim.config.visualize) {\n    oes.ui.setupVisualization();\n    if (sim.config.observationUI.eventAppearances &&\n        Object.keys( sim.config.observationUI.eventAppearances).length > 0) {\n      oes.ui.setupEventAppearances();\n    }\n    if (sim.scenario.userInteractions &&\n        Object.keys( sim.scenario.userInteractions).length > 0 &&\n        sim.config.userInteractive) {\n      oes.ui.setupUserInteraction();\n    }\n  } else sim.config.userInteractive = false;  // no visual. implies no usr interaction\n  //TODO: set up UI for ex-post statistics using oBJECTvIEW\n  /*\n   try {\n   sim.ui[\"expoststat\"] = new oBJECTvIEW({\n   modelObject: sim.model.statistics,\n   suppressNoValueFields: false,\n   userActions: {\n   }\n   });\n   // render view and store its data binding\n   sim.ui[\"expoststat\"].dataBinding = sim.ui[\"expoststat\"].render();\n   document.forms[\"expoststat\"].style.display = \"none\";\n   } catch (e) {\n   console.log( e.constructor.name +\": \"+ e.message);\n   }\n   */\n  /*********************************************************************\n   Set up UI for ex-post statistics\n   **********************************************************************/\n  if (statistics) {\n    el = dom.createElement(\"form\", {id:\"expost-statistics\"});\n    el.style.overflowX = \"auto\";  // horizontal scrolling\n    Object.keys( statistics).forEach( function (statVar) {\n      var lbl = statistics[statVar].label, contEl=null;\n      if (lbl) {\n        // turn it on when there is at least one showTimeSeries variable\n        createTimeSeriesChart |= statistics[statVar].showTimeSeries;\n        if (!statistics[statVar].showTimeSeries) {\n          contEl = dom.createElement(\"div\", {classValues:\"I-O-field\"});\n          contEl.appendChild( dom.createLabeledOutputField({\n            name: statVar, labelText: i18n.t( lbl)}));\n          el.appendChild( contEl);\n        }\n      }\n    });\n    dom.insertAfter( el, document.forms[\"sim\"]);\n    document.forms[\"expost-statistics\"].style.display = \"none\";\n    if (createTimeSeriesChart) {\n      el = dom.createElement(\"div\", {id:\"time-series-chart\"});\n      document.forms[\"expost-statistics\"].appendChild( el);\n    }\n  }\n  // hide UI components that are not relevant for backend simulations\n  if (!oes.ui.fullUI) {\n    el.style.display = \"none\";\n    document.forms[\"sim\"].elements[\"stop\"].style.display = \"none\";\n    document.forms[\"sim\"].elements[\"continue\"].style.display = \"none\";\n  }\n  oes.ui.createPageFooter();\n};\n/*********************************************************************\n Set up the simulation/experiment log (create initially empty log table)\n **********************************************************************/\noes.ui.setupSimLog = function (isExperiment) {\n  var el = document.getElementById(\"simLogTbl\"),\n      mainEl = document.querySelector(\"body > main\"),\n      N=0, statVarHeadings=\"\", colHeadingsRow=\"\", M=0;\n  if (!el) {\n    el = document.createElement(\"table\");\n    el.id = \"simLogTbl\";\n    mainEl.appendChild( el);\n  }\n  if (isExperiment) {\n    el.classList.add(\"expStatistics\")\n    Object.keys( sim.model.statistics).forEach( function (v) {\n      var unit=\"\", label = sim.model.statistics[v].label;\n      if (label) {\n        unit = sim.model.statistics[v].unit;\n        if (unit) unit = \" [\"+ unit +\"]\";\n        else unit = \"\";\n        N = N+1;\n        statVarHeadings += \"<th>\"+ label+unit +\"</th>\";\n      }\n    })\n    if (sim.experiment.parameterDefs.length > 0) {\n      colHeadingsRow = \"<tr><th rowspan='2'>\"+ i18n.t(\"Experiment scenario\") +\n          \"</th><th rowspan='2'>\"+ i18n.t(\"Parameter values\") +\"</th>\" +\n          \"<th colspan='\"+ N +\"'>\"+ i18n.t(\"Statistics\") +\"</th></tr>\";\n      M = 2;\n    } else {\n      colHeadingsRow = \"<tr><th rowspan='2'>\"+ i18n.t(\"Replication\") +\"</th>\" +\n          \"<th colspan='\"+ N +\"'>\"+ i18n.t(\"Statistics\") +\"</th></tr>\";\n      M = 1;\n    }\n    el.innerHTML = \"<thead><tr><th colspan='\"+ (M+N) + \"'>\" +\n        i18n.t(\"Experiment Log\") +\"</th></tr>\" +\n        colHeadingsRow + \"<tr>\"+ statVarHeadings +\"</tr></thead>\";\n  } else {\n    el.innerHTML = \"<thead><tr><th colspan='4'>\"+ i18n.t(\"Simulation Log\") +\"</th></tr>\" +\n        \"<tr><th colspan='2'>\"+ i18n.t(\"Time\") +\"</th><th>\"+ i18n.t(\"System State\") +\n        \"</th><th>\"+ i18n.t(\"Future Events\") +\"</th></tr></thead>\";\n  }\n  sim.ui.logEl = dom.createElement(\"tbody\",{id:\"simLog\"});\n  el.appendChild( sim.ui.logEl);\n  el.style.overflowX = \"auto\";  // horizontal scrolling\n}\n\n/*******************************************************\n Reset front-end simulation environment\n *******************************************************\n * @method\n * @author Gerd Wagner\n */\noes.ui.reset = function () {\n  // display/hide UI panels\n  document.forms[\"scenario\"].style.display = \"block\";\n  document.forms[\"sim\"].style.display = \"none\";\n  if (document.forms[\"expost-statistics\"]) {\n    document.forms[\"expost-statistics\"].style.display = \"none\";\n  }\n  // enable/disable user action buttons\n  document.forms[\"sim\"].elements[\"stop\"].disabled = false;\n  document.forms[\"sim\"].elements[\"continue\"].disabled = false;\n  // reset simulation log table\n  sim.ui.logEl.parentNode.style.display = \"none\";\n  sim.ui.logEl.innerHTML = \"\";\n};\n/*******************************************************\n Update Simulation UI on Stop\n *******************************************************\n * @method\n * @author Gerd Wagner\n */\noes.ui.updateUiOnStop = function () {\n  // enable/disable user action buttons\n  document.forms[\"sim\"].elements[\"stop\"].disabled = true;\n  document.forms[\"sim\"].elements[\"continue\"].disabled = false;\n  document.forms[\"sim\"].elements[\"restart\"].disabled = false;\n};\n/*******************************************************\n Update Simulation UI on Simulation End\n *******************************************************\n * @method\n * @author Gerd Wagner\n */\noes.ui.updateUiOnSimulationEnd = function ( isExperiment) {\n  document.getElementById(\"progress-container\").remove();\n  // log simulation time\n  console.log(\"Execution time: \", ((new Date()).getTime() - sim.startTime) + \" ms\");\n  // enable/disable user action buttons\n  document.forms[\"sim\"].elements[\"stop\"].disabled = true;\n  document.forms[\"sim\"].elements[\"continue\"].disabled = true;\n  document.forms[\"sim\"].elements[\"restart\"].disabled = false;\n  if (!isExperiment) {\n    if (sim.model.statistics) {\n      document.forms[\"expost-statistics\"].style.display = \"block\";\n      oes.ui.showExPostStatistics();\n    }\n  }\n};\n/*******************************************************\n Show Ex-Post Statistics\n *******************************************************\n * @method\n * @author Gerd Wagner\n */\noes.ui.showExPostStatistics = function () {\n  var statistics = sim.model.statistics,\n      chart=null, displayStr=\"\",\n      locale = i18n.accessLang ? i18n.accessLang : \"en-US\",\n      numFmt = new Intl.NumberFormat( locale, {maximumFractionDigits:2}),\n      showTimeSeries=false,\n      height=0, minusX=0, minusY= 0,\n      width = sim.scenario.simulationEndTime,\n      chartLabels = [];\n  var chartSeries = [], dataT = [];\n  // determine maximum time series value\n  Object.keys( statistics).forEach( function (varName) {\n    if (statistics[varName].showTimeSeries) {\n      showTimeSeries = true;\n      if (sim.timeIncrement !== undefined) {  // fixed-increment time progression\n        height = Math.max( height, Array.max( sim.stat.timeSeries[varName]));\n      } else {  // next-event time progression\n        height = Math.max( height, Array.max( sim.stat.timeSeries[varName][1]));\n      }\n    }\n  });\n  height += height * 0.05;\n  minusX = -width/20;\n  minusY = -height/15;\n  Object.keys( statistics).forEach( function (varName) {\n    var lbl = statistics[varName].label,\n        decPl = 2,  // default\n        i=0, n=0,\n        legendLabel = '';\n    var dataY=[];\n    if (lbl) {\n      if (statistics[varName].showTimeSeries) {\n        legendLabel = i18n.t( lbl) || varName;\n        if (statistics[varName].unit)\n          legendLabel += \" (\" + statistics[varName].unit + \")\";\n        chartLabels.push( legendLabel);\n        if (sim.timeIncrement) {  // fixed-increment time progression\n          dataY = sim.stat.timeSeries[varName];\n          width = dataY.length;\n          n = dataY.length;\n          dataT = [];\n          for (i=0; i < n; i++) {\n            dataT.push(i * sim.timeIncrement * oes.stat.timeSeriesCompressionSteps);\n          }\n        } else {  // next-event time progression\n          dataT = sim.stat.timeSeries[varName][0];\n          dataY = sim.stat.timeSeries[varName][1];\n          n = dataT.length;\n          width = dataT[n-1];  // simulation end time\n        }\n        chartSeries.push({name: legendLabel, data: dataY});\n      } else {\n        /*\n        if (!statistics[varName].hasIntegerRange) {\n          if (statistics[varName].decimalPlaces) {\n            decPl = statistics[varName].decimalPlaces;\n          }\n          displayStr = sim.stat[varName].toFixed( decPl);\n        } else displayStr = String( sim.stat[varName]);\n        */\n        if (statistics[varName].decimalPlaces) {\n          decPl = statistics[varName].decimalPlaces;\n          displayStr = new Intl.NumberFormat( locale, {maximumFractionDigits: decPl}).\n              format( sim.stat[varName]);\n        } else displayStr = numFmt.format( sim.stat[varName]);\n        if (statistics[varName].unit) displayStr += \" \" + statistics[varName].unit;\n        document.forms[\"expost-statistics\"].elements[varName].value = displayStr;\n      }\n    }\n  });\n  // show resource utilization statistics\n  if (sim.stat.resUtil && Object.keys( sim.stat.resUtil).length > 0) {\n    document.forms[\"expost-statistics\"].appendChild(\n        dom.createElement(\"h2\", {content: i18n.t(\"Resource Utilization\")})\n    );\n    Object.keys( sim.stat.resUtil).forEach( function (actT) {\n      var activityTypeLabel = cLASS[actT].label || actT;\n      document.forms[\"expost-statistics\"].appendChild(\n          dom.createElement(\"h3\", {content: i18n.t(activityTypeLabel)})\n      );\n      Object.keys( sim.stat.resUtil[actT]).forEach( function (objIdStr) {\n        //console.log(objIdStr +\": \"+ sim.stat.resUtil[actT][objIdStr]/sim.time);\n        var objName = sim.objects[objIdStr].name || objIdStr,\n            contEl = dom.createElement(\"div\", {classValues:\"I-O-field\"}),\n            resUtil = Math.round( sim.stat.resUtil[actT][objIdStr]/sim.scenario.simulationEndTime * 10000) / 100;\n        contEl.appendChild( dom.createLabeledOutputField({ name: objIdStr,\n            labelText: objName, value: numFmt.format( resUtil) + \" %\"}));\n        document.forms[\"expost-statistics\"].appendChild( contEl);\n      });\n    });\n  }\n  if (showTimeSeries) {\n    chart = new Chartist.Line('#time-series-chart', {\n        labels: dataT,\n        series: chartSeries\n      }, {\n        showPoint: false,\n        lineSmooth: true,\n        showArea: true,\n        axisX: {\n          labelInterpolationFnc: function ( value, index ) {\n            var interval = parseInt( dataT.length / 10 );\n            return index % interval === 0 ? value : null;\n          }\n        },\n        axisY: {\n          offset: 60,\n          labelInterpolationFnc: function ( value ) {\n            return value.toFixed( 2 );\n          }\n        },\n        plugins: [\n          Chartist.plugins.legend() // used to display chart legend\n        ]}\n    );\n  }\n};\n\n/*******************************************************\n UI for defining the initial state\n *******************************************************\n * Set up UI for model varables\n *\n * @method\n * @author Gerd Wagner\n */\noes.ui.setupModelVariablesUI = function (parentEl) {\n  var uiPanelEl = dom.createExpandablePanel({id: \"ModelVariablesUI\",\n      heading: i18n.t(\"Model Variables\"), borderColor:\"aqua\",\n      hint: i18n.accessLang ? i18n.t(\"ModelVariablesUI hint\") :\n          \"Define/set variables that can be used, for instance, in the initial state \" +\n          \"or as parameters in functions or in an experiment.\"});\n  var mainContentEl = uiPanelEl.lastElementChild;\n  var labeledVarDefs={}, vm={};\n  sim.config.modelVariablesUI = sim.config.modelVariablesUI || {};\n  Object.keys( sim.model.v).forEach( function (varName) {\n    if (sim.model.v[varName].label) {\n      labeledVarDefs[varName] = sim.model.v[varName];\n      labeledVarDefs[varName].label = i18n.t(sim.model.v[varName].label);\n    }\n  });\n  if (Object.keys( labeledVarDefs).length === 0) return;  // nothing to show\n  vm = {inputFields: labeledVarDefs};\n  // create form element\n  mainContentEl.appendChild( oBJECTvIEW.createUiFromViewModel( vm));\n  sim.config.modelVariablesUI.userActions = {\n    \"applyChanges\": function () {\n      Object.keys( vm.fieldValues).forEach( function (fld) {\n        sim.model.v[fld].value = vm.fieldValues[fld];  // this will be used by worker\n        sim.v[fld] = vm.fieldValues[fld];\n      });\n      sim.createInitialObjEvt();\n      // redraw visualization of initial state (step 0)\n      if (sim.config.visualize) {\n        oes.ui.resetCanvas();\n        oes.ui.visualizeStep();\n      }\n    }\n  };\n  sim.config.modelVariablesUI.userActions[\"applyChanges\"].label = i18n.t(\"Apply changes\");\n  // create buttons for userActions\n  mainContentEl.appendChild( oBJECTvIEW.createUiElemsForUserActions(\n      sim.config.modelVariablesUI.userActions\n  ));\n  parentEl.appendChild( uiPanelEl);\n}\n/*******************************************************\n UI for defining the initial state objects\n *******************************************************\n *\n * @method\n * @author Gerd Wagner\n */\noes.ui.setupInitialObjectsUI = function (parentEl) {\n  var objTypes = sim.model.objectTypes.concat( oes.predefinedObjectTypes);  // an array\n  var uiPanelEl = dom.createExpandablePanel({id:\"InitialStateObjectsUI\",\n      heading: i18n.t(\"Initial Objects\"), borderColor:\"aqua\",\n    // \"Delete, create or edit initial objects.\"\n      hint: i18n.accessLang ? i18n.t(\"InitialStateObjectsUI hint\") :\n          \"Change initial attribute values of objects - as a part of the initial state\"\n  });\n  var contentEl = uiPanelEl.lastElementChild,\n      mainEl = dom.createElement(\"div\", {classValues:\"xpanel-main\"});\n  contentEl.appendChild( mainEl);\n  sim.scenario.initialStateUI = sim.scenario.initialStateUI || {};\n  // create a ClassPopulationWidget for each object type\n  objTypes.forEach( function (className) {\n    var editProps=[], classPopWidget=null,\n        slots = {type: className},\n        Class = cLASS[className];\n    if (!Class.instances || Object.keys( Class.instances).length === 0) return;\n    if (sim.scenario.initialStateUI &&\n        sim.scenario.initialStateUI.editableProperties &&\n        sim.scenario.initialStateUI.editableProperties[className]) {\n      editProps = sim.scenario.initialStateUI.editableProperties[className];\n      slots.editProps = editProps;\n    }\n    classPopWidget = oBJECTvIEW.createRecordTableWidget( slots);\n    mainEl.appendChild( classPopWidget);\n  });\n  sim.scenario.initialStateUI.userActions = {\n    \"applyChanges\": function () {\n      alert(\"Changing the initial state is not yet implemented!\"); return;\n      sim.updateInitialStateObjects();\n      sim.createInitialObjEvt();\n      if (sim.config.visualize) {\n        oes.ui.resetCanvas();\n        oes.ui.visualizeStep();  // visualize initial state\n      }\n    }\n  };\n  sim.scenario.initialStateUI.userActions[\"applyChanges\"].label = i18n.t(\"Apply changes\");\n  // create buttons for userActions\n  contentEl.appendChild( oBJECTvIEW.createUiElemsForUserActions(\n      sim.scenario.initialStateUI.userActions\n  ));\n  parentEl.appendChild( uiPanelEl);\n};\n/*******************************************************\n UI for defining the initial state events\n *******************************************************\n *\n * @method\n * @author Gerd Wagner\n */\noes.ui.setupInitialEventsUI = function (parentEl) {\n  var evtTypes = sim.model.eventTypes.concat( oes.predefinedEventTypes);  // an array\n  var uiPanelEl = dom.createExpandablePanel({id:\"InitialStateEventsUI\",\n      heading: i18n.t(\"Initial Events\"), borderColor:\"aqua\",\n      // \"Delete, create or edit initial events.\"\n    hint: i18n.accessLang ? i18n.t(\"InitialStateEventsUI hint\") :\n        \"Change initial attribute values of events - as a part of the initial state\"\n  });\n  var contentEl = uiPanelEl.lastElementChild,\n      mainEl = dom.createElement(\"div\", {classValues:\"xpanel-main\"});\n  var initEvts = sim.FEL.getAllEvents();\n  contentEl.appendChild( mainEl);\n  sim.scenario.initialEventsUI = sim.scenario.initialEventsUI || {};\n  // create a ClassPopulationWidget for each event type\n  evtTypes.forEach( function (className) {\n    var editProps=[], classPopWidget=null,\n        Class = cLASS[className],\n        slots = {type: className};\n    Class.instances = initEvts.filter(\n        function (evt) {return evt.constructor.Name === className;});\n    if (Object.keys( Class.instances).length === 0) return;\n    if (sim.scenario.initialEventsUI.editableProperties &&\n        sim.scenario.initialEventsUI.editableProperties[className]) {\n      editProps = sim.scenario.initialEventsUI.editableProperties[className];\n      slots.editProps = editProps;\n    }\n    // add inherited property\n    Class.properties[\"occTime\"] = {range:\"NonNegativeNumber\", label:\"Occ. time\"};\n    classPopWidget = oBJECTvIEW.createRecordTableWidget( slots);\n    mainEl.appendChild( classPopWidget);\n  });\n  sim.scenario.initialEventsUI.userActions = {\n    \"applyChanges\": function () {\n      sim.updateInitialStateObjects();\n      sim.createInitialObjEvt();\n      if (sim.config.visualize) {\n        oes.ui.resetCanvas();\n        oes.ui.visualizeStep();  // visualize initial state\n      }\n    }\n  };\n  sim.scenario.initialEventsUI.userActions[\"applyChanges\"].label = i18n.t(\"Apply changes\");\n  // create buttons for userActions\n  contentEl.appendChild( oBJECTvIEW.createUiElemsForUserActions(\n      sim.scenario.initialEventsUI.userActions\n  ));\n  parentEl.appendChild( uiPanelEl);\n};\n/*******************************************************\n UI for Experiments\n *******************************************************\n *\n * @method\n * @author Gerd Wagner\n */\noes.ui.setupExperimentsUI = function (parentEl) {\n  var uiPanelEl = dom.createExpandablePanel({id:\"experimentsUI\",\n      heading: i18n.t(\"Experiments\"), borderColor:\"chartreuse\",\n      hint: i18n.accessLang ? i18n.t(\"experimentsUI hint\") :\n        \"An experiment is defined on top of a scenario by defining (1) the number of replications, \" +\n        \"(2) zero or more experiment parameters (bound to model variables), and \" +\n        \"(3) possibly a list of seed values, one for each replication.\"\n  });\n  var mainContentEl = uiPanelEl.lastElementChild;\n  parentEl.appendChild( uiPanelEl);\n  if (sim.experiment.replications) {  // an experiment has been defined\n    try {\n      sim.ui[\"experiments\"] = new oBJECTvIEW({\n        modelObject: sim.experiment,\n        heading: i18n.t(\"Experiment\") +\" \"+ sim.experiment.experimentNo +\n            (sim.experiment.title ? \": \"+ i18n.t( sim.experiment.title) : \"\"),\n        fields: [[\"replications\", \"parameterDefs\"]],\n        suppressNoValueFields: true,\n        userActions: {\n          \"run\": function () {\n            var tbodyEl=null, worker=null, msg={}, changedModelVarValues={};\n            var progressContainer = dom.createProgressBar(i18n.t(\"Executing simulation experiment...\"));\n            function logExpScenarioRun( data) {\n              var rowEl = tbodyEl.insertRow();  // create new table row\n              var locale = i18n.accessLang ? i18n.accessLang : \"en-US\",\n                  numFmt = new Intl.NumberFormat( locale,\n                      {maximumFractionDigits: oes.defaults.expostStatDecimalPlaces});\n              rowEl.insertCell().textContent = data.expScenNo;\n              rowEl.insertCell().textContent = data.expScenParamValues.toString();\n              Object.keys( data.expScenStat).forEach( function (v) {\n                var statVal = data.expScenStat[v], displayStr=\"\",\n                    decPl = sim.model.statistics[v].decimalPlaces;\n                if (decPl) {\n                  displayStr = new Intl.NumberFormat( locale,\n                      {maximumFractionDigits:decPl}).format( statVal);\n                } else displayStr = numFmt.format( statVal);\n                rowEl.insertCell().textContent = displayStr;\n              });\n            }\n            function logSimpleExpRun( data) {\n              var rowEl=null, i=0;\n              var nmrOfReplications = data.expReplicStat[Object.keys( data.expReplicStat)[0]].length;\n              for (i=0; i < nmrOfReplications; i++) {\n                rowEl = tbodyEl.insertRow();  // create new table row\n                rowEl.insertCell().textContent = i+1;  // replication No\n                Object.keys( data.expReplicStat).forEach( function (varName    ) {\n                  var range = sim.model.statistics[varName].range,\n                      val = data.expReplicStat[varName][i];\n                  if (cLASS.isIntegerType(range)) val = parseInt( val);\n                  else val = val.toFixed( oes.defaults.expostStatDecimalPlaces);\n                  rowEl.insertCell().textContent = val;\n                });\n              }\n              // create footer with summary statistics\n              Object.keys( oes.stat.summary).forEach( function (aggr) {\n                rowEl = tbodyEl.insertRow();  // create new table row\n                rowEl.insertCell().textContent = oes.stat.summary[aggr].label;\n                Object.keys( data.expScenStat).forEach( function (varName) {\n                  var range = sim.model.statistics[varName].range,\n                      val = data.expScenStat[varName][aggr];\n                  if (cLASS.isIntegerType(range)) val = parseInt(val);\n                  else val = val.toFixed( oes.defaults.expostStatDecimalPlaces);\n                  rowEl.insertCell().textContent = val;\n                });\n              });\n              /*\n              rowEl = tbodyEl.insertRow();  // create new table row\n              rowEl.insertCell().textContent = \"Average\";\n              Object.keys( data.expScenStat).forEach( function (varName) {\n                var range = sim.model.statistics[varName].range,\n                    val = data.expScenStat[varName].average;\n                if (cLASS.isIntegerType(range)) val = parseInt( val);\n                else val = val.toFixed( oes.defaults.expostStatDecimalPlaces);\n                rowEl.insertCell().textContent = val;\n              });\n              */\n            }\n            document.body.appendChild( progressContainer);\n            // configure experiment log\n            oes.ui.setupSimLog( true);\n            tbodyEl = sim.ui.logEl;\n            // drop scenario form\n            document.forms[\"scenario\"].remove();\n            // show simulator controls\n            document.forms[\"sim\"].style.display = \"block\";\n            // log simulation start time (in the main thread)\n            sim.startTime = (new Date()).getTime();\n            // start the simulation worker\n            if (window.Worker) {\n              worker = new Worker(\"simulation-worker.js\");\n              // send \"experiment mode\" message to worker\n              msg = {runExperiment: true,\n                     endTime: sim.scenario.simulationEndTime,\n                     expReplications: sim.experiment.replications,\n                     dbName: sim.model.name};\n              Object.keys( sim.model.v).forEach( function (varName) {\n                if (sim.model.v[varName].value !== undefined) {\n                  changedModelVarValues[varName] = sim.model.v[varName].value;\n                }\n              });\n              if (Object.keys( changedModelVarValues).length > 0) {\n                msg.changedModelVarValues = changedModelVarValues;\n              }\n              worker.postMessage( msg);\n              // on incoming messages from worker\n              worker.onmessage = function (e) {\n                if (e.data.expScenNo !== undefined) logExpScenarioRun( e.data);\n                if (e.data.expReplicStat !== undefined) logSimpleExpRun( e.data);\n                if (e.data.progressIncrement !== undefined) {\n                  document.querySelector(\"#progress-container > progress\").value +=\n                      e.data.progressIncrement;\n                }\n                if (e.data.endOfExp) oes.ui.updateUiOnSimulationEnd( true);\n              };\n            } else {\n              alert(\"Experiment cannot be executed since browser does not support web workers!\");\n            }\n          }\n        }\n      });\n      sim.ui[\"experiments\"].userActions[\"run\"].label = \"►\";  // i18n.t(\"Run Experiment\")\n      sim.ui[\"experiments\"].userActions[\"run\"].hint = i18n.t(\"Run experiment\");\n      // render view and store its data binding\n      sim.ui[\"experiments\"].dataBinding = sim.ui[\"experiments\"].render( mainContentEl);\n    } catch (e) {\n      console.log( e.constructor.name +\": \"+ e.message);\n    }\n  } else {\n    //mainContentEl.innerHTML = \"<p>No experiment defined.</p>\";\n    uiPanelEl.style.display = \"none\";\n  }\n};\n\n/*******************************************************\n TODO: UI for Expost Statistics\n *******************************************************\n *\n * @method\n * @author Gerd Wagner\n */\noes.ui.setupExpostStatisticsDefUI = function (parentEl) {\n  var uiPanelEl = dom.createExpandablePanel({id:\"spaceUI\", heading:\"Space\"});\n  var mainContentEl = uiPanelEl.lastElementChild;\n  parentEl.appendChild( uiPanelEl);\n  sim.ui[\"space\"] = new oBJECTvIEW({\n    modelObject: sim.model.space,\n    fields: [[\"xMax\", \"yMax\", \"zMax\"].slice(0,\n        oes.space.dimensions[sim.model.space.type])],\n    suppressNoValueFields: false,\n    userActions: {\n      \"applyChanges\": function () {\n        sim.updateInitialStateObjects();\n        oes.ui.resetCanvas();\n        // visualize initial state (at start of step 0)\n        if (sim.config.visualize) oes.ui.visualizeStep();\n      }\n    }\n  });\n  sim.ui[\"space\"].userActions[\"applyChanges\"].label = \"Apply changes\";\n  // render view and store its data binding\n  sim.ui[\"space\"].dataBinding = sim.ui[\"space\"].render( mainContentEl);\n};\n/*******************************************************\n Set up the Visualization\n *******************************************************/\noes.ui.setupVisualization = function () {\n  var mainEl = document.querySelector(\"body > main\");\n  if (sim.model.space.type) {\n    oes.ui.setupSpaceView();\n  } else if (sim.config.observationUI.type) {  // visualizing a non-spatial  model\n    switch (sim.config.observationUI.type) {\n      case \"SVG\":\n        oes.ui.setupCanvas = oes.ui.vis.SVG.setup;\n        oes.ui.resetCanvas = oes.ui.vis.SVG.reset;\n        oes.ui.visualizeStep = oes.ui.vis.SVG.visualizeStep;\n        break;\n      default:\n        console.log(\"Invalid visualization type: \"+ sim.config.observationUI.visualType);\n        sim.config.visualize = false;\n    }\n  } else sim.config.visualize = false;\n  if (sim.config.visualize) oes.ui.setupCanvas( mainEl);\n\n}\n/*******************************************************\n Set up the Space Visualization\n *******************************************************/\noes.ui.setupSpaceView = function () {\n  if (sim.model.space.type === undefined) throw \"No space type defined in *setupSpaceView*\";\n  switch (sim.model.space.type) {\n    // TODO: use (detect?) correct references methods, when other than the DOM\n    // visualization \"modules\" are implemented for IntegerGrid case.\n  case \"IntegerGrid\":\n    switch (sim.config.observationUI.spaceView.type) {\n    case \"threeDim\":\n      oes.ui.setupCanvas = oes.ui.space.threeDim.Babylon.setup;\n      oes.ui.resetCanvas = oes.ui.space.threeDim.Babylon.reset;\n      oes.ui.visualizeStep = oes.ui.space.threeDim.Babylon.render;\n      break;\n    default:\n      oes.ui.setupCanvas = oes.ui.space.grid.setup;\n      oes.ui.resetCanvas = oes.ui.space.grid.reset;\n      oes.ui.visualizeStep = oes.ui.space.grid.i.dom.renderIntegerGrid;\n    }\n   break;\n  // TODO: use (detect?) correct references methods, when other than the DOM\n  // visualization \"modules\" are implemented for ObjectGrid case.\n  case \"ObjectGrid\":\n    oes.ui.setupCanvas = oes.ui.space.grid.o.dom.setupObjectGrid;\n    oes.ui.resetCanvas = oes.ui.space.grid.reset;\n    oes.ui.visualizeStep = oes.ui.space.grid.o.dom.renderObjectGrid;\n    break;\n  case \"1D\":\n    switch (sim.config.observationUI.spaceView.type) {\n    case \"oneDimSVG\":\n      oes.ui.setupCanvas = oes.ui.space.oneDim.SVG.setup;\n      oes.ui.resetCanvas = oes.ui.space.oneDim.SVG.reset;\n      oes.ui.visualizeStep = oes.ui.space.oneDim.SVG.renderSimState;\n      break;\n    case \"threeDim\":\n      oes.ui.setupCanvas = oes.ui.space.threeDim.Babylon.setup;\n      oes.ui.resetCanvas = oes.ui.space.threeDim.Babylon.reset;\n      oes.ui.visualizeStep = oes.ui.space.threeDim.Babylon.render;\n      break;\n    // defaults to oneDimSVG visualization\n    default:\n      oes.ui.setupCanvas = oes.ui.space.oneDim.SVG.setup;\n      oes.ui.resetCanvas = oes.ui.space.oneDim.SVG.reset;\n      oes.ui.visualizeStep = oes.ui.space.oneDim.SVG.renderSimState;\n    }\n    break;\n  case \"2D\":\n    oes.ui.setupCanvas = oes.ui.space.twoDim.Phaser.setup;\n    oes.ui.resetCanvas = oes.ui.space.twoDim.Phaser.reset;\n    oes.ui.visualizeStep = oes.ui.space.twoDim.Phaser.render;\n    break;\n  case \"3D\":\n    // TODO: complete when a 3D space is supported.\n    break;\n  }\n};\n/*====================================================================================\n    S V G\n ==================================================================================== */\noes.ui.vis.SVG.setup = function (containerEl) {\n  var obsUI = sim.config.observationUI,\n      fixedElems = obsUI.fixedElements,\n      objViews = obsUI.objectViews,\n      canvasWidth = obsUI.canvas.width || 600,\n      canvasHeight = obsUI.canvas.height || 400,\n      canvasSvgEl = svg.createSVG({id:\"canvasSVG\",\n          width: canvasWidth, height: canvasHeight});\n  var defsEl = svg.createDefs(),\n      mainEl = document.querySelector(\"body > main\");\n  // define SVG canvas\n  sim.visualEl = dom.createElement(\"div\",{id:\"visCanvas\", classValues:\"uiBlock\"});\n  if (obsUI.canvas.style) sim.visualEl.style = obsUI.canvasStyle;\n  sim.visualEl.appendChild( canvasSvgEl);\n  canvasSvgEl.appendChild( defsEl);\n  mainEl.appendChild( sim.visualEl);\n  if (fixedElems) {  // render fixed elements\n    Object.keys( fixedElems).forEach( function (id) {\n      var el=null;\n      el = oes.ui.vis.SVG.createShapeFromDefRec( fixedElems[id]);\n      canvasSvgEl.appendChild( el);\n    });\n  }\n  if (objViews) {  // render initial object views\n    Object.keys( sim.objects).forEach( function (id) {\n      var el=null, shapeGroupEl=null, fp=null,\n          obj = sim.objects[id],\n          objView = objViews[id] || objViews[obj.name] || objViews[obj.constructor.Name];\n      if (objView) {\n        if (!Array.isArray( objView)) {  // single vis item definition record\n          if (objView.shapeName) {\n            if (objView.fillPatternImage) {\n              fp = objView.fillPatternImage;\n              if (!fp.file.includes(\"/\")) {\n                fp.file = oes.defaults.imgFolder + fp.file;\n              }\n              el = svg.createImageFillPattern( fp.id, fp.file);\n              defsEl.appendChild( el);\n              objView.style = \"fill: url(#\" + fp.id + \");\" + objView.style;\n            }\n            el = svg.createShapeFromDefRec( objView, obj);  // cannot be \"image\"\n            objView.element = el;\n            canvasSvgEl.appendChild( el);\n          } else {  // objView maps enum attribs to lists of visualization items\n            Object.keys( objView).forEach( function (key) {\n              var enumIndex = 0, currentEnumViewDefRec = [];\n              if (key !== \"object\" && key !== \"element\") {  // ommit special view fields\n                enumIndex = obj[key];  // key is enum attr name\n                currentEnumViewDefRec = objView[key][enumIndex-1];\n                objView[key].forEach( function (shDefRec) {\n                  var el = oes.ui.vis.SVG.createShapeFromDefRec( shDefRec, obj);\n                  el.style.display = \"none\";\n                  shDefRec.element = el;\n                  canvasSvgEl.appendChild( el);\n                  if (shDefRec.canvasBackgroundColor) {\n                    sim.visualEl.style.backgroundColor = shDefRec.canvasBackgroundColor;\n                  }\n                });\n                objView[key].element = currentEnumViewDefRec.element;\n                currentEnumViewDefRec.element.style.display = \"block\";\n              }\n            });\n          }\n        } else {  // objView is a list of vis item definition records\n          objView.elements = [];\n          shapeGroupEl = svg.createGroup();\n          objView.forEach( function (objViewItem) {\n            var txt=\"\";\n            if (objViewItem.shapeName) {\n              if (objViewItem.fillPatternImage) {\n                fp = objViewItem.fillPatternImage;\n                if (!fp.file.includes(\"/\")) {\n                  fp.file = oes.defaults.imgFolder + fp.file;\n                }\n                el = svg.createImageFillPattern( fp.id, fp.file);\n                defsEl.appendChild( el);\n                objViewItem.style = \"fill: url(#\" + fp.id + \");\" + objViewItem.style;\n              }\n              el = svg.createShape( objViewItem.shapeName,\n                  objViewItem.shapeAttributes, objViewItem.style, obj);\n            } else {  // objViewItem defines a text element\n              if (typeof objViewItem.text === \"function\") txt = objViewItem.text( obj);\n              else txt = objViewItem.text;\n              el = svg.createText( objViewItem.x, objViewItem.y, txt, objViewItem.style)\n            }\n            objView.elements.push( el);\n            shapeGroupEl.appendChild( el);\n          });\n          canvasSvgEl.appendChild( shapeGroupEl);\n        }\n        objView.object = obj;\n      }\n    });\n  }\n};\noes.ui.vis.SVG.reset = function () {\n  oes.ui.vis.SVG.visualizeStep();  //TODO: replace with real reset code\n};\noes.ui.vis.SVG.visualizeStep = function () {\n  var obsUI = sim.config.observationUI,\n      objViews = obsUI.objectViews;\n  Object.keys( objViews).forEach( function (viewId) {\n    var itemDefRec={}, shAttribs=[], el=null, i=0, val,\n        objView = objViews[viewId];\n    if (!Array.isArray( objView)) {  // single item view\n      if (objView.shapeName) {\n        el = objView.element;\n        shAttribs = objView.shapeAttributes;\n        Object.keys( shAttribs).forEach( function (attrName) {\n          var val;\n          // only expression-valued shape attributes need to be updated\n          if (typeof shAttribs[attrName] === \"function\") {\n            val = shAttribs[attrName]( objView.object);\n            switch (attrName) {\n            case \"textContent\":\n              el.textContent = val;\n              break;\n            case \"file\":\n              el.setAttributeNS( svg.XLINK_NS, \"href\", oes.defaults.imgFolder + val);\n              break;\n            default:\n              el.setAttribute( attrName, val);\n              break;\n            }\n          }\n        });\n      } else {  // objView maps enum attribs to lists of vis item def rec\n        Object.keys( objView).forEach( function (key) {\n          var enumIndex=0, currentEnumViewDefRec = {};\n          // exclude properties that objView may also contain\n          if (key !== \"object\" && key !== \"element\") {\n            enumIndex = objView.object[key];\n            if (Number.isInteger( enumIndex) && Array.isArray( objView[key]) &&\n                enumIndex >= 1 && enumIndex <= objView[key].length) {\n              currentEnumViewDefRec = objView[key][enumIndex-1];\n              // hide previous enum view\n              objView[key].element.style.display = \"none\";\n              // display current enum view\n              currentEnumViewDefRec.element.style.display = \"block\";\n              // store current enum view element\n              objView[key].element = currentEnumViewDefRec.element;\n              if (currentEnumViewDefRec.canvasBackgroundColor) {\n                sim.visualEl.style.backgroundColor = currentEnumViewDefRec.canvasBackgroundColor;\n              }\n            }\n          }\n        });\n      }\n    } else {  // objView is a list of view item definition records\n      for (i=0; i < objView.length; i++) {\n        itemDefRec = objView[i];\n        el = objView.elements[i];\n        if (itemDefRec.shapeName) {\n          shAttribs = itemDefRec.shapeAttributes;\n          Object.keys( shAttribs).forEach( function (attrName) {\n            if (typeof shAttribs[attrName] === \"function\") {\n              val = shAttribs[attrName]( objView.object);\n              switch (attrName) {\n              case \"textContent\":\n                el.textContent = val;\n                break;\n              case \"file\":\n                if (!val.includes(\"/\")) {\n                  val = oes.defaults.imgFolder + val;\n                }\n                el.setAttributeNS( svg.XLINK_NS, \"href\", val);\n                break;\n              default:\n                el.setAttribute( attrName, val);\n                break;\n              }\n            }\n          });\n        }\n      }\n    }\n  });\n};\noes.ui.vis.SVG.createShapeFromDefRec = function (shDefRec) {\n  var fn = shDefRec.shapeAttributes.file;\n  if (fn && !fn.includes(\"/\")) {\n    shDefRec.shapeAttributes.file = oes.defaults.imgFolder + fn;\n  }\n  return svg.createShapeFromDefRec( shDefRec);\n};\n\n/***********************************************************************\n Set up the User Interaction (UIA) Elements\n A UIA type is defined in the scenario/config. A UIA is triggered by a\n simulation event (of some type, possibly satisfying some condition)\n leading to the creation of a modal UIA window and an interruption of the\n simulation loop by having the browser wait for user input/actions. The\n UIA window contains output fields and input fields defined by the UIA\n type, and a \"continue\" button as a default user action element. After\n getting informed about the current situation by reading the output\n field values, the user makes her choices by entering corresponding\n values in the input fields and then performs the \"continue\" action,\n which triggers an event handler that restarts the simulator by calling\n sim.runScenarioStep( followupEvents) where the followupEvents have been\n obtained from invoking the onEvent method on the UIA triggering event\n with the UIA input field values as parameters.\n **********************************************************************/\noes.ui.setupUserInteraction = function () {\n  sim.ui.userInteractions = sim.ui.userInteractions || {};\n  sim.currentEvents = {};  // map of current events by type\n  Object.keys( sim.scenario.userInteractions).forEach( function (trigEvtTypeName) {\n    var uiDefRec = sim.scenario.userInteractions[trigEvtTypeName],\n        uiContainerEl=null, followupEvents=[], title=\"\";\n    //TODO: check if this reset can be dropped: uiDefRec.fieldValues = {};  // reset\n    uiDefRec.userActions = {\n      \"continue\": function () {\n        var inpFldValues={};  // initialize onEvent parameter record\n        Object.keys( uiDefRec.inputFields).forEach( function (inpFldName) {\n          // extract input field values from oBJECTvIEW's fieldValues map\n          inpFldValues[inpFldName] = uiDefRec.fieldValues[inpFldName];\n        });\n        uiDefRec.domElem.style.display = \"none\";\n        followupEvents = sim.currentEvents[trigEvtTypeName].onEvent( inpFldValues);\n        sim.runScenarioStep( followupEvents);  // restart simulator\n      }\n    };\n    uiDefRec.userActions[\"continue\"].label = \"Continue\";\n    title = uiDefRec.title;\n\n    delete uiDefRec.title;\n    uiContainerEl = oBJECTvIEW.createUiFromViewModel( uiDefRec);  // create form element\n    uiContainerEl.querySelectorAll(\"input\")[0].setAttribute(\"autofocus\",\"true\");\n    uiDefRec.domElem = dom.createDraggableModal({fromElem: uiContainerEl,\n        title:title, classValues:\"action-required\"});\n    uiDefRec.domElem.style.display = \"none\";\n  })\n};\n/*******************************************************\n Set up the Event Appearances (Sound + Animations)\n TODO: support audio/sound\n *******************************************************/\noes.ui.setupEventAppearances = function () {\n  var eventAppearances = sim.config.observationUI.eventAppearances;\n  sim.ui.animations = sim.ui.animations || {};\n  Object.keys( eventAppearances).forEach( function (trigEvtTypeName) {\n    var evtAppearDefRec = eventAppearances[trigEvtTypeName],\n        evtView = evtAppearDefRec.view,\n        domElem=null, animation=null, timingDefRec={};\n    if (evtView.imageFile) {\n      domElem = document.createElement(\"img\");\n      if (!evtView.imageFile.includes(\"/\")) {\n        domElem.src = oes.defaults.imgFolder + evtView.imageFile;\n      } else {\n        domElem.src = evtView.imageFile;\n      }\n      if (evtView.style) domElem.style = evtView.style;\n      sim.visualEl.appendChild( domElem);\n    } else {\n      domElem = evtView.domElem();\n    }\n    timingDefRec.duration = evtView.duration || 1000;\n    if (evtView.iterations) timingDefRec.iterations = evtView.iterations;\n    if (evtView.fill) timingDefRec.fill = evtView.fill;\n    animation = domElem.animate( evtView.keyframes, timingDefRec);\n    animation.pause();  // do not yet start the animation\n    sim.ui.animations[trigEvtTypeName] = animation;  // store the animation handle\n  });\n};\n","source":"sims/framework/simulator-core.js","raw":"/* jshint browser: true */\n'use strict';\n\n/**\n * Compute the max/min of an array\n * Notice that apply requires a context object, which is not really used\n * in the case of a static function such as Math.max\n */\nArray.max = function (array) {\n  return Math.max.apply( Math, array);\n};\nArray.min = function (array) {\n  return Math.min.apply( Math, array);\n};\n/**\n * Clone an array\n */\nArray.prototype.clone = function () {\n  return this.slice(0);\n};\n/**\n * Merge an array with another one\n */\nArray.prototype.merge = function (anotherArray) {\n  return Array.prototype.push.apply( this, anotherArray);\n};\n/**\n * Test if an array is equal to another\n */\nArray.prototype.isEqualTo = function (a2) {\n  return (this.length === a2.length) && this.every( function( el, i) {\n        return el === a2[i]; });\n};\n\n/**\n * @fileOverview  Defines error classes (also called \"exception\" classes)\n * @author Gerd Wagner\n */\n\nfunction ConstraintViolation( msg, culprit) {\n  this.message = msg;\n  if (culprit) this.culprit = culprit;\n}\nfunction NoConstraintViolation( v) {\n  if (v !== undefined) this.checkedValue = v;\n  this.message = \"\";\n}\nNoConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nNoConstraintViolation.prototype.constructor = NoConstraintViolation;\n\n/*\n * Property Constraint Violations\n */\nfunction MandatoryValueConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nMandatoryValueConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nMandatoryValueConstraintViolation.prototype.constructor = MandatoryValueConstraintViolation;\n\nfunction RangeConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nRangeConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nRangeConstraintViolation.prototype.constructor = RangeConstraintViolation;\n\nfunction StringLengthConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nStringLengthConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nStringLengthConstraintViolation.prototype.constructor = StringLengthConstraintViolation;\n\nfunction IntervalConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nIntervalConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nIntervalConstraintViolation.prototype.constructor = IntervalConstraintViolation;\n\nfunction PatternConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nPatternConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nPatternConstraintViolation.prototype.constructor = PatternConstraintViolation;\n\nfunction UniquenessConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nUniquenessConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nUniquenessConstraintViolation.prototype.constructor = UniquenessConstraintViolation;\n\nfunction CardinalityConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nCardinalityConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nCardinalityConstraintViolation.prototype.constructor = CardinalityConstraintViolation;\n\nfunction ReferentialIntegrityConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nReferentialIntegrityConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nReferentialIntegrityConstraintViolation.prototype.constructor = ReferentialIntegrityConstraintViolation;\n\nfunction FrozenValueConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nFrozenValueConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nFrozenValueConstraintViolation.prototype.constructor = FrozenValueConstraintViolation;\n\nfunction OtherConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nOtherConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nOtherConstraintViolation.prototype.constructor = OtherConstraintViolation;\n\n/*\n * Entity Type Constraint Violations\n */\nfunction EntityTypeConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nEntityTypeConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nEntityTypeConstraintViolation.prototype.constructor = EntityTypeConstraintViolation;\n\nfunction ModelClassConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nModelClassConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nModelClassConstraintViolation.prototype.constructor = ModelClassConstraintViolation;\n\nfunction ViewConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nViewConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nViewConstraintViolation.prototype.constructor = ViewConstraintViolation;\n\nfunction ObjectTypeConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nObjectTypeConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nObjectTypeConstraintViolation.prototype.constructor = ObjectTypeConstraintViolation;\n\nfunction AgentTypeConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nAgentTypeConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nAgentTypeConstraintViolation.prototype.constructor = AgentTypeConstraintViolation;\n\nfunction KindConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nKindConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nKindConstraintViolation.prototype.constructor = KindConstraintViolation;\n\nfunction RoleConstraintViolation( msg, culprit) {\n  ConstraintViolation.call( this, msg, culprit);\n}\nRoleConstraintViolation.prototype = Object.create( ConstraintViolation.prototype);\nRoleConstraintViolation.prototype.constructor = RoleConstraintViolation;\n\n/*******************************************************************************\n * @fileOverview A collection of utilities: methods, objects, etc used all over the code.\n * @author Mircea Diaconescu\n * @copyright Copyright © 2014 Gerd Wagner, Mircea Diaconescu et al,\n *            Chair of Internet Technology, Brandenburg University of Technology, Germany.\n * @date July 08, 2014, 11:04:23\n * @license The MIT License (MIT)\n ******************************************************************************/\nvar util = {};  //typeof util === undefined ? {} : util;\n\n/**\n * Serialize a Date object as an ISO date string\n * @return  YYYY-MM-DD\n */\nutil.createIsoDateString = function (d) {\n  return d.toISOString().substring(0,10);\n};\n/**\n * Return the next year value (e.g. if now is 2013 the function will return 2014)\n * @return {number}  the integer representing the next year value\n */\nutil.nextYear = function () {\n  var date = new Date();\n  return (date.getFullYear() + 1);\n};\n/**\n * Capitalize the first character of a string\n * @param {string} str\n * @return {string}\n */\nutil.capitalizeFirstChar = function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n/**\n * Copy all own (property and method) slots of a number of untyped objects\n * to a new untyped object.\n * @author Gerd Wagner\n * @return {object}  The merge result.\n */\nutil.mergeObjects = function () {\n  var i = 0, k = 0, n = arguments.length, m = 0,\n      foundArrayArg = false,\n      foundObjectArg = false,\n      arg = null, mergedResult,\n      keys=[], key=\"\";\n  for (i = 0; i < n; i++) {\n    arg = arguments[i];\n    if (arg === undefined) {\n      continue;\n    }\n    if (Array.isArray( arg)) {\n      if (!foundObjectArg) {\n        mergedResult = mergedResult ? mergedResult : [];\n        foundArrayArg = true;\n        mergedResult = mergedResult.concat( arg);\n      } else {\n        throw \"util.mergeObjects: incompatible objects were found! Trying to merge \"+\n              \"an Array with an Object! Expected Array arguments only!\";\n      }\n    } else if (typeof arg === 'object') {\n      if (!foundArrayArg) {\n        mergedResult = mergedResult ? mergedResult : {};\n        foundObjectArg = true;\n        keys = Object.keys( arg);\n        m = keys.length;\n        for (k = 0; k < m; k++) {\n          key = keys[k];\n          mergedResult[key] = arg[key];\n        }\n      } else {\n        throw \"util.mergeObjects: incompatible objects were found! Trying to merge \"+\n              \"an Object with an Array! Expected Object arguments only!\";\n      }\n    } else {\n      throw \"util.mergeObjects: only arguments of type Array or Object are allowed, but '\" +\n             typeof arguments[i] + \"' type was found for argument number \" + i;\n    }\n  }\n  return mergedResult;\n};\n/**********************************************\n * Name conversions\n **********************************************/\n// Example 1: EnglishTeacher => english_teachers\n// Example 2: eXPERIMENTdEF => EXPERIMENT_DEFS\nutil.class2TableName = function (className) {\n  var tableName=\"\";\n  if (className.charAt(0) === className.charAt(0).toUpperCase()) { // starts with upper case\n    if (className.charAt( className.length-1) === \"y\") {\n      tableName = util.camelToLowerCase( className.slice( 0, className.length-1)) + \"ies\";\n    } else {\n      tableName = util.camelToLowerCase( className) + \"s\";\n    }\n    return tableName;\n  } else { // inverse camel case (starts with lower case)\n    if (className.charAt( className.length-1) === \"Y\") {\n      tableName = util.invCamelToUppercase( className.slice( 0, className.length-1)) + \"IES\";\n    } else {\n      tableName = util.invCamelToUppercase( className) + \"S\";\n    }\n    return tableName;\n  }\n};\n// Example: books => Book\nutil.table2ClassName = function (tableName) {\n  var result = util.lowercaseToCamel( tableName);\n  result = result.charAt( 0).toUpperCase() + result.slice( 1);\n  // if there is an 's' at the end, drop it\n  if (result.charAt( result.length - 1) === 's') {\n    result = result.slice( 0, result.length - 1);\n  }\n  /*\n  if (!util.JsIdentifierPattern.test( result)) {\n    throw Error(\"util.camelToLowerCase: the provided 'identifier' (\" + result +\n        \") is not a valid JS identifier!\");\n  }\n  */\n  return result;\n};\n// Example: dateOfBirth => date_of_birth\nutil.property2ColumnName = function (propertyName) {\n  return util.camelToLowerCase( propertyName);\n};\n// Example: date_of_birth => dateOfBirth\nutil.column2PropertyName = function (columnName) {\n  return util.lowercaseToCamel( columnName);\n};\nutil.camelToLowerCase = function (identifier) {\n  var result = '';\n  // if the first is a A-Z char, replace it with its lower case equivalent\n  identifier = identifier.charAt( 0).toLowerCase() + identifier.slice( 1);\n  // replace upper case letter with '_' followed by the lower case equivalent leter\n  result = identifier.replace( /([A-Z])/g, function( $1) {\n    return \"_\" + $1.toLowerCase();\n  });\n  return result;\n};\nutil.invCamelToUppercase = function (name) {\n  var result = '';\n  // if the first is a a-z, replace it with corresponding upper case\n  name = name.charAt(0).toUpperCase() + name.slice( 1);\n  // replace lower case letter with '_' followed by the corresponding upper case\n  result = name.replace( /([a-z])/g, function( $1) {\n    return \"_\" + $1.toUpperCase();\n  });\n  return result;\n};\nutil.lowercaseToCamel = function (identifier) {\n  var result = '';\n  // replace upper case letter with '_' followed by the lower case equivalent letter\n  result = identifier.replace( /(\\_[a-z])/g, function ($1) {\n    return $1.toUpperCase().replace( '_', '');\n  });\n  return result;\n};\n\n/** REGEX to check if valid JS identifier **/\nutil.JsIdentifierPattern = /^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc][$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc0-9\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19b0-\\u19c0\\u19c8\\u19c9\\u19d0-\\u19d9\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1dc0-\\u1de6\\u1dfc-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f]*$/;\n\n//***** NOT USED IN cLASSjs ************************\n/**\n * Verifies if a value represents an integer or integer string\n * @param {string} x\n * @return {boolean}\n */\nutil.isIntegerString = function (x) {\n  return typeof(x) === \"string\" && x.search(/^-?[0-9]+$/) == 0;\n};\n/**\n * Extract the data record part of an object. The extracted property values\n * are either primitive data values, Date objects, or arrays of primitive\n * data values.\n * @param {object} obj\n */\nutil.createRecordFromObject = function (obj) {\n  var record={}, p=\"\", val;\n  for (p in obj) {\n    val = obj[p];\n    if (obj.hasOwnProperty(p) && (typeof(val) === \"string\" ||\n            typeof(val) === \"number\" || typeof(val) === \"boolean\" ||\n            val instanceof Date ||\n            Array.isArray( val) &&  // array list of data values\n            !val.some( function (el) {\n              return typeof(el) === \"object\";\n            })\n        )) {\n      if (val instanceof Date) record[p] = val.toISOString();\n      else if (Array.isArray( val)) record[p] = val.slice(0);\n      else record[p] = val;\n    }\n  }\n  return record;\n};\n// create an alias for cloning records\nutil.cloneRecord = util.createRecordFromObject;\n\n/**\n * Create a \"deep\" clone of a JS object at the level of own properties/slots\n * @param o  the object to be cloned\n * @return {object}\n */\nutil.cloneObject = function (o) {\n  var clone = Array.isArray(o) ? [] : {};\n  Object.keys(o).forEach( function (key) {\n    clone[key] = (typeof o[key] === \"object\") ? util.cloneObject(o[key]) : o[key];\n  });\n  return clone;\n};\n/**\n * Copy all own (property and method) slots of a number of (untyped) objects\n * to a new (untyped) object.\n * @author Gerd Wagner\n * @return {object}  The merge result.\n *\nutil.mergeObjects = function () {\n  var i=0, k=0, obj=null, mergeObj={}, keys=[], key=\"\";\n  for (i=0; i < arguments.length; i++) {\n    obj = arguments[i];\n    if (obj && typeof obj === \"object\") {\n      keys = Object.keys( obj);\n      for (k=0; k < keys.length; k++) {\n        key = keys[k];\n        mergeObj[key] = obj[key];\n      }\n    }\n  }\n  return mergeObj;\n};\n */\n/**\n * Swap two elements of an array\n * using the ES6 method Object.assign for creating a shallow clone of an object\n * @param a  the array\n * @param i  the first index\n * @param i  the 2nd index\n */\nutil.swapArrayElements = function (a,i,j) {\n  var tempStore = (typeof a[i] === \"object\") ? Object.assign( {}, a[i]) : a[i];\n  a[i] = (typeof a[j] === \"object\") ? Object.assign( {}, a[j]) : a[j];\n  a[j] = tempStore;\n};\n/**\n * Shuffles array in place using the Fisher-Yates shuffle algorithm\n * @param {Array} a - An array of items to be shuffled\n */\nutil.shuffleArray = function (a) {\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n    j = Math.floor( Math.random() * (i + 1) );\n    x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n};\n/**\n * Compute the Cartesian Product of an array of arrays\n * From https://stackoverflow.com/a/36234242/2795909\n * @param {Array} arr - An array of arrays of values to be combined\n */\nutil.cartesianProduct = function (arr) {\n  return arr.reduce( function (a,b) {\n    return a.map( function (x) {\n      return b.map( function (y) {\n        return x.concat(y);\n      })\n    }).reduce( function (a,b) {return a.concat(b)}, [])\n  }, [[]])\n};\n/**\n * Load a script\n * @param {Array} arr - An array of arrays of values to be combined\n */\nutil.loadScript = function (pathAndFilename, basePath, callback, errCallback) {\n  var loadEl = document.createElement('script');\n  // if a full URL is provided, the base path is ignored\n  if (pathAndFilename.indexOf(\"://\") === -1)\n    pathAndFilename = basePath + pathAndFilename;\n  // if no callback(s) provided, define an empty function\n  callback = typeof callback === \"function\" ? callback : function () {};\n  errCallback = typeof errCallback === \"function\" ? errCallback : function () {};\n  loadEl.src = pathAndFilename;\n  loadEl.onload = function () {\n    callback(loadEl);\n  };\n  loadEl.onerror = function (e) {\n    console.log(\"Failed loading file '\" + pathAndFilename + \"'!\");\n    loadEl.remove();\n    errCallback(e);\n  };\n  document.head.appendChild( loadEl);\n};\n\n/****************************************************************\n * Math Library\n ****************************************************************/\nvar math = {};\n/**\n * Compute the sum of an array of numbers\n * @param {Array} data - An array of numbers\n */\nmath.sum = function (data) {\n  function add( a, b) {return a + b;}\n  return data.reduce( add, 0);\n};\n/**\n * Compute the arithmetic mean of an array of numbers\n * @param {Array} data - An array of numbers\n */\nmath.mean = function (data) {\n  return math.sum( data) / data.length;\n};\n/**\n * Compute the standard deviation of an array of numbers\n * @param {Array} data - An array of numbers\n */\nmath.stdDev = function (data) {\n  var m = math.mean( data);\n  return Math.sqrt( data.reduce( function (acc, x) {\n    return acc + Math.pow( x - m, 2);}, 0) / (data.length - 1));\n};\n/**\n * Compute the bootstrap confidence interval of an array of numbers. Based on\n *   Efron, B. (1985). Bootstrap confidence intervals for a class of parametric\n *   problems. Biometrika, 72(1), 45-58.\n * @param {Array} data - An array of numbers\n * @param {integer} samples - Number of bootstrap samples (default 10000)\n * @param {decimal} alpha - Confidence interval to estimate [0,1] (default 0.95)\n * @returns {Array} Lower and upper confidence interval\n */\nmath.bootstrapConfInt = function ( data, samples, alpha ) {\n  var n = samples || 10000;\n  var p = alpha || 0.95;\n  var i, j, t;\n  var mu = Array( n );\n  var m = math.mean( data );\n  var len = data.length;\n\n  /* Calculate bootstrap samples */\n  for ( i = 0; i < n; i += 1 ) {\n    t = 0;\n    for ( j = 0; j < len; j += 1 ) {\n      t += data[ Math.floor( Math.random() * len ) ];\n    }\n    mu[ i ] = ( t / len ) - m;\n  }\n\n  /* Sort in ascending order */\n  mu.sort( function ( a, b ) {\n    return a - b;\n  } );\n\n  /* Return the lower and upper bootstrap confidence interval */\n  return [\n    m - mu[ Math.floor( Math.min( n - 1, n * ( 1 - ( (1 - p ) / 2 ) ) ) ) ],\n    m - mu[ Math.floor( Math.max( 0, n * ( ( 1 - p ) / 2 ) ) ) ]\n  ];\n};\n/**\n * Compute the lower confidence interval of an array of numbers.\n * @param {Array} data - An array of numbers\n * @returns {decimal} Lower confidence interval\n */\nmath.confIntLower = function ( data ) {\n  return math.bootstrapConfInt( data )[ 0 ];\n};\n/**\n * Compute the upper confidence interval of an array of numbers.\n * @param {Array} data - An array of numbers\n * @returns {decimal} Upper confidence interval\n */\nmath.confIntUpper = function ( data ) {\n  return math.bootstrapConfInt( data )[ 1 ];\n};\n/**\n * Predefined class for creating enumerations as special JS objects.\n * @copyright Copyright 2014 Gerd Wagner, Chair of Internet Technology,\n *   Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Gerd Wagner\n * @constructor\n * @this {eNUMERATION}\n * @param {string} name  The name of the new enumeration data type.\n * @param {array} enumArg  The labels array or code list map of the enumeration\n *\n * An eNUMERATION has the following properties:\n * labels         an array list of label strings such that enumLabel = labels[enumIndex-1]\n * enumLitNames\n *\n */\n/* globals eNUMERATION */\nfunction eNUMERATION( name, enumArg) {\n  var i = 0, lbl = \"\", LBL = \"\";\n  if (typeof name !== \"string\") {\n    throw new Error(\n      \"The first constructor argument of an enumeration must be a string!\");\n  }\n  this.name = name;\n  if (Array.isArray(enumArg)) {\n    // a simple enum defined by a list of labels\n    if (!enumArg.every(function (n) {\n        return (typeof n === \"string\");\n      })) {\n      throw new Error(\"A list of enumeration labels as the second \" +\n        \"constructor argument must be an array of strings!\");\n    }\n    this.labels = enumArg;\n    this.enumLitNames = this.labels;\n    this.codeList = null;\n  } else if (typeof enumArg === \"object\" && Object.keys(enumArg).length > 0) {\n    // a code list defined by a map\n    if (!Object.keys(enumArg).every(function (code) {\n        return (typeof enumArg[code] === \"string\");\n      })) {\n      throw new Error(\"All values of a code list map must be strings!\");\n    }\n    this.codeList = enumArg;\n    // use codes as the names of enumeration literals\n    this.enumLitNames = Object.keys( this.codeList);\n    this.labels = this.enumLitNames.map(function (c) {\n      return enumArg[c] + \" (\" + c + \")\";\n    });\n  } else {\n    throw new Error(\n      \"Invalid Enumeration constructor argument: \" + enumArg);\n  }\n  this.MAX = this.enumLitNames.length;\n  // generate the enumeration literals by capitalizing/normalizing the names\n  for (i = 1; i <= this.enumLitNames.length; i++) {\n    // replace \" \" and \"-\" with \"_\"\n    lbl = this.enumLitNames[i - 1].replace(/( |-)/g, \"_\");\n    // convert to array of words, capitalize them, and re-convert\n    LBL = lbl.split(\"_\").map(function (lblPart) {\n      return lblPart.toUpperCase();\n    }).join(\"_\");\n    // assign enumeration index\n    this[LBL] = i;\n  }\n  // protect the enumeration from change attempts\n  Object.freeze( this);\n  // add new enumeration to the population of all enumerations\n  eNUMERATION.instances[this.name] = this;\n}\n/*\n * Check if a value represents an enumeration literal or a valid index\n */\neNUMERATION.prototype.isValidEnumLitOrIndex = function (v) {\n  return (Number.isInteger(v) && v > 0 && v < this.MAX);\n};\n/*\n * Serialize a list of enumeration literals/indexes as a list of\n * enumeration literal names\n */\neNUMERATION.prototype.enumIndexesToNames = function (a) {\n  if (!Array.isArray(a)) {\n    throw new Error(\n      \"The argument must be an Array!\");\n  }\n  var listStr = a.map(function (enumInt) {\n    return this.enumLitNames[enumInt - 1];\n  }, this).join(\", \");\n  return listStr;\n};\n/*\n * Define a map of all enumerations as a class-level property\n */\neNUMERATION.instances = {};\n\n /*******************************************************************************\n * cLASS allows defining constructor-based JavaScript classes and\n * class hierarchies based on a declarative description of the form:\n *\n *   var Student = new cLASS({\n *     Name: \"Student\",\n *     supertypeName: \"Person\",\n *     properties: {\n *       \"university\": {range:\"String\", label:\"University\", max: 50, ...}\n *     },\n *     methods: {\n *     }\n *   });\n *   var stud1 = new Student({id: 1, university:\"MIT\"});\n *   // test if direct instance\n *   if (stud1.constructor.Name === \"Student\") ...\n *   // test if instance\n *   if (stud1 instanceof Student) ...\n *\n * Notice that it is assumed that a class has (or inherits) an \"id\" attribute\n * as its standard ID attribute.\n *\n *\n * @copyright Copyright 2015-2017 Gerd Wagner, Chair of Internet Technology,\n *   Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Gerd Wagner\n ******************************************************************************/\n/* globals cLASS */\nfunction cLASS (classSlots) {\n  var propDefs = classSlots.properties || {},  // property declarations\n      methods = classSlots.methods || {},\n      supertypeName = classSlots.supertypeName,\n      superclass=null, constr=null, missingRangeProp=\"\",\n      propsWithInitialValFunc = [];\n  // check Class definition constraints\n  if (supertypeName && !cLASS[supertypeName]) {\n    throw \"Specified supertype \"+ supertypeName +\" has not been defined!\";\n  }\n  if (!Object.keys( propDefs).every( function (p) {\n        if (!propDefs[p].range) missingRangeProp = p;\n        return (propDefs[p].range !== undefined);\n      }) ) {\n    throw \"No range defined for property \"+ missingRangeProp +\n        \" of class \"+ classSlots.Name +\" !\";\n  }\n  // define a constructor function for creating a new object\n  constr = function (instanceSlots) {\n    if (!instanceSlots) return;\n    if (supertypeName) {\n      // invoke supertype constructor\n      cLASS[supertypeName].call( this, instanceSlots);\n    }\n    // assign own properties  TODO: use the checked value from validationResult\n    Object.keys( propDefs).forEach( function (p) {\n      var pDef = propDefs[p], range = pDef.range, Class=null,\n          val, rangeTypes=[], i=0, validationResult=null;\n      if (typeof instanceSlots === \"object\" && p in instanceSlots) {\n        // property p has an initialization slot\n        val = instanceSlots[p];\n        validationResult = cLASS.check( p, pDef, val);\n        if (!(validationResult instanceof NoConstraintViolation)) throw validationResult;\n        // is range a cLASS collection datatype?\n        if (typeof range === \"object\" && range.dataType !== undefined) {\n          this[p] = Array.isArray( val) ? val.slice(0) : Object.assign({}, val);  // assign clone\n        } else if (typeof range === \"string\" && typeof val !== \"object\" &&\n            (cLASS[range] || range.includes(\"|\"))) {\n          // is range a class (or class disjunction)?\n          if (range.includes(\"|\")) {\n            rangeTypes = range.split(\"|\");\n            for (i=0; i < rangeTypes.length; i++) {\n              Class = cLASS[rangeTypes[i]];\n              if (Class) {  // type disjunct is a cLASS\n                if (Class.instances[String(val)])  {\n                  // convert IdRef to object reference\n                  this[p] = Class.instances[String(val)];\n                  break;\n                }\n              }\n            }\n            if (!this[p]) this[p] = val;\n          } else {  // range is a class\n            // convert IdRef to object reference\n            this[p] = cLASS[range].instances[String(val)] || val;\n          }\n        } else this[p] = val;\n      } else if (pDef.initialValue !== undefined) {  // assign initial value\n        if (typeof pDef.initialValue === \"function\") {\n          propsWithInitialValFunc.push(p);\n        } else this[p] = pDef.initialValue;\n      } else if (p === \"id\" && range === \"AutoNumber\") {    // assign auto-ID\n        if (typeof this.constructor.getAutoId === \"function\") {\n          this[p] = this.constructor.getAutoId();\n        } else if (this.constructor.idCounter !== undefined) {\n          this[p] = ++this.constructor.idCounter;\n        }\n      } else if (!pDef.optional) {  // assign default values to mandatory properties\n        if (pDef.maxCard > 1) {\n          if (pDef.minCard === 0) {  // optional multi-valued property\n            if (pDef.range in cLASS && !pDef.isOrdered) this[p] = {};  // map\n            else this[p] = [];  // array list\n          } else throw \"A non-empty collection value for \"+ p +\" is required!\";\n        } else if (cLASS.isIntegerType(range) || cLASS.isDecimalType(range)) {\n          this[p] = 0;\n        } else if (range === \"String\") {\n          this[p] = \"\";\n        } else if (range === \"Boolean\") {\n          this[p] = false;\n        } else if (typeof range === \"object\") {\n          if ([\"Array\", \"ArrayList\"].includes(range.dataType)) {\n            this[p] = [];\n          } else if (range.dataType === \"Map\") {\n            this[p] = {};\n          }\n        } else {\n          throw \"A value for \"+ p +\" is required when creating a(n) \"+ classSlots.Name;\n          console.log(\"instanceSlots = \", JSON.stringify(instanceSlots));\n        }\n      }\n      // initialize historical properties\n      if (pDef.historySize) {\n        this.history = this.history || {};  // a map\n        this.history[p] = pDef.decimalPlaces ?\n            new cLASS.RingBuffer( pDef.range, pDef.historySize,\n                {decimalPlaces: pDef.decimalPlaces}) :\n            new cLASS.RingBuffer( pDef.range, pDef.historySize);\n      }\n    }, this);\n    // call the functions for initial value expressions\n    propsWithInitialValFunc.forEach( function (p) {\n      this[p] = propDefs[p].initialValue.call(this);\n    }, this);\n    // assign remaining fields not defined as properties by the object's class\n    if (typeof( instanceSlots) === \"object\") {\n      Object.keys( instanceSlots).forEach( function (f) {\n        if (!propDefs[f]) this[f] = instanceSlots[f];\n      }, this);\n    }\n    // take care of cLASS-specific provisions (e.g., update a materialized view)\n    if (\"onConstruction\" in methods) this.onConstruction();\n    // is the class neither a complex DT nor abstract and does the object have an ID slot?\n    if (!classSlots.isComplexDatatype && !classSlots.isAbstract && \"id\" in this) {\n      // add new object to the population/extension of the class\n      cLASS[classSlots.Name].instances[String(this.id)] = this;\n    }\n  };\n  // assign class-level (meta-)properties\n  constr.constructor = cLASS;\n  constr.Name = classSlots.Name;\n  if (classSlots.isComplexDatatype) constr.isComplexDatatype = true;\n  if (classSlots.isAbstract) constr.isAbstract = true;\n  if (classSlots.label) constr.label = classSlots.label;\n  if (classSlots.shortLabel) constr.shortLabel = classSlots.shortLabel;\n  if (classSlots.primaryKey) constr.primaryKey = classSlots.primaryKey;\n  if (classSlots.tableName) constr.tableName = classSlots.tableName;\n  if (supertypeName) {\n    constr.supertypeName = supertypeName;\n    superclass = cLASS[supertypeName];\n    // apply classical inheritance pattern for methods\n    constr.prototype = Object.create( superclass.prototype);\n    constr.prototype.constructor = constr;\n    // merge superclass property declarations with own property declarations\n    constr.properties = Object.create( superclass.properties);\n   //  assign own property declarations, possibly overriding super-props\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n    Object.keys( propDefs).forEach( function (p) {\n      constr.properties[p] = propDefs[p];\n    });\n  } else {  // if class is root class\n    constr.properties = propDefs;\n    /***************************************************/\n    constr.prototype.set = function ( prop, val) {\n    /***************************************************/\n      // this = object\n      var validationResult = cLASS.check( prop, this.constructor.properties[prop], val);\n      if (validationResult instanceof NoConstraintViolation) {\n        this[prop] = validationResult.checkedValue;\n      } else {\n        throw validationResult;\n      }\n    };\n    /***************************************************/\n    // overwrite and improve the standard toString method\n    constr.prototype.toString = function () {\n    /***************************************************/\n      var str1=\"\", str2=\"\", i=0;\n      if (this.name) str1 = this.name;\n      else {\n        str1 = this.constructor.shortLabel || this.constructor.Name;\n        if (this.id) str1 += \":\"+ this.id;\n      }\n      str2 = \"{ \";\n      Object.keys( this).forEach( function (key) {\n        var propDecl = cLASS[this.constructor.Name].properties[key],\n            propLabel = propDecl ? (propDecl.shortLabel || propDecl.label) : key,\n            valStr = \"\";\n        // is the slot of a declared reference property?\n        if (propDecl && typeof propDecl.range === \"string\" && cLASS[propDecl.range]) {\n          // is the property multi-valued?\n          if (propDecl.maxCard && propDecl.maxCard > 1) {\n            if (Array.isArray( this[key])) {\n              valStr = this[key].map( function (o) {return o.id;}).toString();\n            } else valStr = JSON.stringify( Object.keys( this[key]));\n          } else {  // if the property is single-valued\n            valStr = String( this[key].id);\n          }\n        } else if (typeof this[key] === \"function\") {\n          // the slot is an instance-level method slot\n          valStr = \"a function\";\n        } else {  // the slot is an attribute slot or an undeclared reference property slot\n          valStr = JSON.stringify( this[key]);\n        }\n        if (this[key] !== undefined && propLabel) {\n          str2 += (i>0 ? \", \" : \"\") + propLabel +\": \"+ valStr;\n          i = i+1;\n        }\n      }, this);\n      str2 += \"}\";\n      if (str2 === \"{ }\") str2 = \"\";\n      return str1 + str2;\n    };\n    /***************************************************/\n    constr.prototype.toRecord = function () {\n    /***************************************************/\n      var obj = this, rec={}, propDecl={}, valuesToConvert=[], range, val;\n      Object.keys( obj).forEach( function (p) {\n        if (obj[p] !== undefined) {\n          val = obj[p];\n          propDecl = obj.constructor.properties[p];\n          range = propDecl.range;\n          if (propDecl.maxCard && propDecl.maxCard > 1) {\n            if (range.constructor && range.constructor === cLASS) { // object reference(s)\n              if (Array.isArray( val)) {\n                valuesToConvert = val.slice(0);  // clone;\n              } else {  // val is a map from ID refs to obj refs\n                valuesToConvert = Object.values( val);\n              }\n            } else if (Array.isArray( val)) {\n              valuesToConvert = val.slice(0);  // clone;\n            } else console.log(\"Invalid non-array collection in toRecord!\");\n          } else {  // maxCard=1\n            valuesToConvert = [val];\n          }\n          valuesToConvert.forEach( function (v,i) {\n            // alternatively: enum literals as labels\n            // if (range instanceof eNUMERATION) rec[p] = range.labels[val-1];\n            if ([\"number\",\"string\",\"boolean\"].includes( typeof(v)) || !v) {\n              valuesToConvert[i] = String( v);\n            } else if (range === \"Date\") {\n              valuesToConvert[i] = util.createIsoDateString( v);\n            } else if (range.constructor && range.constructor === cLASS) { // object reference(s)\n              valuesToConvert[i] = v.id;\n            } else if (Array.isArray( v)) {  // JSON-compatible array\n              valuesToConvert[i] = v.slice(0);  // clone\n            } else valuesToConvert[i] = JSON.stringify( v);\n          });\n          if (!propDecl.maxCard || propDecl.maxCard <= 1) {\n            rec[p] = valuesToConvert[0];\n          } else {\n            rec[p] = valuesToConvert;\n          }\n        }\n      });\n      return rec;\n    };\n    /***************************************************/\n    // Convert property value to (form field) string.\n    constr.prototype.getValueAsString = function ( prop) {\n    /***************************************************/\n      // make sure the eNUMERATION meta-class object can be checked if available\n      var eNUMERATION = typeof eNUMERATION === \"undefined\" ? undefined : eNUMERATION;\n      var propDecl = this.constructor.properties[prop],\n          range = propDecl.range, val = this[prop];\n      var valuesToConvert=[], displayStr=\"\", k=0,\n          listSep = \", \";\n      if (val === undefined || val === null) return \"\";\n      if (propDecl.maxCard && propDecl.maxCard > 1) {\n        if (Array.isArray( val)) {\n          valuesToConvert = val.length>0 ? val.slice(0) : [];  // clone;\n        } else if (typeof val === \"object\") {\n          valuesToConvert = Object.keys( val);\n        } else console.log(\"The value of a multi-valued \" +\n            \"property like \"+ prop +\" must be an array or a map!\");\n      } else valuesToConvert = [val];\n      valuesToConvert.forEach( function (v,i) {\n        if (typeof propDecl.val2str === \"function\") {\n          valuesToConvert[i] = propDecl.val2str( v);\n        } else if (eNUMERATION && range instanceof eNUMERATION) {\n          valuesToConvert[i] = range.labels[v-1];\n        } else if ([\"number\",\"string\",\"boolean\"].includes( typeof v) || !v) {\n          valuesToConvert[i] = String( v);\n        } else if (range === \"Date\") {\n          valuesToConvert[i] = util.createIsoDateString( v);\n        } else if (Array.isArray( v)) {  // JSON-compatible array\n          valuesToConvert[i] = v.slice(0);  // clone\n        } else if (typeof range === \"string\" && cLASS[range]) {\n          if (typeof v === \"object\" && v.id !== undefined) {\n            valuesToConvert[i] = v.id;\n          } else {\n            valuesToConvert[i] = v.toString();\n            propDecl.stringified = true;\n            console.log(\"Property \"+ this.constructor.Name +\"::\"+ prop +\" has a cLASS object value without an 'id' slot!\");\n          }\n        } else {\n          valuesToConvert[i] = JSON.stringify( v);\n          propDecl.stringified = true;\n        }\n      }, this);\n      if (valuesToConvert.length === 0) displayStr = \"[]\";\n      else {\n        displayStr = valuesToConvert[0];\n        if (propDecl.maxCard && propDecl.maxCard > 1) {\n          displayStr = \"[\" + displayStr;\n          for (k=1; k < valuesToConvert.length; k++) {\n            displayStr += listSep + valuesToConvert[k];\n          }\n          displayStr = displayStr + \"]\";\n        }\n      }\n      return displayStr;\n    };\n    /***************************************************/\n\n    /***************************************************\n     * A class-level de-serialization method\n     ***************************************************/\n    constr.createObjectFromRecord = function (record) {\n      var obj={};\n      try {\n        obj = new constr( record);\n      } catch (e) {\n        console.log( e.constructor.name + \" while deserializing a \"+\n            constr.Name +\" record: \" + e.message);\n        obj = null;\n      }\n      return obj;\n    };\n  }\n  // assign instance-level methods\n  Object.keys( methods).forEach( function (m) {\n    constr.prototype[m] = methods[m];\n  });\n  // store class/constructor as value associated with its name in a map\n  cLASS[classSlots.Name] = constr;\n  // initialize the class-level instances property\n   if (!classSlots.isAbstract) {\n     cLASS[classSlots.Name].instances = {};\n   }\n  // return the constructor as the object constructed with new cLASS\n  return constr;\n}\n /**\n  * Determine if a type is an integer type.\n  * @method\n  * @author Gerd Wagner\n  * @param {string|eNUMERATION} T  The type to be checked.\n  * @return {boolean}\n  */\ncLASS.isIntegerType = function (T) {\n  return [\"Integer\",\"PositiveInteger\",\"AutoNumber\",\"NonNegativeInteger\"].includes(T) ||\n      T instanceof eNUMERATION;\n};\n /**\n  * Determine if a type is a decimal type.\n  * @method\n  * @author Gerd Wagner\n  * @param {string} T  The type to be checked.\n  * @return {boolean}\n  */\n cLASS.isDecimalType = function (T) {\n   return [\"Number\",\"Decimal\",\"Percent\",\"ClosedUnitInterval\",\"OpenUnitInterval\"].includes(T);\n };\n /**\n  * Constants\n  */\n cLASS.patterns = {\n   ID: /^([a-zA-Z0-9][a-zA-Z0-9_\\-]+[a-zA-Z0-9])$/,\n   // defined in WHATWG HTML5 specification\n   EMAIL: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n   // proposed by Diego Perini (https://gist.github.com/729294)\n   URL: /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i,\n   INT_PHONE_NO: /^\\+(?:[0-9] ?){6,14}[0-9]$/\n };\n /**\n  * Generic method for checking the integrity constraints defined in property declarations.\n  * The values to be checked are first parsed/deserialized if provided as strings.\n  * Copied from the cOMPLEXtYPE class of oNTOjs\n  *\n  * min/max: numeric (or string length) minimum/maximum\n  * optional: true if property is single-valued and optional (false by default)\n  * range: String|NonEmptyString|Integer|...\n  * pattern: a regular expression to be matched\n  * minCard/maxCard: minimum/maximum cardinality of a multi-valued property\n  *     By default, maxCard is 1, implying that the property is single-valued, in which\n  *     case minCard is meaningless/ignored. maxCard may be Infinity.\n  *\n  * @method\n  * @author Gerd Wagner\n  * @param {string} fld  The property for which a value is to be checked.\n  * @param {object} decl  The property's declaration.\n  * @param {string|number|boolean|object} val  The value to be checked.\n  * @param optParams.checkRefInt  Check referential integrity\n  * @return {ConstraintViolation}  The constraint violation object.\n  */\n cLASS.check = function (fld, decl, val, optParams) {\n   var constrVio=null, valuesToCheck=[],\n       msg = decl.patternMessage || \"\",\n       minCard = decl.minCard!==\"umdefined\" ? decl.minCard : decl.optional?0:1,  // by default, a property is mandatory\n       maxCard = decl.maxCard || 1,  // by default, a property is single-valued\n       min = decl.min || 0, max = decl.max,\n       range = decl.range,\n       pattern = decl.pattern;\n   // check Mandatory Value Constraint\n   if (val === undefined || val === \"\") {\n     if (decl.optional) return new NoConstraintViolation();\n     else {\n       return new MandatoryValueConstraintViolation(\n           \"A value for \"+ fld +\" is required!\");\n     }\n   }\n   if (maxCard === 1) {  // single-valued property\n     valuesToCheck = [val];\n   } else {  // multi-valued properties can be array-valued or map-valued\n     if (Array.isArray( val) ) {\n       valuesToCheck = val;\n     } else if (typeof range === \"string\" && cLASS[range]) {\n       if (!decl.isOrdered) {\n         valuesToCheck = Object.keys( val).map( function (id) {\n           return val[id];\n         });\n       } else {\n         return new RangeConstraintViolation(\"Values for the ordered property \"+ fld +\n             \" must be arrays, and not maps!\");\n       }\n     } else {\n       return new RangeConstraintViolation(\"Values for \"+ fld +\n           \" must be arrays or maps of IDs to cLASS instances!\");\n     }\n   }\n   // convert integer strings to integers\n   if (cLASS.isIntegerType( range)) {\n     valuesToCheck.forEach( function (v,i) {\n       if (typeof v === \"string\") valuesToCheck[i] = parseInt( v);\n     });\n   }\n   // convert decimal strings to decimal numbers\n   if (cLASS.isDecimalType( range)) {\n     valuesToCheck.forEach( function (v,i) {\n       if (typeof v === \"string\") valuesToCheck[i] = parseFloat( v);\n     });\n   }\n   /*********************************************************************\n    ***  Convert value strings to values and check range constraints ****\n    ********************************************************************/\n   switch (range) {\n     case \"String\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\") {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be strings!\");\n         }\n       });\n       break;\n     case \"NonEmptyString\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\" || v.trim() === \"\") {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be non-empty strings!\");\n         }\n       });\n       break;\n     case \"Identifier\":  // add regexp test\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\" || v.trim() === \"\" || !cLASS.patterns.ID.test( v)) {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be valid identifiers/names!\");\n         }\n       });\n       break;\n     case \"Email\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\" || !cLASS.patterns.EMAIL.test( v)) {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be valid email addresses!\");\n         }\n       });\n       break;\n     case \"URL\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\" || !cLASS.patterns.URL.test( v)) {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be valid URLs!\");\n         }\n       });\n       break;\n     case \"PhoneNumber\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"string\" || !cLASS.patterns.INT_PHONE_NO.test( v)) {\n           constrVio = new RangeConstraintViolation(\"Values for \"+ fld +\n               \" must be valid international phone numbers!\");\n         }\n       });\n       break;\n     case \"Integer\":\n       valuesToCheck.forEach( function (v) {\n         if (!Number.isInteger(v)) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be an integer!\");\n         }\n       });\n       break;\n     case \"NonNegativeInteger\":\n       valuesToCheck.forEach( function (v) {\n         if (!Number.isInteger(v) || v < 0) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a non-negative integer!\");\n         }\n       });\n       break;\n     case \"AutoNumber\":\n       if (valuesToCheck.length === 1) {\n         if (!Number.isInteger( valuesToCheck[0]) || valuesToCheck[0] < 1) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a positive integer!\");\n         }\n       } else {\n         constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n             \" must not be a collection like \"+ valuesToCheck);\n       }\n       break;\n     case \"PositiveInteger\":\n       valuesToCheck.forEach( function (v) {\n         if (!Number.isInteger(v) || v < 1) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a positive integer!\");\n         }\n       });\n       break;\n     case \"Number\":\n     case \"Decimal\":\n     case \"Percent\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"number\") {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a (decimal) number!\");\n         }\n       });\n       break;\n     case \"ClosedUnitInterval\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"number\") {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a (decimal) number!\");\n         } else if (v<0 || v>1) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a number in [0,1]!\");\n         }\n       });\n       break;\n     case \"OpenUnitInterval\":\n       valuesToCheck.forEach( function (v) {\n         if (typeof v !== \"number\") {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a (decimal) number!\");\n         } else if (v<=0 || v>=1) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be a number in (0,1)!\");\n         }\n       });\n       break;\n     case \"Boolean\":\n       valuesToCheck.forEach( function (v,i) {\n         if (typeof v === \"string\") {\n           if ([\"true\",\"yes\"].includes(v)) valuesToCheck[i] = true;\n           else if ([\"no\",\"false\"].includes(v)) valuesToCheck[i] = false;\n           else constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n                 \" must be either 'true'/'yes' or 'false'/'no'!\");\n         } else if (typeof v !== \"boolean\") {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be either 'true' or 'false'!\");\n         }\n       });\n       break;\n     case \"Date\":\n       valuesToCheck.forEach( function (v,i) {\n         if (typeof v === \"string\" &&\n             /\\d{4}-(0\\d|1[0-2])-([0-2]\\d|3[0-1])/.test(v) && !isNaN( Date.parse(v))) {\n           valuesToCheck[i] = new Date(v);\n         } else if (!(v instanceof Date)) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be either a Date value or an ISO date string. \"+\n               v +\" is not admissible!\");\n         }\n       });\n       break;\n     case \"DateTime\":\n       valuesToCheck.forEach( function (v,i) {\n         if (typeof v === \"string\" && !isNaN( Date.parse(v))) {\n           valuesToCheck[i] = new Date(v);\n         } else if (!(v instanceof Date)) {\n           constrVio = new RangeConstraintViolation(\"The value of \"+ fld +\n               \" must be either a Date value or an ISO date-time string. \"+\n               v +\" is not admissible!\");\n         }\n       });\n       break;\n     default:\n       if (range instanceof eNUMERATION || typeof range === \"string\" && eNUMERATION[range]) {\n         if (typeof range === \"string\") range = eNUMERATION[range];\n         valuesToCheck.forEach( function (v) {\n           if (!Number.isInteger( v) || v < 1 || v > range.MAX) {\n             constrVio = new RangeConstraintViolation(\"The value \"+ v +\n                 \" is not an admissible enumeration integer for \"+ fld);\n           }\n         });\n       } else if (Array.isArray( range)) {\n         // *** Ad-hoc enumeration ***\n         valuesToCheck.forEach( function (v) {\n           if (range.indexOf(v) === -1) {\n             constrVio = new RangeConstraintViolation(\"The \"+ fld +\" value \"+ v +\n                 \" is not in value list \"+ range.toString());\n           }\n         });\n       } else if (typeof range === \"string\" && cLASS[range]) {\n         valuesToCheck.forEach( function (v, i) {\n           var recFldNames=[], propDefs={};\n           if (!cLASS[range].isComplexDatatype && !(v instanceof cLASS[range])) {\n             // convert IdRef to object reference\n             if (cLASS[range].instances[String(v)]) {\n               v = valuesToCheck[i] = cLASS[range].instances[String(v)];\n             } else if (optParams && optParams.checkRefInt) {\n               constrVio = new ReferentialIntegrityConstraintViolation(\"The value \" + v +\n                   \" of property '\"+ fld +\"' is not an ID of any \" + range + \" object!\");\n             }\n           } else if (cLASS[range].isComplexDatatype && typeof v === \"object\") {\n             v = Object.assign({}, v);  // use a clone\n             // v is a record that must comply with the complex datatype\n             recFldNames = Object.keys(v);\n             propDefs = cLASS[range].properties;\n             // test if all mandatory properties occur in v and if all fields of v are properties\n             if (Object.keys( propDefs).every( function (p) {return !!propDefs[p].optional || p in v;}) &&\n                 recFldNames.every( function (fld) {return !!propDefs[fld];})) {\n               recFldNames.forEach( function (p) {\n                 var validationResult = cLASS.check( p, propDefs[p], v[p]);\n                 if (validationResult instanceof NoConstraintViolation) {\n                   v[p] = validationResult.checkedValue;\n                 } else {\n                   throw validationResult;\n                 }\n               })\n             } else {\n               constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                   \" must be an instance of \"+ range +\" or a compatible record!\"+\n                   JSON.stringify(v) + \" is not admissible!\");\n             }\n/* DROP\n           } else {  // v may be a (numeric or string) ID ref\n             if (typeof v === \"string\") {\n               if (!isNaN( parseInt(v))) v = valuesToCheck[i] = parseInt(v);\n             } else if (!Number.isInteger(v)) {\n               constrVio = new RangeConstraintViolation(\"The value (\" + JSON.stringify(v) +\n                   \") of property '\" +fld + \"' is neither an integer nor a string!\");\n             }\n*/\n           }\n         });\n       } else if (typeof range === \"string\" && range.includes(\"|\")) {\n         valuesToCheck.forEach( function (v, i) {\n           var rangeTypes=[];\n           rangeTypes = range.split(\"|\");\n           if (typeof v === \"object\") {\n             if (!rangeTypes.some( function (rc) {\n               return v instanceof cLASS[rc];\n             })) {\n               constrVio = ReferentialIntegrityConstraintViolation(\"The object \" + JSON.stringify(v) +\n                   \" is not an instance of any class from \" + range + \"!\");\n             } else {\n               v = valuesToCheck[i] = v.id;  // convert to IdRef\n             }\n           } else if (Number.isInteger(v)) {\n             if (optParams && optParams.checkRefInt) {\n               if (!cLASS[range].instances[String(v)]) {\n                 constrVio = new ReferentialIntegrityConstraintViolation(\"The value \" + v +\n                     \" of property '\"+ fld +\"' is not an ID of any \" + range + \" object!\");\n               }\n             }\n           } else if (typeof v === \"string\") {\n             if (!isNaN( parseInt(v))) v = valuesToCheck[i] = parseInt(v);\n           } else {\n             constrVio = new RangeConstraintViolation(\"The value (\" + v + \") of property '\" +\n                 fld + \"' is neither an integer nor a string!\");\n           }\n         });\n       } else if (typeof range === \"object\" && range.dataType !== undefined) {\n         // the range is a (collection) datatype declaration record\n         valuesToCheck.forEach( function (v) {\n           var i = 0;\n           if (typeof v !== \"object\") {\n             constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                 \" must be an object! \" + JSON.stringify(v) + \" is not admissible!\");\n           }\n           switch (range.dataType) {\n           case \"Array\":\n             if (!Array.isArray(v)) {\n               constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                   \" must be an array! \" + JSON.stringify(v) + \" is not admissible!\");\n               break;\n             }\n             if (v.length !== range.size) {\n               constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                   \" must be an array of length \" + range.size + \"! \" + JSON.stringify(v) + \" is not admissible!\");\n               break;\n             }\n             for (i = 0; i < v.length; i++) {\n               if (!cLASS.isOfType(v[i], range.itemType)) {\n                 constrVio = new RangeConstraintViolation(\"The items of \" + fld +\n                     \" must be of type \" + range.itemType + \"! \" + JSON.stringify(v) +\n                     \" is not admissible!\");\n               }\n             }\n             break;\n           case \"ArrayList\":\n             if (!Array.isArray(v)) {\n               constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                   \" must be an array! \" + JSON.stringify(v) + \" is not admissible!\");\n               break;\n             }\n             for (i = 0; i < v.length; i++) {\n               if (!cLASS.isOfType(v[i], range.itemType)) {\n                 constrVio = new RangeConstraintViolation(\"The items of \" + fld +\n                     \" must be of type \" + range.itemType + \"! \" + JSON.stringify(v) +\n                     \" is not admissible!\");\n               }\n             }\n             break;\n           }\n         });\n       } else if (range === Object) {\n         valuesToCheck.forEach(function (v) {\n           if (!(v instanceof Object)) {\n             constrVio = new RangeConstraintViolation(\"The value of \" + fld +\n                 \" must be a JS object! \" + JSON.stringify(v) + \" is not admissible!\");\n           }\n         });\n       }\n   }\n   // return constraint violation found in range switch\n   if (constrVio) return constrVio;\n\n   /********************************************************\n    ***  Check constraints that apply to several ranges  ***\n    ********************************************************/\n   if (range === \"String\" || range === \"NonEmptyString\") {\n     valuesToCheck.forEach( function (v) {\n       if (min !== undefined && v.length < min) {\n         constrVio = new StringLengthConstraintViolation(\"The length of \"+\n             fld + \" must not be smaller than \"+ min);\n       } else if (max !== undefined && v.length > max) {\n         constrVio = new StringLengthConstraintViolation(\"The length of \"+\n             fld + \" must not be greater than \"+ max);\n       } else if (pattern !== undefined && !pattern.test( v)) {\n         constrVio = new PatternConstraintViolation( msg || v +\n             \"does not comply with the pattern defined for \"+ fld);\n       }\n     });\n   }\n   if (range === \"Integer\" || range === \"NonNegativeInteger\" ||\n       range === \"PositiveInteger\") {\n     valuesToCheck.forEach( function (v) {\n       if (min !== undefined && v < min) {\n         constrVio = new IntervalConstraintViolation( fld +\n             \" must be greater than \"+ min);\n       } else if (max !== undefined && v > max) {\n         constrVio = new IntervalConstraintViolation( fld +\n             \" must be smaller than \"+ max);\n       }\n     });\n   }\n   if (constrVio) return constrVio;\n\n   /********************************************************\n    ***  Check cardinality constraints  *********************\n    ********************************************************/\n   if (maxCard > 1) { // (a multi-valued property can be array- or map-valued)\n     // check minimum cardinality constraint\n     if (minCard > 0 && valuesToCheck.length < minCard) {\n       return new CardinalityConstraintViolation(\"A collection of at least \"+\n           minCard +\" values is required for \"+ fld);\n     }\n     // check maximum cardinality constraint\n     if (valuesToCheck.length > maxCard) {\n       return new CardinalityConstraintViolation(\"A collection value for \"+\n           fld +\" must not have more than \"+ maxCard +\" members!\");\n     }\n   }\n   // return deserialized value available in validationResult.checkedValue\n   return new NoConstraintViolation( maxCard === 1 ? valuesToCheck[0] : valuesToCheck);\n };\n /**\n  * Map range datatype to JS datatype.\n  * @method\n  * @author Gerd Wagner\n  * @return {string}\n  */\n cLASS.range2JsDataType = function ( range) {\n   var jsDataType=\"\";\n   switch (range) {\n     case \"String\":\n     case \"NonEmptyString\":\n     case \"Email\":\n     case \"URL\":\n     case \"PhoneNumber\":\n     case \"Date\":\n       jsDataType = \"string\";\n       break;\n     case \"Integer\":\n     case \"NonNegativeInteger\":\n     case \"PositiveInteger\":\n     case \"Number\":\n     case \"AutoNumber\":\n     case \"Decimal\":\n     case \"Percent\":\n     case \"ClosedUnitInterval\":\n     case \"OpenUnitInterval\":\n       jsDataType = \"number\";\n       break;\n     case \"Boolean\":\n       jsDataType = \"boolean\";\n       break;\n     default:\n       if (range instanceof eNUMERATION) {\n         jsDataType = \"number\";\n       } else if (typeof range === \"string\" && cLASS[range]) {\n         jsDataType = \"string\";  // for the standard ID (TODO: can also be \"number\")\n       } else if (typeof range === \"object\") {  // a.g. Array or Object\n         jsDataType = \"object\";\n       }\n   }\n   return jsDataType;\n };\n /**\n  * Check if a value is of some type.\n  * @method\n  * @author Gerd Wagner\n  * @return {boolean}\n  */\n cLASS.isOfType = function ( v, Type) {\n   switch (Type) {\n     case \"String\": return (typeof v === \"string\");\n     case \"NonEmptyString\": return (typeof v === \"string\" && v.trim() !== \"\");\n     case \"Integer\": return Number.isInteger(v);\n     case \"NonNegativeInteger\": return (Number.isInteger(v) && v >= 0);\n     case \"PositiveInteger\": return (Number.isInteger(v) && v > 0);\n     case \"Decimal\": return (typeof v === \"number\");\n     case \"ClosedUnitInterval\":\n       return (typeof v === \"number\" && v>=0 && v<=1);\n     case \"OpenUnitInterval\":\n       return (typeof v === \"number\" && v>0 && v<1);\n     default: return true;\n   }\n };\n\n /********************************************************\n  ***  Collection datatypes  *****************************\n  ********************************************************/\n/*\n * cLASS datatypes, such as collection types, are defined in the form of\n * cOLLECTIONdATATYPE objects that specify the collection type, the\n * item type and the size of the collection.\n */\n cLASS.cOLLECTIONdATATYPE = function (typeName, itemType, size, optParams) {\n   this.type = typeName;\n   this.itemType = itemType;\n   this.size = size;\n   this.optParams = optParams;\n };\n cLASS.Array = function (itemType, size, optParams) {\n  if (this instanceof cLASS.Array) {\n    // called with new, so return an array object\n    this.type = \"Array\";\n    this.itemType = itemType;\n    this.size = size;\n    if (optParams) {\n      if (optParams.constraints) this.constraints = optParams.constraints; //TODO\n      if (optParams.decimalPlaces) this.decimalPlaces = optParams.decimalPlaces;\n    }\n    this.array = new Array( size);\n  } else {\n    // called without new, return an object representing an Array datatype\n    return new cLASS.cOLLECTIONdATATYPE(\"Array\",\n        {itemType:itemType, size:size, optParams:optParams});\n  }\n };\ncLASS.ArrayList = function (itemType, constraints) {\n   if (constraints) {\n     return {dataType:\"ArrayList\", itemType: itemType, constraints: constraints};\n   } else return {dataType:\"ArrayList\", itemType: itemType};\n };\ncLASS.Map = function (itemType, constraints) {\n  if (constraints) {\n    return {dataType:\"Map\", itemType: itemType, constraints: constraints};\n  } else return {dataType:\"Map\", itemType: itemType};\n};\n\ncLASS.RingBuffer = function (itemType, size, optParams) {\n  if (this instanceof cLASS.RingBuffer) {\n    // called with new, so return a ring buffer object\n    this.type = \"RingBuffer\";\n    this.itemType = itemType;\n    this.size = size;\n    if (optParams) {\n      if (optParams.constraints) this.constraints = optParams.constraints; //TODO\n      if (optParams.decimalPlaces) this.decimalPlaces = optParams.decimalPlaces;\n    }\n    this.first = 0;  // index of first item\n    this.last = -1;  // index of last item\n    this.buffer = new Array( size);\n  } else {\n    // called without new, return an object representing a RingBuffer datatype\n    return new cLASS.cOLLECTIONdATATYPE(\"RingBuffer\",\n        {itemType:itemType, size:size, optParams:optParams});\n  }\n};\ncLASS.RingBuffer.prototype.nmrOfItems = function () {\n  if (this.last === -1) return 0;\n  else if (this.first <= this.last) return this.last - this.first + 1;\n  else return this.last + this.size - this.first + 1;\n};\ncLASS.RingBuffer.prototype.add = function (item) {\n  if (this.nmrOfItems() < this.size) {\n   this.last++;  // still filling the buffer\n  } else {  // buffer is full, move both pointers\n   this.first = (this.first+1) % this.size;\n   this.last = (this.last+1) % this.size;\n  }\n  this.buffer[this.last] = item;\n};\ncLASS.RingBuffer.prototype.toString = function (n) {\n  var i=0, str = \"[\", item, roundingFactor=1,\n      N = this.nmrOfItems(),\n      outputLen = n ? Math.min( n, N) : N;\n  if (N === 0) return \" \";\n  for (i=0; i < outputLen; i++) {\n    item = this.buffer[(this.first+i) % this.size];\n    // serialize enum values as labels\n    if (this.itemType instanceof eNUMERATION) item = this.itemType.labels[item-1];\n    else if (cLASS.isDecimalType( this.itemType)) {\n      //decimalPlaces:\n      roundingFactor = Math.pow( 10, this.decimalPlaces);\n      item = Math.round( item * roundingFactor) / roundingFactor;\n    }\n    str += item;\n    if (i < outputLen-1) str += \", \";\n  }\n  return str + \"]\";\n };\n// Simple Moving Average (SMA)\n cLASS.RingBuffer.prototype.getSMA = function (n) {\n   var N = this.nmrOfItems(), i=0, val=0, sum=0;\n   if (n) N = Math.min( n, N);\n   for (i=0; i < N; i++) {\n     val = this.buffer[(this.first+i) % this.size];\n     sum += val;\n   }\n   return sum / N;\n };\n\n /**\n * @fileOverview  A library of DOM element creation methods and \n * other DOM manipulation methods.\n * \n * @author Gerd Wagner\n */\n\nvar dom = {\n  /**\n   * Create an element\n   *\n   * @param {string} elemType\n   * @param {object} slots\n   * @return {object}\n   */\n  createElement: function (elemType, slots) {\n    var el = document.createElement( elemType);\n    if (slots) {\n      if (slots.id) el.id = slots.id;\n      if (slots.classValues) el.className = slots.classValues;\n      if (slots.title) el.title = slots.title;\n      if (slots.content) el.innerHTML = slots.content;\n      if (slots.borderColor) el.style.borderColor = slots.borderColor;\n    }\n    return el;\n  },\n   /**\n    * Create a time element from a Date object\n    *\n    * @param {object} d\n    * @return {object}\n    */\n   createTime: function (d) {\n     var tEl = document.createElement(\"time\");\n     tEl.textContent = d.toLocaleDateString();\n     tEl.setAttribute(\"datetime\", d.toISOString());\n     return tEl;\n   },\n   /**\n    * Create an img element\n    * \n    * @param {string} id\n    * @param {string} classValues\n    * @param {object} content\n    * @return {object}\n    */\n    createImg: function (slots) {\n      var el = document.createElement(\"img\");\n      el.src = slots.src;\n      if (slots.id) el.id = slots.id;\n      if (slots.classValues) el.className = slots.classValues;\n      return el;\n    },\n  /**\n   * Create an option element\n   * \n   * @param {object} content\n   * @return {object}\n   */\n  createOption: function (slots) {\n    var el = document.createElement(\"option\");\n    if (slots.text) el.textContent = slots.text;\n    if (slots.value !== undefined) el.value = slots.value;\n    return el;\n  },\n  /**\n   * Create a button element\n   * \n   * @param {string} id\n   * @param {string} classValues\n   * @param {object} content\n   * @return {object}\n   */\n  createButton: function (slots) {\n    var el = document.createElement(\"button\");\n    if (!slots.type) el.type = \"button\";\n    else el.type = slots.type;\n    if (slots.id) el.id = slots.id;\n    if (slots.name) el.name = slots.name;\n    if (slots.classValues) el.className = slots.classValues;\n    if (slots.title) el.title = slots.title;\n    if (slots.handler) el.addEventListener( 'click', slots.handler);\n    if (slots.content) el.innerHTML = slots.content;\n    else el.textContent = slots.label || slots.name;\n    return el;\n  },\n  /**\n   * Create a labeled output field\n   * \n   * @param {{labelText: string, name: string?, value: string?}}\n   *        slots  The view definition slots.\n   * @return {object}\n   */\n  createLabeledOutputField: function (slots) {\n    var outpEl = document.createElement(\"output\"),\n        lblEl = document.createElement(\"label\");\n    if (slots.name) outpEl.name = slots.name;\n    if (slots.value !== undefined) outpEl.value = slots.value;\n    lblEl.textContent = slots.labelText;\n    lblEl.appendChild( outpEl);\n    return lblEl;\n  },\n  /**\n   * Create a labeled input field\n   *\n   * @param {{labelText: string, name: string?, type: string?,\n   *          value: string?, disabled: string?}}\n   *        slots  The view definition slots.\n   * @return {object}\n   */\n  createLabeledInputField: function (slots) {\n    var inpEl = document.createElement(\"input\"),\n        lblEl = document.createElement(\"label\");\n    if (slots.name) inpEl.name = slots.name;\n    if (slots.type) inpEl.type = slots.type;\n    else inpEl.type = \"text\";\n    if (slots.value !== undefined) inpEl.value = slots.value;\n    if (slots.disabled) inpEl.disabled = \"disabled\";\n    lblEl.textContent = slots.labelText;\n    lblEl.appendChild( inpEl);\n    return lblEl;\n  },\n  /**\n  * Create a radio button or checkbox element\n  *\n  * @param {{labelText: string, name: string?, type: string?,\n  *          value: string?, disabled: string?}}\n  *        slots  The view definition slots.\n  * @return {object}\n  */\n  createLabeledChoiceControl: function (t,n,v,lblTxt) {\n    var ctrlEl = document.createElement(\"input\"),\n        lblEl = document.createElement(\"label\");\n    ctrlEl.type = t;\n    ctrlEl.name = n;\n    ctrlEl.value = v;\n    lblEl.appendChild( ctrlEl);\n    lblEl.appendChild( !lblTxt.includes(\"</\") ?\n        document.createTextNode( lblTxt) :\n        dom.createElement(\"div\", {content: lblTxt})\n    );\n    return lblEl;\n  },\n  /**\n  * Create a labeled select element\n  *\n  * @param {{labelText: string, name: string?, index: integer?}}\n  *     slots  The view definition slots.\n  * @return {object}\n  */\n  createLabeledSelect: function (slots) {\n    var selEl = document.createElement(\"select\"),\n        lblEl = document.createElement(\"label\");\n    if (slots.name) selEl.name = slots.name;\n    if (slots.index !== undefined) selEl.index = slots.index;\n    lblEl.textContent = slots.labelText;\n    lblEl.appendChild( selEl);\n    return lblEl;\n  },\n  /**\n  * Create option elements from an array list of option text strings\n  * and insert them into a selection list element\n  *\n  * @param {object} selEl  A select(ion list) element\n  * @param {object} options  An array list of records or text items\n  * @param {object} optPar  A record of optional parameters\n  */\n  fillSelectWithOptionsFromArrayList: function (selEl, options, optPar) {\n    selEl.innerHTML = \"\";\n    if (!selEl.multiple) {\n      selEl.add( dom.createOption({text:\" --- \", value:\"\"}), null);\n    }\n    options.forEach( function (opt,i) {\n      var optEl = null,\n          id = optPar && optPar.primaryKey ? opt[optPar.primaryKey] : opt.id;\n      if (typeof opt === \"string\") optEl = dom.createOption({text: opt, value: i});\n      else optEl = dom.createOption({\n        text: optPar && optPar.displayProp ? opt[optPar.displayProp] : id,\n        value: id\n      });\n      if (selEl.multiple && optPar && optPar.selection &&\n          optPar.selection.includes(i+1)) {\n        // flag the option element with this value as selected\n        optEl.selected = true;\n      }\n      selEl.add( optEl, null);\n    });\n  },\n   /**\n    * Create option elements from a map of ID values to entity objects/records\n    * and insert them into a selection list element\n    *\n    * @param {object} selEl  A select(ion list) element\n    * @param {object} entityMap  A map of entity IDs to entity records\n    * @param {object} optPar  A record of optional parameters\n    */\n   fillSelectWithOptionsFromEntityMap: function (selEl, entityMap, optPar) {\n     var i=0, keys=[], obj={}, optEl=null, txt=\"\";\n     selEl.innerHTML = \"\";\n     if (!optPar || !optPar.noVoidOption) {\n       selEl.add( dom.createOption({value:\"\", text:\"---\"}), null);\n     }\n     keys = Object.keys( entityMap);\n     for (i=0; i < keys.length; i++) {\n       obj = entityMap[keys[i]];\n       if (optPar && optPar.displayProp) txt = obj[optPar.displayProp];\n       else txt = obj.id;\n       optEl = dom.createOption({ value: obj.id, text: txt });\n       // if invoked with a selection argument, flag the selected options\n       if (selEl.multiple && optPar && optPar.selection &&\n           optPar.selection[keys[i]]) {\n         // flag the option element with this value as selected\n         optEl.selected = true;\n       }\n       selEl.add( optEl, null);\n     }\n   }\n};\n /**\n  * Insert a new node/element after another one\n  *\n  * @return {object}  tbody element object\n  */\ndom.insertAfter = function (newNode, referenceNode) {\n   referenceNode.parentNode.insertBefore( newNode, referenceNode.nextSibling);\n};\n /* Polyfill for ChildNode.remove()\n    from: https://github.com/jserz/js_piece/blob/master/DOM/ChildNode/remove()/remove().md\n */\n (function (arr) {\n   arr.forEach(function (item) {\n     if (item.hasOwnProperty('remove')) {\n       return;\n     }\n     Object.defineProperty(item, 'remove', {\n       configurable: true,\n       enumerable: true,\n       writable: true,\n       value: function remove() {\n         if (this.parentNode !== null)\n           this.parentNode.removeChild(this);\n       }\n     });\n   });\n })([Element.prototype, CharacterData.prototype, DocumentType.prototype]);\n\n/**\n * @fileOverview  This file contains the definition of the class ObjectView.\n * @author Gerd Wagner\n * @copyright Copyright 2015 Gerd Wagner, Chair of Internet Technology,\n *   Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n */\n/**\n * Class for creating (and rendering) view models based on \"model objects\". A view model\n * is a (logical) UI model consisting of (input and output) fields, which are typically\n * based on model properties, and user action types, defined as named JS methods that can\n * be used as event handlers for UI events.\n *\n * A view model may have a field order definition and field group definitions\n * in the constructor parameter \"fields\", which is processed into a \"fields\" map\n * of field definition records and a field order definition list \"fieldOrder\".\n * The constructor parameter \"fields\" may contain additional fields not based\n * on model object properties. When a view model is created without a \"fields\"\n * argument, the view fields are generated from the labeled properties of the\n * underlying model object.\n *\n * In addition to the field definition map \"fields\", there is a field value map\n * \"fieldValues\", which has a top-down databinding to corresponding model object\n * properties (via implicit setters). The underlying model object is associated\n * with a view field via the record field \"moName\" of the corresponding \"fields\"\n * definition record and the view's map \"modelObjects\".\n *\n * A view (or 'view model') is a logical representation of the interaction\n * elements of a UI, which typically correspond to properties and methods\n * of a model object. A view consists of (input/output) fields and of user\n * action types, such as \"run\", \"saveSimulationState\", etc.\n *\n * A view field has an I/O mode of either \"I/O\" (input/output) or \"O\". When a view\n * is rendered, its fields are rendered as HTML UI elements in the following way:\n *\n * 1) ordinary fields as form fields (HTML input/output elements),\n * 2) Boolean fields as HTML checkbox-typed input elements,\n * 3) enumeration and reference fields as choice widgets (radio button groups or\n *    checkbox groups, HTML select elements or other selection list widgets)\n *\n * or as any HTML element that allows for text content, or as special UI widgets\n * (such as calendar date selection widgets or color pickers). User action\n * types are exposed in the form of HTML buttons or other actionable (e.g.\n * clickable) HTML elements.\n *\n * A view's UI with its view-field-based input/output elements and widgets\n * is rendered by invoking the ender method on the view. UI fields/widgets are\n * subsequently synchronized with view field values and model object property values\n * by means of a top-down data binding mechanism: value changes of UI fields are\n * propagated to corresponding view fields (typically in a change event listener)\n * and then to model object properties in the setter of the fields.<fld>.value property.\n * TODO: implement this two-step data binding mechanism\n *\n * A user action type is a named JS function where the name indicates the\n * intended meaning of the user action (such as \"saveSimulationState\"). It\n * binds a UI event type, such as clicking on a button, to a view method as\n * its \"event handler\".\n\n * TODO: bottom-up data binding from model object properties to view fields:\n * When a view field is bound to a model object property, its value is updated\n * whenever the corresponding property value of the model object is updated.\n *\n * TODO: Support multiple model objects when using field definitions instead of names\n *\n * A view can be rendered in two different ways:\n * - (normally) By creating all required DOM elements (form elements with controls), and\n *    appending them to the child elements of the body element, if the document\n *    does not contain suitable form elements.\n * - By accessing existing form elements and controls, just setting/updating their\n *    contents (and dynamic parts)\n *\n * Notice that slots.fields is an array of property names or view field definitions\n * while this.fields is a map of view field definitions.\n *\n * Example invocation:\n\n // create a view based on a single model object\n var view = new oBJECTvIEW({\n      modelObject: sim.scenario,\n\t  // create a horizontal field group\n      fields: [[\"simulationEndTime\", \"stepDuration\", \"visualize\", \"createLog\"]],\n      userActions: {\n        \"run\": function () {...}\n\t  }\n  })\n // render the view and store its databinding\n view.dataBinding = view.render();\n\n // create a view based on multiple model objects\n var view = new oBJECTvIEW({\n     modelObjects: {\"scenario\":sim.scenario, \"model\":sim.model},\n\t   // create a horizontal field group\n     fields: [[\"scenario.simulationEndTime\", \"model.timeUnit\", \"scenario.stepDuration\", ...]],\n     userActions: {\n        \"run\": function () {...}\n\t   }\n })\n +\n * @constructor\n * @this {oBJECTvIEW}\n * @param {{modelObject: Object, fields: Array, methods: Map?}}\n *        slots  The view definition slots\n */\n/* globals oBJECTvIEW */\nvar oBJECTvIEW = function (slots) {\n  var properties={},\n      multipleModelObjects = slots.modelObjects && slots.modelObjects instanceof Object;\n  // check oBJECTvIEW definition constraints\n  if (!(slots.modelObject && (slots.modelObject instanceof Object)) &&\n      !multipleModelObjects) {\n    throw ViewConstraintViolation(\"Creating an object view requires a (set of) model object(s)!\");\n  }\n  if (multipleModelObjects) {\n    if (!slots.fields) {\n      throw ViewConstraintViolation(\n          \"A view def with multiple model objects requires field definitions!\");\n    }\n    if (!slots.fields.every( function (fGrp) {\n        // turn single field into singleton field group\n        if (!Array.isArray(fGrp)) fGrp = [fGrp];\n        return fGrp.every( function (f) {\n            return typeof f === \"string\" && f.indexOf(\".\") > -1;});\n        })) {\n      throw ViewConstraintViolation(\"Field definitions based on multiple model objects \" +\n          \"need to be two-part strings with a dot as separator!\");\n    }\n  }\n  // check if i18n translation function is defined\n  if (typeof i18n !== \"object\" || !i18n.t) {\n    // define dummy function\n    i18n = {t: function (txt) {return txt;}}\n  }\n  if (multipleModelObjects) {\n    this.modelObjects = slots.modelObjects;\n  } else {\n    this.modelObject = slots.modelObject;\n    // store the modelObject also in the modelObjects map\n    this.modelObjects = {};\n    this.modelObjects[slots.modelObject.objectName] = slots.modelObject;\n  }\n  this.heading = slots.heading;\n  // Process the \"slots.fields\" array (or the properties map) into a \"fields\" map\n  // of view field declarations and a field order definition array \"fieldOrder\"\n  this.fields = {};\n  this.fieldValues = {};\n  this.fieldOrder = [];\n  if (slots.suppressNoValueFields === undefined) this.suppressNoValueFields = true;  // default\n  else this.suppressNoValueFields = slots.suppressNoValueFields;\n  if (slots.fields) {\n    slots.fields.forEach( function (el) {\n      var j=0, fld, fldGrp=[], fldOrdEl=[], moName=\"\", mo=null, pos=0;\n      // turn single field into singleton field group\n      if (!Array.isArray( el)) fldGrp = [el];\n      else fldGrp = el;        // field group\n      for (j=0; j < fldGrp.length; j++) {\n        fld = fldGrp[j];\n        if (typeof fld === \"string\") {  // name of property-induced field\n          if (multipleModelObjects) {  // two-part field name\n            pos = fld.indexOf(\".\");\n            moName = fld.substring( 0, pos);\n            mo = this.modelObjects[moName];\n            fld = fld.substring( pos+1);  // proper field name\n          } else {\n            mo = this.modelObject;\n          }\n          properties = mo.properties;\n          if (!properties[fld]) {\n            throw new ViewConstraintViolation(\n                \"View field \"+ fld +\" does not correspond to a model property!\");\n          }\n          if (this.suppressNoValueFields && mo[fld] === undefined) continue;\n          // else\n          this.fields[fld] = util.cloneRecord( properties[fld]);\n          // in case range is a JS constructor function or object\n          if (typeof properties[fld].range !== \"string\") {\n            if (cLASS[properties[fld].range.Name]) {\n              this.fields[fld].range = properties[fld].range.Name;\n            } else {\n              this.fields[fld].range = properties[fld].range;\n            }\n          }\n          this.fields[fld].moName = mo.objectName;\n          this.fields[fld].inputOutputMode = \"I/O\";\n          this.fields[fld].label = i18n.t( this.fields[fld].label);\n          if (this.fields[fld].hint) {\n            this.fields[fld].hint = i18n.t( this.fields[fld].hint);\n          }\n          fldOrdEl.push( fld);\n        } else if (typeof fld === \"object\") {  // field definition\n          properties = this.modelObject.properties;\n          this.fields[fld.name] = {\n            moName: this.modelObject.objectName,\n            label: i18n.t( fld.label || properties[fld.name].label),\n            hint: i18n.t( fld.hint || properties[fld.name].hint),\n            range: fld.range || properties[fld.name].range,\n            inputOutputMode: fld.inputOutputMode\n          };\n          fldOrdEl.push( fld.name);\n          if (fldGrp.derivationFunction) {\n            this.fields[fld.name].derivationFunction = fld.derivationFunction;\n          }\n          if (fld.optional) this.fields[fld.name].optional = true;\n        } else {  // neither property field nor defined field\n          throw new ViewConstraintViolation(\n              \"Neither property field nor defined field: \"+ fld);\n        }\n      }\n      if (fldGrp.length === 1) this.fieldOrder.push( fldOrdEl[0]);\n      else this.fieldOrder.push( fldOrdEl);\n    }, this);\n  } else {  // no view field definitions provided in constructor slots\n    properties = this.modelObject.properties;\n    // create view fields from labeled model properties\n    Object.keys( properties).forEach( function (prop) {\n      if (properties[prop].label &&\n          (!this.suppressNoValueFields ||\n           this.modelObject[prop] !== undefined ||\n           properties[prop].dependsOn  !== undefined)) {\n        this.fieldOrder.push( prop);\n        this.fields[prop] = util.cloneRecord( properties[prop]);\n        this.fields[prop].inputOutputMode = \"I/O\";\n        this.fields[prop].label = i18n.t( this.fields[prop].label);\n        if (this.fields[prop].hint) {\n          this.fields[prop].hint = i18n.t( this.fields[prop].hint);\n        }\n      }\n    }, this);\n  }\n  this.maxNmrOfEnumLitForChoiceButtonRendering =\n      slots.maxNmrOfEnumLitForChoiceButtonRendering || 7;\n  this.methods = slots.methods || {};\n  this.userActions = slots.userActions || {};\n  //this.fieldGroupSeparator = slots.fieldGroupSeparator || \", \";\n  /**\n   * Generic setter for view fields\n   * this = view object\n   * @method\n   * @author Gerd Wagner\n   * TODO: what about derived view fields?\n   */\n  this.methods.set = function (f,v) {\n    var el=null, elems=null, i=0,\n        mo = this.modelObjects[this.fields[f].moName],\n        properties = mo.properties,\n        fldGrpSep = this.fieldGroupSeparator,\n        range = properties[f].range,\n        uiEl = this.dataBinding[this.viewMode][f];\n    if (v === undefined) {\n      if (properties[f] && properties[f].maxCard) v = [];\n      else v = \"\";\n      this[f] = v;\n      return;\n    }\n    // assign view field\n    if (Array.isArray(v)) this[f] = v.clone();\n    else this[f] = v;\n    // bottom-up data-binding: assign UI/form field\n    if (uiEl.tagName === \"INPUT\" || uiEl.tagName === \"OUTPUT\") {\n      if (!Array.isArray(v)) {\n        uiEl.value = cLASS.getValueAsString( mo, f, v);\n      } else {\n        v.forEach( function (el,i) {\n          var ds = cLASS.getValueAsString( mo, f, el);\n          if (i===0) uiEl.value = ds;\n          else uiEl.value += fldGrpSep + ds;\n        });\n      }\n    } else if (uiEl.tagName === \"FIELDSET\" &&\n        uiEl.classList.contains(\"radio-button-group\")) {\n      elems = uiEl.querySelectorAll(\"input[type='radio']\");\n      for (i=0; i < elems.length; i++) {\n        el = elems[i];\n        if (el.value === String(v)) el.checked = true;\n      }\n    } else if (uiEl.tagName === \"FIELDSET\" &&\n        uiEl.classList.contains(\"checkbox-group\")) {\n      elems = uiEl.querySelectorAll(\"input[type='checkbox']\");\n      for (i=0; i < elems.length; i++) {\n        el = elems[i];\n        if (v.indexOf( parseInt( el.value)) > -1) el.checked = true;\n        else el.checked = false;\n      }\n    } else if (uiEl.tagName === \"SELECT\" && uiEl.multiple !== \"multiple\") {\n      uiEl.selectedIndex = v;\n    } else {\n      uiEl.setAttribute(\"data-value\", v);\n    }\n  };\n};\n/**\n * Render the HTML form DOM of a model object's view model\n * this = view model object\n * @author Gerd Wagner\n * @method\n * @return {object} dataBinding\n */\noBJECTvIEW.maxCardButtonGroup = 7;\noBJECTvIEW.prototype.render = function (objViewParentEl) {\n  var fields = this.fields,  // fields map\n      fieldOrder = this.fieldOrder,  // field order array\n      mObject = this.modelObject,  // model object\n      mObjects = this.modelObjects,  // model objects\n      // a map for storing the bindings of UI elems to view fields\n      dataBinding = {},\n      userActions = this.userActions,\n      validateOnInput = true,\n      uiElemType = \"form\", parentEl=null,\n      maxELforButton = 7,\n      uiContainerEl=null, footerEl=null, i=0;\n  /* ==================================================================== */\n  /**\n   * Create a labeled text field. When validation is not performed on input\n   * it is performed on blur in the case of \"Create\" for catching mandatory\n   * value constraint violations, and on change in the case of \"Update\".\n   * @method\n   */\n  function createLabeledTextField( fld) {\n    var fldEl = null, lblEl = document.createElement(\"label\"),\n        fDef = fields[fld];   // field definition\n    if (fDef.inputOutputMode === \"O\") {\n      fldEl = document.createElement(\"output\");\n    } else {\n      fldEl = document.createElement(\"input\");\n      fldEl.type = \"text\";\n      if (validateOnInput) {\n        fldEl.addEventListener(\"input\", function () {\n          fldEl.setCustomValidity( cLASS.check( fld, fDef, fldEl.value).message);\n        });\n      } else {\n        fldEl.addEventListener(\"blur\", function () {\n          fldEl.setCustomValidity( cLASS.check( fld, fDef, fldEl.value).message);\n        });\n      }\n      fldEl.addEventListener(\"change\", function () {\n        var v = fldEl.value;\n        if (!validateOnInput) {\n          fldEl.setCustomValidity( cLASS.check( fld, fDef, v).message);\n        }\n        // UI element to model property data binding (top-down)\n        if (fldEl.validity.valid) mObjects[fDef.moName][fld] = v;\n      });\n    }\n    // store data binding assignment of UI element to view field\n    dataBinding[fld] = fldEl;\n    // render text input element\n    fldEl.name = fld;\n    fldEl.value = typeof mObject[fld] === \"object\" ? JSON.stringify( mObject[fld]) : mObject[fld] || \"\";\n    fldEl.size = 7;\n    if (fields[fld].hint) lblEl.title = fields[fld].hint;\n    lblEl.textContent = fields[fld].label;\n    lblEl.appendChild( fldEl);\n    return lblEl;\n  }\n  /**\n   * Create a labeled Yes/No field.\n   * @method\n   */\n  function createLabeledYesNoField( fld) {\n    var fldEl = null, lblEl = document.createElement(\"label\"),\n        fDef = fields[fld];   // field declaration\n    if (fields[fld].inputOutputMode === \"O\") {\n      fldEl = document.createElement(\"output\");\n    } else {\n      fldEl = document.createElement(\"input\");\n      fldEl.type = \"checkbox\";\n      fldEl.addEventListener(\"change\", function () {\n        mObjects[fDef.moName][fld] = fldEl.checked;  // UI element to model property data binding\n      });\n    }\n    // store data binding assignment of UI element to view field\n    dataBinding[fld] = fldEl;\n    fldEl.name = fld;\n    fldEl.checked = mObject[fld];\n    lblEl.textContent = fields[fld].label;\n    if (fields[fld].hint) lblEl.title = fields[fld].hint;\n    lblEl.appendChild( fldEl);\n    return lblEl;\n  }\n  /**\n   * Create a choice control group in a container element.\n   * A choice control is either an HTML radio button or an HTML checkbox.\n   * @method\n   */\n  function createChoiceButtonGroup( fld) {\n    var j=0, btnType=\"\", containerEl=null, el=null, choiceItems=[],\n        range = fields[fld].range;\n    el = document.createElement(\"legend\");\n    el.textContent = fields[fld].label;\n    containerEl = document.createElement(\"fieldset\");\n    containerEl.appendChild( el);\n    containerEl.setAttribute(\"data-bind\", fld);\n    // store data binding of UI element\n    dataBinding[fld] = containerEl;\n    // if maxCard is defined, use checkboxes\n    if (fields[fld].maxCard) {\n      btnType = \"checkbox\";\n      containerEl.className = \"checkbox-group\";\n    } else {\n      btnType = \"radio\";\n      containerEl.className = \"radio-button-group\";\n    }\n    if (range instanceof eNUMERATION) {\n      choiceItems = range.labels;\n    } else if (Array.isArray(range)) {  // range is an ad-hoc enumeration\n      choiceItems = range;\n    } else {  // range is an entity type\n      choiceItems = Object.keys( range.instances);\n    }\n    for (j=0; j < choiceItems.length; j++) {\n      // button values = 1..n\n      el = dom.createLabeledChoiceControl( btnType, fld, j+1, choiceItems[j]);\n      containerEl.appendChild( el);\n      el.firstElementChild.addEventListener(\"click\", function (e) {\n        // UI element to model property data binding (top-down)\n        var btnEl = e.target, i=0,\n            mo = mObjects[fields[fld].moName],\n            val = parseInt( btnEl.value);\n        if (btnType === \"radio\") {\n          if (val !== mo[fld]) {\n            mo[fld] = val;\n          } else if (fields[fld].optional) {\n            // turn off radio button\n            btnEl.checked = false;\n            mo[fld] = undefined;\n          }\n        } else {  // checkbox\n          i = mo[fld].indexOf( val);\n          if (i > -1) {  // delete from value list\n            mo[fld].splice(i, 1);\n          } else {  // add to value list\n            mo[fld].push( val);\n          }\n        }\n      });\n    }\n    return containerEl;\n  }\n  /**\n   * Create a selection list\n   * @method\n   */\n  function createSelectionList( fld) {\n    var choiceItems = [],\n        selEl = document.createElement(\"select\"),\n        lblEl = document.createElement(\"label\"),\n        range  = fields[fld].range;\n    lblEl.textContent = fields[fld].label;\n    lblEl.appendChild( selEl);\n    selEl.setAttribute(\"data-bind\", fld);\n    // store data binding assignment of UI element to view field\n    dataBinding[fld] = selEl;\n    // if maxCard is defined, make a multi-selection list\n    if (fields[fld].maxCard) selEl.multiple = \"multiple\";\n    if (range instanceof eNUMERATION) {\n      choiceItems = range.labels;\n    } else if (Array.isArray(range)) {  // range is an ad-hoc enumeration\n      choiceItems = range;\n    } else {  // range is an entity type\n      choiceItems = Object.keys( range.instances);\n    }\n    dom.fillSelectWithOptionsFromArrayList( selEl, choiceItems);\n    selEl.addEventListener(\"change\", function () {\n      var mo = mObjects[fields[fld].moName];\n      // UI element to model property data binding (top-down)\n      if (selEl.value !== \"\") {\n        if (oBJECTvIEW.isIntegerType( range)) {\n          mo[fld] = parseInt( selEl.value);\n          // increment by 1 for enumerations\n          if (range instanceof eNUMERATION) mo[fld]++;\n        } else if (fields[fld].range === \"Date\") {\n          mo[fld] = new Date( selEl.value);\n        } else {\n          mo[fld] = selEl.value;\n        }\n      }\n    });\n    return lblEl;\n  }\n  /**\n   * Create UI elements for view fields\n   * depends on: fieldOrder\n   * @method\n   */\n  function createUiElemsForVmFields() {\n    //============= Inner Function ==============================\n    function createUiElemForVmField (containerEl, fld) {\n      var fDef = fields[fld],\n          range = fDef.range,\n          isEnum = range instanceof eNUMERATION,\n          isArr = Array.isArray( range);\n      // convert cLASS Name to cLASS object\n      if (typeof range === \"string\" && cLASS[range]) range = cLASS[range];\n      // retrieve model object for views based on multiple model objects\n      if (mObjects) mObject = mObjects[fDef.moName];\n      if (isEnum || isArr) {  // (ad-hoc) enumeration\n        if (isEnum && range.MAX <= maxELforButton ||\n            isArr && range.length <= maxELforButton) {\n          containerEl = createChoiceButtonGroup( fld);\n          if (!containerEl.className) containerEl.className = \"choice\";\n        } else {\n          if (!containerEl.className) containerEl.className = \"select\";\n          containerEl.appendChild( createSelectionList( fld));\n        }\n      } else if (range && range.constructor === cLASS && range.isComplexDatatype) {\n        if (fDef.maxCard && fDef.maxCard > 1) {\n          if (!containerEl.className) containerEl.className = \"RecordTableWidget\";\n          containerEl.appendChild( oBJECTvIEW.createRecordTableWidget(\n              {type: range, records: mObject[fld], tableTitle: fDef.label}));\n        }\n      } else if (range === \"Boolean\") {\n        if (!containerEl.className) containerEl.className = \"yes-no-field\";\n        containerEl.appendChild( createLabeledYesNoField( fld));\n      } else {  // string/numeric property field\n        if (!containerEl.className) containerEl.className = \"I-O-field\";\n        containerEl.appendChild( createLabeledTextField( fld));\n      }\n      if (fDef.dependsOn) {\n        if (mObject[fDef.dependsOn]) containerEl.style.display = \"block\";\n        else containerEl.style.display = \"none\";\n        dataBinding[fDef.dependsOn].addEventListener(\"change\", function () {\n          // toggle CSS style.display of containerEl\n          containerEl.style.display = (containerEl.style.display === \"none\") ? \"block\" : \"none\";\n        });\n      }\n    }\n    //=========================================================\n    fieldOrder.forEach( function (fldOrdEl) {\n      var containerEl = document.createElement(\"div\");\n      if (!Array.isArray( fldOrdEl)) {  // single field\n        createUiElemForVmField( containerEl, fldOrdEl);\n      } else {  // field group\n        containerEl.className = \"field-group\";\n        fldOrdEl.forEach( function (fld) {\n          createUiElemForVmField( containerEl, fld);\n        });\n      }\n      uiContainerEl.appendChild( containerEl);\n    });\n  }\n  /**\n   * Create UI elements (like buttons) for all user actions of the view\n   * depends on: fieldOrder\n   * @method\n   */\n  function createUiElemsForUserActions( parentEl) {\n    var containerEl = dom.createElement(\"div\", {\n      classValues:\"action-group\"\n    });\n    Object.keys( userActions).forEach( function (usrAct) {\n      var renderActBtn = typeof userActions[usrAct].showCondition !== \"function\" ||\n          userActions[usrAct].showCondition();\n      if (renderActBtn) {\n        containerEl.appendChild( dom.createButton({\n          name: usrAct,\n          label: userActions[usrAct].label || util.capitalizeFirstChar( usrAct),\n          title: userActions[usrAct].hint,\n          handler: userActions[usrAct]\n        }));\n        parentEl.appendChild( containerEl);\n      }\n    });\n  }\n  /* ==================================================================== */\n  /* MAIN CODE of render                                                  */\n  /* ==================================================================== */\n  // check if objView is descendant of a \"form\" element\n  parentEl = objViewParentEl;\n  while (parentEl && parentEl.tagName !== \"BODY\") {\n    if (parentEl.tagName === \"FORM\") {\n      uiElemType = \"div\";\n      break;\n    } else {\n      parentEl = parentEl.parentElement;\n    }\n  }\n  uiContainerEl = dom.createElement(\n    uiElemType,\n    {id: this.modelObject ?\n         this.modelObject.objectName : Object.keys( this.modelObjects)[0],\n     classValues:\"oBJECTvIEW\"}\n   );\n  if (this.heading) {\n    uiContainerEl.appendChild( dom.createElement(\"h2\", {content:this.heading}));\n  }\n  // store the object view's DOM element\n  this.domElem = uiContainerEl;\n  if (!objViewParentEl) objViewParentEl = document.querySelector(\"#uiContainerEl\");\n  if (!objViewParentEl) {\n    objViewParentEl = document.body;\n    footerEl = document.querySelector(\"html>body>footer\");\n    if (footerEl) {\n      document.body.insertBefore( uiContainerEl, footerEl);\n    } else {\n      document.body.appendChild( uiContainerEl);\n    }\n  } else objViewParentEl.appendChild( uiContainerEl);\n  if (uiContainerEl.tagName === \"FORM\") {  // reset custom validity\n    for (i=0; i < uiContainerEl.elements.length; i++) {\n      uiContainerEl.elements[i].setCustomValidity(\"\");\n    }\n    uiContainerEl.reset();\n  }\n  // create DOM elements for all UI/view fields\n  createUiElemsForVmFields();\n  // create DOM elements (like buttons) for all user actions of the UI/view model\n  createUiElemsForUserActions( uiContainerEl);\n  return dataBinding;  // a map of field names to corresponding DOM elements \n};\n/**\n * Set up a tabular UI for defining/editing entity records of a given\n * entity type or data records of a given complex datatype\n * @author Gerd Wagner\n * @method\n * @param slots.type  a cLASS\n * @param slots.records?  a collection (array list or map) of records\n * @return {object}  the created DOM element object\n */\noBJECTvIEW.createRecordTableWidget = function (slots) {\n  var tableEl = dom.createElement(\"table\", {classValues: \"RecTbl\"});\n  var headerRowEl=null, cell=null, rowIdx=0, obj=null, rowEl=null, N=0,\n      rowObjects=[], colProperties=[],  colHeadings=[], colTypes=[],\n      maxNmrOfRows = slots.maxNmrOfRows || 13,  // default is 13\n      tBody = document.createElement(\"tBody\"),\n      Class=null, propDefs=null, tableTitle = \"\",\n      keys=[], records=null, nmrOfRecords=0, p=\"\";\n  if (!slots.type) {\n    throw Error(\"No type provided when calling 'createRecordTableWidget'!\")\n  }\n  // convert cLASS name to cLASS object reference\n  if (typeof slots.type === \"string\" && cLASS[slots.type]) {\n    Class = cLASS[slots.type];\n  } else if (slots.type.constructor === cLASS) {\n    Class = slots.type;\n  } else {\n    throw Error(\"No cLASS type provided when calling 'createRecordTableWidget'!\")\n  }\n  propDefs = Class.properties;\n  tableEl.appendChild( tBody);\n  tableTitle = i18n.t( slots.tableTitle || Class.label || Class.Name);\n  if (!Class.isComplexDatatype) {\n    if (slots.editableProperties) colProperties = slots.editableProperties;\n    records = slots.records || Class.instances;\n    keys = Object.keys( records);\n    nmrOfRecords = keys.length;\n  } else if (Array.isArray( slots.records)) {\n    records = slots.records || [];\n    nmrOfRecords = records.length;\n  } else if (typeof slots.records === \"object\") { // a map\n    records = slots.records || {};\n    keys = Object.keys( records);\n    nmrOfRecords = keys.length;\n  }\n  if (propDefs.id) {\n    if (propDefs.name) colHeadings[0] = \"ID/Name\";\n    else colHeadings[0] = \"ID\";\n  } else if (propDefs.name) {\n    colHeadings[0] = \"Name\";\n  }\n  // loop over all property definitions (including inherited ones)\n  for (p in propDefs) {\n    if (p !== \"id\" && p !== \"name\" && propDefs[p].label) {\n      colProperties.push( p);\n      colHeadings.push( i18n.t( propDefs[p].label));\n      colTypes.push( propDefs[p].range);\n    }\n  }\n  // store properties displayed in table  TODO: currently not used...\n  tableEl.setAttribute(\"data-properties\", colProperties.join(\" \"));\n  // create table heading\n  tableEl.appendChild( document.createElement(\"thead\"));\n  // create row for table name\n  headerRowEl = tableEl.tHead.insertRow();\n  cell = headerRowEl.insertCell();\n  cell.textContent = tableTitle;\n  cell.colSpan = colHeadings.length;\n  // create row for column names\n  headerRowEl = tableEl.tHead.insertRow();\n  // create table column headings\n  colHeadings.forEach( function (cH) {\n    var c = headerRowEl.insertCell();\n    c.textContent = cH;\n  });\n  // create table rows\n  N = Math.min( nmrOfRecords, maxNmrOfRows);\n  for (rowIdx=0; rowIdx < N; rowIdx++) {\n    obj = keys.length>0 ? records[keys[rowIdx]] : records[rowIdx];\n    rowEl = tBody.insertRow();\n    // create object row\n    rowObjects[rowIdx] = obj;\n    if (obj.id) {\n      rowEl.insertCell().textContent = obj.name ? obj.id +\" / \"+ obj.name : obj.id;\n    } else if (obj.name) {\n      rowEl.insertCell().textContent = obj.name;\n    }\n    // create property value cells\n    colProperties.forEach( function (p) {\n      var c=null;\n      c = rowEl.insertCell();\n      //c.textContent = cLASS.convertPropValToStr( Class, p, obj[p]);\n      c.textContent = obj.getValueAsString( p);\n      // save value for being able to restore it\n      c.setAttribute(\"data-oldVal\", c.textContent);\n      if (!propDefs || !propDefs[p].stringified) {\n        c.setAttribute(\"contenteditable\",\"true\");\n        c.title = \"Click to edit!\";\n      }\n      c.addEventListener(\"blur\", function (e) {\n        var tdEl = e.target,\n            val = tdEl.textContent,\n            colNo = tdEl.cellIndex - 1, // skip first column (name/ID)\n            rowNo = tdEl.parentElement.rowIndex - 2,  // rowIndex includes 2 tHead rows\n            prop = colProperties[colNo],\n            constrVio = cLASS.check( prop, propDefs[prop], val);\n        if (constrVio.message) {\n          alert( constrVio.message);\n          tdEl.textContent = tdEl.getAttribute(\"data-oldVal\");\n        } else {\n          val = constrVio.checkedValue;\n          // update corresponding object slot\n          rowObjects[rowNo][prop] = val;\n          tdEl.setAttribute(\"data-oldVal\", tdEl.textContent);\n        }\n      });\n    });\n  }\n  // create an overflow indication row\n  if (nmrOfRecords > maxNmrOfRows) {\n    rowEl = tBody.insertRow();\n    if (obj.id) rowEl.insertCell().textContent = \"...\";\n    Object.keys( propDefs).forEach( function (p) {\n      var c=null;\n      if (colProperties.includes( p)) {\n        c = rowEl.insertCell();\n        c.textContent = \"...\";\n      }\n    });\n  }\n  // create an AddRow button\n  //oBJECTvIEW.createUiElemsForUserActions( popTableEl, this.userActions);\n  return tableEl;\n};\n/**\n * Create UI elements (like buttons) for all user actions of the view\n * depends on: fieldOrder\n * @method\n */\noBJECTvIEW.createUiElemsForUserActions = function (userActions) {\n  var containerEl = dom.createElement(\"div\", {\n    classValues:\"action-group\"\n  });\n  Object.keys( userActions).forEach( function (usrAct) {\n    containerEl.appendChild( dom.createButton({\n      name: usrAct,\n      label: userActions[usrAct].label || util.capitalizeFirstChar( usrAct),\n      handler: userActions[usrAct]\n    }));\n  });\n  return containerEl;\n};\n/**\n * Render an HTML form based on a view model (an abstract UI definition)\n *\n * The viewModel.fieldValues map holds the name-value slots of fields that\n * have been changed in the UI.\n *\n * @author Gerd Wagner\n * @method\n */\noBJECTvIEW.createUiFromViewModel = function (viewModel) {\n  var outFields = viewModel.outputFields || {},  // map of field definitions\n      inFields = viewModel.inputFields || {},  // map of field definitions\n      fields = {},\n      // list of field names or field name lists\n      fieldOrder = viewModel.fieldOrder ||\n          Object.keys( outFields).concat( Object.keys( inFields)),\n      fieldValues = viewModel.fieldValues,\n      userActions = viewModel.userActions || {},\n      // a map for storing the bindings of view fields to UI elems/widgets\n      dataBinding = {},\n      validateOnInput = viewModel.validateOnInput || true,\n      fldGrpSep = viewModel.fieldGroupSeparator,\n      uiContainerEl=null;\n  /* ==================================================================== */\n  /**\n   * Create a labeled text field. When validation is not performed on input\n   * it is performed on blur in the case of \"Create\" for catching mandatory\n   * value constraint violations, and on change in the case of \"Update\".\n   * @method\n   */\n  function createLabeledTextField( fld) {\n    var fldEl = null, lblEl = document.createElement(\"label\"),\n        fldDef = fields[fld],   // field declaration\n        range = fldDef.range;\n    if (fldDef.inputOutputMode === \"O\") {\n      fldEl = document.createElement(\"output\");\n    } else {\n      fldEl = document.createElement(\"input\");\n      if (cLASS.isIntegerType( range) || cLASS.isDecimalType( range)) {\n        fldEl.type = \"number\";\n        if (cLASS.isDecimalType( range)) {\n          if (!isNaN( parseInt( fldDef.decimalPlaces))) {\n            fldEl.step = \"0.\" + \"000000000\".substring( 0, fldDef.decimalPlaces-1) + \"1\";\n          } else fldEl.step = \"0.01\";  // default\n        }\n      } else fldEl.type = \"text\";\n      if (validateOnInput) {\n        fldEl.addEventListener(\"input\", function () {\n          fldEl.setCustomValidity( cLASS.check( fld, fldDef, fldEl.value).message);\n        });\n      } else {\n        fldEl.addEventListener(\"blur\", function () {\n          fldEl.setCustomValidity( cLASS.check( fld, fldDef, fldEl.value).message);\n        });\n      }\n      fldEl.addEventListener(\"change\", function () {\n        var v = fldEl.value, validationResult = {};\n        if (typeof fldDef.str2val === \"function\") v = fldDef.str2val(v);\n        validationResult = cLASS.check( fld, fldDef, v);\n        if (!validateOnInput) fldEl.setCustomValidity( validationResult.message);\n        // UI element to view model property data binding (top-down)\n        if (fldEl.validity.valid) fieldValues[fld] = validationResult.checkedValue;\n      });\n    }\n    // store data binding assignment of UI element to view field\n    dataBinding[fld] = fldEl;\n    // render text input element\n    fldEl.name = fld;\n    if (typeof fldDef.value === \"function\") {\n      fldEl.value = fldDef.value();\n    } else if (typeof fldDef.val2str === \"function\") {\n      fldEl.value = fldDef.val2str( fldDef.value);\n    } else if (typeof fldDef.value === \"object\") {\n      fldEl.value = JSON.stringify( fldDef.value);\n    } else {\n      fldEl.value = fldDef.value || fldDef.initialValue || \"\";\n    }\n    fldEl.size = fldDef.inputFieldSize || 7;\n    if (fldDef.hint) lblEl.title = fldDef.hint;\n    lblEl.textContent = fldDef.label;\n    lblEl.appendChild( fldEl);\n    return lblEl;\n  }\n  /**\n   * Create a labeled Yes/No field.\n   * @method\n   */\n  function createLabeledYesNoField( fld) {\n    var fldEl = null, lblEl = document.createElement(\"label\");\n    if (fields[fld].inputOutputMode === \"O\") {\n      fldEl = document.createElement(\"output\");\n    } else {\n      fldEl = document.createElement(\"input\");\n      fldEl.type = \"checkbox\";\n      fldEl.addEventListener(\"change\", function () {\n        fieldValues[fld] = fldEl.checked;  // UI element to view model property data binding\n      });\n    }\n    // store data binding assignment of UI element to view field\n    dataBinding[fld] = fldEl;\n    fldEl.name = fld;\n    fldEl.checked = fieldValues[fld];\n    lblEl.textContent = fields[fld].label;\n    if (fields[fld].hint) lblEl.title = fields[fld].hint;\n    lblEl.appendChild( fldEl);\n    return lblEl;\n  }\n  /**\n   * Create a choice control group in a container element.\n   * A choice control is either an HTML radio button or an HTML checkbox.\n   * @method\n   */\n  function createChoiceButtonGroup( fld) {\n    var j=0, btnType=\"\", containerEl=null, el=null, choiceItems=[],\n        range = fields[fld].range;\n    el = document.createElement(\"legend\");\n    el.textContent = fields[fld].label;\n    containerEl = document.createElement(\"fieldset\");\n    containerEl.appendChild( el);\n    containerEl.setAttribute(\"data-bind\", fld);\n    // store data binding of UI element\n    dataBinding[fld] = containerEl;\n    // if maxCard is defined, use checkboxes\n    if (fields[fld].maxCard) {\n      btnType = \"checkbox\";\n      containerEl.className = \"checkbox-group\";\n    } else {\n      btnType = \"radio\";\n      containerEl.className = \"radio-button-group\";\n    }\n    if (range instanceof eNUMERATION) {\n      choiceItems = range.labels;\n    } else if (Array.isArray(range)) {  // range is an ad-hoc enumeration\n      choiceItems = range;\n    } else {  // range is an entity type\n      choiceItems = Object.keys( range.instances);\n    }\n    for (j=0; j < choiceItems.length; j++) {\n      // button values = 1..n\n      el = dom.createLabeledChoiceControl( btnType, fld, j+1, choiceItems[j]);\n      containerEl.appendChild( el);\n      el.firstElementChild.addEventListener(\"click\", function (e) {\n        // data binding of UI element to model property (top-down)\n        var btnEl = e.target, i=0,\n            val = parseInt( btnEl.value);\n        if (btnType === \"radio\") {\n          if (val !== fieldValues[fld]) {\n            fieldValues[fld] = val;\n          } else if (fields[fld].optional) {\n            // turn off radio button\n            btnEl.checked = false;\n            fieldValues[fld] = undefined;\n          }\n        } else {  // checkbox\n          i = fieldValues[fld].indexOf( val);\n          if (i > -1) {  // delete from value list\n            fieldValues[fld].splice(i, 1);\n          } else {  // add to value list\n            fieldValues[fld].push( val);\n          }\n        }\n      });\n    }\n    return containerEl;\n  }\n  /**\n   * Create a selection list\n   * @method\n   */\n  function createSelectionList( fld) {\n    var choiceItems = [],\n        selEl = document.createElement(\"select\"),\n        lblEl = document.createElement(\"label\"),\n        range  = fields[fld].range;\n    lblEl.textContent = fields[fld].label;\n    lblEl.appendChild( selEl);\n    selEl.setAttribute(\"data-bind\", fld);\n    // store data binding assignment of UI element to view field\n    dataBinding[fld] = selEl;\n    // if maxCard is defined, make a multi-selection list\n    if (fields[fld].maxCard) selEl.multiple = \"multiple\";\n    if (range instanceof eNUMERATION) {\n      choiceItems = range.labels;\n    } else if (Array.isArray(range)) {  // range is an ad-hoc enumeration\n      choiceItems = range;\n    } else {  // range is an entity type\n      choiceItems = Object.keys( range.instances);\n    }\n    dom.fillSelectWithOptionsFromArrayList( selEl, choiceItems);\n    selEl.addEventListener(\"change\", function () {\n      // UI element to model property data binding (top-down)\n      if (selEl.value !== \"\") {\n        if (oBJECTvIEW.isIntegerType( range)) {\n          fieldValues[fld] = parseInt( selEl.value);\n          // increment by 1 for enumerations\n          if (range instanceof eNUMERATION) fieldValues[fld]++;\n        } else if (fields[fld].range === \"Date\") {\n          fieldValues[fld] = new Date( selEl.value);\n        } else {\n          fieldValues[fld] = selEl.value;\n        }\n      }\n    });\n    return lblEl;\n  }\n  /**\n   * Create UI elements for view fields\n   * depends on: fieldOrder\n   * @method\n   */\n  function createUiElemsForVmFields() {\n    //============= Inner Function ==============================\n    function createUiElemForVmField (containerEl, fld) {\n      var range = fields[fld].range,\n          isEnum = range instanceof eNUMERATION,\n          isArr = Array.isArray( range);\n      if (isEnum || isArr) {  // (ad-hoc) enumeration\n        if (isEnum && range.MAX <= oBJECTvIEW.maxCardButtonGroup ||\n            isArr && range.length <= oBJECTvIEW.maxCardButtonGroup) {\n          containerEl.appendChild( createChoiceButtonGroup( fld));\n          if (!containerEl.className) containerEl.className = \"choice\";\n        } else {\n          if (!containerEl.className) containerEl.className = \"select\";\n          containerEl.appendChild( createSelectionList( fld));\n        }\n      } else if (range === \"Boolean\") {\n        if (!containerEl.className) containerEl.className = \"yes-no-field\";\n        containerEl.appendChild( createLabeledYesNoField( fld));\n      } else {  // string/numeric property field\n        if (!containerEl.className) containerEl.className = \"I-O-field\";\n        containerEl.appendChild( createLabeledTextField( fld));\n      }\n      if (fields[fld].dependsOn) {\n        if (fieldValues[fields[fld].dependsOn]) containerEl.style.display = \"block\";\n        else containerEl.style.display = \"none\";\n        dataBinding[fields[fld].dependsOn].addEventListener(\"change\", function () {\n          // toggle CSS style.display of containerEl\n          containerEl.style.display = (containerEl.style.display === \"none\") ? \"block\" : \"none\";\n        });\n      }\n    }\n    //=========================================================\n    fieldOrder.forEach( function (fldOrdEl) {\n      var containerEl = document.createElement(\"div\");\n      if (!Array.isArray( fldOrdEl)) {  // single field\n        createUiElemForVmField( containerEl, fldOrdEl);\n      } else {  // field group\n        containerEl.className = \"field-group\";\n        fldOrdEl.forEach( function (fld) {\n          createUiElemForVmField( containerEl, fld);\n        });\n      }\n      uiContainerEl.appendChild( containerEl);\n    });\n  }\n  /**\n   * Create UI elements (like buttons) for all user actions of the view\n   * depends on: fieldOrder\n   * @method\n   */\n  function createUiElemsForUserActions( parentEl) {\n    var containerEl = dom.createElement(\"div\", {\n      classValues:\"action-group\"\n    });\n    Object.keys( userActions).forEach( function (usrAct) {\n      containerEl.appendChild( dom.createButton({\n        name: usrAct,\n        label: userActions[usrAct].label || util.capitalizeFirstChar( usrAct),\n        handler: userActions[usrAct]\n      }));\n      parentEl.appendChild( containerEl);\n    });\n  }\n  /* ====================================================================\n     M A I N\n     ==================================================================== */\n  if (!fieldValues) fieldValues = viewModel.fieldValues = {};\n  Object.keys( outFields).forEach( function (fld) {\n    outFields[fld].inputOutputMode = \"O\";\n  });\n  fields = util.mergeObjects( outFields, inFields);\n  uiContainerEl = dom.createElement(\"form\");\n  if (viewModel.formID) uiContainerEl.id = viewModel.formID;\n  if (viewModel.title) {\n    uiContainerEl.appendChild( dom.createElement(\"h1\", {content:viewModel.title}));\n  }\n  // store the view model's DOM element\n  viewModel.domElem = uiContainerEl;\n  /*\n  // reset custom validity\n  for (i=0; i < uiContainerEl.elements.length; i++) {\n    uiContainerEl.elements[i].setCustomValidity(\"\");\n  }\n  uiContainerEl.reset();\n  */\n  // create UI elements for all view fields\n  createUiElemsForVmFields();\n  // create actionable UI elements (like buttons) for all user actions of the view model\n  createUiElemsForUserActions( uiContainerEl);\n  // store the view model's data binding (map field names to corresponding DOM elements)\n  viewModel.dataBinding = dataBinding;\n  return uiContainerEl;\n};\n\n\n'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n\n/**\n * @fileOverview  This file contains the definition of the library class\n * sTORAGEmANAGER.\n * @author Gerd Wagner\n * @copyright Copyright 2015 Gerd Wagner, Chair of Internet Technology,\n *   Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n */\n/**\n * Library class providing storage management methods for a number of predefined\n * storage adapters\n *\n * @constructor\n * @this {sTORAGEmANAGER}\n * @param storageAdapter: object\n */\nfunction sTORAGEmANAGER( storageAdapter) {\n  if (typeof storageAdapter !== 'object' ||\n      typeof storageAdapter.name !== \"string\" ||\n      !([\"LocalStorage\",\"IndexedDB\",\"MariaDB\"].includes( storageAdapter.name))) {\n    throw new ConstraintViolation(\"Invalid storage adapter name!\");\n  } else if (!storageAdapter.dbName) {\n    throw new ConstraintViolation(\"Storage adapter: missing DB name!\");\n  } else {\n    this.adapter = storageAdapter;\n    // if \"LocalStorage\", create a main memory DB\n    if (storageAdapter.name === \"LocalStorage\") {\n      Object.keys( cLASS).forEach( function (key) {\n        // load all cLASSes\n        if (cLASS[key].instances) {\n          sTORAGEmANAGER.adapters[\"LocalStorage\"].retrieveLsTable( cLASS[key]);\n        }\n      });\n    }\n  }\n  // copy storage adapter to the corresponding adapter's storage management method library\n  sTORAGEmANAGER.adapters[this.adapter.name].currentAdapter = storageAdapter;\n}\n/**\n * Generic method for creating an empty DB\n * @method\n */\nsTORAGEmANAGER.prototype.createEmptyDb = function (classes) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName;\n  return new Promise( function (resolve) {\n    var modelClasses=[];\n    if (Array.isArray( classes) && classes.length > 0) {\n      modelClasses = classes;\n    } else {\n      Object.keys( cLASS).forEach( function (key) {\n        // test if cLASS[key] represents a cLASS\n        if (typeof cLASS[key] === \"function\" && cLASS[key].properties) {\n          // collect all non-abstract cLASSes that are not datatype classes\n          if (!cLASS[key].isAbstract && !cLASS[key].isComplexDatatype) {\n            modelClasses.push( cLASS[key]);\n          }\n        }\n      });\n    }\n    sTORAGEmANAGER.adapters[adapterName].createEmptyDb( dbName, modelClasses)\n    .then( resolve);\n  });\n};\n/**\n * Generic method for creating and \"persisting\" new model objects\n * @method\n * @param {object} mClass  The model cLASS concerned\n * @param {object} rec  A record or record list\n */\nsTORAGEmANAGER.prototype.add = function (mClass, rec) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName,\n      createLog = this.createLog,\n      checkConstraints = this.validateBeforeSave,\n      records=[], validRecords=[];\n  if (typeof rec === \"object\" && !Array.isArray(rec)) {\n    records = [rec];\n  } else if (Array.isArray(rec) && rec.every( function (r) {\n             return typeof r === \"object\" && !Array.isArray(r)})) {\n    records = rec;\n  } else throw Error(\"2nd argument of 'add' must be a record or record list!\");\n  // create auto-IDs if required\n  if (mClass.properties.id && mClass.properties.id.range === \"AutoNumber\") {\n    records.forEach( function (r) {\n      if (!r.id) {  // do not overwrite assigned ID values\n        if (typeof mClass.getAutoId === \"function\") r.id = mClass.getAutoId();\n        else if (mClass.idCounter !== undefined) r.id = ++mClass.idCounter;\n      }\n    })\n  }\n  // check constraints before save if required\n  if (checkConstraints) {\n    records.forEach( function (r) {\n      var newObj=null;\n      if (r instanceof mClass) {\n        validRecords.push( r);\n      } else {\n        try {newObj = new mClass( r);}  // check constraints\n        catch (e) {\n          if (e instanceof ConstraintViolation) {\n            console.log( e.constructor.name +\": \"+ e.message);\n          } else console.log( e);\n        }\n        if (newObj) validRecords.push( newObj);\n      }\n    });\n    records = validRecords;\n  }\n  return new Promise( function (resolve) {\n    sTORAGEmANAGER.adapters[adapterName].add( dbName, mClass, records).then( function () {\n      if (createLog) console.log( records.length +\" \"+ mClass.Name +\"(s) added.\");\n      if (typeof resolve === \"function\") resolve();\n    }).catch( function (error) {\n      console.log( error.name +\": \"+ error.message);\n    });\n  });\n};\n/**\n * Generic method for loading/retrieving a model object\n * @method\n * @param {object} mc  The model cLASS concerned\n * @param {string|number} id  The object ID value\n */\nsTORAGEmANAGER.prototype.retrieve = function (mc, id) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName;\n  return new Promise( function (resolve) {\n    sTORAGEmANAGER.adapters[adapterName].retrieve( dbName, mc, id)\n    .then( function (obj) {\n      if (!obj) {\n        obj = null;\n        console.log(\"There is no \" + mc.Name + \" with ID value \" + id + \" in the database!\");\n      }\n      resolve( obj);\n    });\n  });\n};\n/**\n * Generic method for loading all table rows and converting them\n * to model objects\n *\n * @method\n * @param {object} mc  The model cLASS concerned\n */\nsTORAGEmANAGER.prototype.retrieveAll = function (mc) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName,\n      createLog = this.createLog,\n      validateAfterRetrieve = this.validateAfterRetrieve;\n  return new Promise( function (resolve) {\n    sTORAGEmANAGER.adapters[adapterName].retrieveAll( dbName, mc)\n    .then( function (records) {\n      var i=0, newObj=null;\n      if (createLog) {\n        console.log( records.length +\" \"+ mc.Name +\" records retrieved.\")\n      }\n      if (validateAfterRetrieve) {\n        for (i=0; i < records.length; i++) {\n          try {\n            newObj = new mc( records[i]);\n          } catch (e) {\n            if (e instanceof ConstraintViolation) {\n              console.log( e.constructor.name +\": \"+ e.message);\n            } else console.log( e.name +\": \"+ e.message);\n          }\n        }\n      }\n      resolve( records);\n    })\n  });\n};\n/**\n * Generic method for updating model objects\n * @method\n * @param {object} mc  The model cLASS concerned\n * @param {string|number} id  The object ID value\n * @param {object} slots  The object's update slots\n */\nsTORAGEmANAGER.prototype.update = function (mc, id, slots) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName, \n      currentSM = this;\n  return new Promise( function (resolve) {\n    var objectBeforeUpdate = null, properties = mc.properties,\n        updatedProperties=[], noConstraintViolated = true,\n        updSlots = util.cloneObject( slots);\n    // first check if object exists\n    currentSM.retrieve( mc, id).then( function (objToUpdate) {\n      if (objToUpdate) {\n        if (typeof objToUpdate === \"object\" && objToUpdate.constructor !== mc) {\n          // if the retrieved objToUpdate is not of type mc, check integrity constraints\n          objToUpdate = mc.createObjectFromRecord( objToUpdate);\n          if (!objToUpdate) return;  // constraint violation\n        }\n        objectBeforeUpdate = util.cloneObject( objToUpdate);\n        try {\n          Object.keys( slots).forEach( function (prop) {\n            var oldVal = objToUpdate[prop],\n                newVal = slots[prop],\n                propDecl = properties[prop];\n            if (prop !== \"id\") {\n              if (propDecl.maxCard === undefined || propDecl.maxCard === 1) {  // single-valued\n                if (Number.isInteger( oldVal) && newVal !== \"\") {\n                  newVal = parseInt( newVal);\n                } else if (typeof oldVal === \"number\" && newVal !== \"\") {\n                  newVal = parseFloat( newVal);\n                } else if (oldVal===undefined && newVal===\"\") {\n                  newVal = undefined;\n                }\n                if (newVal !== oldVal) {\n                  updatedProperties.push( prop);\n                  objToUpdate.set( prop, newVal);  // also checking constraints\n                } else {\n                  delete updSlots[prop];\n                }\n              } else {   // multi-valued\n                if (oldVal.length !== newVal.length ||\n                    oldVal.some( function (vi,i) { return (vi !== newVal[i]);})) {\n                  objToUpdate.set(prop, newVal);\n                  updatedProperties.push(prop);\n                } else {\n                  delete updSlots[prop];\n                }\n              }\n            }\n          });\n        } catch (e) {\n          console.log( e.constructor.name +\": \"+ e.message);\n          noConstraintViolated = false;\n          // restore object to its state before updating\n          objToUpdate = objectBeforeUpdate;\n        }\n        if (noConstraintViolated) {\n          if (updatedProperties.length > 0) {\n            sTORAGEmANAGER.adapters[adapterName].update( dbName, mc, id, slots, updSlots)\n            .then( function () {\n              console.log(\"Properties \"+ updatedProperties.toString() +\n                  \" of \"+ mc.Name +\" \"+ id +\" updated.\");\n              if (typeof resolve === \"function\") resolve();\n            });\n          } else {\n            console.log(\"No property value changed for \"+ mc.Name +\" \"+ id +\"!\");\n          }\n        }\n      }\n    });\n  });\n};\n/**\n * Generic method for deleting model objects\n * @method\n * @param {object} mc  The model cLASS concerned\n * @param {string|number} id  The object ID value\n */\nsTORAGEmANAGER.prototype.destroy = function (mc, id) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName,\n      currentSM = this;\n  return new Promise( function (resolve) {\n    currentSM.retrieve( mc, id).then( function (record) {\n      if (record) {\n        sTORAGEmANAGER.adapters[adapterName].destroy( dbName, mc, id)\n        .then( function () {\n          console.log( mc.Name +\" \"+ id +\" deleted.\");\n          if (typeof resolve === \"function\") resolve();\n        });\n      } else {\n        console.log(\"There is no \"+ mc.Name +\" with ID value \"+ id +\" in the database!\");\n      }\n    });\n  });\n};\n/**\n * Generic method for clearing the DB table, or object store, of a cLASS\n * @method\n */\nsTORAGEmANAGER.prototype.clearTable = function (mc) {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName;\n  return new Promise( function (resolve) {\n    sTORAGEmANAGER.adapters[adapterName].clearTable( dbName, mc)\n    .then( resolve);\n  });\n};\n/**\n * Generic method for clearing the DB of an app\n * @method\n */\nsTORAGEmANAGER.prototype.clearDB = function () {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName;\n  return new Promise( function (resolve) {\n    if ((typeof confirm === \"function\" &&\n        confirm(\"Do you really want to delete all data?\")) ||\n        typeof confirm !== \"function\") {\n      sTORAGEmANAGER.adapters[adapterName].clearDB( dbName)\n      .then( resolve);\n    }\n  });\n};\n/**\n * Generic method for storing unsaved data on page unload\n * @method\n */\nsTORAGEmANAGER.prototype.saveOnUnload = function () {\n  var adapterName = this.adapter.name,\n      dbName = this.adapter.dbName;\n  sTORAGEmANAGER.adapters[adapterName].saveOnUnload( dbName);\n};\n\nsTORAGEmANAGER.adapters = {};\n\n\n/*****************************************************************************\n * Storage management methods for the \"LocalStorage\" adapter\n * Only in the case of \"LocalStorage\", due to its non-concurrent architecture,\n * the entire data is loaded into a kind of main memory DB, which is saved\n * back to LocalStorage on page unload.\n ****************************************************************************/\nsTORAGEmANAGER.adapters[\"LocalStorage\"] = {\n  //-----------------------------------------------------------------\n  createEmptyDb: function (dbName, modelClasses) {\n  //-----------------------------------------------------------------\n    // nothing to do\n    return new Promise( function (resolve) {\n      resolve();\n    });\n  },\n  //------------------------------------------------\n  add: function (dbName, mc, records) {  // does not access localStorage\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var newObj=null;\n      if (!Array.isArray( records)) {  // single record insertion\n        records = [records];\n      }\n      records.forEach( function (rec) {\n        newObj = new mc( rec);\n        mc.instances[newObj.id] = newObj;\n      })\n      resolve( newObj);\n    });\n  },\n  //------------------------------------------------\n  retrieve: function (dbName, mc, id) {  // does not access localStorage\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      resolve( mc.instances[id]);\n    });\n  },\n  //-------------------------------------------------------------\n  // *** A LocalStorage-specific, and not an interface method ***\n  //-------------------------------------------------------------\n  retrieveLsTable: function (mc) {\n  //-------------------------------------------------------------\n    var key=\"\", keys=[], i=0,\n        tableString=\"\", table={},\n        tableName = util.class2TableName( mc.Name);\n    try {\n      if (localStorage[tableName]) {\n        tableString = localStorage[tableName];\n      }\n    } catch (e) {\n      console.log( \"Error when reading from Local Storage\\n\" + e);\n    }\n    if (tableString) {\n      table = JSON.parse( tableString);\n      keys = Object.keys( table);\n      console.log( keys.length + \" \" + mc.Name + \" records loaded.\");\n      for (i=0; i < keys.length; i++) {\n        key = keys[i];\n        mc.instances[key] = mc.createObjectFromRecord( table[key]);\n      }\n    }\n  },\n  //------------------------------------------------\n  retrieveAll: function (dbName, mc) {\n    //------------------------------------------------\n    var  currentSM = this;\n    return new Promise( function (resolve) {\n      var records=[];\n      /* OLD\n      function retrieveAll (mc) {\n        var key = \"\", keys = [], i = 0,\n            tableString = \"\", table={},\n            tableName = util.class2TableName( mc.Name);\n        // do no retrieve the same class population twice\n        if (Object.keys( mc.instances).length > 0) return;\n        // first retrieve the population of the classes that are ranges of reference properties\n        Object.keys( mc.properties).forEach( function (p) {\n          var range = mc.properties[p].range;\n          if (range instanceof cLASS) retrieveAll( range);\n        });\n        currentSM.retrieveTable( mc);      }\n      retrieveAll( mc);\n      */\n      // convert entity map mc.instances to an array list\n      records = Object.keys( mc.instances).map( function (key) {return mc.instances[key];});\n      resolve( records);\n    });\n  },\n  //------------------------------------------------\n  update: function (dbName, mc, id, slots) {  // does not access localStorage\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      // in-memory object has already been updated in the generic update\n      /*\n      Object.keys( slots).forEach( function (prop) {\n        obj = mc.instances[id];\n        obj[prop] = slots[prop];\n      });\n      */\n      resolve();\n    });\n  },\n  //------------------------------------------------\n  destroy: function (dbName, mc, id) {  // does not access localStorage\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      delete mc.instances[id];\n      resolve();\n    });\n  },\n  //------------------------------------------------\n  clearTable: function (dbName, mc) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      mc.instances = {};\n      try {\n        localStorage[tableName] = JSON.stringify({});\n        console.log(\"Table \"+ tableName +\" cleared.\");\n      } catch (e) {\n        console.log(\"Error when writing to Local Storage\\n\" + e);\n      }\n      resolve();\n    });\n  },\n  //------------------------------------------------\n  clearDB: function () {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      Object.keys( cLASS).forEach( function (key) {\n        var tableName=\"\";\n        if (!cLASS[key].isComplexDatatype && Object.keys( cLASS[key].instances).length > 0) {\n          cLASS[key].instances = {};\n          tableName = mc.tableName || util.class2TableName( cLASS[key].Name);\n          try {\n            localStorage[tableName] = JSON.stringify({});\n          } catch (e) {\n            console.log(\"Error when writing to Local Storage\\n\" + e);\n          }\n        }\n      });\n      resolve();\n    });\n  },\n  //------------------------------------------------\n  saveOnUnload: function () {\n  //------------------------------------------------\n    Object.keys( cLASS).forEach( function (key) {\n      var id=\"\", table={}, obj=null, i=0, mc=null,\n          keys=[], tableName=\"\";\n      if (cLASS[key].instances) {\n        mc = cLASS[key];\n        keys = Object.keys( mc.instances)\n        tableName = util.class2TableName( mc.Name);\n        for (i=0; i < keys.length; i++) {\n          id = keys[i];\n          obj = mc.instances[id];\n          table[id] = obj.toRecord();\n        }\n        try {\n          localStorage[tableName] = JSON.stringify( table);\n          console.log( keys.length +\" \"+ mc.Name +\" records saved.\");\n        } catch (e) {\n          console.log(\"Error when writing to Local Storage\\n\" + e);\n        }\n      }\n    });\n  }\n};\n/**\n * @fileOverview  Storage management methods for the \"IndexedDB\" adapter\n * @author Gerd Wagner\n * @copyright Copyright 2017 Gerd Wagner, Chair of Internet Technology,\n *   Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n */\nsTORAGEmANAGER.adapters[\"IndexedDB\"] = {\n  //------------------------------------------------\n  createEmptyDb: function (dbName, modelClasses) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      idb.open( dbName, 1, function (upgradeDb) {\n        modelClasses.forEach( function (mc) {\n          var tableName = mc.tableName || util.class2TableName( mc.Name),\n              keyPath = mc.primaryKey || \"id\";\n          if (!upgradeDb.objectStoreNames.contains( tableName)) {\n            upgradeDb.createObjectStore( tableName, {keyPath: keyPath});\n          }\n        })\n      }).then( resolve);\n    });\n  },\n  //------------------------------------------------\n  add: function (dbName, mc, records) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readwrite\");\n        var os = tx.objectStore( tableName);\n        // Promise.all takes a list of promises and resolves if all of them do\n        return Promise.all( records.map( function (rec) {return os.add( rec);}))\n            .then( function () {return tx.complete;});\n      }).then( resolve)\n      .catch( function (err) {\n        console.log( err.name +\": \"+ err.message +\"Table: \"+ tableName);}\n      );\n    });\n  },\n  //------------------------------------------------\n  retrieve: function (dbName, mc, id) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readonly\");\n        var os = tx.objectStore( tableName);\n        return os.get( id);\n      }).then( function( result) {\n        if (result === undefined) result = null;\n        resolve( result);\n      }).catch( function (err) {console.log( err.name +\": \"+ err.message);});\n    });\n  },\n  //------------------------------------------------\n  retrieveAll: function (dbName, mc) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readonly\");\n        var os = tx.objectStore( tableName);\n        return os.getAll();\n      }).then( function (results) {\n        if (results === undefined) results = [];\n        resolve( results);\n      }).catch( function (err) {console.log( err.name +\": \"+ err.message);});\n    });\n  },\n  //------------------------------------------------\n  update: function (dbName, mc, id, slots) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readwrite\");\n        var os = tx.objectStore( tableName);\n        slots[\"id\"] = id;\n        os.put( slots);\n        return tx.complete;\n      }).then( resolve)\n      .catch( function (err) {\n        console.log( err.name +\": \"+ err.message +\"Table: \"+ tableName);}\n      );\n    });\n  },\n  //------------------------------------------------\n  destroy: function (dbName, mc, id) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readwrite\");\n        var os = tx.objectStore( tableName);\n        os.delete( id);\n        return tx.complete;\n      }).then( resolve)\n      .catch( function (err) {console.log( err.name +\": \"+ err.message);});\n    });\n  },\n  //------------------------------------------------\n  clearTable: function (dbName, mc) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      var tableName = mc.tableName || util.class2TableName( mc.Name);\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( tableName, \"readwrite\");\n        var os = tx.objectStore( tableName);\n        os.clear();\n        return tx.complete;\n      }).then( resolve)\n      .catch( function (err) {console.log( err.name +\": \"+ err.message);});\n    });\n  },\n  //------------------------------------------------\n  clearDB: function (dbName) {\n  //------------------------------------------------\n    return new Promise( function (resolve) {\n      idb.open( dbName).then( function (idbCx) {  // idbCx is a DB connection\n        var tx = idbCx.transaction( idbCx.objectStoreNames, \"readwrite\");\n        // Promise.all takes a list of promises and resolves if all of them do\n        return Promise.all( Array.from( idbCx.objectStoreNames,\n            function (osName) {return tx.objectStore( osName).clear();}))\n            .then( function () {return tx.complete;});\n      }).then( resolve)\n      .catch( function (err) {console.log( err.name +\": \"+ err.message);});\n    });\n  },\n  //------------------------------------------------\n  saveOnUnload: function (dbName) {  // not yet implemented\n  //------------------------------------------------\n  }\n};\n /**\n * @fileOverview  A library of DOM element creation methods and \n * other DOM manipulation methods.\n * \n * @author Gerd Wagner\n */\n /**\n  * Create a progress bar\n  * @param {string} title\n  * @return {object}  an element object\n  */\n dom.createProgressBar = function (title, initialProgress) {\n   var progressContainer = document.createElement(\"div\"),\n       progress = document.createElement(\"progress\"),\n       progressTitle = document.createElement(\"h1\"),\n       progressInfo = document.createElement(\"p\");\n   progress.max = 100;  // for 100%\n   progress.value = initialProgress || 10;  // initial value, 10% by default\n   progressTitle.textContent = title;\n   progressContainer.id = \"progress-container\";\n   progressContainer.appendChild( progressTitle);\n   progressContainer.appendChild( progress);\n   progressContainer.appendChild( progressInfo);\n   return progressContainer\n };\n /**\n  * Create an expandable UI panel\n  * @param {object} slots\n  * @return {object} uiPanelEl  element object\n  */\n dom.createExpandablePanel = function (slots) {\n   var uiPanelEl = dom.createElement(\"div\", slots),\n       contentEl = dom.createElement(\"div\", {classValues:\"xpanel-content\"}),\n       expandButtonEl = dom.createElement(\"button\", {content:\"+\"});\n   uiPanelEl.classList.add(\"expandablePanel\");\n   uiPanelEl.appendChild( dom.createElement(\"h2\", {\n     content:\"<span>\"+ slots.heading +\"</span>\",\n     title: slots.hint\n   }));\n   uiPanelEl.appendChild( contentEl);\n   uiPanelEl.firstElementChild.insertBefore(\n       expandButtonEl, uiPanelEl.firstElementChild.firstElementChild);\n   expandButtonEl.addEventListener(\"click\", function (e) {\n     // toggle display of main content\n     if (contentEl.style.display !== \"none\") {\n       contentEl.style.display = \"none\";\n       e.target.textContent = \"+\";  // or \"►\" = \"&#9654;\"\n     }\n     else {\n       contentEl.style.display = \"block\";\n       e.target.textContent = \"−\";  // = \"&minus;\" or \"▼\"\n     }\n     e.preventDefault();\n   });\n   uiPanelEl.style.overflowX = \"auto\";  // horizontal scrolling\n   contentEl.style.display = \"none\";\n   return uiPanelEl;\n };\n /**\n  * Create a Modal Window/Panel\n  *\n  * @param {object} slots\n  * @return {object} uiPanelEl  element object\n  */\n dom.createModal = function (slots) {\n   var modalEl = dom.createElement(\"div\", {classValues:\"modal\"}),\n       el = document.getElementById(\"overlay\"),\n       overlayEl = el ? el : dom.createElement(\"div\", {id:\"overlay\"}),\n       h1El=null;\n   if (slots.id) modalEl.id = slots.id;\n   if (slots.classValues) modalEl.className += \" \"+ slots.classValues;\n   if (slots.width) modalEl.style.width = slots.width;\n   if (!slots.title) slots.title = \"No Title?\";\n   h1El = dom.createElement(\"h1\", {content: \"<span class='title'>\"+ slots.title +\"</span>\"});\n     //  \"</span><span class='closeButton'>&times;</span>\"});\n   if (!slots.classValues || !slots.classValues.includes(\"action-required\")) {\n     el = dom.createElement(\"span\", {classValues:\"closeButton\", content:\"&times;\"});\n     el.addEventListener(\"click\", function () {\n       overlayEl.style.display = \"none\";\n       modalEl.style.display = \"none\";\n     });\n     h1El.appendChild( el);\n   }\n   modalEl.appendChild( h1El);\n   if (slots.fromElem) {\n     modalEl.appendChild( slots.fromElem);\n     slots.fromElem.classList.add(\"modal-body\");\n   } else {\n     el = dom.createElement(\"div\", {classValues:\"modal-body\"});\n     if (slots.textContent) el.textContent = slots.textContent;\n     modalEl.appendChild( el);\n   }\n   overlayEl.appendChild( modalEl);\n   document.body.appendChild( overlayEl);\n   return modalEl;\n };\n /**\n  * Create a Draggable Modal Window/Panel\n  *\n  * @param {object} slots\n  * @return {object} uiPanelEl  element object\n  */\n dom.createDraggableModal = function (slots) {\n   var modalEl = dom.createModal( slots),\n       overlayEl = document.getElementById(\"overlay\");\n   // make the element draggable\n   modalEl.draggable = true;\n   if (!modalEl.id) modalEl.id = \"dragMod\";\n   modalEl.addEventListener(\"dragstart\", dom.handleDragStart);\n   overlayEl.addEventListener(\"dragover\", dom.handleDragOver);\n   overlayEl.addEventListener(\"drop\", dom.handleDrop);\n   return modalEl;\n };\n dom.handleDragStart = function (evt) {\n   evt.dataTransfer.dropEffect = 'move';\n   evt.dataTransfer.setData(\"text/plain\", evt.target.id);\n };\n dom.handleDragOver = function (evt) {\n   // allow dropping by preventing the default behavior\n   evt.preventDefault();\n };\n dom.handleDrop = function (evt) {\n   var elId = evt.dataTransfer.getData(\"text/plain\"),\n       el = document.getElementById( elId),\n       x = evt.clientX, y = evt.clientY;\n   evt.preventDefault();\n   el.style.position = \"absolute\";\n   el.style.left = x +\"px\";\n   el.style.top = y +\"px\";\n };\n /**\n  * Convert HTML to Text\n  * @param {string} htmlElemContent\n  * @return {string}\n  */\n dom.convertHtml2Text = function (htmlElemContent) {\n   var blockElem = document.createElement(\"div\");\n   blockElem.innerHTML = htmlElemContent;\n   return blockElem.textContent;\n };\n\n/**\n* SVG library\n* @author Gerd Wagner\n*/\nvar svg = {\n  NS: \"http://www.w3.org/2000/svg\",  // namespace\n  XLINK_NS: \"http://www.w3.org/1999/xlink\",\n  /**\n  * Create an SVG element\n  * \n  * @param {object} params  a lsit of optional parameters\n  * @return {node} svgElement\n  */\n  createSVG: function (params) {\n    var el = document.createElementNS( svg.NS,\"svg\");\n    el.setAttribute(\"version\", \"1.1\");\n    if (params.id) el.id = params.id;\n    if (params.class) el.class = params.class;\n    if (params.width) el.setAttribute(\"width\", params.width);\n    if (params.height) el.setAttribute(\"height\", params.height);\n    if (params.viewBox) el.setAttribute(\"viewBox\", params.viewBox);\n    return el;\n  },\n  createDefs: function () {\n    return document.createElementNS( svg.NS,\"defs\");\n  },\n  setOptionalAttr: function (el, optParams) {\n    if (optParams === undefined) optParams = {};\n    if (optParams.id) el.id = optParams.id;\n    if (optParams.class) el.class = optParams.class;\n    el.setAttribute(\"stroke\", optParams.stroke || \"black\");\n    el.setAttribute(\"stroke-width\", optParams.strokeWidth || \"1\");\n    el.setAttribute(\"fill\", optParams.fill || \"white\");\n  },\n  /**\n  * Create a rect element\n  * \n  * @param {number} x \n  * @param {number} y \n  * @param {number} width \n  * @param {number} height \n  * @param {object} optParams \n  *\n  * @return (object)\n  */\n  createRect: function (x, y, width, height, optParams) {\n    var el = document.createElementNS( svg.NS,\"rect\");\n    el.setAttribute(\"x\", x);\n    el.setAttribute(\"y\", y);\n    el.setAttribute(\"width\", width);\n    el.setAttribute(\"height\", height);\n    svg.setOptionalAttr( el, optParams);\n    return el;\n  },\n  /**\n  * Create a circle element\n  * \n  * @param {number} x \n  * @param {number} y \n  * @param {number} width \n  * @param {number} height \n  * @param {string} color \n  *\n  * @return (object)\n  */\n  createCircle: function ( cx, cy, r, optParams) {\n    var el = document.createElementNS( svg.NS,\"circle\");\n    el.setAttribute(\"cx\", cx);\n    el.setAttribute(\"cy\", cy);\n    el.setAttribute(\"r\", r);\n    svg.setOptionalAttr( el, optParams);\n    return el;\n  },\n  /**\n   * Create a line element \n   * \n   * @param {number} x1 \n   * @param {number} y1 \n   * @param {number} x2 \n   * @param {number} y2 \n   * @param {string} color  the stroke color\n   * @param {number} width \n   * @return {object}\n   */\n  createLine: function (x1, y1, x2, y2, optParams) {\n    var el = document.createElementNS( svg.NS,\"line\");\n    el.setAttribute(\"x1\", x1);\n    el.setAttribute(\"y1\", y1);\n    el.setAttribute(\"x2\", x2);\n    el.setAttribute(\"y2\", y2);\n    svg.setOptionalAttr( el, optParams);\n    return el;\n  },\n  /**\n   * Create a path element\n   * \n   * @param {number} d  the path description\n   * @param {string} color  the stroke color\n   * @param {number} width  the stroke width\n   * @return {object}\n   */\n  createPath: function (d, optParams) {\n    var el = document.createElementNS( svg.NS,\"path\");\n    el.setAttribute(\"d\", d);\n    svg.setOptionalAttr( el, optParams);\n    return el;\n  },\n  /**\n  * Create a group element\n  * \n  * @return gNode\n  */\n  createGroup: function (optParams) {\n    var el = document.createElementNS( svg.NS,\"g\");\n    svg.setOptionalAttr( el, optParams);\n    return el;\n  },\n  /**\n  * Function created for the node Text\n  * @param {number} x start position\n  * @param {number} y start position\n  * @param {string} name the content of the node\n  * @param {number} fontSize of the content\n  * @param {string} color of the content\n  * \n  * @return text object\n  */\n  createText: function ( x, y, txt, style) {\n    var el = document.createElementNS( svg.NS,\"text\");\n    el.textContent = txt;\n    el.setAttribute(\"x\", x);\n    el.setAttribute(\"y\", y);\n    if (style) el.style = style;  // el.setAttribute(\"style\", style);\n    return el;\n  },\n  createShape: function (shape, shapeAttributes, style, obj) {\n    var el = document.createElementNS( svg.NS, shape);\n    Object.keys( shapeAttributes).forEach( function (attrName) {\n      var val;\n      if (typeof shapeAttributes[attrName] === \"function\") {\n        val = shapeAttributes[attrName](obj);\n      } else val = shapeAttributes[attrName];\n      el.setAttribute( attrName, val);\n    })\n    if (style) el.setAttribute(\"style\", style);\n    return el;\n  },\n  createShapeFromDefRec: function (shDefRec, obj) {\n    var el = document.createElementNS( svg.NS, shDefRec.shapeName),\n        shAttribs = shDefRec.shapeAttributes;\n    Object.keys( shAttribs).forEach( function (attrName) {\n      var val;\n      if (typeof shAttribs[attrName] === \"function\") {\n        val = shAttribs[attrName](obj);\n      } else val = shAttribs[attrName];\n      switch (attrName) {\n      case \"textContent\":\n        el.textContent = val;\n        break;\n      case \"file\":\n        el.setAttributeNS( svg.XLINK_NS, \"href\", val);\n        break;\n      default:\n        el.setAttribute( attrName, val);\n        break;\n      }\n    })\n    if (shDefRec.style) el.setAttribute(\"style\", shDefRec.style);\n    return el;\n  },\n  createImageFillPattern: function (id, file, optParams) {\n    var patEl = document.createElementNS( svg.NS,\"pattern\"),\n        imgEl = document.createElementNS( svg.NS,\"image\");\n    if (!optParams) optParams = {};\n    imgEl.setAttributeNS( svg.XLINK_NS, \"href\", file);\n    imgEl.setAttribute(\"width\", optParams.width || 20);\n    imgEl.setAttribute(\"height\", optParams.height || 20);\n    patEl.appendChild( imgEl);\n    patEl.id = id;\n    patEl.setAttribute(\"patternUnits\", \"userSpaceOnUse\");\n    patEl.setAttribute(\"width\", optParams.width || 20);\n    patEl.setAttribute(\"height\", optParams.height || 20);\n    if (optParams.x) patEl.setAttribute(\"x\", optParams.x);\n    if (optParams.y) patEl.setAttribute(\"y\", optParams.y);\n    return patEl;\n  }\n};\n\n\n/**\n * @fileOverview  A port of a C implementation of MT19937, providing a collection of classes\n * and methods used to generate random numbers and random variates. From the Random.js library\n * of SimJS.\n *\n * @copyright Copyright © 1997-2002, Makoto Matsumoto and Takuji Nishimura.\n * @license LGPL\n */\n\n\n/*\n A C-program for MT19937, with initialization improved 2002/1/26.\n Coded by Takuji Nishimura and Makoto Matsumoto.\n\n Before using, initialize the state by using init_genrand(seed)\n or init_by_array(init_key, key_length).\n\n Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\n All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions\n are met:\n\n 1. Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in the\n documentation and/or other materials provided with the distribution.\n\n 3. The names of its contributors may not be used to endorse or promote\n products derived from this software without specific prior written\n permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// default non-seeded random stream based on Math.random\nvar rand = null;\n\n/***\n * The following constructor function definition has been modified\n * Use new Date()).getTime() as seed for getting MT with a randomized seed\n */\nvar Random = function( seed) {\n  if (seed === undefined) {\n    this.random = Math.random;  // use the JS built-in RNG\n  } else {  // use the Mersenne Twister\n    if (!Number.isInteger( seed)) {\n      throw new TypeError(\"Seed value must be an integer\");\n    }\n    /* Period parameters */\n    this.N = 624;\n    this.M = 397;\n    this.MATRIX_A = 0x9908b0df;   /* constant vector a */\n    this.UPPER_MASK = 0x80000000; /* most significant w-r bits */\n    this.LOWER_MASK = 0x7fffffff; /* least significant r bits */\n\n    this.mt = new Array(this.N); /* the array for the state vector */\n    this.mti=this.N+1; /* mti==N+1 means mt[N] is not initialized */\n\n    //this.init_genrand(seed);\n    this.init_by_array([seed], 1);\n  }\n};\n\n/* initializes mt[N] with a seed */\nRandom.prototype.init_genrand = function(s) {\n  this.mt[0] = s >>> 0;\n  for (this.mti=1; this.mti<this.N; this.mti++) {\n    var s = this.mt[this.mti-1] ^ (this.mt[this.mti-1] >>> 30);\n    this.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253)\n        + this.mti;\n    /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\n    /* In the previous versions, MSBs of the seed affect   */\n    /* only MSBs of the array mt[].                        */\n    /* 2002/01/09 modified by Makoto Matsumoto             */\n    this.mt[this.mti] >>>= 0;\n    /* for >32 bit machines */\n  }\n};\n\n/* initialize by an array with array-length */\n/* init_key is the array for initializing keys */\n/* key_length is its length */\n/* slight change for C++, 2004/2/26 */\nRandom.prototype.init_by_array = function(init_key, key_length) {\n  var i, j, k;\n  this.init_genrand(19650218);\n  i=1; j=0;\n  k = (this.N>key_length ? this.N : key_length);\n  for (; k; k--) {\n    var s = this.mt[i-1] ^ (this.mt[i-1] >>> 30);\n    this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525)))\n        + init_key[j] + j; /* non linear */\n    this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\n    i++; j++;\n    if (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }\n    if (j>=key_length) j=0;\n  }\n  for (k=this.N-1; k; k--) {\n    var s = this.mt[i-1] ^ (this.mt[i-1] >>> 30);\n    this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941))\n        - i; /* non linear */\n    this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\n    i++;\n    if (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }\n  }\n\n  this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */\n};\n\n/* generates a random number on [0,0xffffffff]-interval */\nRandom.prototype.genrand_int32 = function() {\n  var y;\n  var mag01 = new Array(0x0, this.MATRIX_A);\n  /* mag01[x] = x * MATRIX_A  for x=0,1 */\n\n  if (this.mti >= this.N) { /* generate N words at one time */\n    var kk;\n\n    if (this.mti == this.N+1)   /* if init_genrand() has not been called, */\n      this.init_genrand(5489); /* a default initial seed is used */\n\n    for (kk=0;kk<this.N-this.M;kk++) {\n      y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);\n      this.mt[kk] = this.mt[kk+this.M] ^ (y >>> 1) ^ mag01[y & 0x1];\n    }\n    for (;kk<this.N-1;kk++) {\n      y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);\n      this.mt[kk] = this.mt[kk+(this.M-this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];\n    }\n    y = (this.mt[this.N-1]&this.UPPER_MASK)|(this.mt[0]&this.LOWER_MASK);\n    this.mt[this.N-1] = this.mt[this.M-1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n    this.mti = 0;\n  }\n\n  y = this.mt[this.mti++];\n\n  /* Tempering */\n  y ^= (y >>> 11);\n  y ^= (y << 7) & 0x9d2c5680;\n  y ^= (y << 15) & 0xefc60000;\n  y ^= (y >>> 18);\n\n  return y >>> 0;\n};\n\n/* generates a random number on [0,0x7fffffff]-interval */\nRandom.prototype.genrand_int31 = function() {\n  return (this.genrand_int32()>>>1);\n};\n\n/* generates a random number on [0,1]-real-interval */\nRandom.prototype.genrand_real1 = function() {\n  return this.genrand_int32()*(1.0/4294967295.0);\n  /* divided by 2^32-1 */\n};\n\n/* generates a random number on [0,1)-real-interval */\nRandom.prototype.random = function() {\n  if (this.pythonCompatibility) {\n    if (this.skip) {\n      this.genrand_int32();\n    }\n    this.skip = true;\n  }\n  return this.genrand_int32()*(1.0/4294967296.0);\n  /* divided by 2^32 */\n};\n\n/* generates a random number on (0,1)-real-interval */\nRandom.prototype.genrand_real3 = function() {\n  return (this.genrand_int32() + 0.5)*(1.0/4294967296.0);\n  /* divided by 2^32 */\n};\n\n/* generates a random number on [0,1) with 53-bit resolution*/\nRandom.prototype.genrand_res53 = function() {\n  var a=this.genrand_int32()>>>5, b=this.genrand_int32()>>>6;\n  return(a*67108864.0+b)*(1.0/9007199254740992.0);\n};\n\n/* These real versions are due to Isaku Wada, 2002/01/09 added */\n\n\n/**************************************************************************/\nRandom.prototype.LOG4 = Math.log(4.0);\nRandom.prototype.SG_MAGICCONST = 1.0 + Math.log(4.5);\n\nRandom.prototype.exponential = function (lambda) {\n  if (arguments.length != 1) {                         // ARG_CHECK\n    throw new SyntaxError(\"exponential() must \"     // ARG_CHECK\n        + \" be called with 'lambda' parameter\"); // ARG_CHECK\n  }                                                   // ARG_CHECK\n  var r = this.random();\n  return -Math.log(r) / lambda;\n};\n\nRandom.prototype.gamma = function (alpha, beta) {\n  if (arguments.length != 2) {                         // ARG_CHECK\n    throw new SyntaxError(\"gamma() must be called\"  // ARG_CHECK\n        + \" with alpha and beta parameters\"); // ARG_CHECK\n  }                                                   // ARG_CHECK\n  /* Based on Python 2.6 source code of random.py.\n   */\n  if (alpha > 1.0) {\n    var ainv = Math.sqrt(2.0 * alpha - 1.0);\n    var bbb = alpha - this.LOG4;\n    var ccc = alpha + ainv;\n    while (true) {\n      var u1 = this.random();\n      if ((u1 < 1e-7) || (u > 0.9999999)) {\n        continue;\n      }\n      var u2 = 1.0 - this.random();\n      var v = Math.log(u1 / (1.0 - u1)) / ainv;\n      var x = alpha * Math.exp(v);\n      var z = u1 * u1 * u2;\n      var r = bbb + ccc * v - x;\n      if ((r + this.SG_MAGICCONST - 4.5 * z >= 0.0) || (r >= Math.log(z))) {\n        return x * beta;\n      }\n    }\n  } else if (alpha == 1.0) {\n    var u = this.random();\n    while (u <= 1e-7) {\n      u = this.random();\n    }\n    return - Math.log(u) * beta;\n  } else {\n    while (true) {\n      var u = this.random();\n      var b = (Math.E + alpha) / Math.E;\n      var p = b * u;\n      if (p <= 1.0) {\n        var x = Math.pow(p, 1.0 / alpha);\n      } else {\n        var x = - Math.log((b - p) / alpha);\n      }\n      var u1 = this.random();\n      if (p > 1.0) {\n        if (u1 <= Math.pow(x, (alpha - 1.0))) {\n          break;\n        }\n      } else if (u1 <= Math.exp(-x)) {\n        break;\n      }\n    }\n    return x * beta;\n  }\n\n};\n\nRandom.prototype.normal = function (mu, sigma) {\n  if (arguments.length != 2) {                          // ARG_CHECK\n    throw new SyntaxError(\"normal() must be called\"  // ARG_CHECK\n        + \" with mu and sigma parameters\");      // ARG_CHECK\n  }                                                    // ARG_CHECK\n  var z = this.lastNormal;\n  this.lastNormal = NaN;\n  if (!z) {\n    var a = this.random() * 2 * Math.PI;\n    var b = Math.sqrt(-2.0 * Math.log(1.0 - this.random()));\n    z = Math.cos(a) * b;\n    this.lastNormal = Math.sin(a) * b;\n  }\n  return mu + z * sigma;\n};\n\nRandom.prototype.pareto = function (alpha) {\n  if (arguments.length != 1) {                         // ARG_CHECK\n    throw new SyntaxError(\"pareto() must be called\" // ARG_CHECK\n        + \" with alpha parameter\");             // ARG_CHECK\n  }                                                   // ARG_CHECK\n  var u = this.random();\n  return 1.0 / Math.pow((1 - u), 1.0 / alpha);\n};\n\nRandom.prototype.weibull = function (alpha, beta) {\n  if (arguments.length != 2) {                         // ARG_CHECK\n    throw new SyntaxError(\"weibull() must be called\" // ARG_CHECK\n        + \" with alpha and beta parameters\");    // ARG_CHECK\n  }                                                   // ARG_CHECK\n  var u = 1.0 - this.random();\n  return alpha * Math.pow(-Math.log(u), 1.0 / beta);\n};\n\nRandom.prototype.triangular = function (lower, upper, mode) {\n  // http://en.wikipedia.org/wiki/Triangular_distribution\n  if (arguments.length != 3) {\n    throw new SyntaxError(\"triangular() must be called\"\n        + \" with 3 parameters (lower, upper and mode)\");\n  }\n  if (!(lower < upper && lower <= mode && mode <= upper)) {\n    throw new SyntaxError(\"The lower, upper and mode parameters \" +\n        \"must satisfy the conditions l < U and l <= m <= u!\");\n  }\n  var c = (mode - lower) / (upper - lower);\n  var u = this.random();\n  if (u <= c) {\n    return lower + Math.sqrt(u * (upper - lower) * (mode - lower));\n  } else {\n    return upper - Math.sqrt((1 - u) * (upper - lower) * (upper - mode));\n  }\n};\n\nRandom.prototype.uniform = function (lower, upper) {\n  if (arguments.length === 1) {\n    throw new SyntaxError(\"uniform(lower, upper) must be called\"\n        + \" 1. with lower and upper parameters [e.g., uniform(lower, upper)] or \"\n        + \" 2. without any parameter [e.g., uniform()]\");\n  } else if (arguments.length >= 2) {\n    return lower + this.random() * (upper - lower);\n  } else {\n    return this.random();\n  }\n};\n/***\n Added by Gerd Wagner (20160921)\n */\nRandom.prototype.uniformInt = function (lower, upper) {\n  if (arguments.length != 2 ||\n      !(Number.isInteger(lower) && Number.isInteger(upper))) {\n    throw new SyntaxError(\"uniformInt() must be called\"\n        + \" with lower and upper integer values!\");\n  }\n  return lower + Math.floor( this.random() * (upper - lower + 1));\n};\n\nRandom.prototype.frequency = function (freqMap) {\n  if (typeof freqMap !== \"object\") {\n    throw new SyntaxError(\"rand.frequency() must be called\"\n        + \" with a frequency map argument!\");\n  }\n  var probabilities = Object.values( freqMap);\n  if (math.sum( probabilities) !== 1 ) {\n    throw new SyntaxError(\"rand.frequency(): rel. frequency values \" +\n        \"do not add up to 1!\");\n  }\n  var cumProb=0;\n  var cumProbs = probabilities.map( function (p) {\n    cumProb += p;\n    return cumProb;\n  });\n  var valueStrings = Object.keys( freqMap);\n  var valuesAreNumeric = !isNaN( parseInt( valueStrings[0]));\n  var randX = this.random(), i=0;\n  for (i=0; i <= cumProbs.length; i++) {\n    if (randX < cumProbs[i]) return valuesAreNumeric ?\n        parseInt( valueStrings[i]) : valueStrings[i];\n  }\n};\n\n/**\n * Shuffles array in place using the Fisher-Yates shuffle algorithm\n * @param {Array} a - An array of items to be shuffled\n */\nRandom.prototype.shuffleArray = function (a) {\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i -= 1) {\n    j = Math.floor( this.random() * (i + 1) );\n    x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n};\n/* PrismJS 1.15.0\nhttps://prismjs.com/download.html#themes=prism&languages=clike+javascript */\nvar _self=\"undefined\"!=typeof window?window:\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},Prism=function(){var e=/\\blang(?:uage)?-([\\w-]+)\\b/i,t=0,n=_self.Prism={manual:_self.Prism&&_self.Prism.manual,disableWorkerMessageHandler:_self.Prism&&_self.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof r?new r(e.type,n.util.encode(e.content),e.alias):\"Array\"===n.util.type(e)?e.map(n.util.encode):e.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/\\u00a0/g,\" \")},type:function(e){return Object.prototype.toString.call(e).match(/\\[object (\\w+)\\]/)[1]},objId:function(e){return e.__id||Object.defineProperty(e,\"__id\",{value:++t}),e.__id},clone:function(e,t){var r=n.util.type(e);switch(t=t||{},r){case\"Object\":if(t[n.util.objId(e)])return t[n.util.objId(e)];var a={};t[n.util.objId(e)]=a;for(var l in e)e.hasOwnProperty(l)&&(a[l]=n.util.clone(e[l],t));return a;case\"Array\":if(t[n.util.objId(e)])return t[n.util.objId(e)];var a=[];return t[n.util.objId(e)]=a,e.forEach(function(e,r){a[r]=n.util.clone(e,t)}),a}return e}},languages:{extend:function(e,t){var r=n.util.clone(n.languages[e]);for(var a in t)r[a]=t[a];return r},insertBefore:function(e,t,r,a){a=a||n.languages;var l=a[e];if(2==arguments.length){r=arguments[1];for(var i in r)r.hasOwnProperty(i)&&(l[i]=r[i]);return l}var o={};for(var s in l)if(l.hasOwnProperty(s)){if(s==t)for(var i in r)r.hasOwnProperty(i)&&(o[i]=r[i]);o[s]=l[s]}var u=a[e];return a[e]=o,n.languages.DFS(n.languages,function(t,n){n===u&&t!=e&&(this[t]=o)}),o},DFS:function(e,t,r,a){a=a||{};for(var l in e)e.hasOwnProperty(l)&&(t.call(e,l,e[l],r||l),\"Object\"!==n.util.type(e[l])||a[n.util.objId(e[l])]?\"Array\"!==n.util.type(e[l])||a[n.util.objId(e[l])]||(a[n.util.objId(e[l])]=!0,n.languages.DFS(e[l],t,l,a)):(a[n.util.objId(e[l])]=!0,n.languages.DFS(e[l],t,null,a)))}},plugins:{},highlightAll:function(e,t){n.highlightAllUnder(document,e,t)},highlightAllUnder:function(e,t,r){var a={callback:r,selector:'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'};n.hooks.run(\"before-highlightall\",a);for(var l,i=a.elements||e.querySelectorAll(a.selector),o=0;l=i[o++];)n.highlightElement(l,t===!0,a.callback)},highlightElement:function(t,r,a){for(var l,i,o=t;o&&!e.test(o.className);)o=o.parentNode;o&&(l=(o.className.match(e)||[,\"\"])[1].toLowerCase(),i=n.languages[l]),t.className=t.className.replace(e,\"\").replace(/\\s+/g,\" \")+\" language-\"+l,t.parentNode&&(o=t.parentNode,/pre/i.test(o.nodeName)&&(o.className=o.className.replace(e,\"\").replace(/\\s+/g,\" \")+\" language-\"+l));var s=t.textContent,u={element:t,language:l,grammar:i,code:s};if(n.hooks.run(\"before-sanity-check\",u),!u.code||!u.grammar)return u.code&&(n.hooks.run(\"before-highlight\",u),u.element.textContent=u.code,n.hooks.run(\"after-highlight\",u)),n.hooks.run(\"complete\",u),void 0;if(n.hooks.run(\"before-highlight\",u),r&&_self.Worker){var g=new Worker(n.filename);g.onmessage=function(e){u.highlightedCode=e.data,n.hooks.run(\"before-insert\",u),u.element.innerHTML=u.highlightedCode,a&&a.call(u.element),n.hooks.run(\"after-highlight\",u),n.hooks.run(\"complete\",u)},g.postMessage(JSON.stringify({language:u.language,code:u.code,immediateClose:!0}))}else u.highlightedCode=n.highlight(u.code,u.grammar,u.language),n.hooks.run(\"before-insert\",u),u.element.innerHTML=u.highlightedCode,a&&a.call(t),n.hooks.run(\"after-highlight\",u),n.hooks.run(\"complete\",u)},highlight:function(e,t,a){var l={code:e,grammar:t,language:a};return n.hooks.run(\"before-tokenize\",l),l.tokens=n.tokenize(l.code,l.grammar),n.hooks.run(\"after-tokenize\",l),r.stringify(n.util.encode(l.tokens),l.language)},matchGrammar:function(e,t,r,a,l,i,o){var s=n.Token;for(var u in r)if(r.hasOwnProperty(u)&&r[u]){if(u==o)return;var g=r[u];g=\"Array\"===n.util.type(g)?g:[g];for(var c=0;c<g.length;++c){var h=g[c],f=h.inside,d=!!h.lookbehind,m=!!h.greedy,p=0,y=h.alias;if(m&&!h.pattern.global){var v=h.pattern.toString().match(/[imuy]*$/)[0];h.pattern=RegExp(h.pattern.source,v+\"g\")}h=h.pattern||h;for(var b=a,k=l;b<t.length;k+=t[b].length,++b){var w=t[b];if(t.length>e.length)return;if(!(w instanceof s)){if(m&&b!=t.length-1){h.lastIndex=k;var _=h.exec(e);if(!_)break;for(var j=_.index+(d?_[1].length:0),P=_.index+_[0].length,A=b,x=k,O=t.length;O>A&&(P>x||!t[A].type&&!t[A-1].greedy);++A)x+=t[A].length,j>=x&&(++b,k=x);if(t[b]instanceof s)continue;I=A-b,w=e.slice(k,x),_.index-=k}else{h.lastIndex=0;var _=h.exec(w),I=1}if(_){d&&(p=_[1]?_[1].length:0);var j=_.index+p,_=_[0].slice(p),P=j+_.length,N=w.slice(0,j),S=w.slice(P),C=[b,I];N&&(++b,k+=N.length,C.push(N));var E=new s(u,f?n.tokenize(_,f):_,y,_,m);if(C.push(E),S&&C.push(S),Array.prototype.splice.apply(t,C),1!=I&&n.matchGrammar(e,t,r,b,k,!0,u),i)break}else if(i)break}}}}},tokenize:function(e,t){var r=[e],a=t.rest;if(a){for(var l in a)t[l]=a[l];delete t.rest}return n.matchGrammar(e,r,t,0,0,!1),r},hooks:{all:{},add:function(e,t){var r=n.hooks.all;r[e]=r[e]||[],r[e].push(t)},run:function(e,t){var r=n.hooks.all[e];if(r&&r.length)for(var a,l=0;a=r[l++];)a(t)}}},r=n.Token=function(e,t,n,r,a){this.type=e,this.content=t,this.alias=n,this.length=0|(r||\"\").length,this.greedy=!!a};if(r.stringify=function(e,t,a){if(\"string\"==typeof e)return e;if(\"Array\"===n.util.type(e))return e.map(function(n){return r.stringify(n,t,e)}).join(\"\");var l={type:e.type,content:r.stringify(e.content,t,a),tag:\"span\",classes:[\"token\",e.type],attributes:{},language:t,parent:a};if(e.alias){var i=\"Array\"===n.util.type(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(l.classes,i)}n.hooks.run(\"wrap\",l);var o=Object.keys(l.attributes).map(function(e){return e+'=\"'+(l.attributes[e]||\"\").replace(/\"/g,\"&quot;\")+'\"'}).join(\" \");return\"<\"+l.tag+' class=\"'+l.classes.join(\" \")+'\"'+(o?\" \"+o:\"\")+\">\"+l.content+\"</\"+l.tag+\">\"},!_self.document)return _self.addEventListener?(n.disableWorkerMessageHandler||_self.addEventListener(\"message\",function(e){var t=JSON.parse(e.data),r=t.language,a=t.code,l=t.immediateClose;_self.postMessage(n.highlight(a,n.languages[r],r)),l&&_self.close()},!1),_self.Prism):_self.Prism;var a=document.currentScript||[].slice.call(document.getElementsByTagName(\"script\")).pop();return a&&(n.filename=a.src,n.manual||a.hasAttribute(\"data-manual\")||(\"loading\"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(n.highlightAll):window.setTimeout(n.highlightAll,16):document.addEventListener(\"DOMContentLoaded\",n.highlightAll))),_self.Prism}();\"undefined\"!=typeof module&&module.exports&&(module.exports=Prism),\"undefined\"!=typeof global&&(global.Prism=Prism);\nPrism.languages.clike={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"class-name\":{pattern:/((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\\\]/}},keyword:/\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\"boolean\":/\\b(?:true|false)\\b/,\"function\":/[a-z0-9_]+(?=\\()/i,number:/\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,operator:/--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,punctuation:/[{}[\\];(),.:]/};\nPrism.languages.javascript=Prism.languages.extend(\"clike\",{\"class-name\":[Prism.languages.clike[\"class-name\"],{pattern:/(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,lookbehind:!0}],keyword:[{pattern:/((?:^|})\\s*)(?:catch|finally)\\b/,lookbehind:!0},/\\b(?:as|async|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\\b/],number:/\\b(?:(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+)n?|\\d+n|NaN|Infinity)\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\"function\":/[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*\\(|\\.(?:apply|bind|call)\\()/,operator:/-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/}),Prism.languages.javascript[\"class-name\"][0].pattern=/(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/,Prism.languages.insertBefore(\"javascript\",\"keyword\",{regex:{pattern:/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[[^\\]\\r\\n]+]|\\\\.|[^\\/\\\\\\[\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})\\]]))/,lookbehind:!0,greedy:!0},\"function-variable\":{pattern:/[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:function\\b|(?:\\([^()]*\\)|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i,alias:\"function\"},constant:/\\b[A-Z][A-Z\\d_]*\\b/}),Prism.languages.insertBefore(\"javascript\",\"string\",{\"template-string\":{pattern:/`(?:\\\\[\\s\\S]|\\${[^}]+}|[^\\\\`])*`/,greedy:!0,inside:{interpolation:{pattern:/\\${[^}]+}/,inside:{\"interpolation-punctuation\":{pattern:/^\\${|}$/,alias:\"punctuation\"},rest:Prism.languages.javascript}},string:/[\\s\\S]+/}}}),Prism.languages.markup&&Prism.languages.insertBefore(\"markup\",\"tag\",{script:{pattern:/(<script[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,lookbehind:!0,inside:Prism.languages.javascript,alias:\"language-javascript\",greedy:!0}}),Prism.languages.js=Prism.languages.javascript;\n\n/*******************************************************************************\n * Binary Heap function based on the Appendix 2 Binary Heaps of M. Haverbeke\n * \"Eloquent JavaScript\", 3rd Edition\n * \n * @copyright Copyright 2018 Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Luis Gustavo Nardin\n ******************************************************************************/\nfunction BinaryHeap ( scoreFunction ) {\n  this.content = [];\n  this.scoreFunction = scoreFunction;\n}\nBinaryHeap.prototype.push = function ( element ) {\n  this.content.push( element );\n  this.bubbleUp( this.content.length - 1 );\n};\nBinaryHeap.prototype.pop = function () {\n  var result = this.content[0];\n  var end = this.content.pop();\n  \n  if ( this.content.length > 0 ) {\n    this.content[0] = end;\n    this.sinkDown( 0 );\n  }\n  return result;\n};\nBinaryHeap.prototype.remove = function ( element ) {\n  var len = this.content.length;\n  var end;\n  for ( var i = 0; i < len; i += 1 ) {\n    if ( this.content[i] !== element ) {\n      continue;\n    }\n    \n    end = this.content.pop();\n    if ( i === len - 1 ) {\n      break;\n    }\n    \n    this.content[i] = end;\n    this.bubbleUp( i );\n    this.sinkDown( i );\n    break;\n  }\n};\nBinaryHeap.prototype.getContent = function () {\n  return this.content;\n};\nBinaryHeap.prototype.getFirst = function () {\n  if ( this.content.length > 0 ) {\n    return this.content[0];\n  }\n  return [];\n};\nBinaryHeap.prototype.clear = function () {\n  this.content = [];\n};\nBinaryHeap.prototype.isEmpty = function () {\n  return this.content.length <= 0;\n};\nBinaryHeap.prototype.size = function () {\n  return this.content.length;\n};\nBinaryHeap.prototype.bubbleUp = function ( n ) {\n  var element = this.content[n];\n  var score = this.scoreFunction( element );\n  var parentN, parent;\n  \n  while ( n > 0 ) {\n    parentN = Math.floor( (n + 1) / 2 ) - 1;\n    parent = this.content[parentN];\n    if ( score >= this.scoreFunction( parent ) ) {\n      break;\n    }\n    \n    this.content[parentN] = element;\n    this.content[n] = parent;\n    n = parentN;\n  }\n};\nBinaryHeap.prototype.sinkDown = function ( n ) {\n  var length = this.content.length;\n  var element = this.content[n];\n  var elemScore = this.scoreFunction( element );\n  var swap, child1, child2, child1N, child2N, child1Score, child2Score;\n\n  while ( true ) {\n    child2N = (n + 1) * 2;\n    child1N = child2N - 1;\n    swap = null;\n    if ( child1N < length ) {\n      child1 = this.content[child1N];\n      child1Score = this.scoreFunction( child1 );\n      if ( child1Score < elemScore ) {\n        swap = child1N;\n      }\n    }\n    if ( child2N < length ) {\n      child2 = this.content[child2N];\n      child2Score = this.scoreFunction( child2 );\n      if ( child2Score < (swap == null ? elemScore : child1Score) ) {\n        swap = child2N;\n      }\n    }\n    if ( swap == null ) break;\n\n    this.content[n] = this.content[swap];\n    this.content[swap] = element;\n    n = swap;\n  }\n};\n\n/*******************************************************************************\n * This library file contains several OES foundation elements\n * @copyright Copyright 2016 Gerd Wagner, BTU (Germany) + ODU (VA, USA)\n * @license The MIT License (MIT)\n * @author Gerd Wagner\n ******************************************************************************/\nvar oes = oes || {};\nvar sim = sim || {};\n\noes.defaults = {\n  license: \"CC BY-SA\",\n  imgFolder: \"img/\",\n  validateOnInput: false,\n  expostStatDecimalPlaces: 2\n};\noes.predfinedProperties = [\"shortLabel\", \"history\"];\n\noes.Object = new cLASS({\n  Name: \"oBJECT\",\n  isAbstract: true,\n  properties: {\n    \"id\": {range: \"Integer\"},\n    \"name\": {range: \"NonEmptyString\", optional:true}\n  },\n  methods: {\n    \"toLogString\": function () {\n      var str1=\"\", str2=\"\", i=0;\n      if (!this.constructor.shortLabel && !this.name) return \"\";\n      else {  // show class name + object ID\n        str1 = this.name || this.constructor.shortLabel +\"-\"+ this.id;\n      }\n      str2 = \"{ \";\n      Object.keys( this).forEach( function (key) {\n        var propDecl = cLASS[this.constructor.Name].properties[key],\n            val = this[key], propLabel=\"\", valStr=\"\", listOfActTypeNames=[];\n        if (key===\"activityState\") {\n          listOfActTypeNames = Object.keys( val);\n          valStr = JSON.stringify( listOfActTypeNames.map( function (atn) {\n            var shortLabel = cLASS[atn].shortLabel;\n            return shortLabel || atn;\n          }));\n          propLabel = \"actState\";\n        } else if (propDecl && propDecl.shortLabel) {\n          propLabel = propDecl.shortLabel;\n          if (cLASS[propDecl.range]) {  // a reference property\n            // is the property multi-valued?\n            if (propDecl.maxCard && propDecl.maxCard > 1) {\n              if (Array.isArray( val)) {\n                valStr = JSON.stringify( val.map( function (o) {return o.id;}));\n              } else valStr = JSON.stringify( Object.keys( val));\n            } else {  // if the property is single-valued\n              valStr = val.id;\n            }\n          } else {  // if the property is not a reference property\n            if (typeof val === \"number\" && !Number.isInteger(val) && sim.timeRoundingFactor) {\n              valStr = JSON.stringify( Math.round(\n                         val * sim.timeRoundingFactor) / sim.timeRoundingFactor);\n            } else valStr = JSON.stringify( val);\n          }\n        }\n        if (this[key] !== undefined && propLabel) {\n          str2 += (i>0 ? \", \" : \"\") + propLabel +\": \"+ valStr;\n          i = i+1;\n        }\n      }, this);\n      str2 += \"}\";\n      if (str2 === \"{ }\") str2 = \"\";\n      return str1 + str2;\n    }\n  }\n});\n/***\n * Events subsume activities. While instantaneous events have an occTime,\n * activities may not have an occTime on creation, but only a startTime.\n * For events with duration it holds that occTime = startTime + duration.\n */\noes.Event = new cLASS({\n  Name: \"eVENT\",\n  isAbstract: true,\n  properties: {\n    \"occTime\": {range: \"NonNegativeNumber\", optional:true},\n    \"priority\": {range: \"NonNegativeNumber\", optional:true},\n    // only meaningful for events with duration\n    \"startTime\": {range: \"NonNegativeNumber\", optional:true},\n    \"duration\": {range: \"NonNegativeNumber\", optional:true}\n  },\n  methods: {\n    \"toLogString\": function () {\n      var occT = sim.model.time === \"continuous\" && sim.timeRoundingFactor ?\n          Math.round( this.occTime * sim.timeRoundingFactor) / sim.timeRoundingFactor :\n          this.occTime;\n      var str1=\"\", str2=\"\", evtStr=\"\", i=0,\n          eventTypeName = this.constructor.Name, AT=null,\n          propDs={}, slots={};\n      switch (eventTypeName) {\n      case \"aCTIVITYsTART\":\n        AT = cLASS[this.activityType];\n        if (!AT.shortLabel) return \"\";\n        str1 = AT.shortLabel + \"Start\";\n        propDs = AT.properties;\n        slots = this.resources;\n        break;\n      case \"pROCESSINGaCTIVITYsTART\":\n        break;\n      case \"aCTIVITYeND\":\n        AT = cLASS[this.activityType];\n        if (!AT.shortLabel) return \"\";\n        str1 = AT.shortLabel + \"End\";\n        propDs = AT.properties;\n        slots = {\"activityIdRef\": this.activityIdRef};\n        break;\n      default:\n        if (!this.constructor.shortLabel) return \"\";\n        str1 = this.constructor.shortLabel;\n        propDs = cLASS[eventTypeName].properties;\n        slots = this;\n      }\n      str2 = \"{\";\n      Object.keys( slots).forEach( function (p) {\n        var propDecl = propDs[p], val = slots[p], propLabel=\"\", valStr=\"\";\n        if (propDecl && propDecl.shortLabel) {\n          propLabel = propDecl.shortLabel;\n          if (cLASS[propDecl.range]) {  // a reference property\n            valStr = val.id;\n          } else {  // if the property is not a reference property\n            if (typeof val === \"number\" && !Number.isInteger(val) && sim.timeRoundingFactor) {\n              valStr = JSON.stringify( Math.round(\n                      val * sim.timeRoundingFactor) / sim.timeRoundingFactor);\n            } else valStr = JSON.stringify( val);\n          }\n        }\n        if (val !== undefined && propLabel) {\n          str2 += (i>0 ? \", \" : \"\") + propLabel +\":\"+ valStr;\n          i = i+1;\n        }\n      });\n/*\n      Object.keys( this).forEach( function (key) {\n        var propDecl = cLASS[eventTypeName].properties[key],\n            val = this[key], propLabel=\"\", valStr=\"\";\n        if (propDecl && propDecl.shortLabel) {\n          propLabel = propDecl.shortLabel;\n          if (cLASS[propDecl.range]) {  // a reference property\n            valStr = val.id;\n          } else {  // if the property is not a reference property\n            if (typeof val === \"number\" && !Number.isInteger(val) && sim.timeRoundingFactor) {\n              valStr = JSON.stringify( Math.round(\n                      val * sim.timeRoundingFactor) / sim.timeRoundingFactor);\n            } else valStr = JSON.stringify( val);\n          }\n        }\n        if (this[key] !== undefined && propLabel) {\n          str2 += (i>0 ? \", \" : \"\") + propLabel +\":\"+ valStr;\n          i = i+1;\n        }\n      }, this);\n*/\n      str2 += \"}\";\n      if (str2 === \"{}\") str2 = \"\";\n      evtStr = str1 + str2 + \"@\" + occT;\n      return evtStr;\n    }\n  }\n});\n// compare function for Array.sort\noes.Event.rank = function (e1, e2) {\n  var p1=0, p2=0;\n  if (e1.constructor.priority) p1 = e1.constructor.priority;\n  if (e2.constructor.priority) p2 = e2.constructor.priority;\n  return p2 - p1;\n}\n/******************************************************************************\n *** Activities Package *******************************************************\n ******************************************************************************/\n/**\n *  Activities are events having some duration and using resources. Their duration\n *  may be either pre-set to a fixed value or to a random value (in which case they\n *  have a scheduled end), or it may be determined by the occurrence of an activity\n *  end event that is caused by another simulation event (in which case they have an\n *  open end). The duration of a pre-set duration activity can be defined in 3 ways:\n *  either for all activities of some type AT by a) a class-level attribute\n *  AT.fixedDuration or b) a class-level method AT.randomDuration(), or\n *  c) by setting the attribute \"duration\" of its aCTIVITYsTART event.\n *\n *  Activities may consume, and also produce, resources. The actor(s)\n *  that (jointly) perform(s) an activity can be viewed as (a) special resource(s).\n *  At any simulation step there is a (possibly empty) set of ongoing activities.\n *  The objects that participate in an ongoing activity as resources are in a\n *  certain activity state (e.g., \"printing\", \"service-performing\"), in which they\n *  are no more available for other activities that try to allocate them as\n *  resources, if their resource role is exclusive/non-shareable.\n *\n *  For any resource of an activity, its utilization by that activity during\n *  a certain time period is measured by the simulator and can be included\n *  in the ex-post statistics.\n *\n *  An activity type is defined as a subtype of the OES class \"aCTIVITY\" with a\n *  mandatory class-level method \"generateId\" and a mandatory class-level attribute\n *  \"resourceTypes\", and an optional class-level method \"randomDuration\" or,\n *  alternatively, an optional class-level attribute \"fixedDuration\".\n *\n *  A pre-defined event type oes.ActivityStart is used for creating activity start\n *  events with a constructor parameter \"resources\" defining a resource roles map\n *  assigning resource object references to resource role names. When an activity\n *  start event occurs, a JS object representing the activity is created, the\n *  resource roles map is copied to corresponding property slots of the activity,\n *  and the value of the activityState property of all resource objects is updated\n *  by adding the activity type name (the activityState is a set/map of the names\n *  of those types of activities, in which the object is participating).\n */\noes.Activity = new cLASS({\n  Name: \"aCTIVITY\",\n  supertypeName: \"eVENT\",\n  isAbstract: true,\n  properties: {\n    \"id\": {range: \"Integer\"},\n    // on activity creation resource roles are copied to corresp. property slots\n    \"resources\": {range: cLASS.Map(\"oBJECT\"), optional:true}\n  },\n  methods: {}\n});\noes.ActivityStart = new cLASS({\n  Name: \"aCTIVITYsTART\",\n  supertypeName: \"eVENT\",\n  properties: {\n    \"activityType\": {range: \"NonEmptyString\"},  //TODO: should allow type names (like IdRefs)\n    \"resources\": {range: cLASS.Map(\"oBJECT\"), optional:true}\n  },\n  methods: {\n    \"toLogString\": function () {\n      var occT = sim.model.time === \"continuous\" && sim.timeRoundingFactor ?\n          Math.round( this.occTime * sim.timeRoundingFactor) / sim.timeRoundingFactor :\n          this.occTime;\n      var str1 = cLASS[this.activityType].shortLabel, str2 = \"\";\n      if (!str1) return \"\";\n      str1 += \"Start\";\n      Object.keys( this.resources).forEach( function (resRole) {\n        var resObj = this.resources[resRole];\n        str2 += (resObj.name || String(resObj.id)) +\", \";\n      }, this);\n      return str1 +\"(\"+ str2.slice(0, -2) +\")\" + \"@\" + occT;\n    },\n    \"onEvent\": function () {\n      var slots={}, acty=null, followupEvents=[];\n      var AT = cLASS[this.activityType];\n      if (this.duration > 0) slots.duration = this.duration;\n      else if (AT.fixedDuration) slots.duration = AT.fixedDuration;\n      else if (AT.randomDuration) slots.duration = AT.randomDuration();\n      Object.keys( this.resources).forEach( function (resRole) {\n        var resObj = this.resources[resRole];\n        // copy resource def. slots as ref. prop. slots\n        if (!slots[resRole]) slots[resRole] = resObj;\n        // set activity state for resource object\n        if (!resObj.activityState) resObj.activityState = {};\n        resObj.activityState[this.activityType] = true;\n      }, this);\n      slots.id = sim.idCounter++;  // activities need an ID\n      slots.startTime = this.occTime;\n      // create new activity\n      acty = new AT( slots);\n      // assign resources map to new activity\n      acty.resources = this.resources;\n      // register new activity as an ongoing activity\n      sim.ongoingActivities[acty.id] = acty;\n      // define initial. slots for ActivityEnd event\n      slots = {\n        occTime: this.occTime + acty.duration,\n        activityType: AT.Name,\n        activityIdRef: acty.id\n      };\n      if (this.actor) slots.actor = this.actor;\n      // if there is an onActivityStart procedure, execute it\n      if (typeof acty.onActivityStart === \"function\") {\n        followupEvents = acty.onActivityStart();\n      }\n      // schedule activity end event\n      followupEvents.push( new oes.ActivityEnd( slots));\n      return followupEvents;\n    }\n  }\n});\noes.ActivityEnd = new cLASS({\n  Name: \"aCTIVITYeND\",\n  supertypeName: \"eVENT\",\n  properties: {\n    \"activityType\": {range: \"NonEmptyString\"},\n    \"activityIdRef\": {range: \"Integer\"}\n  },\n  methods: {\n    \"toLogString\": function () {\n      var occT = sim.model.time === \"continuous\" && sim.timeRoundingFactor ?\n          Math.round( this.occTime * sim.timeRoundingFactor) / sim.timeRoundingFactor :\n          this.occTime;\n      var str1 = cLASS[this.activityType].shortLabel, str2 = \"\",\n          resources = sim.ongoingActivities[this.activityIdRef].resources;\n      if (!str1) return \"\";\n      str1 += \"End\";\n      Object.keys( resources).forEach( function (resRole) {\n        var resObj = resources[resRole];\n        str2 += (resObj.name || String(resObj.id)) +\", \";\n      }, this);\n      return str1 +\"(\"+ str2.slice(0, -2) +\")\" + \"@\" + occT;\n    },\n    \"onEvent\": function () {\n      var followupEvents=[];\n      var acty = sim.ongoingActivities[this.activityIdRef];  // retrieve activity\n      // if there is an onActivityEnd procedure, execute it\n      if (acty.onActivityEnd) followupEvents = acty.onActivityEnd();\n      // set occTime and duration if there was no pre-set duration\n      if (!acty.duration) {\n        acty.occTime = this.occTime;\n        acty.duration = acty.occTime - acty.startTime;\n      }\n      // compute resource utilization per resource role\n      Object.keys( acty.resources).forEach( function (resRole) {\n        var objIdStr = String(acty[resRole].id),\n            resUtilMap = sim.stat.resUtil[this.activityType];\n        if (resUtilMap[objIdStr] === undefined) resUtilMap[objIdStr] = 0;\n        resUtilMap[objIdStr] += acty.duration;\n        // update the activity state of resource objects\n        delete acty[resRole].activityState[this.activityType];\n      }, this);\n      // drop activity from list of ongoing activities\n      delete sim.ongoingActivities[String( this.activityIdRef)];\n      return followupEvents;\n    }\n  }\n});\n/******************************************************************************\n *** Processing Network Package ***********************************************\n ******************************************************************************/\n/**\n * Processing nodes are objects that play an resource role in processing\n * activities. The definition of a processing node combines defining both an\n * object (as resource) and an implicit activity type, possibly with\n * duration, resource types and onActivityStart/onActivityEnd event rule methods.\n *\n * A simple processing node has an input queue for processing objects and a\n * successor processing node. Processing objects may be either of a generic\n * type \"pROCESSINGoBJECT\" or of a model-specific subtype of \"pROCESSINGoBJECT\"\n * (such as \"Customer\").\n *\n * A processing node object may be defined with a value for its \"fixedDuration\"\n * property or with a \"randomDuration\" function, applying to its processing\n * activities. If neither a fixedDuration nor a randomDuration method are defined,\n * the exponential distribution with an event rate of 1 is used as a default function\n * for sampling processing durations. By default, a processing node processes one\n * processing object at a time, but it may also have its \"capacity\" attribute set to\n * a value greater than 1.\n *\n * In the general case, a processing node may have several input object types,\n * and an input queue for each of them, and either a successor processing node or\n * else an (automatically generated) output queue for each type of output object.\n * By default, when no explicit transformation of inputs to outputs is modeled by\n * specifying an outputTypes map, there is no transformation and it holds that\n * outputs = inputs.\n *\n * TODO: Add resourceTypes\n */\noes.ProcNodeStatusEL = new eNUMERATION( \"ProcNodeStatusEL\",\n    [\"idle\", \"busy\", \"down\"] );\noes.ProcessingNode = new cLASS({\n  Name: \"pROCESSINGnODE\",\n  label: \"Processing Node\",\n  shortLabel: \"PN\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"inputQueue\": {range:\"oBJECT\", minCard: 0, maxCard: Infinity, isOrdered:true,\n        label:\"Input Queue\", shortLabel:\"inpQ\"},\n    \"inputType\": {range:\"oBJECTtYPE\", optional:true},  // default: \"pROCESSINGoBJECT\"\n    \"status\": {range: \"ProcessingNodeStatusEL\", shortLabel:\"stat\",\n        initialValue: oes.ProcNodeStatusEL.IDLE},\n    \"successorNode\": {range: \"pROCESSINGnODE|eXITnODE\", optional:true},\n    \"fixedDuration\": {range: \"PositiveInteger\", optional:true},\n    \"capacity\": {range: \"PositiveInteger\", optional:true},\n    // Ex: {\"lemons\": {type:\"Lemon\", quantity:2}, \"ice\": {type:\"IceCubes\", quantity:[0.2,\"kg\"]},...\n    \"inputTypes\": {range: cLASS.Map( Object), optional:true},\n    // Ex: {\"lemonade\": {type:\"Lemonade\", quantity:[1,\"l\"]}, ...\n    \"outputTypes\": {range: cLASS.Map( Object), optional:true},\n    // a map with PN object names as keys and conditions as values for (X)OR/AND splitting\n    \"successorNodes\": {range: cLASS.Map( Function), optional:true}\n  },\n  methods: {}\n});\n/**\n * Processing Objects are generic objects that arrive at an entry node of a PN\n * and are processed at one or more processing nodes before they leave the\n * PN at an exit node.\n */\noes.ProcessingObject = new cLASS({\n  Name: \"pROCESSINGoBJECT\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"arrivalTime\": { range: \"Number\", label: \"Arrival time\", shortLabel: \"arrT\"}\n  }\n});\n/**\n * Processing Activities are activities that have inputs and outputs and are\n * performed by a processing node (as their actor). The input types/roles,\n * output types/roles and duration of a processing activity are defined in its\n * underlying processing node, which is associated via its \"procNode\" property.\n *\n * A processing node object definition may have slots for defining a \"fixedDuration\"\n * attribute or a \"randomDuration\" method.\n */\noes.ProcessingActivity = new cLASS({\n  Name: \"pROCESSINGaCTIVITY\",\n  label: \"Processing Activity\",\n  shortLabel: \"Proc\",  // for the log\n  supertypeName: \"aCTIVITY\",\n  properties: {\n    \"procNode\": {range: \"pROCESSINGnODE\"}\n  },\n  methods: {}\n});\n// define the exponential distribution as the default inter-arrival time\noes.ProcessingActivity.defaultEventRate = 1;\noes.ProcessingActivity.defaultDuration = function () {\n  return rand.exponential( oes.ProcessingActivity.defaultEventRate)\n};\n\noes.ProcessingActivityStart = new cLASS({\n  Name: \"pROCESSINGaCTIVITYsTART\",\n  supertypeName: \"aCTIVITYsTART\",\n  properties: {\n    \"procNode\": {range: \"pROCESSINGnODE\"}\n  },\n  methods: {\n    \"onConstruction\": function () {\n      if (this.resources) {\n        // make sure that processing node is a resource\n        this.resources[\"procNode\"] = this.procNode;\n      }\n    },\n    \"onEvent\": function () {\n      var slots={}, pN = this.procNode, acty=null, followupEvents=[];\n      if (!pN.inputQueue[0]) {\n        console.log(\"ProcessingActivityStart with empty inputQueue at \"+ pN.name +\n            \" at step \"+ sim.step);\n      }\n      // create slots for constructing new ProcessingActivity\n      if (this.duration) slots.duration = this.duration;\n      else if (pN.fixedDuration) slots.duration = pN.fixedDuration;\n      else if (pN.randomDuration) slots.duration = pN.randomDuration();\n      else slots.duration = oes.ProcessingActivity.defaultDuration();\n      pN.status = oes.ProcNodeStatusEL.BUSY;\n      Object.keys( this.resources).forEach( function (resRole) {\n        var resObj = this.resources[resRole];\n        // copy resource def. slots as ref. prop. slots\n        if (!slots[resRole]) slots[resRole] = resObj;\n        // set activity state for resource object\n        if (!resObj.activityState) resObj.activityState = {};\n        resObj.activityState[this.activityType] = true;\n      }, this);\n      slots.id = sim.idCounter++;  // activities need an ID\n      slots.startTime = this.occTime;\n      // create new activity\n      acty = new oes.ProcessingActivity( slots);\n      acty.resources = this.resources;  // assign resources map\n      sim.ongoingActivities[acty.id] = acty;\n      // create slots for constructing a ProcessingActivityEnd event\n      slots = {\n        occTime: this.occTime + acty.duration,\n        activityType: \"pROCESSINGaCTIVITY\",\n        activityIdRef: acty.id\n      };\n      slots.procNode = pN;\n      // if there is an onActivityStart procedure, execute it\n      if (typeof pN.onActivityStart === \"function\") {\n        followupEvents = pN.onActivityStart();\n      }\n      // schedule activity end event\n      followupEvents.push( new oes.ProcessingActivityEnd( slots));\n      return followupEvents;\n    }\n  }\n});\noes.ProcessingActivityEnd = new cLASS({\n  Name: \"pROCESSINGaCTIVITYeND\",\n  supertypeName: \"aCTIVITYeND\",\n  properties: {\n    \"procNode\": {range: \"pROCESSINGnODE\"}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var procObj=null, nextNode=null, followupEvt1=null, followupEvt2=null,\n          followupEvents=[], pN = this.procNode;\n      // retrieve activity\n      var acty = sim.ongoingActivities[this.activityIdRef];\n      // if there is an onActivityEnd procedure, execute it\n      if (pN.onActivityEnd) followupEvents = pN.onActivityEnd();\n      // set occTime and duration if there was no pre-set duration\n      if (!acty.duration) {\n        acty.occTime = this.occTime;\n        acty.duration = acty.occTime - acty.startTime;\n      }\n      // compute resource utilization per resource role\n      Object.keys( acty.resources).forEach( function (resRole) {\n        var objIdStr = String(acty[resRole].id),\n            resUtilMap = sim.stat.resUtil[this.activityType];\n        if (resUtilMap[objIdStr] === undefined) resUtilMap[objIdStr] = 0;\n        resUtilMap[objIdStr] += acty.duration;\n        // update the activity state of resource objects\n        delete acty[resRole].activityState[this.activityType];\n      }, this);\n      // drop activity from list of ongoing activities\n      delete sim.ongoingActivities[String( this.activityIdRef)];\n      // the successor node may be dynamically assigned by a.onActivityEnd()\n      nextNode = pN.successorNode || acty.successorNode;\n      // pop processing object from the input queue\n      procObj = pN.inputQueue.shift();\n      // push object to the input queue of the next node\n      nextNode.inputQueue.push( procObj);\n      // is the next node a processing node?\n      if (nextNode.constructor.Name === \"pROCESSINGnODE\") {\n        // is the next processing node available?\n        if (nextNode.inputQueue.length === 1 &&\n            nextNode.status === oes.ProcNodeStatusEL.IDLE) {\n          // then start its ProcessingActivity\n          nextNode.status = oes.ProcNodeStatusEL.BUSY;\n          followupEvt1 = new oes.ProcessingActivityStart({\n            occTime: this.occTime + sim.nextMomentDeltaT,\n            activityType: \"pROCESSINGaCTIVITY\",\n            procNode: nextNode,\n            resources: acty.resources || {}\n          });\n          followupEvents.push( followupEvt1);\n        }\n      } else {  // the next node is an exit node\n        followupEvents.push( new oes.Departure({\n          occTime: this.occTime + sim.nextMomentDeltaT,\n          exitNode: nextNode\n        }));\n      }\n      // are there more items in the input queue and no BREAK happened?\n      if (pN.status === oes.ProcNodeStatusEL.BUSY) {\n        if (pN.inputQueue.length > 0) {\n          followupEvt2 = new oes.ProcessingActivityStart({\n            occTime: this.occTime + sim.nextMomentDeltaT,\n            activityType: \"pROCESSINGaCTIVITY\",\n            procNode: pN,\n            resources: {}\n          });\n          followupEvents.push( followupEvt2);\n        } else pN.status = oes.ProcNodeStatusEL.IDLE;\n      }\n      return followupEvents;\n    }\n  }\n});\n/**\n * Entry nodes are objects that participate in exogenous arrival events\n * leading to the creation of processing objects, which are either routed to a\n * successor node or pushed to an output queue. The definition of an entry\n * node combines defining both a (possibly spatial) object and an associated\n * implicit arrival event type, possibly with an \"onArrival\" event rule method.\n *\n * Entry node object definitions may include (1) a \"successorNode\" attribute slot\n * for assigning a successor node to which processing objects are routed; (2) a\n * \"maxNmrOfArrivals\" attribute slot for defining a maximum number of arrival\n * events after which no more arrival events will be created (and, consequently,\n * the simulation may run out of future events); (3) either an \"arrivalRate\"\n * attribute slot for defining the event rate parameter of an exponential pdf\n * used for computing the time between two consecutive arrival events, or a per-\n * instance-defined \"arrivalRecurrence\" method slot for computing the recurrence\n * of arrival events; (4) a per-instance-defined \"outputType\" slot for defining\n * a custom output type (instead of the default \"pROCESSINGoBJECT\"). If neither an\n * \"arrivalRate\" nor an \"arrivalRecurrence\" method are defined, the exponential\n * distribution with an event rate of 1 is used as a default recurrence.\n *\n * Entry nodes have a built-in (read-only) statistics attribute \"nmrOfArrivedObjects\"\n * counting the number of objects that have arrived at the given entry node.\n *\n * TODO: If no successor node is defined for an entry node, an output queue is\n * automatically created.\n */\noes.EntryNode = new cLASS({\n  Name: \"eNTRYnODE\",\n  label: \"Entry Node\",\n  shortLabel: \"Entry\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"outputType\": {range: \"oBJECTtYPE\", optional:true},  // default: \"pROCESSINGoBJECT\"\n    \"successorNode\": {range: \"pROCESSINGnODE\", optional:true},\n    \"maxNmrOfArrivals\": {range: \"PositiveInteger\", optional:true},\n    \"arrivalRate\": {range: \"Decimal\", optional:true},\n    \"nmrOfArrivedObjects\": {range: \"NonNegativeInteger\", shortLabel: \"arrObj\", optional:true}\n  }\n});\n/**\n * Exit nodes are objects that participate in departure events leading to the\n * destruction of the departing object. The definition of an exit node combines\n * defining both a (possibly spatial) object and an associated implicit departure\n * event type, possibly with an \"onDeparture\" event rule method.\n *\n * Exit nodes have two built-in statistics attributes: (1) \"nmrOfDepartedObjects\"\n * counting the number of objects that have departed at the given exit node, and\n * (2) \"cumulativeTimeInSystem\" for adding up the times in system of all departed\n * objects.\n */\noes.ExitNode = new cLASS({\n  Name: \"eXITnODE\",\n  label: \"Exit Node\",\n  shortLabel: \"Exit\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"inputQueue\": {range:\"oBJECT\", minCard: 0, maxCard: Infinity, isOrdered:true,\n      label:\"Input Queue\", shortLabel:\"inpQ\"},\n    \"nmrOfDepartedObjects\": {range: \"NonNegativeInteger\", shortLabel: \"depObj\", optional:true},\n    \"cumulativeTimeInSystem\": {range: \"NonNegativeDecimal\", optional:true}\n  }\n});\n/**\n * Set up PN statistics\n * - for any entry node, define the implicit statistics variable \"arrivedObjects\"\n * - for any exit node, define the implicit statistics variables \"departedObjects\"\n *   and \"meanTimeInSystem\"\n */\noes.setupProcNetStatistics = function () {\n  var entryNodes = oes.EntryNode.instances,\n      exitNodes = oes.ExitNode.instances;\n  var initState = sim.scenario.initialState,\n      initialObjDefs = initState.objects;\n  if (!sim.model.statistics) sim.model.statistics = {};\n  // define default statistics variables for PN entry node statistics\n  Object.keys( entryNodes).forEach( function (nodeIdStr) {\n    var suppressDefaultEntry=false,\n        entryNode = entryNodes[nodeIdStr],\n        varName = Object.keys( entryNodes).length === 1 ?\n            \"arrivedObjects\" : entryNode.name +\"_arrivedObjects\";\n    entryNode.nmrOfArrivedObjects = 0;\n    if (sim.model.statistics[varName] && !sim.model.statistics[varName].label) {\n      // model-defined suppression of default statistics\n      suppressDefaultEntry = true;\n    }\n    if (!suppressDefaultEntry) {\n      if (!sim.model.statistics[varName]) sim.model.statistics[varName] = {};\n      sim.model.statistics[varName].range = \"NonNegativeInteger\";\n      if (!sim.model.statistics[varName].label) {\n        sim.model.statistics[varName].label = \"Arrived objects\";\n      }\n      sim.model.statistics[varName].entryNode = entryNode;\n      sim.model.statistics[varName].computeOnlyAtEnd = true;\n    }\n  });\n  // define default statistics variables for PN exit node statistics\n  Object.keys( exitNodes).forEach( function (nodeIdStr) {\n    var suppressDefaultEntry=false,\n        exitNode = exitNodes[nodeIdStr],\n        varName = Object.keys( exitNodes).length === 1 ?\n            \"departedObjects\" : exitNode.name +\"_departedObjects\";\n    exitNode.nmrOfDepartedObjects = 0;\n    if (sim.model.statistics[varName] && !sim.model.statistics[varName].label) {\n      // model-defined suppression of default statistics\n      suppressDefaultEntry = true;\n    }\n    if (!suppressDefaultEntry) {\n      if (!sim.model.statistics[varName]) sim.model.statistics[varName] = {};\n      sim.model.statistics[varName].range = \"NonNegativeInteger\";\n      if (!sim.model.statistics[varName].label) {\n        sim.model.statistics[varName].label = \"Departed objects\";\n      }\n      sim.model.statistics[varName].exitNode = exitNode;\n      sim.model.statistics[varName].computeOnlyAtEnd = true;\n    }\n    exitNode.cumulativeTimeInSystem = 0;\n    varName = Object.keys( exitNodes).length === 1 ?\n        \"meanTimeInSystem\" : exitNode.name +\"_meanTimeInSystem\";\n    if (sim.model.statistics[varName] && !sim.model.statistics[varName].label) {\n      // model-defined suppression of default statistics\n      suppressDefaultEntry = true;\n    }\n    if (!suppressDefaultEntry) {\n      if (!sim.model.statistics[varName]) sim.model.statistics[varName] = {};\n      sim.model.statistics[varName].range = \"Decimal\";\n      if (!sim.model.statistics[varName].label) {\n        sim.model.statistics[varName].label = \"Mean time in system\";\n      }\n      sim.model.statistics[varName].exitNode = exitNode;\n      sim.model.statistics[varName].computeOnlyAtEnd = true;\n      sim.model.statistics[varName].expression = function () {\n        return exitNode.cumulativeTimeInSystem / exitNode.nmrOfDepartedObjects\n      };\n    }\n  });\n};\n\n/**\n * Arrival events are associated with an entry node.\n * They may define a quantity of arrived processing objects, which is 1 by default.\n * Viewing an arrival not as an arrival of processing objects, but as an arrival of\n * a customer order, the quantity attribute would allow to define an order\n * quantity that results in the same quantity of processing objects (or production\n * orders) pushed to the entry node's succeeding processing node.\n */\noes.Arrival = new cLASS({\n  Name: \"aRRIVAL\",\n  label: \"Arrival\",\n  shortLabel: \"Arr\",\n  supertypeName: \"eVENT\",\n  properties: {\n    \"entryNode\": {range: \"eNTRYnODE\"},\n    \"quantity\": {range: \"PositiveInteger\", optional:true}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var occT=0, procObj=null, ProcessingObject=null, followupEvents=[];\n      if (this.entryNode.outputType) {\n        ProcessingObject = cLASS[this.entryNode.outputType];\n      } else {  // default\n        ProcessingObject = oes.ProcessingObject;\n      }\n      // update statistics\n      this.entryNode.nmrOfArrivedObjects++;\n      // create newly arrived processing object\n      procObj = new ProcessingObject({arrivalTime: this.occTime});\n      sim.addObject( procObj);\n      // invoke onArrival event rule method\n      if (this.entryNode.onArrival) followupEvents = this.entryNode.onArrival();\n      if (this.entryNode.successorNode) {\n        // push newly arrived object to the inputQueue of the next node\n        this.entryNode.successorNode.inputQueue.push( procObj);\n        // is the follow-up processing node available?\n        if (this.entryNode.successorNode.status === oes.ProcNodeStatusEL.IDLE) {\n          this.entryNode.successorNode.status = oes.ProcNodeStatusEL.BUSY;\n          followupEvents.push( new oes.ProcessingActivityStart({\n            occTime: this.occTime + sim.nextMomentDeltaT,\n            activityType: \"pROCESSINGaCTIVITY\",\n            procNode: this.entryNode.successorNode,\n            resources: this.entryNode.resources || {}\n          }));\n        }\n      }\n      // implement the recurrence of aRRIVAL events\n      if (!this.entryNode.maxNmrOfArrivals ||\n          this.entryNode.nmrOfArrivedObjects < this.entryNode.maxNmrOfArrivals) {\n        // has an arrival recurrence function been defined for the entry node?\n        if (this.entryNode.arrivalRecurrence) {\n          occT = this.occTime + this.entryNode.arrivalRecurrence();\n        } else {  // use the default recurrence\n          occT = this.occTime + oes.Arrival.defaultRecurrence();\n        }\n        sim.scheduleEvent( new oes.Arrival({\n          occTime: occT, entryNode: this.entryNode}));\n      }\n      return followupEvents;\n    }\n  }\n});\n// define the exponential distribution as the default inter-arrival time\noes.Arrival.defaultEventRate = 1;\noes.Arrival.defaultRecurrence = function () {\n  return rand.exponential( oes.Arrival.defaultEventRate);\n};\n/**\n * Departure events have two participants: an exit node and the departing object.\n */\noes.Departure = new cLASS({\n  Name: \"dEPARTURE\",\n  shortLabel: \"Dep\",\n  supertypeName: \"eVENT\",\n  properties: {\n    \"exitNode\": {range: \"eXITnODE\"}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var followupEvents = [];\n      // pop processing object from the input queue\n      var procObj = this.exitNode.inputQueue.shift();\n      // update statistics\n      this.exitNode.nmrOfDepartedObjects++;\n      this.exitNode.cumulativeTimeInSystem += this.occTime - procObj.arrivalTime;\n      // invoke onDeparture event rule method\n      if (typeof this.exitNode.onDeparture === \"function\") {\n        followupEvents = this.exitNode.onDeparture();\n      }\n      // remove object from simulation\n      sim.removeObject( procObj);\n      return followupEvents;\n    }\n  }\n});\n/**\n * Check model constraints\n * @method\n * @author Gerd Wagner\n */\noes.checkProcNetConstraints = function (params) {\n  var errMsgs=[], msg=\"\", evts=[];\n  // PNC1: nmrOfArrObjects = nmrOfObjectsAtProcNodes + nmrOfObjectsAtExitNodes + nmrOfDepObjects\n  var nmrOfArrObjects = Object.keys( oes.EntryNode.instances).reduce( function (res, nodeObjIdStr) {\n    return res + sim.objects[nodeObjIdStr].nmrOfArrivedObjects\n  }, 0);\n  var nmrOfObjectsAtProcNodes = Object.keys( oes.ProcessingNode.instances).reduce( function (res, nodeObjIdStr) {\n    return res + sim.objects[nodeObjIdStr].inputQueue.length\n  }, 0);\n  var nmrOfObjectsAtExitNodes = Object.keys( oes.ExitNode.instances).reduce( function (res, nodeObjIdStr) {\n    return res + sim.objects[nodeObjIdStr].inputQueue.length\n  }, 0);\n  var nmrOfDepObjects = Object.keys( oes.ExitNode.instances).reduce( function (res, nodeObjIdStr) {\n    return res + sim.objects[nodeObjIdStr].nmrOfDepartedObjects\n  }, 0);\n  if (nmrOfArrObjects !== nmrOfObjectsAtProcNodes + nmrOfObjectsAtExitNodes + nmrOfDepObjects) {\n    msg = \"The object preservation constraint is violated at step \"+ sim.step +\n        (params && params.add ? params.add : \"\") +\n        \" (nmrOfArrObjects: \"+ nmrOfArrObjects +\n        \", nmrOfObjectsInSystem: \"+ String(nmrOfObjectsAtProcNodes+nmrOfObjectsAtExitNodes) +\n        \", nmrOfDepObjects: \"+ nmrOfDepObjects +\")\";\n    if (params && params.log) console.log( msg);\n    else errMsgs.push( msg);\n  }\n  // PNC2: if a proc. node has a proc. end event, its input queue must be non-empty\n  evts = sim.FEL.getEventsOfType(\"pROCESSINGaCTIVITYeND\");\n  evts.forEach( function (procEndEvt) {\n    var pN = procEndEvt.procNode, inpQ = pN.inputQueue;\n    if (inpQ.length === 0 || !inpQ[0]) {\n      msg = \"At step \"+ sim.step +\" \"+ (params && params.add ? params.add : \"\") +\n          \", the proc. node \"+ (pN.name||pN.id) +\" has an empty input queue.\";\n      if (params && params.log) console.log( msg);\n      else errMsgs.push( msg);\n    }\n  });\n  return errMsgs;\n};\n/******************************************************************************\n *** Experiment Classes *******************************************************\n ******************************************************************************/\n/**\n * A complex datatype for experiment parameter definitions\n * @author Gerd Wagner\n */\noes.ExperimentParamDef = new cLASS({\n  Name: \"eXPERIMENTpARAMdEF\",\n  isComplexDatatype: true,  // do not collect instances\n  properties: {\n    \"name\": {range: \"Identifier\", label:\"Name\"},\n    \"values\": {\n      range: cLASS.ArrayList(\"Number\"),\n      label:\"Values\",\n      val2str: function (v) {\n        return v.toString();  // JSON.stringify( v);\n      },\n      str2val: function (str) {\n        return JSON.parse( str);\n      },\n    }\n  }\n});\n/**\n * An experiment is defined for a scenario, which is defined for a model.\n */\noes.ExperimentDef = new cLASS({\n  Name: \"eXPERIMENTdEF\",\n  properties: {\n    \"id\": {range: \"AutoNumber\"},\n    \"model\": {range: \"NonEmptyString\", label:\"Model name\", optional:true},\n    \"scenarioNo\": {range: \"PositiveInteger\", label:\"Scenario number\"},\n    \"experimentNo\": {range: \"PositiveInteger\", label:\"Experiment number\",\n        hint:\"The sequence number relative to the underlying simulation scenario\"},\n    \"experimentTitle\": {range: \"NonEmptyString\", optional:true, label:\"Experiment title\"},\n    \"replications\": {range:\"PositiveInteger\", label:\"Number of replications\"},\n    \"parameterDefs\": {range: \"eXPERIMENTpARAMdEF\", minCard: 0, maxCard: Infinity,\n        isOrdered:true, label:\"Parameter definitions\"},\n    \"seeds\": {range: Array, optional:true}  // seeds.length = replications\n  }\n});\noes.ExperimentDef.idCounter = 0;  // retrieve actual value from IDB\n\noes.ExperimentRun = new cLASS({\n  Name: \"eXPERIMENTrUN\",\n  properties: {\n    \"id\": {range: \"AutoNumber\", label:\"ID\"},  // possibly a timestamp\n    \"experimentDef\": {range: \"eXPERIMENTdEF\", label:\"Experiment def.\"},\n    \"dateTime\": {range: \"DateTime\", label:\"Date/time\"}\n  }\n});\noes.ExperimentRun.getAutoId = function () {\n  return (new Date()).getTime();\n};\n\noes.ExperimentScenarioRun = new cLASS({\n  Name: \"eXPERIMENTsCENARIOrUN\",\n  properties: {\n    \"id\": {range: \"AutoNumber\"},  // possibly a timestamp\n    \"experimentRun\": {range: \"eXPERIMENTrUN\"},\n    \"experimentScenarioNo\": {range: \"NonNegativeInteger\"},\n    \"parameterValueCombination\": {range: Array},\n    \"outputStatistics\": {range: Object,\n      label:\"Output statistics\",\n      val2str: function (v) {\n        return JSON.stringify( v);\n      },\n      str2val: function (str) {\n        return JSON.parse( str);\n      },\n    }\n  }\n});\noes.ExperimentScenarioRun.getAutoId = function () {\n  return (new Date()).getTime();\n};\n\n/******************************************************************************\n *** Lists of predefined cLASSes as reserved names for constraint checks ******\n ******************************************************************************/\noes.predefinedObjectTypes = [\"oBJECT\",\"pROCESSINGoBJECT\",\"pROCESSINGnODE\",\"eNTRYnODE\",\"eXITnODE\"];\noes.predefinedEventTypes = [\"eVENT\",\"aCTIVITYsTART\",\"aCTIVITYeND\",\"aRRIVAL\",\n    \"pROCESSINGaCTIVITYsTART\",\"pROCESSINGaCTIVITYeND\",\"dEPARTURE\"];\noes.predefinedActivityTypes = [\"aCTIVITY\",\"pROCESSINGaCTIVITY\"];\n\n/******************************************************************************\n *** OES Model Objects scenario/experiment/config/model/statistics/etc. *******\n ******************************************************************************/\nsim.scenario = sim.scenario || {};\n// Define the schema of the model object \"scenario\"\nsim.scenario.objectName = \"scenario\";\nsim.scenario.properties = {\n    \"simulationEndTime\": {range:\"Time\", label:\"Duration:\", hint:\"Simulation duration\"},\n    \"name\": {range:\"NonEmptyString\", optional: true, label:\"Name\", hint:\"Scenario name\"},\n    \"title\": {range:\"NonEmptyString\", optional: true, label:\"Title\", hint:\"Scenario title\"},\n    \"shortDescription\": {range:\"String\", optional: true, label:\"Scenario description\",\n        hint:\"Short description of the simulation scenario\"},\n    \"creator\": {range:\"String\", optional: true, label:\"Creator\",\n        hint:\"Creator of simulation model\"},\n    \"created\": {range:\"String\", optional: true, label:\"Created on\",\n        hint:\"Creation date\"},\n    \"modified\": {range:\"String\", optional: true, label:\"Modified on\",\n      hint:\"Modification date\"},\n    \"idCounter\": {range:\"NonNegativeInteger\", optional: true, label:\"ID counter\"},\n    \"randomSeed\": {range:\"PositiveInteger\", optional: true, label:\"Random seed\"}\n};\n\nsim.experiment = {\n  objectName: \"experiment\",\n  properties: {\n    \"experimentNo\": {range:\"AutoNumber\", label:\"Experiment number\",\n        hint:\"Automatically assigned sequence number for experiment\"},\n    \"experimentTitle\": {range:\"String\", optional: true, label:\"Experiment title\"},\n    \"replications\": {range:\"PositiveInteger\", label:\"Number of replications\",\n        hint:\"Number of replications/repetitions per experiment scenario\"},\n    \"parameterDefs\": {\n        range: \"eXPERIMENTpARAMdEF\", maxCard: Infinity,\n        label:\"Experiment parameters\",\n        hint:\"Define experiment parameters by name and value set specification\"\n    },\n    \"seeds\": {range: Array, optional: true},\n  },\n  replications: 0,\n  parameters: [],\n  scenarios:[],  // are created by the simulator\n  validate: function () {\n    var errMsgs=[], exp = sim.experiment;\n    if (exp.replications > 0) {\n      if (exp.seeds) {\n        if (!Array.isArray( exp.seeds)) {\n          errMsgs.push(\"The experiment 'seeds' parameter must have an array value! Illegal value: \"+ JSON.stringify(exp.seeds));\n        } else if (exp.seeds.length < exp.replications) {\n          errMsgs.push(\"Not enough seeds for number of replications!\");\n        }\n      }\n      if (exp.parameterDefs.length > 0) {\n        exp.parameterDefs.forEach( function (paramDef) {\n          if (!paramDef.values && !(paramDef.startValue && paramDef.endValue)) {\n            errMsgs.push(\"Experiment parameter \"+ paramDef.name +\" has neither a 'values' \" +\n                \"nor 'startValue'/'endValue' attribute(s)!\");\n          }\n        })\n      }\n      if (exp.timeSeriesStatisticsVariables) {\n        exp.timeSeriesStatisticsVariables.forEach( function (varName) {\n          if (!(varName in sim.model.statistics)) {\n            errMsgs.push(\"'timeSeriesStatisticsVariables' contains a name (\"+ varName +\") that does not \" +\n                \"correspond to a sim.model.statistics variable!\");\n          }\n        })\n      }\n    }\n    return errMsgs;\n  }\n};\n\n// Define the schema of the model object \"config\"\nsim.config = {\n  objectName: \"config\",\n  properties: {\n    \"createLog\": {range:\"Boolean\", optional: true, label:\"Log\", hint:\"Create simulation log? (yes/no)\"},\n    \"visualize\": {range:\"Boolean\", optional: true, initialValue: true, label:\"Visualization\",\n        hint:\"Visualize a simulation run? (yes/no)\"},\n    \"stepDuration\": {range:\"NonNegativeInteger\", optional: true, label:\"Step duration:\",\n        hint:\"How long is a simulation step to take? [ms]\"},\n    \"userInteractive\": {range:\"Boolean\", optional: true, label:\"User-interactive\",\n      hint:\"Enable user interactions? (yes/no)\"}\n  }\n};\n// Define the schema of the model object \"sim\"\nsim.objectName = \"sim\";\nsim.properties = {\n  \"step\": {range:\"NonNegativeInteger\", label:\"Step:\", hint:\"Simulation step\"},\n  \"time\": {range:\"Number\", label:\"Time:\", hint:\"Simulation time\"}\n};\nsim.space = {overlayGrid: {}};\n\n// Define the schema of the observationUI\nsim.config.observationUI = {\n  objectName: \"observationUI\",\n  canvas: {},\n  properties: {\n    \"spaceView\": {range: Object, label: \"Space view\"},\n    \"objectViews\": {range: Object, label: \"Object views\"}\n  }\n};\n// define the observationUI.monitor\nsim.config.observationUI.monitor = {};\n// Define the schema of the observationUI.spaceView\nsim.config.observationUI.spaceView = {\n  objectName: \"spaceView\",\n  properties: {\n    \"type\": {range: \"NonEmptyString\", label: \"Space view type\"},\n    \"gridCellSize\": {range: \"PositiveInteger\", label: \"Grid cell size\"}\n  }\n};\n// define the visualization record for non-spatial models\nsim.config.observationUI.vis = {SVG:{}};\n// define the objectViews definition map\nsim.config.observationUI.objectViews = {};\n// define the map for runtime objectViews\nsim.objectViews = {};\n\n// Define the schema of the model object \"model\"\nsim.model = sim.model || {};\nsim.model.v = {};  // definitions of (global) model variables available in sim.v\nsim.model.f = {};  // (global) model functions\n\n//TODO: can this be dropped?\noes.defineSimModelSchema = function () {\n  sim.model.objectName = \"model\";\n  sim.model.properties = {\n    \"name\": {range:\"NonEmptyString\", label:\"Name\"},\n    \"title\": {range:\"NonEmptyString\", label:\"Title\", hint:\"Model title\"},\n    \"shortDescription\": {range:\"String\", optional: true, label:\"Model description\",\n      hint:\"Short description of the simulation model\"},\n    \"systemNarrative\": {range:\"String\", optional: true, label:\"System narrative\",\n        hint:\"Narrative of the system under investigation\"},\n    \"license\": {range:\"String\", optional: true, label:\"License\",\n      hint:\"Copyright license\"},\n    \"creator\": {range:\"String\", optional: true, label:\"Creator\",\n      hint:\"Creator of simulation model\"},\n    \"created\": {range:\"String\", optional: true, label:\"Created on\",\n      hint:\"Creation date\"},\n    \"modified\": {range:\"String\", optional: true, label:\"Modified on\",\n      hint:\"Modification date\"},\n    \"time\": {range:[\"discrete\",\"continuous\"], optional: true,\n      label:\"Time model\", hint:\"Either 'discrete' (default) or 'continuous'\"},\n    \"timeUnit\": {range:[\"ms\",\"s\",\"m\",\"h\",\"D\",\"W\",\"M\",\"Y\"], optional: true,\n        label:\"Time unit\", hint:\"A time unit like 'ms', 's' or 'm'\"},\n    \"timeIncrement\": {range:\"Decimal\", optional: true, label:\"Time increment\",\n        hint:\"By default: 1\"},\n    \"objectTypes\": {range: Array, label:\"Object types\"},\n    \"eventTypes\": {range: Array, label:\"Event types\"},\n    \"activityTypes\": {range: Array, optional: true, label:\"Activity types\"}\n  };\n  // Define the schema of the model object \"model.space\"\n  sim.model.space.objectName = \"spaceModel\";\n  sim.model.space.properties = {\n      \"type\": {range:[\"1D-Grid\",\"IntegerGrid\",\"ObjectGrid\",\"3D-Grid\",\"1D\",\"2D\",\"3D\"], label:\"Space type\"},\n      \"geometry\": {range:[\"TOROIDAL\",\"EUCLIDEAN\"], optional: true, label:\"Space geometry\",\n        hint:\"Either 'TOROIDAL' (default) or 'EUCLIDEAN'\"},\n      \"xMax\": {range:\"NonNegativeInteger\", label:\"Width\", hint:\"Maximum x value\"},\n      \"yMax\": {range:\"NonNegativeInteger\", optional: true, label:\"Height\", hint:\"Maximum y value\"},\n      \"zMax\": {range:\"NonNegativeInteger\", optional: true, label:\"Depth\", hint:\"Maximum z value\"}\n  };\n};\nsim.model.objectName = \"model\";\nsim.model.properties = {\n  \"name\": {range:\"NonEmptyString\", label:\"Name\"},\n  \"title\": {range:\"NonEmptyString\", label:\"Title\", hint:\"Model title\"},\n  \"shortDescription\": {range:\"String\", optional: true, label:\"Model description\",\n    hint:\"Short description of the simulation model\"},\n  \"systemNarrative\": {range:\"String\", optional: true, label:\"System narrative\",\n    hint:\"Narrative of the system under investigation\"},\n  \"license\": {range:\"String\", optional: true, label:\"License\",\n    hint:\"Copyright license\"},\n  \"creator\": {range:\"String\", optional: true, label:\"Creator\",\n    hint:\"Creator of simulation model\"},\n  \"created\": {range:\"String\", optional: true, label:\"Created on\",\n    hint:\"Creation date\"},\n  \"modified\": {range:\"String\", optional: true, label:\"Modified on\",\n    hint:\"Modification date\"},\n  \"time\": {range:[\"discrete\",\"continuous\"], optional: true,\n    label:\"Time model\", hint:\"Either 'discrete' (default) or 'continuous'\"},\n  \"timeUnit\": {range:[\"ms\",\"s\",\"m\",\"h\",\"D\",\"W\",\"M\",\"Y\"], optional: true,\n    label:\"Time unit\", hint:\"A time unit like 'ms', 's' or 'm'\"},\n  \"timeIncrement\": {range:\"Decimal\", optional: true, label:\"Time increment\",\n    hint:\"By default: 1\"},\n  \"objectTypes\": {range: Array, label:\"Object types\"},\n  \"eventTypes\": {range: Array, label:\"Event types\"},\n  \"activityTypes\": {range: Array, optional: true, label:\"Activity types\"}\n};\n// Define the schema of the model object \"model.space\"\nsim.model.space = sim.model.space || {};\nsim.model.space.objectName = \"spaceModel\";\nsim.model.space.properties = {\n  \"type\": {range:[\"1D-Grid\",\"IntegerGrid\",\"ObjectGrid\",\"3D-Grid\",\"1D\",\"2D\",\"3D\"], label:\"Space type\"},\n  \"geometry\": {range:[\"TOROIDAL\",\"EUCLIDEAN\"], optional: true, label:\"Space geometry\",\n    hint:\"Either 'TOROIDAL' (default) or 'EUCLIDEAN'\"},\n  \"xMax\": {range:\"NonNegativeInteger\", label:\"Width\", hint:\"Maximum x value\"},\n  \"yMax\": {range:\"NonNegativeInteger\", optional: true, label:\"Height\", hint:\"Maximum y value\"},\n  \"zMax\": {range:\"NonNegativeInteger\", optional: true, label:\"Depth\", hint:\"Maximum z value\"}\n};\n\n// Define the schema of the model object \"scenario.initialState\"\nsim.scenario.initialState = {\n  objectName: \"initialState\",\n  properties: {\n    // a map, and therefore an instance of Object\n    \"objects\": {range: Object, optional: true, label:\"Initial objects\"},\n    // a map, and therefore an instance of Object\n    \"events\": {range: Object, optional: true, label:\"Initial events\"}\n  },\n  validate: function () {\n    var errors=[];\n    var isProcNetSim = this.objects &&\n            Object.keys( this.objects).some( function (objIdStr) {\n              return this.objects[objIdStr].typeName === \"eNTRYnODE\";\n            }, this);\n    if (!this.events && !isProcNetSim &&\n        !(sim.model.timeIncrement || sim.model.OnEachTimeStep)) {\n      errors.push(\"There must be at least one initial event when neither \" +\n          \"a time increment nor an 'OnEachTimeStep' method has been defined.\");\n    }\n    if (!this.objects) return;\n    Object.keys( this.objects).forEach( function (objIdStr) {\n      var slots={}, Class=null;\n      // check object IDs\n      if (String( parseInt( objIdStr)) !== objIdStr) {\n        errors.push(\"An object has a non-integer ID: \"+ objIdStr);\n      }\n      slots = this.objects[objIdStr];\n      Class = cLASS[slots.typeName];\n      Object.keys( slots).forEach( function (p) {\n        var decl = Class.properties[p], constrVio=null;\n        if (decl) {\n          constrVio = cLASS.check( p, decl, slots[p]);\n          if (!(constrVio instanceof NoConstraintViolation)) {\n            errors.push( slots.typeName +\"(\"+ objIdStr +\"): \"+ constrVio.message);\n          }\n        }\n      });\n    }, this);\n    return errors;\n  }\n};\n// Define the schema of the model object \"scenario.initialStateUI\"\nsim.scenario.initialStateUI = {\n  objectName: \"initialStateUI\",\n  properties: {\n    \"editableProperties\": {range: Object, label:\"Editable properties\"}\n  },\n  validate: function () {\n    if (!this.editableProperties) return;\n    Object.keys( this.editableProperties).forEach( function (className) {\n      // ...\n    }, this);\n  }\n};\nsim.scenario.initialStateUI.editableProperties = {};\n\n/**\n * Check correctness of scenario/model definitions\n * @method\n * @author Gerd Wagner\n */\noes.verifySimulation = function () {\n  var errMsgs=[];\n\n  function checkModelObject( mo) {  // mo = model object\n    var props = mo.properties, errors=[];\n    if (!props) {\n      errors.push(\"The model object \"+ mo.objectName +\" does not have a declaration of 'properties'!\");\n      return;\n    }\n    // check property slots\n    Object.keys( props).forEach( function (prop) {\n      var constrVio = cLASS.check( prop, props[prop], mo[prop]);\n      if (!(constrVio instanceof NoConstraintViolation)) {\n        errors.push( constrVio.constructor.name +\": \"+ constrVio.message);\n      }\n    });\n    if (mo.validate) {  // invoke specific check method\n      errors.merge( mo.validate());\n    }\n    if (errors.length > 0) {\n      errors.forEach( function (err, i) {\n        errors[i] = \"[\"+ mo.objectName +\"] \" + err;\n      });\n    }\n    return errors;\n  }\n  // check model definition\n  errMsgs.merge( checkModelObject( sim.model));\n  // check SPACE model definition\n  if (sim.model.space.type) {\n    errMsgs.merge( checkModelObject( sim.model.space));\n  }\n  // check scenario definition\n  errMsgs.merge( checkModelObject( sim.scenario));\n  // check experiment definition\n  if (sim.experiment.replications > 0) errMsgs.merge( checkModelObject( sim.experiment));\n  // check initial state definition\n  errMsgs.merge( checkModelObject( sim.scenario.initialState));\n  // check definitions of STATISTICS variables\n  if (sim.model.statistics) {\n    Object.keys( sim.model.statistics).forEach( function (varName) {\n      var statVar = sim.model.statistics[varName],\n          OT = statVar.objectType,\n          aggrFunc = statVar.aggregationFunction;\n      // statistics variable bound to a model variable\n      if (statVar.globalVariable) {\n        if (sim.model.v[statVar.globalVariable] === undefined)\n          errMsgs.push( \"[Statistics] Global model variable <var>\"+\n              statVar.globalVariable +\"</var> has not been defined!\");\n      }\n      if (OT && !sim.model.objectTypes.includes( OT)) {\n        errMsgs.push( \"[Statistics] Specified object type <var>\"+\n            OT +\"</var> is not included in sim.model.objectTypes!\");\n      }\n      // variable bound to specific object\n      if (statVar.objectIdRef && !sim.objects[statVar.objectIdRef]) {\n        errMsgs.push( \"[Statistics] Invalid definition of statistics variable <var>\"+\n            varName +\"</var>: There is no object with ID \"+ statVar.objectIdRef +\"!\");\n      }\n      // aggregation function must be defined\n      if (aggrFunc && typeof( oes.stat[aggrFunc]) !== 'function') {\n        errMsgs.push( \"[Statistics] Invalid definition of statistics variable <var>\"+\n            varName +\"</var>: <code>\"+ aggrFunc +\n            \"</code> is not an admissible aggregation function name!\");\n      }\n      // if variable is bound to a property, objectIdRef or objectType must be provided\n      if (statVar.property && !statVar.objectIdRef && !(OT && cLASS[OT])) {\n        errMsgs.push( \"[Statistics] Invalid definition of statistics variable <var>\"+\n            varName +\"</var>:\"+ (!OT ? \" object type name missing!\" :\n                                 !cLASS[OT] ? \" object type \"+ OT +\" not defined!\" :\n                                 !aggrFunc ? \" aggregationFunction missing!\":\"\"));\n      }\n      //TODO: add further checks!\n    });\n  }\n  errMsgs.concat( oes.checkModelConstraints());\n  return errMsgs;\n};\n/**\n * Determine if a simulation is based on a PN model\n */\noes.isProcNetModel = function () {\n  var initState = sim.scenario.initialState,\n      initialObjDefs = initState.objects,\n      initialObj= [], keys=[], key=\"\", i=0;\n  if (initialObjDefs) {  // a map of object definitions\n    keys = Object.keys( initialObjDefs);\n    for (i=0; i < keys.length; i++) {\n      key = keys[i];\n      initialObj = initialObjDefs[key];\n      if (initialObj.typeName === \"eNTRYnODE\") return true;\n    }\n  }\n  return false;\n};\n/**\n * Check model constraints\n * @method\n * @author Gerd Wagner\n */\noes.checkModelConstraints = function (params) {\n  var errMsgs=[];\n  if (sim.model.constraints) {\n    Object.keys( sim.model.constraints).forEach( function (constrName) {\n      var constraint = sim.model.constraints[constrName], msg=\"\";\n      if (!constraint()) {\n        msg = \"The constraint '\"+ constrName +\"' is violated at step \"+ sim.step;\n        if (params && params.log) console.log( msg);\n        else errMsgs.push( msg);\n      }\n    })\n  }\n  return errMsgs;\n};\n/**\n * Set up Storage Management\n *\n * @method\n * @author Gerd Wagner\n */\noes.setupStorageManagement = function (dbName) {\n  var storageAdapter = {dbName: dbName};\n  if (!('indexedDB' in self)) {\n    console.log(\"This browser doesn't support IndexedDB. Falling back to LocalStorage.\");\n    storageAdapter.name = \"LocalStorage\";\n  } else {\n    storageAdapter.name = \"IndexedDB\";\n  }\n  sim.storeMan = new sTORAGEmANAGER( storageAdapter);\n  //sim.storeMan.createEmptyDb().then( oes.setupFrontEndSimEnv);\n  // last step in setupFrontEndSimEnv, then wait for user actions\n  sim.storeMan.createEmptyDb([oes.ExperimentRun, oes.ExperimentScenarioRun]).then( function () {\n    console.log(\"Empty IndexedDB created.\");\n  });\n};\n/**\n * Set up front-end simulation environment\n *\n * @method\n * @author Gerd Wagner\n */\noes.setupFrontEndSimEnv = function () {\n  var errors=[], el=null;\n  sim.initializeSimulator();\n  // set up initial state\n  sim.initializeModelVariables();\n  sim.createInitialObjEvt();\n  if (Object.keys( oes.EntryNode.instances).length > 0) {\n    oes.setupProcNetStatistics();\n  }\n  // initialize statistics\n  if (sim.model.statistics) oes.stat.initialize();\n  // check simulation definition constraints\n  if (oes.loadManager && oes.loadManager.codeLoadingMode !== \"deploy\") {\n    errors = oes.verifySimulation();\n    if (errors.length > 0) {\n      el = dom.createElement(\"div\", {id:\"errors\"});\n      el.appendChild( dom.createElement(\"h1\", {content: \"Errors\"}));\n      errors.forEach( function (err) {\n        el.appendChild( dom.createElement(\"p\", {content: err}));\n      });\n      document.body.insertBefore( el, document.body.firstElementChild);\n    } else {\n      console.log(\"No errors detected in \"+ oes.loadManager.codeLoadingMode + \" mode.\");\n    }\n  }\n  // set up the UI\n  oes.ui.setupUI();\n  // visualize initial state (step 0)\n  if (sim.config.visualize) oes.ui.visualizeStep();\n};\n\n/*******************************************************\n Simulation Log\n********************************************************/\nsim.logStep = function (stepLog) {\n  var rowEl = sim.ui.logEl.insertRow();  // create new table row\n  rowEl.insertCell().textContent = stepLog.simStep;\n  rowEl.insertCell().textContent = stepLog.simTime;\n  rowEl.insertCell().textContent = stepLog.systemStateInfo;\n  rowEl.insertCell().textContent = stepLog.evtInfo;\n};\n/*******************************************************************************\n * EventList maintains an ordered list of events using Binary Heap\n * \n * @copyright Copyright 2018 Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Luis Gustavo Nardin\n ******************************************************************************/\nvar oes = oes || {};\noes.EventList = function EventList ( a ) {\n  this.heap = new BinaryHeap( function ( e ) {\n    return e.occTime;\n  } );\n};\noes.EventList.prototype.add = function ( e ) {\n  if (sim.model.timeRoundingDecimalPlaces) {\n    e.occTime = Math.round( e.occTime * sim.timeRoundingFactor) /\n        sim.timeRoundingFactor;\n  }\n  this.heap.push( e );\n};\noes.EventList.prototype.getNextOccurrenceTime = function () {\n  if ( !this.heap.isEmpty() ) {\n    return this.heap.getFirst().occTime;\n  } else {\n    return 0;\n  }\n};\noes.EventList.prototype.getNextEvent = function () {\n  if ( !this.heap.isEmpty() ) {\n    return this.heap.pop();\n  } else {\n    return null;\n  }\n};\noes.EventList.prototype.getAllEvents = function () {\n  return this.heap.content;\n};\noes.EventList.prototype.isEmpty = function () {\n  return this.heap.isEmpty();\n};\noes.EventList.prototype.removeNextEvents = function () {\n  var nextTime = 0, nextEvents = [];\n  if ( this.heap.isEmpty() ) {\n    return [];\n  }\n  nextTime = this.heap.getFirst().occTime;\n  while ( !this.heap.isEmpty() &&\n      this.heap.getFirst().occTime === nextTime ) {\n    nextEvents.push( this.heap.pop() );\n  }\n  return nextEvents;\n};\noes.EventList.prototype.clear = function ( e ) {\n  this.heap.clear();\n};\n\noes.EventList.prototype.containsEventOfType = function ( evtType ) {\n  return this.heap.getContent().some( function (evt) {\n    return evt.constructor.Name === evtType;\n  } );\n};\noes.EventList.prototype.getEventsOfType = function ( evtType ) {\n  return this.heap.getContent().filter( function (evt) {\n    return evt.constructor.Name === evtType;\n  } );\n};\noes.EventList.prototype.toString = function () {\n  var str = \"\";\n  if ( !this.heap.isEmpty() ) {\n    str = this.heap.getContent().reduce( function ( serialization, e ) {\n      return serialization + \", \" + e.toLogString();\n    }, \"\" );\n    str = str.slice( 1 );\n  }\n  return str;\n};\n\n/**\n * @fileOverview Variables and procedures for (ex-post) statitsics\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Mircea Diaconescu\n * @author Gerd Wagner\n * @license The MIT License (MIT)\n */\n// create namespace oes if not already created by some other \"module\"\nif (typeof oes !== \"object\") var oes = {};\n/**\n * Computation of the simulation statistics.\n *\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Mircea Diaconescu\n * @license The MIT License (MIT)\n */\noes.stat = {\n  timeSeriesCompressionSteps: 1 // length of array values to be compressed into one value\n};\nsim.stat = {  // run-time statistics variables\n  timeSeries: {}\n};\nsim.aux = sim.aux || {}; // auxiliary variables\nsim.aux.stat = {\n  prevValue: {}\n};\n/**\n * Initialize the ex-post statistics\n */\noes.stat.initialize = function () {\n  var aggReturnType = {  // stores the return types of various aggregation functions\n    'avg': 'Decimal'\n  };\n  Object.keys( sim.model.statistics).forEach( function (varName) {\n    var statVar = sim.model.statistics[varName],\n        initialVal = statVar.initialValue || 0,\n        OT=\"\", objIdRefStr=\"\", objectRef=null,\n        propDecl=\"\", globVar=\"\";\n    statVar.name = varName;\n    // is the statistics variable bound to a global variable?\n    if (statVar.globalVariable) {\n      globVar = statVar.globalVariable;\n      if (typeof sim.model.v[globVar] === \"object\") {\n        initialVal = sim.model.v[globVar].initialValue || 0;\n      } else initialVal = sim.model.v[globVar];\n    } else if (statVar.property && statVar.objectIdRef) {\n      // the variable is bound to a property slot of a specific object\n      objIdRefStr = String( statVar.objectIdRef);\n      if (statVar.objectType) OT = statVar.objectType;\n      else OT = sim.objects[objIdRefStr].constructor.Name;\n      objectRef = cLASS[OT].instances[objIdRefStr];\n      if (objectRef) {\n        statVar.objectRef = objectRef;  // store reference to the object\n        // the statistics variable default range is the property range\n        if (!statVar.range) {\n          if (statVar.aggregationFunction &&\n              aggReturnType[statVar.aggregationFunction]) {\n            statVar.range = aggReturnType[statVar.aggregationFunction];\n          } else {\n            propDecl = cLASS[objectRef.constructor.Name].properties[statVar.property];\n            statVar.range = propDecl.range;\n          }\n        }\n        initialVal = objectRef[statVar.property];\n      }\n    } else if (statVar.property && statVar.objectType) {\n      OT = statVar.objectType;\n      if (statVar.aggregationFunction) {\n        initialVal = 0;\n        if (aggReturnType[statVar.aggregationFunction]) {\n          statVar.range = aggReturnType[statVar.aggregationFunction];\n        }\n      } else { // the variable is bound to a collection of property slots\n        /*\n        propDecl = cLASS[OT].properties[statVar.property];\n        statVar.range = propDecl.range;\n        */\n        statVar.hasRecordRange = true;\n        initialVal = {};\n        Object.keys( cLASS[OT].instances).forEach( function (objIdStr) {\n          initialVal[objIdStr] = cLASS[OT].instances[objIdStr][statVar.property];\n        });\n      }\n    } else if (statVar.gridCellProperty && sim.space.grid) {\n      // statistics variable for grid cell property\n      if (!statVar.range) {\n        if (statVar.aggregationFunction &&\n          aggReturnType[statVar.aggregationFunction]) {\n          statVar.range = aggReturnType[statVar.aggregationFunction];\n        } else {\n          propDecl = sim.space.grid[0][0].constructor.properties[statVar.gridCellProperty];\n          if (propDecl)  statVar.range = propDecl.range;\n        }\n      }\n    }\n    // is the variable's time series to be created?\n    statVar.createTimeSeries = (statVar.showTimeSeries || sim.experiment.timeSeriesStatisticsVariables &&\n        sim.experiment.timeSeriesStatisticsVariables.includes( statVar));\n    if (statVar.createTimeSeries) {\n      if (sim.timeIncrement === undefined){\n        sim.stat.timeSeries[varName] = [[],[]];\n      } else {\n        sim.stat.timeSeries[varName] = [];\n      }\n    }\n    // is variable bound to a time series aggregation?\n    statVar.isBoundToTimeSeriesAggregate = (statVar.aggregationFunction &&\n        (statVar.objectIdRef && statVar.property || statVar.globalVariable));\n    // is variable bound to an aggregate over an ObjectType population?\n    statVar.isBoundToPopulationAggregate =\n        (!statVar.objectIdRef && statVar.property && OT);\n    // determine Integer range\n    if (statVar.range) {\n      statVar.hasIntegerRange = cLASS.isIntegerType( statVar.range);\n    } else if (statVar.globalVariable && typeof sim.model.v[globVar] === \"object\" &&\n             statVar.aggregationFunction && statVar.aggregationFunction !== \"avg\") {\n      statVar.hasIntegerRange = cLASS.isIntegerType( sim.model.v[globVar].range);\n    } else {\n      statVar.hasIntegerRange = false;\n    }\n    // initialize runtime statistics variables in sim.stat\n    if (statVar.hasIntegerRange) sim.stat[varName] = parseInt( initialVal);\n    else sim.stat[varName] = initialVal;\n    // store as previous value\n    sim.aux.stat.prevValue[varName] = sim.stat[varName];\n  });\n  // initialize resource utilization statistics\n  if (sim.model.activityTypes && sim.model.activityTypes.length > 0) {\n    sim.stat.resUtil = {};\n    sim.model.activityTypes.forEach( function (aT) {\n      sim.stat.resUtil[aT] = {};\n    });\n  }\n  // initialize PN statistics\n  if (Object.keys( oes.ProcessingNode.instances).length > 0) {\n    sim.stat.resUtil = sim.stat.resUtil || {};\n    sim.stat.resUtil[\"pROCESSINGaCTIVITY\"] = {};\n  }\n};\n/**\n * The timeSeries arrays are limited in length for two reasons:\n * - large arrays results in slowing down the simulation\n * - we have limited pixels on the screen to show the statistics graphs\n *\n * Actually, the maximum length is limited to the number of pixels\n * available for the statistics graphs, so one time series value for\n * each one physical pixels. This is achieved by compressing the\n * array, averaging groups of values to one value.\n *\n * @param maxLength\n *    the maximum allowed length of the timeSeries array\n */\noes.stat.prepareTimeSeriesCompression = function (maxLength) {\n  maxLength = maxLength || sim.scenario.simulationEndTime; // defaults to \"no restriction - all steps\"\n  oes.stat.timeSeriesCompressionSteps = Math.floor(sim.scenario.simulationEndTime / maxLength);\n  if (oes.stat.timeSeriesCompressionSteps < 1) oes.stat.timeSeriesCompressionSteps = 1;\n  console.log(\"Statistics: timeSeriesCompressionSteps=\"\n    + oes.stat.timeSeriesCompressionSteps + \" (1 means no compression)\");\n};\n/**\n * Reset the statistics variables. This means that any computed\n * value is reset to the initial value and all the connection with\n * object(s) references are recreated.\n */\noes.stat.reset = function () {\n  oes.stat.initialize();\n};\n\n/**\n * Update the statistic variables at the end of each simulation step.\n */\noes.stat.updateStatistics = function () {\n  var i=0, statVar=null,\n      statVarNames = Object.keys( sim.model.statistics),\n      n = statVarNames.length;\n  for (i=0; i<n; i++) {\n    statVar = sim.model.statistics[statVarNames[i]];\n    // computeOnlyAtEnd statistic variables are ignored at this point\n    if (!statVar.computeOnlyAtEnd) oes.stat.updateStatisticsVariable( statVar);\n  }\n};\n\n/**\n * Update a statistics variable X and assign the result to sim.stat[\"X\"]\n * @param statVar  the statistics variable declaration\n */\noes.stat.updateStatisticsVariable = function (statVar) {\n  var varName = statVar.name, valueAtCurrentStep;\n  var cellsOnX = 0, cellsOnY = 0, i = 0, j = 0;\n  var grid=null, sum=0, pName=\"\", OT=null;\n  // expression/function is used to compute the value\n  if (typeof statVar.expression === 'function') {\n    valueAtCurrentStep = statVar.expression() || 0;\n  } else if (statVar.globalVariable) { // value obtained from a global variable\n    valueAtCurrentStep = sim.v[statVar.globalVariable] || 0;\n  } else if (statVar.objectRef) { // value obtained from an object's property slot\n    valueAtCurrentStep = statVar.objectRef[statVar.property] || 0;\n  } else if (statVar.property && statVar.objectType && !statVar.aggregationFunction) {\n    // the variable is bound to a collection of property slots\n    valueAtCurrentStep = {};\n    OT = cLASS[statVar.objectType];\n    Object.keys( OT.instances).forEach( function (objIdStr) {\n      valueAtCurrentStep[objIdStr] = OT.instances[objIdStr][statVar.property];\n    });\n  } else if (statVar.entryNode) { // PN statistics\n    valueAtCurrentStep = statVar.entryNode.nmrOfArrivedObjects || 0;\n  } else if (statVar.exitNode) { // PN statistics\n    valueAtCurrentStep = statVar.exitNode.nmrOfDepartedObjects || 0;\n  } else if (statVar.gridCellProperty) {\n    grid = sim.space.grid;\n    cellsOnX = grid.length;\n    cellsOnY = grid[0].length;\n    pName = statVar.gridCellProperty;\n    for (i = 0; i < cellsOnX; i++) {\n      for (j = 0; j < cellsOnY; j++) sum += (grid[i][j])[pName];\n    }\n    valueAtCurrentStep = sum / (cellsOnX * cellsOnY);\n    if (statVar.aggregationFunction) {\n      valueAtCurrentStep = oes.stat[statVar.aggregationFunction](\n        sim.aux.stat.prevValue[varName], valueAtCurrentStep);\n    }\n  } else {  // value computed manually in the simulation scenario\n    valueAtCurrentStep = sim.stat[varName];\n  }\n  //TODO: support TimeSeriesAggregate of PopulationAggregate\n  if (statVar.isBoundToTimeSeriesAggregate) {\n    valueAtCurrentStep = oes.stat[statVar.aggregationFunction](\n        sim.aux.stat.prevValue[varName], valueAtCurrentStep);\n  } else if (statVar.isBoundToPopulationAggregate) {\n    valueAtCurrentStep = oes.stat.computePopulationAggregate(statVar);\n  }\n  // format integer values\n  if (statVar.hasIntegerRange) sim.stat[varName] = parseInt( valueAtCurrentStep);\n  else sim.stat[varName] = valueAtCurrentStep;\n  // check if the variable's time series has to be stored/returned\n  if (statVar.createTimeSeries) {\n    if (sim.timeIncrement) {\n      //sim.stat.timeSeries[varName][sim.step] = sim.stat[varName];\n      sim.stat.timeSeries[varName].push( sim.stat[varName]);\n      if (oes.stat.timeSeriesCompressionSteps > 1\n          && sim.step % oes.stat.timeSeriesCompressionSteps === 0) {\n        oes.stat.compressTimeSeries( sim.stat.timeSeries[varName]);\n      }\n    } else {  // next-event time progression\n      sim.stat.timeSeries[varName][0][sim.step] = sim.time;\n      // TODO: check how we can average steps for time progression case\n      sim.stat.timeSeries[varName][1][sim.step] = sim.stat[varName];\n      // TODO: check how we can average statistic values for time progression case\n    }\n  }\n  // assign current value to previous value\n  sim.aux.stat.prevValue[varName] = sim.stat[varName];\n};\n\n/**\n * Compress time series to keep its length in a specified\n * range, avoiding long arrays that slow down the simulation.\n * @param ts\n *    the time series to compress\n */\noes.stat.compressTimeSeries = function (ts) {\n  var avgLen = oes.stat.timeSeriesCompressionSteps;\n  var i = 0, n = ts.length, avg = 0;\n  // compute average value for the latest set, which will be compressed\n  for (i = n - avgLen; i < n; i++) avg += ts[i];\n  // remove averaged values and append the compressed (average) value\n  ts.splice(n-avgLen-1, avgLen, avg /= avgLen);\n};\n\n/**\n * Compute a Population Aggregate\n */\noes.stat.computePopulationAggregate = function (statVar) {\n  var OT = statVar.objectType,\n      objIDs = Object.keys( cLASS[OT].instances),\n      n = objIDs.length,\n      aggrF = statVar.aggregationFunction,\n      aggr=0, i=0;\n  switch (aggrF) {\n  case \"min\":\n  case \"max\":\n    for (i=0; i < n; i++) {\n      aggr = Math[aggrF]( aggr, cLASS[OT].instances[String(id)][statVar.property]);\n    }\n    break;\n  case \"sum\":\n  case \"avg\":\n    for (i=0; i < n; i++) {\n      aggr += cLASS[OT].instances[String(id)][statVar.property];\n    }\n    if (aggrF === \"avg\") aggr = aggr/n;\n    break;\n  }\n  return aggr;\n};\n/**\n * Compute the values of the statistic variables which are only required\n * to be computed at the simulation end. This method has to be called when\n * the simulation ends.\n */\noes.stat.computeOnlyAtEndStatistics = function () {\n  Object.keys( sim.model.statistics).forEach( function (varName) {\n    var statVar = sim.model.statistics[varName];\n    if (statVar.computeOnlyAtEnd) oes.stat.updateStatisticsVariable( statVar);\n  });\n};\n\n/**\n * Compute the <code>max</code> aggregation function value.\n * @param oldValue\n * @param newValue\n *\n */\noes.stat.max = function (oldValue, newValue) {\n  return Math.max( oldValue, newValue);\n};\n\n/**\n * Compute the <code>min</code> aggregation function value.\n * @param oldValue\n * @param newValue\n *\n */\noes.stat.min = function (oldValue, newValue) {\n  return Math.min( oldValue, newValue);\n};\n/**\n * Compute the <code>sum</code> aggregation function value.\n * @param oldValue\n * @param newValue\n *\n */\noes.stat.sum = function (oldValue, newValue) {\n  return oldValue + newValue;\n};\n/**\n * Compute the <code>avg</code> (average, arithmetic mean) aggregation function value.\n * @param oldValue\n * @param newValue\n *\n */\noes.stat.avg = function (oldValue, newValue) {\n  if (sim.step >= 1) return (oldValue + (newValue - oldValue) / (sim.step + 1));\n  else return oldValue;\n};\n/**\n * Summary statistics record\n */\noes.stat.summary = {\n  average: {label:\"Average\", f: math.mean},\n  stdDev: {label:\"Std.dev.\", f: math.stdDev},\n  min: {label:\"Minimum\", f: Array.min},\n  max: {label:\"Maximum\", f: Array.max},\n  confIntLowerBound: {label: \"Conf.Int.Lower\", f: function ( data ) {\n    sim.stat.CurrentCI = math.confInt( data ); // {lowerBound: x, upperBound: y}\n    return sim.stat.CurrentCI.lowerBound;\n  }},\n  confIntUpperBound: {label: \"Conf.Int.Upper\", f: function () {\n    return sim.stat.CurrentCI.upperBound;\n  }}\n};\n/**\n * @fileOverview A JavaScript implementation of an Object-Event Simulator defined as\n * a JS object \"sim\". The simulator is associated with a simulation model (sim.model)\n * and one or more simulation scenarios (sim.scenarios).\n *\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Gerd Wagner\n * @license The MIT License (MIT)\n *\n * Integrity *constraints* that must be satisfied at any simulation step can be defined\n * as Boolean functions in the map \"model.constraints\" with constraint names being the\n * keys. They are currently checked for the initial state only (in \"setupInitialState\").\n * In future versions there may be an option that constraints are checked in all\n * simulation steps for catching more model errors.\n */\n/*\nImprovements/extensions\nv1\n - support the definition of a \"warm-up period\"\n - drop the activityType attribute of ProcessingActivityStart (and -End?) since it is always \"pROCESSINGaCTIVITY\"\n - allow creating new events \n   (a) without an occTime setting, such that they are scheduled with a delay of nextMomentDeltaT\n   (b) without an occTime setting, but with a \"delay\"\n - refactor createInitialObjEvt into a create and a reset procedure such that already created initial objects\n    are not deleted, but reset, when rerunning a simulation\n - make constraint checking on object/event creation conditional depending on\n       areConstraintsToBeChecked = sim.isConstraintCheckingTurnedOn ||\n          sim.isConstraintCheckingTurnedOn === undefined && oes.loadManager &&\n          oes.loadManager.codeLoadingMode !== \"deploy\";\n - improve the initial state definition UI:\n   + support value changes via IndexedDB\n   + allow adding/dropping objects in the ClassPopulationWidget\n   + support enumeration attributes in the ClassPopulationWidget\n - Add observation UIs for visualizing variables in \"monitors\"\n\n - make a sims/basic-tests.html that invokes one or more seeded scenario simulations and checks statistics results\n - Define set/get for scenario.visualize and use the setter for dropping/setting-up the visualization (canvas)\n\n - Find out what is the meaning of \"variable\" versus \"parameter\" in AnyLogic\n\n - run experiment scenarios in parallel worker threads using the navigator.hardwareConcurrency information\n   (see https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency)\n\n - improve clock-time measuring and support real-time simulation enabled by realtimeFactor set to 1\n - Refactor the simulation step/loop by parametrizing pre-defined events from an extension library (such as \"PN Models\")\n - New model constraint checks:\n   + prevent the use of pre-defined cLASS names (\"aRRIVAL\", etc.) and predefined property names (oes.predfinedProperties)\n\n - Implement support for the \"recurrence\" attribute of entry nodes\n - Allow setting a waiting timeout for the input queues of processing nodes (corresponding\n   to AnyLogic's \"Enable exit on timeout\")\n - Implement support for the \"capacity\" attribute of processing nodes (by popping/forwarding\n   more than one processing objects)\n - Allow processing nodes to specify a maximum queue length (limited queue capacity)\n\n *** later ***\n - Add exploration model\n - Support using variants of the same model (sim.models)\n - UI for defining ex-post statistics\n\nv2\n - extend mODELcLASS with object pools\n - analyze use of modules\n - concurrent event processing with deferred state changes\n - add agents\n - add participation model\n */\n\n/*******************************************************\n Initializations\n ********************************************************/\nsim.ui = sim.ui || {}; // runtime UI components\n/*******************************************************\n Add object to simulation objects\n *******************************************************\n * @author Gerd Wagner\n * @method\n * @param o  the object to be added\n */\nsim.addObject = function (o) {\n  if (!(o instanceof oes.Object)) {\n    console.log( o.toString() +\" is not an oBJECT!\");\n    return;\n  }\n  if (!o.id) o.id = sim.idCounter++;\n  sim.objects[String(o.id)] = o;\n  if (o.name) {\n    if (typeof o.name !== \"string\" ) {\n      console.log(\"oBJECT \"+ o.toString() +\" has a non-string name\"+ o.name);\n      return;\n    } else sim.namedObjects[o.name] = o;\n  }\n  return o;\n};\nsim.addObjects = function (objArr) {\n  objArr.forEach( function (o) {sim.addObject(o)});\n  return objArr;\n};\n/*******************************************************\n Remove an object from the set of simulation objects\n *******************************************************\n * @author Gerd Wagner\n * @method\n * @param o  the object to be removed\n */\nsim.removeObject = function (o) {\n  var ObjectClass=null;\n  if (!(o instanceof oes.Object)) {\n    console.log( JSON.stringify(o) +\" is not an OES object!\");\n    return;\n  }\n  if (!sim.objects[String(o.id)]) {\n    console.log( JSON.stringify(o) +\"@\"+ sim.time +\n        \" has not been registered as a simulation object!\");\n    return;\n  }\n  ObjectClass = o.constructor;\n  delete ObjectClass.instances[String(o.id)];\n  delete sim.objects[String(o.id)];\n};\nsim.removeObjectById = function (id) {\n  var ObjectClass=null;\n  if (typeof id === \"string\") id = parseInt(id);\n  if (!Number.isInteger( id)) {\n    console.log( JSON.stringify(id) +\" is not an integer!\");\n    return;\n  }\n  if (!sim.objects[String(id)]) {\n    console.log( JSON.stringify(id) +\" is not an ID of a registered simulation object!\");\n    return;\n  }\n  ObjectClass = o.constructor;\n  delete ObjectClass.instances[id];\n  delete sim.objects[id];\n};\n/*******************************************************\n Schedule an event by adding it to the FEL\n *******************************************************\n * @author Gerd Wagner\n * @method\n * @param e  the event to be scheduled\n */\nsim.scheduleEvent = function (e) {\n  if (e instanceof oes.Event) sim.FEL.add(e);\n  else {\n    console.log( e.toString() +\" is not an eVENT!\");\n  }\n};\n/********************************************************\n * Initialize Model Variables\n ********************************************************/\nsim.initializeModelVariables = function (expParamSlots) {\n  sim.v = {};  // a map of global variables (accessible by name)\n  // set up the map of model variables\n  sim.model.v = sim.model.v || {};\n  Object.keys( sim.model.v).forEach( function (varName) {\n    var mv = sim.model.v[varName];\n    if (typeof expParamSlots === \"object\" && expParamSlots[varName]) {\n      // assign experiment parameter value\n      sim.v[varName] = expParamSlots[varName];\n    } else {\n      sim.v[varName] = (mv.value !== undefined) ? mv.value : mv.initialValue;\n    }\n  });\n}\n/********************************************************\n * Create Initial Objects and Events\n ********************************************************/\nsim.createInitialObjEvt = function () {\n  var initState = sim.scenario.initialState,\n      initialEvtDefs=null, initialObjDefs=null, entryNodes={};\n  // clear initial state data structures\n  sim.objects = {};  // a map of all objects (accessible by ID)\n  sim.namedObjects = {};  // a map of objects accessible by a unique name\n  sim.FEL.clear();\n  sim.ongoingActivities = {};  // a map of all ongoing activities accessible by ID\n  // clear the cLASS populations of model-specific object types\n  sim.model.objectTypes.forEach( function (objTypeName) {\n    cLASS[objTypeName].instances = {};\n  });\n  // clear the cLASS populations of pre-defined object and activity types\n  [\"eNTRYnODE\",\"pROCESSINGnODE\",\"eXITnODE\",\"pROCESSINGoBJECT\",\"pROCESSINGaCTIVITY\"].\n      forEach( function (objTypeName) {cLASS[objTypeName].instances = {};});\n  // allow parametrized object/event definitions\n  if (typeof sim.scenario.setupInitialState === \"function\") {\n    sim.scenario.setupInitialState();\n  }\n  // register initial objects\n  initialObjDefs = initState.objects;\n  if (initialObjDefs) {  // a map of object definitions\n    Object.keys( initialObjDefs).forEach( function (objIdStr) {\n      var objSlots = util.cloneObject( initialObjDefs[objIdStr]),\n          objTypeName = objSlots.typeName,\n          ObjType = cLASS[objTypeName], obj=null;\n      // fatal error: object type class not found\n      if (!ObjType) throw \"Missing object type class '\" + objTypeName + \"'!\";\n      objSlots.id = parseInt( objIdStr);\n      delete objSlots.typeName;  // remove typeName slot\n      try {obj = new ObjType( objSlots);}\n      catch (e) {\n        if (typeof e !== \"object\") console.log( e);\n        else console.log( e.constructor.name +\": \"+ e.message);\n        obj = null;\n      }\n      if (obj) sim.addObject( obj);\n    })\n  }\n  // convert ID references to object references (in a second pass)\n  Object.keys( sim.objects).forEach( function (objIdStr) {\n    var obj = sim.objects[objIdStr],\n        propDefs = cLASS[obj.constructor.Name].properties;\n    Object.keys( obj).forEach( function (p) {\n      if (!propDefs[p]) {\n        if (typeof obj[p] !== \"function\" && !oes.predfinedProperties.includes(p)) {\n          console.log(\"Undeclared prop: \"+ p +\" for obj \"+ objIdStr);\n        }\n        return;\n      }\n      var range = propDefs[p].range, val = obj[p], rangeClasses=[];\n      if (typeof range === \"string\" && typeof val !== \"object\" &&\n          (cLASS[range] || range.includes(\"|\"))) {\n        if (range.includes(\"|\")) {\n          rangeClasses = range.split(\"|\");\n          // check referential integrity: val must be in some range class\n          if (!rangeClasses.some( function (rc) {\n                return cLASS[rc].instances[String(val)];\n              })) {\n            throw \"Referential integrity violation: \"+ val +\" does not reference any of \"+\n                range +\"!\";\n          }\n        } else if (!(sim.objects[String(val)] instanceof cLASS[range])) {  // also allows superclasses\n            throw \"Referential integrity violation: \"+ val +\" does not reference a \"+ range +\"!\";\n        }\n        obj[p] = sim.objects[String(val)];\n      }\n    });\n  });\n  // schedule initial events\n  initialEvtDefs = initState.events;\n  if (initialEvtDefs) {  // an array of JS object definitions\n    initialEvtDefs.forEach( function (evt) {\n      var e = util.cloneObject( evt),  // clone event object definition\n          evtTypeName = e.typeName,\n          EvtType = cLASS[evtTypeName];\n      // fatal error: event type class not found\n      if (!EvtType) throw Error(\"Missing class for event type '\" + evtTypeName + \"'!\");\n      delete e.typeName;  // remove type slot\n      sim.scheduleEvent( new EvtType( e));\n    })\n  }\n  /**************************************************************\n   * Special settings for PN models\n   **************************************************************/\n  entryNodes = oes.EntryNode.instances;\n  // schedule initial arrival events for the entry nodes of a PN\n  Object.keys( entryNodes).forEach( function (nodeIdStr) {\n    var occT=0, arrEvt=null, entryNode = entryNodes[nodeIdStr];\n    // has no arrival recurrence function been defined for this entry node?\n    if (!entryNode.arrivalRecurrence) {\n      // use the default recurrence\n      occT = oes.Arrival.defaultRecurrence();\n    } else {\n      occT = entryNode.arrivalRecurrence();\n    }\n    arrEvt = new oes.Arrival({ occTime: occT, entryNode: entryNode});\n    sim.scheduleEvent( arrEvt);\n  });\n};\n/*************************************************************\n * Update initial state objects (after modifications via the UI)\n ************************************************************/\nsim.updateInitialStateObjects = function () {\n  // reset the initial objects map\n  sim.scenario.initialState.objects = {};\n  // loop over all object types\n  sim.model.objectTypes.forEach( function (objTypeName) {\n    var objects = cLASS[objTypeName].instances;\n    // loop over all instances of this object type\n    Object.keys( objects).forEach( function (objIdStr) {\n      var obj = objects[objIdStr],\n          objRec = util.createRecordFromObject( obj);\n      objRec.typeName = objTypeName;\n      delete objRec.id;\n      sim.scenario.initialState.objects[objIdStr] = objRec;\n    });\n  });\n};\n/*************************************************************\n * Initialize the simulator on start up\n * Settings that do not vary across scenarios in an experiment\n ************************************************************/\nsim.initializeSimulator = function (dbName) {\n  var x=0, i=0;\n  sim.FEL = new oes.EventList();  // the Future Events List (FEL)\n  // complete model definition by setting objectTypes and eventTypes if not defined\n  if (!sim.model.objectTypes) sim.model.objectTypes = [];\n  if (!sim.model.eventTypes) sim.model.eventTypes = [];\n  // set timeIncrement for fixed-increment time progression\n  if (sim.model.timeIncrement) {\n    sim.timeIncrement = sim.model.timeIncrement;\n  } else {\n    if (sim.model.OnEachTimeStep) sim.timeIncrement = 1;\n  }\n  if (sim.model.time === \"continuous\") {\n    if (sim.model.timeRoundingDecimalPlaces) {\n      sim.timeRoundingFactor = Math.pow( 10, sim.model.timeRoundingDecimalPlaces);\n    } else {\n      if (sim.timeIncrement) {  // fixed-increment time progression\n        // determine rounding factor\n        x = sim.timeIncrement - Math.trunc( sim.timeIncrement);\n        if (x === 0) sim.timeRoundingFactor = 1;\n        else if (x >= 0.1) sim.timeRoundingFactor = 10;\n        else if (x >= 0.01) sim.timeRoundingFactor = 100;\n        else sim.timeRoundingFactor = 1000;\n      }\n    }\n    // define the minimal time delay until the next moment\n    if (sim.model.nextMomentDeltaT) {\n      sim.nextMomentDeltaT = sim.model.nextMomentDeltaT;\n    } else if (sim.timeRoundingFactor) {\n      sim.nextMomentDeltaT = 1 / sim.timeRoundingFactor;\n    } else {  // default\n      sim.nextMomentDeltaT = 0.000001;\n    }\n  } else {  // discrete time\n    sim.nextMomentDeltaT = 1;\n  }\n  // initialize space model\n  if (sim.model.space.type) oes.space.initialize();\n  // set up a default random variate sampling method\n  if (sim.scenario.randomSeed) {  // use the Mersenne Twister RNG\n    rand = new Random( sim.scenario.randomSeed);\n  } else {  // use the JS built-in RNG\n    rand = new Random();\n  }\n  // initialize experiment(s)\n  if (sim.experiment.replications) {  // an experiment has been defined\n    if (!sim.experiment.parameterDefs) sim.experiment.parameterDefs = [];\n    sim.experiment.parameterDefs.forEach( function (paramDef, i, a) {\n      if (paramDef.constructor !== oes.ExperimentParamDef) {\n        a[i] = new oes.ExperimentParamDef( paramDef);\n      }\n    });\n    if (sim.experiment.constructor !== oes.ExperimentDef) {\n      sim.experiment = new oes.ExperimentDef( sim.experiment);\n    }\n  }\n  if (dbName) oes.setupStorageManagement( dbName);\n};\n/*******************************************************************\n * Initialize a (standalone or experiment scenario) simulation run *\n *******************************************************************/\nsim.initializeSimulationRun = function (expParamSlots, seed) {\n  var logInfo={};\n  var isExperimentRun = expParamSlots !== undefined || seed;\n  sim.step = 0;  // simulation loop steps\n  sim.time = 0;  // simulation time\n  // get ID counter from simulation scenario, or set to default value\n  sim.idCounter = sim.scenario.idCounter || 1000;\n  // set up a default random variate sampling method\n  if (!isExperimentRun && sim.scenario.randomSeed) {  // use the Mersenne Twister RNG\n    rand = new Random( sim.scenario.randomSeed);\n  } else if (seed) {  // experiment-defined replication-specific seed\n    rand = new Random( seed);\n  } else {  // use the JS built-in RNG\n    rand = new Random();\n  }\n  // set up initial state\n  sim.initializeModelVariables( expParamSlots);\n  sim.createInitialObjEvt();\n  if (Object.keys( oes.EntryNode.instances).length > 0) oes.setupProcNetStatistics();\n  if (sim.model.statistics) {\n    // initialize statistics\n    oes.stat.initialize();\n    // create statistics for initial state\n    oes.stat.updateStatistics();\n  }\n  // get stepDuration from simulation config, or set to default value\n  sim.stepDuration = sim.config.stepDuration || 0;\n  // log initial state (visualized before in oes.setupFrontEndSimEnv)\n  if (sim.config.createLog) {\n    logInfo = sim.createStepLogInfo();\n    if (!sim.useWorker) {  // main thread\n      if (typeof sim.logStep === \"function\") sim.logStep( logInfo);\n    } else {  // worker thread\n      self.postMessage({  // send log data to main thread\n        simStep: sim.step,\n        simTime: logInfo.simTime,\n        systemStateInfo: logInfo.systemStateInfo,\n        evtInfo: logInfo.evtInfo\n      });\n    }\n  }\n};\n/*******************************************************\n Run a Standalone Scenario\n********************************************************/\nsim.runScenario = function (useWorker) {\n  var msgRec = {},\n      simTimeTenth = parseInt( sim.scenario.simulationEndTime / 10),\n      nextProgressIncrement = simTimeTenth,\n      areConstraintsToBeChecked = sim.isConstraintCheckingTurnedOn ||\n          sim.isConstraintCheckingTurnedOn === undefined && oes.loadManager &&\n          oes.loadManager.codeLoadingMode !== \"deploy\";\n  if (!useWorker) {  // running in main thread\n    sim.useWorker = false;\n    sim.initializeSimulationRun();\n    sim.runScenarioStep();  // loops by self-invocation via setTimeout\n  } else {  // running in worker thread\n    sim.useWorker = true;\n    sim.initializeSimulationRun();\n    while (sim.time < sim.scenario.simulationEndTime) {\n      sim.runScenarioStep();\n      if (areConstraintsToBeChecked) {\n        oes.checkModelConstraints({log:true});\n        if (oes.isProcNetModel()) oes.checkProcNetConstraints({log:true});\n      }\n      // update the progress bar and the simulation step/time\n      if (sim.time > nextProgressIncrement) {\n        self.postMessage({\n            progressIncrement: 10,\n            simStep: sim.step,\n            simTime: sim.time\n        });\n        nextProgressIncrement += simTimeTenth;\n      }\n      // end simulation if no time increment and no more events\n      if (!sim.timeIncrement && sim.FEL.isEmpty()) {\n        break;\n      }\n    }\n    if (sim.model.statistics) {\n      oes.stat.computeOnlyAtEndStatistics();\n      msgRec.simStat = sim.stat;\n    }\n    self.postMessage( msgRec);\n  }\n};\n/*******************************************************\n Standalone Scenario Simulation Step\n (when executed in main thread, it loops by self-invocation via setTimeout)\n********************************************************/\nsim.runScenarioStep = function (followupEvents) {\n  var nextEvents=[], i=0, j=0,\n      EventClass=null, participantRoles={}, nextExoEvt=null, e=null,\n      nextEvtTime = sim.FEL.getNextOccurrenceTime(),  // 0 if there is no next event\n      stepStartTime = (new Date()).getTime(),\n      totalStepTime = 0, stepDiffTimeDelay = 0,\n      uia = sim.scenario.userInteractions,  // shortcut\n      uiViewModel=null, eventTypeName=\"\", logInfo={};\n  function advanceSimulationTime () {\n    // increment the step counter\n    sim.step += 1;\n    // advance simulation time\n    if (sim.timeIncrement) {  // fixed-increment time progression\n      if (nextEvtTime > sim.time && nextEvtTime < sim.time + sim.timeIncrement) {\n        sim.time = nextEvtTime;\n      } else {\n        sim.time += sim.timeIncrement;\n        if (sim.model.OnEachTimeStep) sim.model.OnEachTimeStep();\n      }\n    } else if (nextEvtTime > 0) {  // next-event time progression\n      sim.time = nextEvtTime;\n    }\n  }\n  //-----------------------------------------------------\n  if (!sim.useWorker) {\n    if (sim.stopRequested) {   // interrupt simulation\n      sim.stopRequested = false;\n      oes.ui.updateUiOnStop();\n      return;\n    }\n    if (sim.time >= sim.scenario.simulationEndTime)  {  // terminate simulation\n      if (sim.model.statistics) oes.stat.computeOnlyAtEndStatistics();\n      oes.ui.updateUiOnSimulationEnd();\n      return;\n    }\n  }\n  if (followupEvents) {  // runScenarioStep was called from user action event handler\n    // schedule follow-up events\n    for (j=0; j < followupEvents.length; j++) {\n      sim.FEL.add( followupEvents[j]);\n    }\n    // clear followUpEvents list\n    followupEvents = [];\n  } else {  // normal invocation of runScenarioStep\n    followupEvents = [];\n    advanceSimulationTime();\n    // update the sim-control UI via the fields' data binding to UI output elements\n    if (!sim.useWorker) {\n      sim.ui[\"sim\"].dataBinding[\"step\"].value = sim.step;\n      sim.ui[\"sim\"].dataBinding[\"time\"].value = sim.time;\n    }\n    // extract and process next events\n    if (sim.time === nextEvtTime) {\n      nextEvents = sim.FEL.removeNextEvents();\n      /*\n      if (nextEvents.length > 1) {\n        console.log(\"nextEvents: \"+ nextEvents[0].occTime +\" + \"+ nextEvents[1].occTime);\n      }\n      */\n      if (nextEvents.length > 1) nextEvents.sort( oes.Event.rank);  // priority order\n      for (i=0; i < nextEvents.length; i++) {\n        e = nextEvents[i];\n        eventTypeName = e.constructor.Name;\n        // retrieve event class\n        EventClass = cLASS[eventTypeName];\n        // test if EventClass represents an exogenous event type\n        if (typeof EventClass.recurrence === \"function\") {\n          // create and schedule next exogenous event\n          if (typeof e.createNextEvent === \"function\") {\n            sim.FEL.add( e.createNextEvent());\n          } else if (EventClass.createNextEvent) {  // old syntax (class-level method)\n            sim.FEL.add( EventClass.createNextEvent( e));\n          } else {\n            //TODO: filter participantRoles in a pre-processing step in initModel\n            //let participantRoles = EventClass.properties;  TODO: for ES6 version\n            participantRoles = EventClass.properties;\n            nextExoEvt = new EventClass();\n            nextExoEvt.occTime = e.occTime + EventClass.recurrence();\n            // copy event participants\n            Object.keys( participantRoles).forEach( function (pR) {\n              nextExoEvt[pR] = e[pR];\n            });\n            sim.FEL.add( nextExoEvt);\n          }\n        }\n        // check if a user interaction has been triggered\n        if (sim.config.userInteractive && uia && uia[eventTypeName]) {\n          // check also the triggering event condition, if defined\n          if (!uia[eventTypeName].trigEvtCondition || uia[eventTypeName].trigEvtCondition(e)) {\n            // make sure that the user interaction triggering event is last in nextEvents list\n            if (i === nextEvents.length - 1) {\n              sim.currentEvents[eventTypeName] = e;\n              uiViewModel = uia[eventTypeName];\n              Object.keys( uiViewModel.outputFields).forEach( function (outFldN) {\n                var fldEl = uiViewModel.dataBinding[outFldN],\n                    val = uiViewModel.outputFields[outFldN].value;\n                if (typeof val === \"function\") fldEl.value = val();\n                else fldEl.value = val || \"\";\n              });\n              uiViewModel.domElem.style.display = \"block\";\n              return;  // interrupt simulator & transfer control to UI\n            } else {\n              util.swapArrayElements( nextEvents, i, length-1);\n            }\n          }\n        }\n        followupEvents = e.onEvent();\n        // render event appearances if defined\n        if (sim.config.visualize && sim.ui.animations && sim.ui.animations[eventTypeName]) {\n          sim.ui.animations[eventTypeName].play();\n        }\n        // schedule follow-up events\n        for (j=0; j < followupEvents.length; j++) {\n          sim.FEL.add( followupEvents[j]);\n        }\n        // clear followUpEvents list\n        followupEvents = [];\n      }\n    }\n  }\n  // update statistics\n  if (sim.model.statistics) oes.stat.updateStatistics();\n  // create simulation log\n  if (sim.config.createLog) {\n    logInfo = sim.createStepLogInfo();\n    if (!sim.useWorker) {  // main thread\n      if (typeof sim.logStep === \"function\") sim.logStep( logInfo);\n    } else {  // worker thread\n      self.postMessage({\n        simStep: sim.step,\n        simTime: logInfo.simTime,\n        systemStateInfo: logInfo.systemStateInfo,\n        evtInfo: logInfo.evtInfo\n      });\n    }\n  }\n  // update state visualization (NOT in worker mode)\n  if (sim.config.visualize) oes.ui.visualizeStep();\n  // compute the time needed for executing this step\n  totalStepTime = (new Date()).getTime() - stepStartTime;\n  // check if we need some delay, because of the stepDuration parameter\n  if (sim.stepDuration > totalStepTime) {\n    stepDiffTimeDelay = sim.stepDuration - totalStepTime\n  } else {\n    stepDiffTimeDelay = 0;\n  }\n  if (!sim.useWorker) {  // main thread\n    // end simulation if no time increment and no more events\n    if (!sim.timeIncrement && sim.FEL.isEmpty()) {\n      if (sim.model.statistics) oes.stat.computeOnlyAtEndStatistics();\n      oes.ui.updateUiOnSimulationEnd();\n      return;\n    } else {\n      // continue simulation loop\n      // in the browser, use setTimeout to prevent script blocking\n      setTimeout( sim.runScenarioStep, stepDiffTimeDelay);\n    }\n  }\n};\n/*******************************************************\n Run an Experiment (in a JS worker)\n ********************************************************/\nsim.runExperiment = function () {\n  var exp = sim.experiment, cp=[], valueSets=[], i=0, j=0, k=0, M=0,\n      N = exp.parameterDefs.length, increm=0, x=0, expPar={},\n      expRunId = (new Date()).getTime(),\n      valueCombination=[], expParamSlots={},\n      tenthRunLength=0,  // a tenth of the total run time\n      nextProgressIncrementStep=0;  // thresholds for updating the progress bar\n  try {\n    sim.storeMan.add( oes.ExperimentRun, {\n      id: expRunId,\n      experimentDef: exp.id,\n      dateTime: (new Date()).toISOString(),\n    });\n  } catch (e) {\n    console.log( JSON.stringify(e));\n  }\n  // create preliminary definitions of implicit PN statistics variables\n  if (oes.isProcNetModel()) {\n    if (!sim.model.statistics[\"arrivedObjects\"]) {\n      sim.model.statistics[\"arrivedObjects\"] = {label:\"Arrived objects\"};\n    }\n    if (!sim.model.statistics[\"departedObjects\"]) {\n      sim.model.statistics[\"departedObjects\"] = {label:\"Departed objects\"};\n    }\n    if (!sim.model.statistics[\"meanTimeInSystem\"]) {\n      sim.model.statistics[\"meanTimeInSystem\"] = {label:\"Mean time in system\"};\n    }\n  }\n  if (N === 0) {  // simple experiment (without parameters)\n    cp = [[]];  // only 1 empty parameter value combination\n    // initialize replication statistics record\n    exp.replicStat = {};\n    Object.keys( sim.model.statistics).forEach( function (varName) {\n      if (sim.model.statistics[varName].label) {  // output statistics\n        exp.replicStat[varName] = [];  // an array per statistics variable\n      }\n    });\n  } else {\n    for (i=0; i < N; i++) {\n      expPar = exp.parameterDefs[i];\n      if (!expPar.values) {\n        // create value set\n        expPar.values = [];\n        increm = expPar.stepSize || 1;\n        for (x = expPar.startValue; x <= expPar.endValue; x += increm) {\n          expPar.values.push( x);\n        }\n      }\n      valueSets.push( expPar.values);\n    }\n    cp = util.cartesianProduct( valueSets);\n  }\n  M = cp.length;  // size of cartesian product\n  tenthRunLength = (M * exp.replications) / 10;\n  nextProgressIncrementStep = tenthRunLength;\n  // loop over all combinations of experiment parameter values\n  for (i=0; i < M; i++) {\n    valueCombination = cp[i];  // a JS array\n    // initialize the scenario record\n    exp.scenarios[i] = {stat:{}};\n    exp.scenarios[i].parameterValues = valueCombination;\n    // initialize experiment scenario statistics\n    Object.keys( sim.model.statistics).forEach( function (varName) {\n      var statVar = sim.model.statistics[varName];\n      if (statVar.label) {  // output statistics\n        if (statVar.property && statVar.objectType &&\n            !statVar.aggregationFunction) {\n          exp.scenarios[i].stat[varName] = {};\n        } else exp.scenarios[i].stat[varName] = 0;\n      }\n    });\n    // create experiment parameter slots for assigning corresponding model variables\n    for (j=0; j < N; j++) {\n      expParamSlots[exp.parameterDefs[j].name] = valueCombination[j];\n    }\n    // run experiment scenario replications\n    for (k=0; k < exp.replications; k++) {\n      if (exp.seeds) {\n        sim.initializeSimulationRun( expParamSlots, exp.seeds[k]);\n      } else {\n        sim.initializeSimulationRun( expParamSlots);\n      }\n      while (sim.time < sim.scenario.simulationEndTime) {\n        sim.runExperimentScenarioStep();\n        if (sim.config.isConstraintCheckingTurnedOn) {\n          oes.checkModelConstraints({log:true});\n          if (oes.isProcNetModel()) {\n            oes.checkProcNetConstraints({log:true, add:\" in repl. \"+ String(k+1)});\n          }\n        }\n        // end simulation if no time increment and no more events\n        if (!sim.timeIncrement && sim.FEL.isEmpty()) break;\n      }\n      oes.stat.computeOnlyAtEndStatistics();\n      if (N > 0) {  // experiment with parameters\n        // for the first replication, initialize experiment scenario statistics\n        if (k === 0) {\n          Object.keys( sim.model.statistics ).forEach( function ( varName ) {\n            if ( sim.model.statistics[ varName ].label ) {  // output statistics\n              exp.scenarios[ i ].stat[ varName ] = 0;\n            }\n          } );\n        }\n        // aggregate replication statistics from sim.stat to sim.experiment.scenarios[i].stat\n        Object.keys( sim.model.statistics).forEach( function (varName) {\n          if (sim.model.statistics[varName].label) {  // output statistics\n            exp.scenarios[i].stat[varName] += sim.stat[varName];\n          }\n        });\n        if (exp.storeEachExperimentScenarioRun) {\n          sim.storeMan.add( oes.ExperimentScenarioRun, {\n            id: expRunId + i * exp.replications + k + 1,\n            experimentRun: expRunId,\n            experimentScenarioNo: i,\n            parameterValueCombination: exp.scenarios[i].parameterValues,\n            outputStatistics: Object.assign({}, sim.stat)  // clone\n          });\n        }\n      } else {  // simple experiment\n        // store replication statistics\n        Object.keys( sim.model.statistics).forEach( function (varName) {\n          if (sim.model.statistics[varName].label) {  // output statistics\n            exp.replicStat[varName][k] = sim.stat[varName];\n          }\n        });\n        sim.storeMan.add( oes.ExperimentScenarioRun, {\n          id: expRunId + i * exp.replications + k + 1,\n          experimentRun: expRunId,\n          outputStatistics: Object.assign({}, sim.stat)  // clone\n        });\n      }\n      // update the progress bar\n      if (i*k > nextProgressIncrementStep) {\n        self.postMessage({progressIncrement: 10});\n        nextProgressIncrementStep += tenthRunLength;\n      }\n    }\n    if (N === 0) {  // simple experiment (without parameters)\n      // aggregate replication statistics in sim.experiment.scenarios[i].stat\n      Object.keys( sim.model.statistics).forEach( function (varName) {\n        if (sim.model.statistics[varName].label) {  // output statistics\n          if (!sim.model.statistics[varName].hasRecordRange) {\n            exp.scenarios[i].stat[varName] = {};\n            Object.keys( oes.stat.summary).forEach( function (aggr) {\n              var aggrF = oes.stat.summary[aggr].f;\n              exp.scenarios[i].stat[varName][aggr] = aggrF( exp.replicStat[varName]);\n            });\n          } else {\n            //TODO: loop over record fields\n          }\n        }\n      });\n    }\n    if (N > 0) {  // experiment with parameters\n      // send statistics to main thread\n      self.postMessage({\n        expScenNo: i,\n        expScenParamValues: exp.scenarios[i].parameterValues,\n        expScenStat: exp.scenarios[i].stat\n      });\n      if (!exp.storeEachExperimentScenarioRun) {\n        // store the average statistics aggregated over all exp. scenario runs\n        try {\n          sim.storeMan.add( oes.ExperimentScenarioRun, {\n            experimentRun: expRunId,\n            experimentScenarioNo: i,\n            parameterValueCombination: exp.scenarios[i].parameterValues,\n            outputStatistics: exp.scenarios[i].stat\n          });\n        } catch (e) {\n          console.log( JSON.stringify(e));\n        }\n      }\n    } else {  // simple experiment (without parameters)\n      // send statistics to main thread\n      self.postMessage({\n        expReplicStat: exp.replicStat,\n        expScenStat: exp.scenarios[i].stat\n      });\n    }\n  }\n  self.postMessage({endOfExp: true});\n};\n/*******************************************************\n Experiment Scenario Simulation Step\n ********************************************************/\nsim.runExperimentScenarioStep = function () {\n  var nextEvents=[], i=0, j=0,\n      EventClass=null, participantRoles={}, nextExoEvt=null, e=null,\n      nextEvtTime = sim.FEL.getNextOccurrenceTime(),  // 0 if there is no next event\n      eventTypeName=\"\", followupEvents=[];\n  function advanceSimulationTime () {\n    // increment the step counter\n    sim.step += 1;\n    // advance simulation time\n    if (sim.timeIncrement) {  // fixed-increment time progression\n      // fixed-increment time progression simulations may also have events\n      if (nextEvtTime > sim.time && nextEvtTime < sim.time + sim.timeIncrement) {\n        sim.time = nextEvtTime;  // an event occurring before the next incremented time\n      } else {\n        sim.time += sim.timeIncrement;\n        if (sim.model.OnEachTimeStep) sim.model.OnEachTimeStep();\n      }\n    } else if (nextEvtTime > 0) {  // next-event time progression\n      sim.time = nextEvtTime;\n    }\n    if (sim.model.time === \"continuous\" && sim.timeRoundingFactor) {\n      sim.time = Math.round( sim.time * sim.timeRoundingFactor) /\n          sim.timeRoundingFactor;\n      nextEvtTime = Math.round( nextEvtTime * sim.timeRoundingFactor) /\n          sim.timeRoundingFactor;\n    }\n  }\n  //-----------------------------------------------------\n  advanceSimulationTime();\n  // extract and process next events\n  if (sim.time === nextEvtTime) {\n    nextEvents = sim.FEL.removeNextEvents();\n    if (nextEvents.length > 1) nextEvents.sort( oes.Event.rank);  // priority order\n    for (i=0; i < nextEvents.length; i++) {\n      e = nextEvents[i];\n      eventTypeName = e.constructor.Name;\n      // retrieve event class\n      EventClass = cLASS[eventTypeName];\n      // does EventClass represent an exogenous event type?\n      if (EventClass.recurrence) {\n        // create and schedule next exogenous event\n        if (e.createNextEvent) {  // new syntax\n          sim.FEL.add( e.createNextEvent());\n        } else if (EventClass.createNextEvent) {  // old syntax (class-level method)\n          sim.FEL.add( EventClass.createNextEvent( e));\n        } else {\n          //TODO: filter participantRoles in a pre-processing step in initModel\n          //let participantRoles = EventClass.properties;  TODO: for ES6 versio\n          participantRoles = EventClass.properties;\n          nextExoEvt = new EventClass();\n          nextExoEvt.occTime = e.occTime + EventClass.recurrence();\n          // copy event participants\n          Object.keys( participantRoles).forEach( function (pR) {\n            nextExoEvt[pR] = e[pR];\n          });\n          sim.FEL.add( nextExoEvt);\n        }\n      }\n      followupEvents = e.onEvent();\n      // schedule follow-up events\n      for (j=0; j < followupEvents.length; j++) {\n        sim.FEL.add( followupEvents[j]);\n      }\n      // clear followUpEvents list\n      followupEvents = [];\n    }\n  }\n  // update statistics\n  if (sim.model.statistics) oes.stat.updateStatistics();\n};\n/*******************************************************\n Create step log info\n ********************************************************/\nsim.createStepLogInfo = function () {\n  var simTime = sim.model.time === \"continuous\" && sim.timeRoundingFactor ?\n      Math.round( sim.time * sim.timeRoundingFactor) / sim.timeRoundingFactor :\n      sim.time;\n  var systemStateInfo = Object.keys( sim.v).reduce( function (serialization, varName, i) {\n    var varDecl = sim.model.v[varName], slotSerialization=\"\";\n    if (varDecl.shortLabel) {\n      slotSerialization = varDecl.shortLabel +\": \"+ sim.v[varName];\n      return i>0 ? serialization +\", \"+ slotSerialization : slotSerialization;\n    } else return serialization;\n  }, \"\");\n  if (systemStateInfo && Object.keys( sim.objects).length > 0) systemStateInfo += \", \";\n  systemStateInfo += Object.keys( sim.objects).reduce( function (serialization, objIdStr, i) {\n    var o = sim.objects[objIdStr];\n    if (o.shortLabel || o.constructor.shortLabel) {\n      return i>0 ? serialization +\", \"+ o.toLogString() : o.toLogString();\n    } else return serialization;\n  }, \"\");\n  return {simTime: String(simTime), systemStateInfo: systemStateInfo, evtInfo: sim.FEL.toString()}\n};\n/**\n * @fileOverview User interface variables and procedures\n * @copyright Copyright 2016 Gerd Wagner and Mircea Diaconescu, BTU (Germany) + ODU (VA, USA)\n * @author Gerd Wagner\n * @license The MIT License (MIT)\n */\n\n/*\nImprovements/extensions\n- format percentages with new Intl.NumberFormat('de-DE',{style:\"percent\",maximumFractionDigits:1}).format( number)\n\n*/\n\nvar oes = oes || {};\noes.ui = oes.ui || {};\noes.ui.vis = {SVG:{}};  // name space for generic UI procedures/functions\nsim.ui = sim.ui || {};  // name space for scenario/model-specific UI settings\n\n// flag used to create UI variations for Client or Server version of the simulation\noes.ui.fullUI = true;\n\n/*******************************************************\n * Create the Model Menu with a \"Narrative\", \"Description\" and \"Code\" button.\n *******************************************************/\noes.ui.createModelMenu = function() {\n  var downloadLink=null, closeBtn=null,\n      menuEl = document.getElementById(\"model-menu\"),\n      el=null,\n      simPageUrl = window.location.href,\n      pos=0, tail=\"\";\n  pos = simPageUrl.indexOf(\"simulation.html\");\n  if (pos === -1) {\n    pos = simPageUrl.indexOf(\"index.html\");\n  }\n  if (pos > -1) {\n    sim.ui.simFolderPath = simPageUrl.substring( 0, pos);\n  } else {\n    pos = simPageUrl.lastIndexOf(\"/\");\n    if (pos === simPageUrl.length-1) {  // last character is a slash\n      sim.ui.simFolderPath = simPageUrl;\n    }\n    else {\n      sim.ui.simFolderPath = simPageUrl.substring( 0, pos+1);\n      // accept paths that end with a simulation number\n      tail = simPageUrl.substring( pos+1);\n      if (/\\d*/.test( tail)) sim.ui.simFolderPath += tail + \"/\";\n    }\n  }\n  sim.ui.showCodeElems = {};  // map of UI elements for showing code\n  // create showCode form element\n  el = document.createElement(\"form\");\n  el.id = \"showCodeForm\";\n  el.style.display = \"none\";\n  el.innerHTML = \"<span class='closeButton'>&times;</span><p>\" +\n      i18n.t(\"Show code of...\") + \"</p><select><option>\"+ i18n.t(\"-- choose file --\") +\n      \"</option></select><p id='download'></p></form>\";\n  menuEl.appendChild( el);\n  document.getElementById(\"download\").innerHTML = i18n.t(\"Or <a>download all</a>\");\n  downloadLink = document.querySelector(\"#showCodeForm a\");\n  downloadLink.href = sim.ui.simFolderPath + \"Download.zip\";\n  downloadLink.title = i18n.t(\"Download simulation code\");\n  closeBtn = document.querySelector(\"#showCodeForm span.closeButton\");\n  closeBtn.addEventListener(\"click\", function () {\n    document.getElementById(\"showCodeBtn\").style.display = \"inline\";\n    document.getElementById(\"showCodeForm\").style.display = \"none\";\n  });\n  // create space size def. activation button\n  if (sim.model.space.type) {\n    if (!document.getElementById(\"spaceSizeDefBtn\")) {\n      el = document.createElement(\"button\");\n      el.id = \"spaceSizeDefBtn\";\n      el.textContent = i18n.t(\"Space\");\n      el.onclick = oes.ui.showSpaceSizeDefUI;\n      menuEl.appendChild( el);\n    }\n  }\n};\noes.ui.showNarrative = function() {\n  var narrativeEl=null;\n  if (!sim.ui.narrativeEl) {\n    narrativeEl = document.createElement(\"div\");\n    narrativeEl.innerHTML = sim.model.systemNarrative;\n    sim.ui.narrativeEl = dom.createModal({\n      fromElem: narrativeEl,\n      title: i18n.t(\"System Narrative\")\n    });\n  }\n  document.getElementById(\"overlay\").style.display = \"block\";\n  sim.ui.narrativeEl.style.display = \"block\";\n};\noes.ui.showDescription = function() {\n  var descrEl=null;\n  if (!sim.ui.descriptionEl) {\n    descrEl = document.createElement(\"div\");\n    descrEl.innerHTML = sim.scenario.shortDescription || sim.model.shortDescription;\n    sim.ui.descriptionEl = dom.createModal({\n      fromElem: descrEl,\n      title: i18n.t(\"Model Description\")\n    });\n  }\n  document.getElementById(\"overlay\").style.display = \"block\";\n  sim.ui.descriptionEl.style.display = \"block\";\n};\noes.ui.showCode = function() {\n  var showCodeBtn = document.getElementById(\"showCodeBtn\"),\n      showCodeForm = document.getElementById(\"showCodeForm\"),\n      codeFileSelEl = document.querySelector(\"#showCodeForm > select\"),\n      showCodeEl=null;\n  if (!sim.ui.simFolderPath) {\n    console.log(\"Cannot show code since folder path is not available!\");\n    return;\n  }\n  showCodeBtn.style.display = \"none\";\n  showCodeForm.style.display = \"inline-block\";\n  if (codeFileSelEl.length === 1) {  // have options not yet been created?\n    codeFileSelEl.appendChild(\n        dom.createOption({text:\"simulation.js\", value:\"simulation\"}));\n    if (sim.model.objectTypes) {\n      sim.model.objectTypes.forEach( function (objT) {\n        codeFileSelEl.appendChild( dom.createOption({text: objT + \".js\", value: objT}));\n      });\n    }\n    if (sim.model.eventTypes) {\n      sim.model.eventTypes.forEach( function (evtT) {\n        codeFileSelEl.appendChild( dom.createOption({text: evtT + \".js\", value: evtT}));\n      });\n    }\n    if (sim.model.activityTypes) {\n      sim.model.activityTypes.forEach( function (actT) {\n        codeFileSelEl.appendChild( dom.createOption({text: actT + \".js\", value: actT}));\n      });\n    }\n    codeFileSelEl.addEventListener(\"change\", function () {\n      var fileName = codeFileSelEl.value;\n\n      function showCode( txt) {\n        var showCodeEl=null;\n        if (!sim.ui.showCodeElems[fileName]) {\n          showCodeEl = document.createElement(\"div\");\n          showCodeEl.innerHTML = \"<pre><code class='language-javascript'>\"+ txt +\"</code></pre>\";\n          sim.ui.showCodeElems[fileName] = dom.createModal({\n            fromElem: showCodeEl,\n            title: i18n.t(\"JavaScript code of \") + fileName +\".js\",\n            width: \"50em\"});\n        }\n        if (typeof Prism === \"object\") Prism.highlightAll();  // run the Prism syntax highligter\n        document.getElementById(\"overlay\").style.display = \"block\";\n        sim.ui.showCodeElems[fileName].style.display = \"block\";\n      }\n\n      if (fileName) {  // a choice has been made\n        fetch( sim.ui.simFolderPath + fileName + \".js\")\n            .then( function (response) {\n              return response.text().then( showCode);\n            })\n      }\n    });\n  }\n};\n/*******************************************************\n UI for Space Definition\n *******************************************************/\noes.ui.showSpaceSizeDefUI = function () {\n  var menuEl = document.getElementById(\"model-menu\"),\n      spaceSizeDefBtn = document.getElementById(\"spaceSizeDefBtn\"),\n      spaceSizeDefForm = document.getElementById(\"spaceSizeDefForm\"),\n      closeBtn=null;\n  if (!spaceSizeDefForm) {\n    // create space size def. form panel element\n    spaceSizeDefForm = document.createElement(\"form\");\n    spaceSizeDefForm.id = \"spaceSizeDefForm\";\n    spaceSizeDefForm.innerHTML = \"<span class='closeButton'>&times;</span>\";\n    spaceSizeDefForm.style.display = \"none\";\n    menuEl.appendChild( spaceSizeDefForm);\n    closeBtn = document.querySelector(\"#spaceSizeDefForm span.closeButton\");\n    closeBtn.addEventListener(\"click\", function () {\n      spaceSizeDefBtn.style.display = \"inline\";\n      spaceSizeDefForm.style.display = \"none\";\n    });\n    sim.ui[\"space\"] = new oBJECTvIEW({\n      modelObject: sim.model.space,\n      fields: [[\"xMax\", \"yMax\", \"zMax\"].slice(0,\n          oes.space.dimensions[sim.model.space.type])],\n      suppressNoValueFields: false,\n      heading: i18n.t(\"Space Size\"),\n      userActions: {\n        \"applyChanges\": function () {\n          sim.updateInitialStateObjects();\n          oes.ui.resetCanvas();\n          // visualize initial state (at start of step 0)\n          if (sim.config.visualize) oes.ui.visualizeStep();\n        }\n      }\n    });\n    sim.ui[\"space\"].userActions[\"applyChanges\"].label = i18n.t(\"Apply changes\");\n    // render view in modalBodyEl and store its data binding\n    sim.ui[\"space\"].dataBinding = sim.ui[\"space\"].render( spaceSizeDefForm);\n  }\n  spaceSizeDefBtn.style.display = \"none\";\n  spaceSizeDefForm.style.display = \"inline-block\";\n};\n/*******************************************************\n * Create the UI page footer.\n *******************************************************/\noes.ui.createPageFooter = function() {\n  var created = new Date( sim.model.created),\n      modified = new Date( sim.model.modified),\n      mainEl = document.querySelector(\"body > main\"),\n      license = sim.model.license || oes.defaults.license,\n      licenseLinks=[], el=null,\n      contributions = !sim.model.contributors ? \"\" :\n          \", \"+ i18n.t(\"with contributions by\") +\" \"+ sim.model.contributors,\n      artworkCredits = !sim.config.artworkCredits ? \"\" :\n          \" | <a href='#' title='\"+ sim.config.artworkCredits + \"'>\" +\n          i18n.t(\"Artwork Credits\") + \"</a>\";\n  var dateFmt = new Intl.DateTimeFormat( i18n.accessLang || \"en-US\");\n  licenseLinks[\"CC BY\"] = \"https://creativecommons.org/licenses/by/4.0/\";\n  licenseLinks[\"CC BY-SA\"] = \"https://creativecommons.org/licenses/by-sa/4.0/\";\n  licenseLinks[\"CC BY-NC\"] = \"https://creativecommons.org/licenses/by-nc/4.0/\";\n  if (licenseLinks[license]) {\n    license = \"<a href='\"+ licenseLinks[license] +\"'>\"+ license +\"</a>\";\n  }\n  if (!document.querySelector(\"body > footer\")) {\n    el = document.createElement(\"footer\");\n    el.innerHTML = \"<hr/><p>&copy; \"+ sim.model.creator +\" (\"+ license +\"), \" +\n        i18n.t(\"created on\") +\" \"+ dateFmt.format( created) +\", \"+\n        i18n.t(\"last modified on\") +\" \"+ dateFmt.format( modified) + contributions +\n        artworkCredits + \" | <a href='https://sim4edu.com/credits.html'>\" + i18n.t(\"OESjs Credits\") +\"</a>\";\n    // insert footer after body > main\n    dom.insertAfter( el, mainEl);\n  }\n};\n\n/*******************************************************\n Set up the simulation UI\n *******************************************************\n * @method\n * @author Gerd Wagner\n */\noes.ui.setupUI = function () {\n  var el=null, el2=null,\n      mainEl = document.querySelector(\"body > main\"),\n      statistics = sim.model.statistics,\n      createTimeSeriesChart = false;\n  oes.ui.timeUnitLabels = {\"ms\":\"milliseconds\", \"s\":\"seconds\", \"m\":\"minutes\", \"h\":\"hours\",\n      \"D\":\"Days\", \"W\":\"Weeks\", \"M\":\"Months\", \"Y\":\"Years\"};\n  /*********************************************************************\n   Create title/headings\n   **********************************************************************/\n  // Set HTML title\n  if (!document.title){\n    document.title = \"OES - \" + (sim.scenario.name || sim.model.name);\n  }\n  //oes.ui.createFrontMatter();\n  oes.ui.createModelMenu();  // rendered underneath the model title\n  /*********************************************************************\n   Set up UI for simulation scenario information\n   *********************************************************************/\n  try {\n    sim.ui[\"scenario\"] = new oBJECTvIEW({\n      heading: sim.scenario.title ? sim.scenario.title : i18n.t(\"Default scenario\"),\n      modelObjects: {\"scenario\":sim.scenario, \"model\":sim.model, \"config\":sim.config},\n      fields: [[\"scenario.simulationEndTime\", \"config.stepDuration\", \"config.createLog\", \"config.visualize\"]],\n      userActions: {\n        \"run\": function () {\n          var statFormEl = document.forms[\"expost-statistics\"],\n              expFormEl = document.forms[\"experiment\"],\n              locale = i18n.accessLang ? i18n.accessLang : \"en-US\",\n              numFmt = new Intl.NumberFormat( locale),\n              statGraphWidth=0, worker=null, msg={}, changedModelVarValues={};\n          var progressContainer = dom.createProgressBar(i18n.t(\"Executing the simulation scenario...\"));\n          document.body.appendChild( progressContainer);\n          // log simulation start time (in the main thread)\n          sim.startTime = (new Date()).getTime();\n          // drop experiment form\n          if (expFormEl) expFormEl.remove();\n          // hide simulation parameters and show simulator controls\n          document.forms[\"scenario\"].style.display = \"none\";\n          document.forms[\"sim\"].style.display = \"block\";\n          // show simulation log table\n          if (sim.config.createLog && oes.ui.fullUI) {\n            oes.ui.setupSimLog();\n          }\n          // disable continue and reset buttons\n          document.forms[\"sim\"].elements[\"continue\"].disabled = true;\n          document.forms[\"sim\"].elements[\"restart\"].disabled = true;\n          // compute statistics compression factor\n          if (statistics) {\n            // since the width is not reported when display=none, we need to reset display\n            statFormEl.style.display = \"block\";\n            statGraphWidth = parseInt( getComputedStyle( statFormEl).width);\n            statFormEl.style.display = \"none\";\n            oes.stat.prepareTimeSeriesCompression( statGraphWidth);\n          }\n          if (window.Worker && !sim.config.visualize) {\n            // start the scenario simulation worker\n            worker = new Worker(\"simulation-worker.js\");\n            msg = {runExperiment: false, endTime: sim.scenario.simulationEndTime,\n              createLog: sim.config.createLog};\n            Object.keys( sim.model.v).forEach( function (varName) {\n              if (sim.model.v[varName].value !== undefined) {\n                changedModelVarValues[varName] = sim.model.v[varName].value;\n              }\n            });\n            if (Object.keys( changedModelVarValues).length > 0) {\n              msg.changedModelVarValues = changedModelVarValues;\n            }\n            worker.postMessage( msg);\n            // on incoming messages from worker\n            worker.onmessage = function (e) {\n              // update progress bar\n              if (e.data.progressIncrement !== undefined) {\n                document.querySelector(\"#progress-container > progress\").value +=\n                    e.data.progressIncrement;\n                // update step/time info only when updating the progress bar\n                sim.ui[\"sim\"].dataBinding[\"step\"].value = numFmt.format( e.data.simStep);\n                sim.ui[\"sim\"].dataBinding[\"time\"].value = numFmt.format( e.data.simTime);\n              } else if (e.data.simTime !== undefined) {\n                // receive step log message\n                sim.logStep( e.data);\n              } else if (e.data.simStat !== undefined) {\n                // receive ex post statistics at simulation end\n                sim.stat = e.data.simStat;\n                oes.ui.updateUiOnSimulationEnd();\n              }\n            };\n          } else {  // start main thread simulator\n            sim.runScenario();\n          }\n        },\n        \"run step\": function () {\n          alert(\"Single step mode is not yet implemented!\");\n        },\n        \"defineExperiment\": function () {\n          var experimentsUiPanelEl = document.getElementById(\"experimentsUI\"),\n              mainContentEl = null;\n          if (experimentsUiPanelEl) {\n            mainContentEl = experimentsUiPanelEl.lastElementChild;\n          } else return;\n          experimentsUiPanelEl.style.display = \"block\";\n          // display the panel's main content element\n          mainContentEl.style.display = \"block\";\n          // hide +Experiment button\n          document.forms[\"scenario\"].defineExperiment.style.display = \"none\";\n          try {\n            sim.experiment.experimentNo = 1;\n            sim.ui[\"experiments\"] = new oBJECTvIEW({\n              modelObject: sim.experiment,\n              //fields: [[\"experimentNo\", \"title\", \"replications\", \"parameters\"]],\n              fields: [[\n                {name: \"experimentNo\",\n                  label: sim.experiment.properties[\"experimentNo\"].label,\n                  range: sim.experiment.properties[\"experimentNo\"].range,\n                  inputOutputMode: \"O\"},\n                \"experimentTitle\", \"replications\", \"parameterDefs\"]],\n              suppressNoValueFields: false,\n              userActions: {\n                \"save\": function () {\n                  alert(\"Sorry! Defining new experiments is not yet implemented!\");\n                }\n              }\n            });\n            /* sim.ui[\"experiments\"].userActions[\"save\"].label = \"Save\"; */\n            // render view and store its data binding\n            sim.ui[\"experiments\"].dataBinding = sim.ui[\"experiments\"].render( mainContentEl);\n          } catch (e) {\n            console.log( e.constructor.name +\": \"+ e.message);\n          }\n        }\n      }\n    });\n  } catch (e) {\n    console.log( e.constructor.name +\": \"+ e.message);\n  }\n  sim.ui[\"scenario\"].userActions[\"run\"].label = \"►\";\n  sim.ui[\"scenario\"].userActions[\"run\"].hint = i18n.t(\"Run simulation scenario\");\n  sim.ui[\"scenario\"].userActions[\"run step\"].label = \"⏯\";  // = \\u23EF = \"&#9199;\"\n  sim.ui[\"scenario\"].userActions[\"run step\"].hint = i18n.t(\"Execute a single simulation step\");\n  sim.ui[\"scenario\"].userActions[\"defineExperiment\"].label = i18n.t(\"+Experiment\");\n  sim.ui[\"scenario\"].userActions[\"defineExperiment\"].hint = i18n.t(\"Define an experiment\");\n  sim.ui[\"scenario\"].userActions[\"defineExperiment\"].showCondition = function () {\n    return !sim.experiment.replications;\n  };\n  // render the view and store its databinding\n  sim.ui[\"scenario\"].dataBinding = sim.ui[\"scenario\"].render( mainEl);\n  // show simulation time unit\n  el = document.querySelector(\"form#scenario input[name*='simulationEndTime']\");\n  if (sim.model.timeUnit) {\n    el2 = document.createElement(\"span\");\n    el2.title = oes.ui.timeUnitLabels[sim.model.timeUnit];\n    el2.textContent = sim.model.timeUnit;\n    dom.insertAfter( el2, el);\n  }\n  // show step duration time unit (ms)\n  el = document.querySelector(\"form#scenario input[name*='stepDuration']\");\n  if (el) dom.insertAfter( document.createTextNode(\" ms\"), el);\n\n  /*********************************************************************\n   Set up UI for showing/modifying model variables within scenario UI\n   **********************************************************************/\n  if (Object.keys( sim.model.v).length > 0) {\n    oes.ui.setupModelVariablesUI( document.forms[\"scenario\"]);\n  }\n  // possibly re-create initial objects/events\n  if (!(sim.scenario.initialState.objects && sim.scenario.initialState.events) &&\n      typeof sim.scenario.setupInitialState === \"function\") {\n    sim.scenario.setupInitialState();\n  }\n  /*********************************************************************\n   Set up UI for modifying the initial objects within scenario UI\n   **********************************************************************/\n  if (Object.keys( sim.objects).length > 0 && !sim.config.suppressInitialStateUI) {\n    oes.ui.setupInitialObjectsUI( document.forms[\"scenario\"]);\n  }\n  /*********************************************************************\n   Set up UI for modifying the initial events within scenario UI\n  **********************************************************************/\n  if (!sim.FEL.isEmpty() && !sim.config.suppressInitialStateUI) {\n    oes.ui.setupInitialEventsUI( document.forms[\"scenario\"]);\n  }\n  /*********************************************************************\n   Set up UI for defining/modifying experiments within scenario UI\n  **********************************************************************/\n  if (sim.experiment.replications && !sim.config.suppressExperimentsUI) {\n    oes.ui.setupExperimentsUI( document.forms[\"scenario\"]);\n  }\n\n  /*********************************************************************\n   Simulator Control UI\n   *********************************************************************/\n  try {\n    sim.ui[\"sim\"] = new oBJECTvIEW({\n      modelObject: sim,\n      fields: [[\n        { name:\"step\", inputOutputMode:\"O\"},  // property-based\n        { name:\"time\", inputOutputMode:\"O\"}   // property-based\n      ]],\n      suppressNoValueFields: false,  // always render fields (even without a value)\n      userActions: {\n        \"stop\": function () {\n          sim.stopRequested = true;\n        },\n        \"continue\": function () {\n          document.forms[\"sim\"].elements[\"stop\"].disabled = false;\n          sim.runStep();\n        },\n        \"restart\": function () {\n          document.getElementById(\"sim\").remove();\n          [\"scenario\",\"experiment\",\"visCanvas\",\"expost-statistics\",\"simLogTbl\"].forEach( function (elemID) {\n            if (document.getElementById( elemID)) document.getElementById( elemID).remove();\n          });\n          //oes.ui.reset();\n          document.getElementsByTagName(\"footer\")[0].remove();\n          oes.setupFrontEndSimEnv();\n        }\n      }\n    });\n    sim.ui[\"sim\"].userActions[\"stop\"].label = \"⏹\";  // = \"&#9209;\"\n    sim.ui[\"sim\"].userActions[\"stop\"].hint = i18n.t(\"Stop simulation\");\n    sim.ui[\"sim\"].userActions[\"continue\"].label = \"►\";  // = \"&#9654;\"\n    sim.ui[\"sim\"].userActions[\"continue\"].hint = i18n.t(\"Continue simulation\");\n    sim.ui[\"sim\"].userActions[\"restart\"].label = \"⏮\";  // = \"&#9198;\"\n    sim.ui[\"sim\"].userActions[\"restart\"].hint = i18n.t(\"Restart simulation\");\n    // render view and store its data binding\n    sim.ui[\"sim\"].dataBinding = sim.ui[\"sim\"].render( mainEl);\n    el = document.querySelector(\"form#sim output[name*='time']\");\n    if (sim.model.timeUnit) {\n      dom.insertAfter( document.createTextNode(\" \"+ sim.model.timeUnit), el);\n    }\n    document.forms[\"sim\"].style.display = \"none\";\n  } catch (e) {\n    console.log( e.constructor.name +\": \"+ e.message);\n  }\n  /*********************************************************************\n   Set up UIs for Visualization, Event Appearances and User Interaction\n   **********************************************************************/\n  if (sim.config.visualize) {\n    oes.ui.setupVisualization();\n    if (sim.config.observationUI.eventAppearances &&\n        Object.keys( sim.config.observationUI.eventAppearances).length > 0) {\n      oes.ui.setupEventAppearances();\n    }\n    if (sim.scenario.userInteractions &&\n        Object.keys( sim.scenario.userInteractions).length > 0 &&\n        sim.config.userInteractive) {\n      oes.ui.setupUserInteraction();\n    }\n  } else sim.config.userInteractive = false;  // no visual. implies no usr interaction\n  //TODO: set up UI for ex-post statistics using oBJECTvIEW\n  /*\n   try {\n   sim.ui[\"expoststat\"] = new oBJECTvIEW({\n   modelObject: sim.model.statistics,\n   suppressNoValueFields: false,\n   userActions: {\n   }\n   });\n   // render view and store its data binding\n   sim.ui[\"expoststat\"].dataBinding = sim.ui[\"expoststat\"].render();\n   document.forms[\"expoststat\"].style.display = \"none\";\n   } catch (e) {\n   console.log( e.constructor.name +\": \"+ e.message);\n   }\n   */\n  /*********************************************************************\n   Set up UI for ex-post statistics\n   **********************************************************************/\n  if (statistics) {\n    el = dom.createElement(\"form\", {id:\"expost-statistics\"});\n    el.style.overflowX = \"auto\";  // horizontal scrolling\n    Object.keys( statistics).forEach( function (statVar) {\n      var lbl = statistics[statVar].label, contEl=null;\n      if (lbl) {\n        // turn it on when there is at least one showTimeSeries variable\n        createTimeSeriesChart |= statistics[statVar].showTimeSeries;\n        if (!statistics[statVar].showTimeSeries) {\n          contEl = dom.createElement(\"div\", {classValues:\"I-O-field\"});\n          contEl.appendChild( dom.createLabeledOutputField({\n            name: statVar, labelText: i18n.t( lbl)}));\n          el.appendChild( contEl);\n        }\n      }\n    });\n    dom.insertAfter( el, document.forms[\"sim\"]);\n    document.forms[\"expost-statistics\"].style.display = \"none\";\n    if (createTimeSeriesChart) {\n      el = dom.createElement(\"div\", {id:\"time-series-chart\"});\n      document.forms[\"expost-statistics\"].appendChild( el);\n    }\n  }\n  // hide UI components that are not relevant for backend simulations\n  if (!oes.ui.fullUI) {\n    el.style.display = \"none\";\n    document.forms[\"sim\"].elements[\"stop\"].style.display = \"none\";\n    document.forms[\"sim\"].elements[\"continue\"].style.display = \"none\";\n  }\n  oes.ui.createPageFooter();\n};\n/*********************************************************************\n Set up the simulation/experiment log (create initially empty log table)\n **********************************************************************/\noes.ui.setupSimLog = function (isExperiment) {\n  var el = document.getElementById(\"simLogTbl\"),\n      mainEl = document.querySelector(\"body > main\"),\n      N=0, statVarHeadings=\"\", colHeadingsRow=\"\", M=0;\n  if (!el) {\n    el = document.createElement(\"table\");\n    el.id = \"simLogTbl\";\n    mainEl.appendChild( el);\n  }\n  if (isExperiment) {\n    el.classList.add(\"expStatistics\")\n    Object.keys( sim.model.statistics).forEach( function (v) {\n      var unit=\"\", label = sim.model.statistics[v].label;\n      if (label) {\n        unit = sim.model.statistics[v].unit;\n        if (unit) unit = \" [\"+ unit +\"]\";\n        else unit = \"\";\n        N = N+1;\n        statVarHeadings += \"<th>\"+ label+unit +\"</th>\";\n      }\n    })\n    if (sim.experiment.parameterDefs.length > 0) {\n      colHeadingsRow = \"<tr><th rowspan='2'>\"+ i18n.t(\"Experiment scenario\") +\n          \"</th><th rowspan='2'>\"+ i18n.t(\"Parameter values\") +\"</th>\" +\n          \"<th colspan='\"+ N +\"'>\"+ i18n.t(\"Statistics\") +\"</th></tr>\";\n      M = 2;\n    } else {\n      colHeadingsRow = \"<tr><th rowspan='2'>\"+ i18n.t(\"Replication\") +\"</th>\" +\n          \"<th colspan='\"+ N +\"'>\"+ i18n.t(\"Statistics\") +\"</th></tr>\";\n      M = 1;\n    }\n    el.innerHTML = \"<thead><tr><th colspan='\"+ (M+N) + \"'>\" +\n        i18n.t(\"Experiment Log\") +\"</th></tr>\" +\n        colHeadingsRow + \"<tr>\"+ statVarHeadings +\"</tr></thead>\";\n  } else {\n    el.innerHTML = \"<thead><tr><th colspan='4'>\"+ i18n.t(\"Simulation Log\") +\"</th></tr>\" +\n        \"<tr><th colspan='2'>\"+ i18n.t(\"Time\") +\"</th><th>\"+ i18n.t(\"System State\") +\n        \"</th><th>\"+ i18n.t(\"Future Events\") +\"</th></tr></thead>\";\n  }\n  sim.ui.logEl = dom.createElement(\"tbody\",{id:\"simLog\"});\n  el.appendChild( sim.ui.logEl);\n  el.style.overflowX = \"auto\";  // horizontal scrolling\n}\n\n/*******************************************************\n Reset front-end simulation environment\n *******************************************************\n * @method\n * @author Gerd Wagner\n */\noes.ui.reset = function () {\n  // display/hide UI panels\n  document.forms[\"scenario\"].style.display = \"block\";\n  document.forms[\"sim\"].style.display = \"none\";\n  if (document.forms[\"expost-statistics\"]) {\n    document.forms[\"expost-statistics\"].style.display = \"none\";\n  }\n  // enable/disable user action buttons\n  document.forms[\"sim\"].elements[\"stop\"].disabled = false;\n  document.forms[\"sim\"].elements[\"continue\"].disabled = false;\n  // reset simulation log table\n  sim.ui.logEl.parentNode.style.display = \"none\";\n  sim.ui.logEl.innerHTML = \"\";\n};\n/*******************************************************\n Update Simulation UI on Stop\n *******************************************************\n * @method\n * @author Gerd Wagner\n */\noes.ui.updateUiOnStop = function () {\n  // enable/disable user action buttons\n  document.forms[\"sim\"].elements[\"stop\"].disabled = true;\n  document.forms[\"sim\"].elements[\"continue\"].disabled = false;\n  document.forms[\"sim\"].elements[\"restart\"].disabled = false;\n};\n/*******************************************************\n Update Simulation UI on Simulation End\n *******************************************************\n * @method\n * @author Gerd Wagner\n */\noes.ui.updateUiOnSimulationEnd = function ( isExperiment) {\n  document.getElementById(\"progress-container\").remove();\n  // log simulation time\n  console.log(\"Execution time: \", ((new Date()).getTime() - sim.startTime) + \" ms\");\n  // enable/disable user action buttons\n  document.forms[\"sim\"].elements[\"stop\"].disabled = true;\n  document.forms[\"sim\"].elements[\"continue\"].disabled = true;\n  document.forms[\"sim\"].elements[\"restart\"].disabled = false;\n  if (!isExperiment) {\n    if (sim.model.statistics) {\n      document.forms[\"expost-statistics\"].style.display = \"block\";\n      oes.ui.showExPostStatistics();\n    }\n  }\n};\n/*******************************************************\n Show Ex-Post Statistics\n *******************************************************\n * @method\n * @author Gerd Wagner\n */\noes.ui.showExPostStatistics = function () {\n  var statistics = sim.model.statistics,\n      chart=null, displayStr=\"\",\n      locale = i18n.accessLang ? i18n.accessLang : \"en-US\",\n      numFmt = new Intl.NumberFormat( locale, {maximumFractionDigits:2}),\n      showTimeSeries=false,\n      height=0, minusX=0, minusY= 0,\n      width = sim.scenario.simulationEndTime,\n      chartLabels = [];\n  var chartSeries = [], dataT = [];\n  // determine maximum time series value\n  Object.keys( statistics).forEach( function (varName) {\n    if (statistics[varName].showTimeSeries) {\n      showTimeSeries = true;\n      if (sim.timeIncrement !== undefined) {  // fixed-increment time progression\n        height = Math.max( height, Array.max( sim.stat.timeSeries[varName]));\n      } else {  // next-event time progression\n        height = Math.max( height, Array.max( sim.stat.timeSeries[varName][1]));\n      }\n    }\n  });\n  height += height * 0.05;\n  minusX = -width/20;\n  minusY = -height/15;\n  Object.keys( statistics).forEach( function (varName) {\n    var lbl = statistics[varName].label,\n        decPl = 2,  // default\n        i=0, n=0,\n        legendLabel = '';\n    var dataY=[];\n    if (lbl) {\n      if (statistics[varName].showTimeSeries) {\n        legendLabel = i18n.t( lbl) || varName;\n        if (statistics[varName].unit)\n          legendLabel += \" (\" + statistics[varName].unit + \")\";\n        chartLabels.push( legendLabel);\n        if (sim.timeIncrement) {  // fixed-increment time progression\n          dataY = sim.stat.timeSeries[varName];\n          width = dataY.length;\n          n = dataY.length;\n          dataT = [];\n          for (i=0; i < n; i++) {\n            dataT.push(i * sim.timeIncrement * oes.stat.timeSeriesCompressionSteps);\n          }\n        } else {  // next-event time progression\n          dataT = sim.stat.timeSeries[varName][0];\n          dataY = sim.stat.timeSeries[varName][1];\n          n = dataT.length;\n          width = dataT[n-1];  // simulation end time\n        }\n        chartSeries.push({name: legendLabel, data: dataY});\n      } else {\n        /*\n        if (!statistics[varName].hasIntegerRange) {\n          if (statistics[varName].decimalPlaces) {\n            decPl = statistics[varName].decimalPlaces;\n          }\n          displayStr = sim.stat[varName].toFixed( decPl);\n        } else displayStr = String( sim.stat[varName]);\n        */\n        if (statistics[varName].decimalPlaces) {\n          decPl = statistics[varName].decimalPlaces;\n          displayStr = new Intl.NumberFormat( locale, {maximumFractionDigits: decPl}).\n              format( sim.stat[varName]);\n        } else displayStr = numFmt.format( sim.stat[varName]);\n        if (statistics[varName].unit) displayStr += \" \" + statistics[varName].unit;\n        document.forms[\"expost-statistics\"].elements[varName].value = displayStr;\n      }\n    }\n  });\n  // show resource utilization statistics\n  if (sim.stat.resUtil && Object.keys( sim.stat.resUtil).length > 0) {\n    document.forms[\"expost-statistics\"].appendChild(\n        dom.createElement(\"h2\", {content: i18n.t(\"Resource Utilization\")})\n    );\n    Object.keys( sim.stat.resUtil).forEach( function (actT) {\n      var activityTypeLabel = cLASS[actT].label || actT;\n      document.forms[\"expost-statistics\"].appendChild(\n          dom.createElement(\"h3\", {content: i18n.t(activityTypeLabel)})\n      );\n      Object.keys( sim.stat.resUtil[actT]).forEach( function (objIdStr) {\n        //console.log(objIdStr +\": \"+ sim.stat.resUtil[actT][objIdStr]/sim.time);\n        var objName = sim.objects[objIdStr].name || objIdStr,\n            contEl = dom.createElement(\"div\", {classValues:\"I-O-field\"}),\n            resUtil = Math.round( sim.stat.resUtil[actT][objIdStr]/sim.scenario.simulationEndTime * 10000) / 100;\n        contEl.appendChild( dom.createLabeledOutputField({ name: objIdStr,\n            labelText: objName, value: numFmt.format( resUtil) + \" %\"}));\n        document.forms[\"expost-statistics\"].appendChild( contEl);\n      });\n    });\n  }\n  if (showTimeSeries) {\n    chart = new Chartist.Line('#time-series-chart', {\n        labels: dataT,\n        series: chartSeries\n      }, {\n        showPoint: false,\n        lineSmooth: true,\n        showArea: true,\n        axisX: {\n          labelInterpolationFnc: function ( value, index ) {\n            var interval = parseInt( dataT.length / 10 );\n            return index % interval === 0 ? value : null;\n          }\n        },\n        axisY: {\n          offset: 60,\n          labelInterpolationFnc: function ( value ) {\n            return value.toFixed( 2 );\n          }\n        },\n        plugins: [\n          Chartist.plugins.legend() // used to display chart legend\n        ]}\n    );\n  }\n};\n\n/*******************************************************\n UI for defining the initial state\n *******************************************************\n * Set up UI for model varables\n *\n * @method\n * @author Gerd Wagner\n */\noes.ui.setupModelVariablesUI = function (parentEl) {\n  var uiPanelEl = dom.createExpandablePanel({id: \"ModelVariablesUI\",\n      heading: i18n.t(\"Model Variables\"), borderColor:\"aqua\",\n      hint: i18n.accessLang ? i18n.t(\"ModelVariablesUI hint\") :\n          \"Define/set variables that can be used, for instance, in the initial state \" +\n          \"or as parameters in functions or in an experiment.\"});\n  var mainContentEl = uiPanelEl.lastElementChild;\n  var labeledVarDefs={}, vm={};\n  sim.config.modelVariablesUI = sim.config.modelVariablesUI || {};\n  Object.keys( sim.model.v).forEach( function (varName) {\n    if (sim.model.v[varName].label) {\n      labeledVarDefs[varName] = sim.model.v[varName];\n      labeledVarDefs[varName].label = i18n.t(sim.model.v[varName].label);\n    }\n  });\n  if (Object.keys( labeledVarDefs).length === 0) return;  // nothing to show\n  vm = {inputFields: labeledVarDefs};\n  // create form element\n  mainContentEl.appendChild( oBJECTvIEW.createUiFromViewModel( vm));\n  sim.config.modelVariablesUI.userActions = {\n    \"applyChanges\": function () {\n      Object.keys( vm.fieldValues).forEach( function (fld) {\n        sim.model.v[fld].value = vm.fieldValues[fld];  // this will be used by worker\n        sim.v[fld] = vm.fieldValues[fld];\n      });\n      sim.createInitialObjEvt();\n      // redraw visualization of initial state (step 0)\n      if (sim.config.visualize) {\n        oes.ui.resetCanvas();\n        oes.ui.visualizeStep();\n      }\n    }\n  };\n  sim.config.modelVariablesUI.userActions[\"applyChanges\"].label = i18n.t(\"Apply changes\");\n  // create buttons for userActions\n  mainContentEl.appendChild( oBJECTvIEW.createUiElemsForUserActions(\n      sim.config.modelVariablesUI.userActions\n  ));\n  parentEl.appendChild( uiPanelEl);\n}\n/*******************************************************\n UI for defining the initial state objects\n *******************************************************\n *\n * @method\n * @author Gerd Wagner\n */\noes.ui.setupInitialObjectsUI = function (parentEl) {\n  var objTypes = sim.model.objectTypes.concat( oes.predefinedObjectTypes);  // an array\n  var uiPanelEl = dom.createExpandablePanel({id:\"InitialStateObjectsUI\",\n      heading: i18n.t(\"Initial Objects\"), borderColor:\"aqua\",\n    // \"Delete, create or edit initial objects.\"\n      hint: i18n.accessLang ? i18n.t(\"InitialStateObjectsUI hint\") :\n          \"Change initial attribute values of objects - as a part of the initial state\"\n  });\n  var contentEl = uiPanelEl.lastElementChild,\n      mainEl = dom.createElement(\"div\", {classValues:\"xpanel-main\"});\n  contentEl.appendChild( mainEl);\n  sim.scenario.initialStateUI = sim.scenario.initialStateUI || {};\n  // create a ClassPopulationWidget for each object type\n  objTypes.forEach( function (className) {\n    var editProps=[], classPopWidget=null,\n        slots = {type: className},\n        Class = cLASS[className];\n    if (!Class.instances || Object.keys( Class.instances).length === 0) return;\n    if (sim.scenario.initialStateUI &&\n        sim.scenario.initialStateUI.editableProperties &&\n        sim.scenario.initialStateUI.editableProperties[className]) {\n      editProps = sim.scenario.initialStateUI.editableProperties[className];\n      slots.editProps = editProps;\n    }\n    classPopWidget = oBJECTvIEW.createRecordTableWidget( slots);\n    mainEl.appendChild( classPopWidget);\n  });\n  sim.scenario.initialStateUI.userActions = {\n    \"applyChanges\": function () {\n      alert(\"Changing the initial state is not yet implemented!\"); return;\n      sim.updateInitialStateObjects();\n      sim.createInitialObjEvt();\n      if (sim.config.visualize) {\n        oes.ui.resetCanvas();\n        oes.ui.visualizeStep();  // visualize initial state\n      }\n    }\n  };\n  sim.scenario.initialStateUI.userActions[\"applyChanges\"].label = i18n.t(\"Apply changes\");\n  // create buttons for userActions\n  contentEl.appendChild( oBJECTvIEW.createUiElemsForUserActions(\n      sim.scenario.initialStateUI.userActions\n  ));\n  parentEl.appendChild( uiPanelEl);\n};\n/*******************************************************\n UI for defining the initial state events\n *******************************************************\n *\n * @method\n * @author Gerd Wagner\n */\noes.ui.setupInitialEventsUI = function (parentEl) {\n  var evtTypes = sim.model.eventTypes.concat( oes.predefinedEventTypes);  // an array\n  var uiPanelEl = dom.createExpandablePanel({id:\"InitialStateEventsUI\",\n      heading: i18n.t(\"Initial Events\"), borderColor:\"aqua\",\n      // \"Delete, create or edit initial events.\"\n    hint: i18n.accessLang ? i18n.t(\"InitialStateEventsUI hint\") :\n        \"Change initial attribute values of events - as a part of the initial state\"\n  });\n  var contentEl = uiPanelEl.lastElementChild,\n      mainEl = dom.createElement(\"div\", {classValues:\"xpanel-main\"});\n  var initEvts = sim.FEL.getAllEvents();\n  contentEl.appendChild( mainEl);\n  sim.scenario.initialEventsUI = sim.scenario.initialEventsUI || {};\n  // create a ClassPopulationWidget for each event type\n  evtTypes.forEach( function (className) {\n    var editProps=[], classPopWidget=null,\n        Class = cLASS[className],\n        slots = {type: className};\n    Class.instances = initEvts.filter(\n        function (evt) {return evt.constructor.Name === className;});\n    if (Object.keys( Class.instances).length === 0) return;\n    if (sim.scenario.initialEventsUI.editableProperties &&\n        sim.scenario.initialEventsUI.editableProperties[className]) {\n      editProps = sim.scenario.initialEventsUI.editableProperties[className];\n      slots.editProps = editProps;\n    }\n    // add inherited property\n    Class.properties[\"occTime\"] = {range:\"NonNegativeNumber\", label:\"Occ. time\"};\n    classPopWidget = oBJECTvIEW.createRecordTableWidget( slots);\n    mainEl.appendChild( classPopWidget);\n  });\n  sim.scenario.initialEventsUI.userActions = {\n    \"applyChanges\": function () {\n      sim.updateInitialStateObjects();\n      sim.createInitialObjEvt();\n      if (sim.config.visualize) {\n        oes.ui.resetCanvas();\n        oes.ui.visualizeStep();  // visualize initial state\n      }\n    }\n  };\n  sim.scenario.initialEventsUI.userActions[\"applyChanges\"].label = i18n.t(\"Apply changes\");\n  // create buttons for userActions\n  contentEl.appendChild( oBJECTvIEW.createUiElemsForUserActions(\n      sim.scenario.initialEventsUI.userActions\n  ));\n  parentEl.appendChild( uiPanelEl);\n};\n/*******************************************************\n UI for Experiments\n *******************************************************\n *\n * @method\n * @author Gerd Wagner\n */\noes.ui.setupExperimentsUI = function (parentEl) {\n  var uiPanelEl = dom.createExpandablePanel({id:\"experimentsUI\",\n      heading: i18n.t(\"Experiments\"), borderColor:\"chartreuse\",\n      hint: i18n.accessLang ? i18n.t(\"experimentsUI hint\") :\n        \"An experiment is defined on top of a scenario by defining (1) the number of replications, \" +\n        \"(2) zero or more experiment parameters (bound to model variables), and \" +\n        \"(3) possibly a list of seed values, one for each replication.\"\n  });\n  var mainContentEl = uiPanelEl.lastElementChild;\n  parentEl.appendChild( uiPanelEl);\n  if (sim.experiment.replications) {  // an experiment has been defined\n    try {\n      sim.ui[\"experiments\"] = new oBJECTvIEW({\n        modelObject: sim.experiment,\n        heading: i18n.t(\"Experiment\") +\" \"+ sim.experiment.experimentNo +\n            (sim.experiment.title ? \": \"+ i18n.t( sim.experiment.title) : \"\"),\n        fields: [[\"replications\", \"parameterDefs\"]],\n        suppressNoValueFields: true,\n        userActions: {\n          \"run\": function () {\n            var tbodyEl=null, worker=null, msg={}, changedModelVarValues={};\n            var progressContainer = dom.createProgressBar(i18n.t(\"Executing simulation experiment...\"));\n            function logExpScenarioRun( data) {\n              var rowEl = tbodyEl.insertRow();  // create new table row\n              var locale = i18n.accessLang ? i18n.accessLang : \"en-US\",\n                  numFmt = new Intl.NumberFormat( locale,\n                      {maximumFractionDigits: oes.defaults.expostStatDecimalPlaces});\n              rowEl.insertCell().textContent = data.expScenNo;\n              rowEl.insertCell().textContent = data.expScenParamValues.toString();\n              Object.keys( data.expScenStat).forEach( function (v) {\n                var statVal = data.expScenStat[v], displayStr=\"\",\n                    decPl = sim.model.statistics[v].decimalPlaces;\n                if (decPl) {\n                  displayStr = new Intl.NumberFormat( locale,\n                      {maximumFractionDigits:decPl}).format( statVal);\n                } else displayStr = numFmt.format( statVal);\n                rowEl.insertCell().textContent = displayStr;\n              });\n            }\n            function logSimpleExpRun( data) {\n              var rowEl=null, i=0;\n              var nmrOfReplications = data.expReplicStat[Object.keys( data.expReplicStat)[0]].length;\n              for (i=0; i < nmrOfReplications; i++) {\n                rowEl = tbodyEl.insertRow();  // create new table row\n                rowEl.insertCell().textContent = i+1;  // replication No\n                Object.keys( data.expReplicStat).forEach( function (varName    ) {\n                  var range = sim.model.statistics[varName].range,\n                      val = data.expReplicStat[varName][i];\n                  if (cLASS.isIntegerType(range)) val = parseInt( val);\n                  else val = val.toFixed( oes.defaults.expostStatDecimalPlaces);\n                  rowEl.insertCell().textContent = val;\n                });\n              }\n              // create footer with summary statistics\n              Object.keys( oes.stat.summary).forEach( function (aggr) {\n                rowEl = tbodyEl.insertRow();  // create new table row\n                rowEl.insertCell().textContent = oes.stat.summary[aggr].label;\n                Object.keys( data.expScenStat).forEach( function (varName) {\n                  var range = sim.model.statistics[varName].range,\n                      val = data.expScenStat[varName][aggr];\n                  if (cLASS.isIntegerType(range)) val = parseInt(val);\n                  else val = val.toFixed( oes.defaults.expostStatDecimalPlaces);\n                  rowEl.insertCell().textContent = val;\n                });\n              });\n              /*\n              rowEl = tbodyEl.insertRow();  // create new table row\n              rowEl.insertCell().textContent = \"Average\";\n              Object.keys( data.expScenStat).forEach( function (varName) {\n                var range = sim.model.statistics[varName].range,\n                    val = data.expScenStat[varName].average;\n                if (cLASS.isIntegerType(range)) val = parseInt( val);\n                else val = val.toFixed( oes.defaults.expostStatDecimalPlaces);\n                rowEl.insertCell().textContent = val;\n              });\n              */\n            }\n            document.body.appendChild( progressContainer);\n            // configure experiment log\n            oes.ui.setupSimLog( true);\n            tbodyEl = sim.ui.logEl;\n            // drop scenario form\n            document.forms[\"scenario\"].remove();\n            // show simulator controls\n            document.forms[\"sim\"].style.display = \"block\";\n            // log simulation start time (in the main thread)\n            sim.startTime = (new Date()).getTime();\n            // start the simulation worker\n            if (window.Worker) {\n              worker = new Worker(\"simulation-worker.js\");\n              // send \"experiment mode\" message to worker\n              msg = {runExperiment: true,\n                     endTime: sim.scenario.simulationEndTime,\n                     expReplications: sim.experiment.replications,\n                     dbName: sim.model.name};\n              Object.keys( sim.model.v).forEach( function (varName) {\n                if (sim.model.v[varName].value !== undefined) {\n                  changedModelVarValues[varName] = sim.model.v[varName].value;\n                }\n              });\n              if (Object.keys( changedModelVarValues).length > 0) {\n                msg.changedModelVarValues = changedModelVarValues;\n              }\n              worker.postMessage( msg);\n              // on incoming messages from worker\n              worker.onmessage = function (e) {\n                if (e.data.expScenNo !== undefined) logExpScenarioRun( e.data);\n                if (e.data.expReplicStat !== undefined) logSimpleExpRun( e.data);\n                if (e.data.progressIncrement !== undefined) {\n                  document.querySelector(\"#progress-container > progress\").value +=\n                      e.data.progressIncrement;\n                }\n                if (e.data.endOfExp) oes.ui.updateUiOnSimulationEnd( true);\n              };\n            } else {\n              alert(\"Experiment cannot be executed since browser does not support web workers!\");\n            }\n          }\n        }\n      });\n      sim.ui[\"experiments\"].userActions[\"run\"].label = \"►\";  // i18n.t(\"Run Experiment\")\n      sim.ui[\"experiments\"].userActions[\"run\"].hint = i18n.t(\"Run experiment\");\n      // render view and store its data binding\n      sim.ui[\"experiments\"].dataBinding = sim.ui[\"experiments\"].render( mainContentEl);\n    } catch (e) {\n      console.log( e.constructor.name +\": \"+ e.message);\n    }\n  } else {\n    //mainContentEl.innerHTML = \"<p>No experiment defined.</p>\";\n    uiPanelEl.style.display = \"none\";\n  }\n};\n\n/*******************************************************\n TODO: UI for Expost Statistics\n *******************************************************\n *\n * @method\n * @author Gerd Wagner\n */\noes.ui.setupExpostStatisticsDefUI = function (parentEl) {\n  var uiPanelEl = dom.createExpandablePanel({id:\"spaceUI\", heading:\"Space\"});\n  var mainContentEl = uiPanelEl.lastElementChild;\n  parentEl.appendChild( uiPanelEl);\n  sim.ui[\"space\"] = new oBJECTvIEW({\n    modelObject: sim.model.space,\n    fields: [[\"xMax\", \"yMax\", \"zMax\"].slice(0,\n        oes.space.dimensions[sim.model.space.type])],\n    suppressNoValueFields: false,\n    userActions: {\n      \"applyChanges\": function () {\n        sim.updateInitialStateObjects();\n        oes.ui.resetCanvas();\n        // visualize initial state (at start of step 0)\n        if (sim.config.visualize) oes.ui.visualizeStep();\n      }\n    }\n  });\n  sim.ui[\"space\"].userActions[\"applyChanges\"].label = \"Apply changes\";\n  // render view and store its data binding\n  sim.ui[\"space\"].dataBinding = sim.ui[\"space\"].render( mainContentEl);\n};\n/*******************************************************\n Set up the Visualization\n *******************************************************/\noes.ui.setupVisualization = function () {\n  var mainEl = document.querySelector(\"body > main\");\n  if (sim.model.space.type) {\n    oes.ui.setupSpaceView();\n  } else if (sim.config.observationUI.type) {  // visualizing a non-spatial  model\n    switch (sim.config.observationUI.type) {\n      case \"SVG\":\n        oes.ui.setupCanvas = oes.ui.vis.SVG.setup;\n        oes.ui.resetCanvas = oes.ui.vis.SVG.reset;\n        oes.ui.visualizeStep = oes.ui.vis.SVG.visualizeStep;\n        break;\n      default:\n        console.log(\"Invalid visualization type: \"+ sim.config.observationUI.visualType);\n        sim.config.visualize = false;\n    }\n  } else sim.config.visualize = false;\n  if (sim.config.visualize) oes.ui.setupCanvas( mainEl);\n\n}\n/*******************************************************\n Set up the Space Visualization\n *******************************************************/\noes.ui.setupSpaceView = function () {\n  if (sim.model.space.type === undefined) throw \"No space type defined in *setupSpaceView*\";\n  switch (sim.model.space.type) {\n    // TODO: use (detect?) correct references methods, when other than the DOM\n    // visualization \"modules\" are implemented for IntegerGrid case.\n  case \"IntegerGrid\":\n    switch (sim.config.observationUI.spaceView.type) {\n    case \"threeDim\":\n      oes.ui.setupCanvas = oes.ui.space.threeDim.Babylon.setup;\n      oes.ui.resetCanvas = oes.ui.space.threeDim.Babylon.reset;\n      oes.ui.visualizeStep = oes.ui.space.threeDim.Babylon.render;\n      break;\n    default:\n      oes.ui.setupCanvas = oes.ui.space.grid.setup;\n      oes.ui.resetCanvas = oes.ui.space.grid.reset;\n      oes.ui.visualizeStep = oes.ui.space.grid.i.dom.renderIntegerGrid;\n    }\n   break;\n  // TODO: use (detect?) correct references methods, when other than the DOM\n  // visualization \"modules\" are implemented for ObjectGrid case.\n  case \"ObjectGrid\":\n    oes.ui.setupCanvas = oes.ui.space.grid.o.dom.setupObjectGrid;\n    oes.ui.resetCanvas = oes.ui.space.grid.reset;\n    oes.ui.visualizeStep = oes.ui.space.grid.o.dom.renderObjectGrid;\n    break;\n  case \"1D\":\n    switch (sim.config.observationUI.spaceView.type) {\n    case \"oneDimSVG\":\n      oes.ui.setupCanvas = oes.ui.space.oneDim.SVG.setup;\n      oes.ui.resetCanvas = oes.ui.space.oneDim.SVG.reset;\n      oes.ui.visualizeStep = oes.ui.space.oneDim.SVG.renderSimState;\n      break;\n    case \"threeDim\":\n      oes.ui.setupCanvas = oes.ui.space.threeDim.Babylon.setup;\n      oes.ui.resetCanvas = oes.ui.space.threeDim.Babylon.reset;\n      oes.ui.visualizeStep = oes.ui.space.threeDim.Babylon.render;\n      break;\n    // defaults to oneDimSVG visualization\n    default:\n      oes.ui.setupCanvas = oes.ui.space.oneDim.SVG.setup;\n      oes.ui.resetCanvas = oes.ui.space.oneDim.SVG.reset;\n      oes.ui.visualizeStep = oes.ui.space.oneDim.SVG.renderSimState;\n    }\n    break;\n  case \"2D\":\n    oes.ui.setupCanvas = oes.ui.space.twoDim.Phaser.setup;\n    oes.ui.resetCanvas = oes.ui.space.twoDim.Phaser.reset;\n    oes.ui.visualizeStep = oes.ui.space.twoDim.Phaser.render;\n    break;\n  case \"3D\":\n    // TODO: complete when a 3D space is supported.\n    break;\n  }\n};\n/*====================================================================================\n    S V G\n ==================================================================================== */\noes.ui.vis.SVG.setup = function (containerEl) {\n  var obsUI = sim.config.observationUI,\n      fixedElems = obsUI.fixedElements,\n      objViews = obsUI.objectViews,\n      canvasWidth = obsUI.canvas.width || 600,\n      canvasHeight = obsUI.canvas.height || 400,\n      canvasSvgEl = svg.createSVG({id:\"canvasSVG\",\n          width: canvasWidth, height: canvasHeight});\n  var defsEl = svg.createDefs(),\n      mainEl = document.querySelector(\"body > main\");\n  // define SVG canvas\n  sim.visualEl = dom.createElement(\"div\",{id:\"visCanvas\", classValues:\"uiBlock\"});\n  if (obsUI.canvas.style) sim.visualEl.style = obsUI.canvasStyle;\n  sim.visualEl.appendChild( canvasSvgEl);\n  canvasSvgEl.appendChild( defsEl);\n  mainEl.appendChild( sim.visualEl);\n  if (fixedElems) {  // render fixed elements\n    Object.keys( fixedElems).forEach( function (id) {\n      var el=null;\n      el = oes.ui.vis.SVG.createShapeFromDefRec( fixedElems[id]);\n      canvasSvgEl.appendChild( el);\n    });\n  }\n  if (objViews) {  // render initial object views\n    Object.keys( sim.objects).forEach( function (id) {\n      var el=null, shapeGroupEl=null, fp=null,\n          obj = sim.objects[id],\n          objView = objViews[id] || objViews[obj.name] || objViews[obj.constructor.Name];\n      if (objView) {\n        if (!Array.isArray( objView)) {  // single vis item definition record\n          if (objView.shapeName) {\n            if (objView.fillPatternImage) {\n              fp = objView.fillPatternImage;\n              if (!fp.file.includes(\"/\")) {\n                fp.file = oes.defaults.imgFolder + fp.file;\n              }\n              el = svg.createImageFillPattern( fp.id, fp.file);\n              defsEl.appendChild( el);\n              objView.style = \"fill: url(#\" + fp.id + \");\" + objView.style;\n            }\n            el = svg.createShapeFromDefRec( objView, obj);  // cannot be \"image\"\n            objView.element = el;\n            canvasSvgEl.appendChild( el);\n          } else {  // objView maps enum attribs to lists of visualization items\n            Object.keys( objView).forEach( function (key) {\n              var enumIndex = 0, currentEnumViewDefRec = [];\n              if (key !== \"object\" && key !== \"element\") {  // ommit special view fields\n                enumIndex = obj[key];  // key is enum attr name\n                currentEnumViewDefRec = objView[key][enumIndex-1];\n                objView[key].forEach( function (shDefRec) {\n                  var el = oes.ui.vis.SVG.createShapeFromDefRec( shDefRec, obj);\n                  el.style.display = \"none\";\n                  shDefRec.element = el;\n                  canvasSvgEl.appendChild( el);\n                  if (shDefRec.canvasBackgroundColor) {\n                    sim.visualEl.style.backgroundColor = shDefRec.canvasBackgroundColor;\n                  }\n                });\n                objView[key].element = currentEnumViewDefRec.element;\n                currentEnumViewDefRec.element.style.display = \"block\";\n              }\n            });\n          }\n        } else {  // objView is a list of vis item definition records\n          objView.elements = [];\n          shapeGroupEl = svg.createGroup();\n          objView.forEach( function (objViewItem) {\n            var txt=\"\";\n            if (objViewItem.shapeName) {\n              if (objViewItem.fillPatternImage) {\n                fp = objViewItem.fillPatternImage;\n                if (!fp.file.includes(\"/\")) {\n                  fp.file = oes.defaults.imgFolder + fp.file;\n                }\n                el = svg.createImageFillPattern( fp.id, fp.file);\n                defsEl.appendChild( el);\n                objViewItem.style = \"fill: url(#\" + fp.id + \");\" + objViewItem.style;\n              }\n              el = svg.createShape( objViewItem.shapeName,\n                  objViewItem.shapeAttributes, objViewItem.style, obj);\n            } else {  // objViewItem defines a text element\n              if (typeof objViewItem.text === \"function\") txt = objViewItem.text( obj);\n              else txt = objViewItem.text;\n              el = svg.createText( objViewItem.x, objViewItem.y, txt, objViewItem.style)\n            }\n            objView.elements.push( el);\n            shapeGroupEl.appendChild( el);\n          });\n          canvasSvgEl.appendChild( shapeGroupEl);\n        }\n        objView.object = obj;\n      }\n    });\n  }\n};\noes.ui.vis.SVG.reset = function () {\n  oes.ui.vis.SVG.visualizeStep();  //TODO: replace with real reset code\n};\noes.ui.vis.SVG.visualizeStep = function () {\n  var obsUI = sim.config.observationUI,\n      objViews = obsUI.objectViews;\n  Object.keys( objViews).forEach( function (viewId) {\n    var itemDefRec={}, shAttribs=[], el=null, i=0, val,\n        objView = objViews[viewId];\n    if (!Array.isArray( objView)) {  // single item view\n      if (objView.shapeName) {\n        el = objView.element;\n        shAttribs = objView.shapeAttributes;\n        Object.keys( shAttribs).forEach( function (attrName) {\n          var val;\n          // only expression-valued shape attributes need to be updated\n          if (typeof shAttribs[attrName] === \"function\") {\n            val = shAttribs[attrName]( objView.object);\n            switch (attrName) {\n            case \"textContent\":\n              el.textContent = val;\n              break;\n            case \"file\":\n              el.setAttributeNS( svg.XLINK_NS, \"href\", oes.defaults.imgFolder + val);\n              break;\n            default:\n              el.setAttribute( attrName, val);\n              break;\n            }\n          }\n        });\n      } else {  // objView maps enum attribs to lists of vis item def rec\n        Object.keys( objView).forEach( function (key) {\n          var enumIndex=0, currentEnumViewDefRec = {};\n          // exclude properties that objView may also contain\n          if (key !== \"object\" && key !== \"element\") {\n            enumIndex = objView.object[key];\n            if (Number.isInteger( enumIndex) && Array.isArray( objView[key]) &&\n                enumIndex >= 1 && enumIndex <= objView[key].length) {\n              currentEnumViewDefRec = objView[key][enumIndex-1];\n              // hide previous enum view\n              objView[key].element.style.display = \"none\";\n              // display current enum view\n              currentEnumViewDefRec.element.style.display = \"block\";\n              // store current enum view element\n              objView[key].element = currentEnumViewDefRec.element;\n              if (currentEnumViewDefRec.canvasBackgroundColor) {\n                sim.visualEl.style.backgroundColor = currentEnumViewDefRec.canvasBackgroundColor;\n              }\n            }\n          }\n        });\n      }\n    } else {  // objView is a list of view item definition records\n      for (i=0; i < objView.length; i++) {\n        itemDefRec = objView[i];\n        el = objView.elements[i];\n        if (itemDefRec.shapeName) {\n          shAttribs = itemDefRec.shapeAttributes;\n          Object.keys( shAttribs).forEach( function (attrName) {\n            if (typeof shAttribs[attrName] === \"function\") {\n              val = shAttribs[attrName]( objView.object);\n              switch (attrName) {\n              case \"textContent\":\n                el.textContent = val;\n                break;\n              case \"file\":\n                if (!val.includes(\"/\")) {\n                  val = oes.defaults.imgFolder + val;\n                }\n                el.setAttributeNS( svg.XLINK_NS, \"href\", val);\n                break;\n              default:\n                el.setAttribute( attrName, val);\n                break;\n              }\n            }\n          });\n        }\n      }\n    }\n  });\n};\noes.ui.vis.SVG.createShapeFromDefRec = function (shDefRec) {\n  var fn = shDefRec.shapeAttributes.file;\n  if (fn && !fn.includes(\"/\")) {\n    shDefRec.shapeAttributes.file = oes.defaults.imgFolder + fn;\n  }\n  return svg.createShapeFromDefRec( shDefRec);\n};\n\n/***********************************************************************\n Set up the User Interaction (UIA) Elements\n A UIA type is defined in the scenario/config. A UIA is triggered by a\n simulation event (of some type, possibly satisfying some condition)\n leading to the creation of a modal UIA window and an interruption of the\n simulation loop by having the browser wait for user input/actions. The\n UIA window contains output fields and input fields defined by the UIA\n type, and a \"continue\" button as a default user action element. After\n getting informed about the current situation by reading the output\n field values, the user makes her choices by entering corresponding\n values in the input fields and then performs the \"continue\" action,\n which triggers an event handler that restarts the simulator by calling\n sim.runScenarioStep( followupEvents) where the followupEvents have been\n obtained from invoking the onEvent method on the UIA triggering event\n with the UIA input field values as parameters.\n **********************************************************************/\noes.ui.setupUserInteraction = function () {\n  sim.ui.userInteractions = sim.ui.userInteractions || {};\n  sim.currentEvents = {};  // map of current events by type\n  Object.keys( sim.scenario.userInteractions).forEach( function (trigEvtTypeName) {\n    var uiDefRec = sim.scenario.userInteractions[trigEvtTypeName],\n        uiContainerEl=null, followupEvents=[], title=\"\";\n    //TODO: check if this reset can be dropped: uiDefRec.fieldValues = {};  // reset\n    uiDefRec.userActions = {\n      \"continue\": function () {\n        var inpFldValues={};  // initialize onEvent parameter record\n        Object.keys( uiDefRec.inputFields).forEach( function (inpFldName) {\n          // extract input field values from oBJECTvIEW's fieldValues map\n          inpFldValues[inpFldName] = uiDefRec.fieldValues[inpFldName];\n        });\n        uiDefRec.domElem.style.display = \"none\";\n        followupEvents = sim.currentEvents[trigEvtTypeName].onEvent( inpFldValues);\n        sim.runScenarioStep( followupEvents);  // restart simulator\n      }\n    };\n    uiDefRec.userActions[\"continue\"].label = \"Continue\";\n    title = uiDefRec.title;\n\n    delete uiDefRec.title;\n    uiContainerEl = oBJECTvIEW.createUiFromViewModel( uiDefRec);  // create form element\n    uiContainerEl.querySelectorAll(\"input\")[0].setAttribute(\"autofocus\",\"true\");\n    uiDefRec.domElem = dom.createDraggableModal({fromElem: uiContainerEl,\n        title:title, classValues:\"action-required\"});\n    uiDefRec.domElem.style.display = \"none\";\n  })\n};\n/*******************************************************\n Set up the Event Appearances (Sound + Animations)\n TODO: support audio/sound\n *******************************************************/\noes.ui.setupEventAppearances = function () {\n  var eventAppearances = sim.config.observationUI.eventAppearances;\n  sim.ui.animations = sim.ui.animations || {};\n  Object.keys( eventAppearances).forEach( function (trigEvtTypeName) {\n    var evtAppearDefRec = eventAppearances[trigEvtTypeName],\n        evtView = evtAppearDefRec.view,\n        domElem=null, animation=null, timingDefRec={};\n    if (evtView.imageFile) {\n      domElem = document.createElement(\"img\");\n      if (!evtView.imageFile.includes(\"/\")) {\n        domElem.src = oes.defaults.imgFolder + evtView.imageFile;\n      } else {\n        domElem.src = evtView.imageFile;\n      }\n      if (evtView.style) domElem.style = evtView.style;\n      sim.visualEl.appendChild( domElem);\n    } else {\n      domElem = evtView.domElem();\n    }\n    timingDefRec.duration = evtView.duration || 1000;\n    if (evtView.iterations) timingDefRec.iterations = evtView.iterations;\n    if (evtView.fill) timingDefRec.fill = evtView.fill;\n    animation = domElem.animate( evtView.keyframes, timingDefRec);\n    animation.pause();  // do not yet start the animation\n    sim.ui.animations[trigEvtTypeName] = animation;  // store the animation handle\n  });\n};\n","date":"2019-04-16T15:44:34.159Z","updated":"2019-04-16T15:44:34.159Z","path":"sims/framework/simulator-core.js","layout":"false","title":"","comments":1,"_id":"cjx8wr3ja000pj1h5s3hg69g1"},{"_content":" /*******************************************************************************\n * The CustomerArrival event class\n *\n * @copyright Copyright 2015-2016 Gerd Wagner\n *   Chair of Internet Technology, Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Gerd Wagner\n ******************************************************************************/\nvar CustomerArrival = new cLASS({\n  Name: \"CustomerArrival\",\n  label: \"Customer arrivals\",\n  shortLabel: \"Arr\",  // for the log\n  supertypeName: \"eVENT\",\n  properties: {\n    \"serviceDesk\": {range: \"ServiceDesk\", label:\"Service desk\"}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var srvTm=0, changes = [], events = [];\n      //changes.push({object: this.serviceDesk, property: \"queueLength\", increment: 1});\n      this.serviceDesk.queueLength++;\n      sim.stat.arrivedCustomers++;\n      // if the service desk is not busy\n      if (this.serviceDesk.queueLength === 1) {\n        //changes.push({object: this.serviceDesk, property: \"isBusy\", value: true});\n        srvTm = ServiceDesk.serviceDuration();\n        events.push( new CustomerDeparture({\n          occTime: this.occTime + srvTm,\n          serviceTime: srvTm,\n          serviceDesk: this.serviceDesk\n        }));\n      }\n      //return [events, changes];\n      return events;\n    }\n  }\n});\n// Any exogenous event type needs to define a static function \"recurrence\"\nCustomerArrival.recurrence = function () {\n  return rand.uniformInt( 1, 6);\n};","source":"sims/1/CustomerArrival.js","raw":" /*******************************************************************************\n * The CustomerArrival event class\n *\n * @copyright Copyright 2015-2016 Gerd Wagner\n *   Chair of Internet Technology, Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Gerd Wagner\n ******************************************************************************/\nvar CustomerArrival = new cLASS({\n  Name: \"CustomerArrival\",\n  label: \"Customer arrivals\",\n  shortLabel: \"Arr\",  // for the log\n  supertypeName: \"eVENT\",\n  properties: {\n    \"serviceDesk\": {range: \"ServiceDesk\", label:\"Service desk\"}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var srvTm=0, changes = [], events = [];\n      //changes.push({object: this.serviceDesk, property: \"queueLength\", increment: 1});\n      this.serviceDesk.queueLength++;\n      sim.stat.arrivedCustomers++;\n      // if the service desk is not busy\n      if (this.serviceDesk.queueLength === 1) {\n        //changes.push({object: this.serviceDesk, property: \"isBusy\", value: true});\n        srvTm = ServiceDesk.serviceDuration();\n        events.push( new CustomerDeparture({\n          occTime: this.occTime + srvTm,\n          serviceTime: srvTm,\n          serviceDesk: this.serviceDesk\n        }));\n      }\n      //return [events, changes];\n      return events;\n    }\n  }\n});\n// Any exogenous event type needs to define a static function \"recurrence\"\nCustomerArrival.recurrence = function () {\n  return rand.uniformInt( 1, 6);\n};","date":"2019-06-23T11:36:16.446Z","updated":"2019-04-09T19:07:58.779Z","path":"sims/1/CustomerArrival.js","layout":"false","title":"","comments":1,"_id":"cjx8x0xw00000pih5hx1d91qv"},{"_content":"var CustomerDeparture = new cLASS({\n  Name: \"CustomerDeparture\",\n  label: \"Customer departures\",\n  shortLabel: \"Dep\",  // for the log\n  supertypeName: \"eVENT\",\n  properties: {\n    \"serviceDesk\": {range: \"ServiceDesk\", label:\"Service desk\"},\n    \"serviceTime\": {range: \"NonNegativeInteger\"}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var changes = [], events = [], srvTm=0;\n      // remove customer from queue\n      this.serviceDesk.queueLength--;\n      // if there are still customers waiting\n      if (this.serviceDesk.queueLength > 0) {\n        // start next service and schedule its end/departure\n        //changes.push({object: this.serviceDesk, property: \"queueLength\", decrement: 1});\n        srvTm = ServiceDesk.serviceDuration();\n        events.push( new CustomerDeparture({\n          occTime: this.occTime + srvTm,\n          serviceTime: srvTm,\n          serviceDesk: this.serviceDesk\n        }));\n      }\n      // update statistics\n      sim.stat.departedCustomers++;\n      sim.stat.totalServiceTime += this.serviceTime;\n\n      return events;  // return [events, changes]\n    }\n  }\n});\n","source":"sims/1/CustomerDeparture.js","raw":"var CustomerDeparture = new cLASS({\n  Name: \"CustomerDeparture\",\n  label: \"Customer departures\",\n  shortLabel: \"Dep\",  // for the log\n  supertypeName: \"eVENT\",\n  properties: {\n    \"serviceDesk\": {range: \"ServiceDesk\", label:\"Service desk\"},\n    \"serviceTime\": {range: \"NonNegativeInteger\"}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var changes = [], events = [], srvTm=0;\n      // remove customer from queue\n      this.serviceDesk.queueLength--;\n      // if there are still customers waiting\n      if (this.serviceDesk.queueLength > 0) {\n        // start next service and schedule its end/departure\n        //changes.push({object: this.serviceDesk, property: \"queueLength\", decrement: 1});\n        srvTm = ServiceDesk.serviceDuration();\n        events.push( new CustomerDeparture({\n          occTime: this.occTime + srvTm,\n          serviceTime: srvTm,\n          serviceDesk: this.serviceDesk\n        }));\n      }\n      // update statistics\n      sim.stat.departedCustomers++;\n      sim.stat.totalServiceTime += this.serviceTime;\n\n      return events;  // return [events, changes]\n    }\n  }\n});\n","date":"2019-06-23T11:36:16.458Z","updated":"2019-04-09T19:07:58.780Z","path":"sims/1/CustomerDeparture.js","layout":"false","title":"","comments":1,"_id":"cjx8x0xw10001pih5nbc5ycq7"},{"_content":"var ServiceDesk = new cLASS({\n  Name: \"ServiceDesk\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"queueLength\": { range: \"NonNegativeInteger\",\n        label: \"Queue length\", shortLabel: \"qLen\"}\n  }\n});\nServiceDesk.serviceDuration = function () {\n  return rand.frequency({\"2\":0.3, \"3\":0.5, \"4\":0.2});\n  /* Or, alternatively,\n  var r = rand.uniformInt( 0, 99);\n  if ( r < 30) return 2;         // probability 0.30\n  else if ( r < 80) return 3;    // probability 0.50\n  else return 4;                 // probability 0.20\n  */\n};","source":"sims/1/ServiceDesk.js","raw":"var ServiceDesk = new cLASS({\n  Name: \"ServiceDesk\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"queueLength\": { range: \"NonNegativeInteger\",\n        label: \"Queue length\", shortLabel: \"qLen\"}\n  }\n});\nServiceDesk.serviceDuration = function () {\n  return rand.frequency({\"2\":0.3, \"3\":0.5, \"4\":0.2});\n  /* Or, alternatively,\n  var r = rand.uniformInt( 0, 99);\n  if ( r < 30) return 2;         // probability 0.30\n  else if ( r < 80) return 3;    // probability 0.50\n  else return 4;                 // probability 0.20\n  */\n};","date":"2019-06-23T11:36:16.441Z","updated":"2019-04-09T19:07:58.780Z","path":"sims/1/ServiceDesk.js","layout":"false","title":"","comments":1,"_id":"cjx8x0xw20002pih5t9oja1or"},{"_content":"<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\">\n<head>\n <meta charset=\"UTF-8\" />\n <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n <title>ServiceDesk-1 Object Event Simulation</title>\n <meta name=\"viewport\" content=\"width=device-width, initial-scale = 1.0\" />\n <meta name=\"description\"\n       content=\"A service queue model (one service and one queue) with two statistics: maximum queue length and service utilization. For simplicity, the model uses abstract (discrete) time and abstracts away from individual customers and from the composition of the queue, which is only represented in terms of its length. The model includes one object type: ServiceDesk, and two event types: CustomerArrival and CustomerDeparture. Both the random time variable for the recurrence of customer arrival events and the random time variable for modeling the duration of services are discrete.\"/>\n <!-- Facebook Open Graph annotations -->\n <meta property=\"og:site_name\" content=\"Sim4edu\"/>\n <meta property=\"og:title\" content=\"A Service Queue Model with Utilization and Maximum Queue Length Statistics\"/>\n <meta property=\"og:locale\" content=\"en\" />\n <meta property=\"og:locale:alternate\" content=\"zh_Hans\" />\n <meta property=\"og:locale:alternate\" content=\"de\" />\n <meta property=\"og:description\"\n       content=\"A service queue model (one service and one queue) with two statistics: maximum queue length and service utilization. For simplicity, the model uses abstract (discrete) time and abstracts away from individual customers and from the composition of the queue, which is only represented in terms of its length. The model includes one object type: ServiceDesk, and two event types: CustomerArrival and CustomerDeparture. Both the random time variable for the recurrence of customer arrival events and the random time variable for modeling the duration of services are discrete.\"/>\n <meta property=\"og:url\" content=\"https://sim4edu.com/sims/1\"/>\n <meta property=\"og:image\" content=\"https://sim4edu.com/img/sim4edu.png\"/>  <!-- recommended 1200 x 630 -->\n <!-- Google annotations -->\n <script type=\"application/ld+json\">\n{\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"SoftwareApplication\",\n    \"applicationCategory\": \"https://en.wikipedia.org/wiki/Discrete-event_simulation\",\n    \"name\": \"ServiceDesk-1\",\n    \"headline\": \"A Service Queue Model with Utilization and Maximum Queue Length Statistics\",\n    \"url\": \"https://sim4edu.com/sims/1\",\n    \"keywords\": \"web-based simulation, educational simulation, simulation education, single server queue, service desk queueing system\",\n    \"description\": \"A service queue model (one service and one queue) with two statistics: maximum queue length and service utilization. For simplicity, the model uses abstract (discrete) time and abstracts away from individual customers and from the composition of the queue, which is only represented in terms of its length. The model includes one object type: ServiceDesk, and two event types: CustomerArrival and CustomerDeparture. Both the random time variable for the recurrence of customer arrival events and the random time variable for modeling the duration of services are discrete.\",\n    \"publisher\": {\n        \"@type\": \"Organization\",\n        \"name\": \"Brandenburg University of Technology\",\n        \"logo\": \"https://www.b-tu.de/fileadmin/btu-cs/images/logo/BTULogo_englisch_grau.png\"\n    },\n    \"author\": {\n        \"@type\": \"Person\",\n        \"name\": \"Gerd Wagner\",\n        \"image\": {\n            \"@type\": \"ImageObject\",\n            \"url\": \"https://ari123.com/media/img/GW.jpg\",\n            \"width\": 230,\n            \"height\": 230\n        },\n        \"url\": \"https://www.linkedin.com/in/gerdwagner/\",\n        \"sameAs\": []\n    },\n    \"datePublished\": \"2016-06-01T00:00:00.000Z\",\n    \"dateModified\": \"2017-04-19T14:35:00.000Z\",\n    \"image\": {\n        \"@type\": \"ImageObject\",\n        \"url\": \"https://sim4edu.com/img/sim4edu.svg\",\n        \"width\": 1200,\n        \"height\": 292\n    }\n}\n</script>\n\n <link rel=\"icon\" type=\"image/png\" href=\"https://sim4edu.com/img/icon-32x32.png\" sizes=\"32x32\">\n <link rel=\"icon\" type=\"image/png\" href=\"https://sim4edu.com/img/icon-16x16.png\" sizes=\"16x16\">\n\n <link rel=\"stylesheet\" type=\"text/css\" href=\"../framework/simulator-core.css\" />\n <link rel=\"stylesheet\" type=\"text/css\" href=\"../framework/chartist.css\" />\n <style id=\"page-styles\">\n  form#expost-statistics output {left: 16em;}\n  #frontMatter > h1 {font-size: 1.4em;}  /* 2em for short headings */\n </style>\n <!-- Load polyfills for supporting >=IE9 -->\n <script crossorigin=\"anonymous\"\n         src=\"https://polyfill.io/v3/polyfill.min.js?features=Array.from%2CArray.of%2CArray.prototype.find%2CArray.prototype.includes%2CDOMTokenList%2CElement.prototype.after%2CElement.prototype.before%2CElement.prototype.classList%2CElement.prototype.cloneNode%2CIntl%2CNumber.isInteger%2CObject.keys%2CObject.values%2CPromise%2CString.prototype.endsWith%2CString.prototype.includes%2CURL%2Cconsole.log%2Cfetch\"></script>\n</head>\n<body>\n<div id=\"frontMatter\">\n <div id=\"sim4eduinfo\">Created with the <i>Object Event Simulation (OES)</i> framework <b><i>OESjs</i></b> available from\n  <a href='https://sim4edu.com'>sim4edu.com</a>.</div>\n <h1>A Service Queue Model with Utilization and Maximum Queue Length Statistics<a href=\"description.html\">Read more...</a></h1>\n</div>\n<main>\n <div id=\"model-menu\">\n  <button type='button' onclick='oes.ui.showNarrative()'>Narrative</button>\n  <button type='button' onclick='oes.ui.showDescription()'>Description</button>\n  <button id='showCodeBtn' type='button' onclick='oes.ui.showCode()'>Code</button>\n </div>\n</main>\n<noscript>\n <p>Please turn on JavaScript in your browser. Otherwise you cannot run Sim4edu simulations.</p>\n</noscript>\n<script src=\"metadata.js\"></script>\n<script src=\"../framework/frontMatter.js\"></script>\n<!-- load common core JS code files -->\n<script src=\"../framework/simulator-core.js\" async=\"async\"></script>\n<script src=\"../framework/chartist.js\" async=\"async\"></script>\n<!-- load scenario.js and all files required by it, and set up the user interface -->\n<script src=\"../loadManager.js\"></script>\n</body>\n</html>\n","source":"sims/1/index.html","raw":"<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\">\n<head>\n <meta charset=\"UTF-8\" />\n <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n <title>ServiceDesk-1 Object Event Simulation</title>\n <meta name=\"viewport\" content=\"width=device-width, initial-scale = 1.0\" />\n <meta name=\"description\"\n       content=\"A service queue model (one service and one queue) with two statistics: maximum queue length and service utilization. For simplicity, the model uses abstract (discrete) time and abstracts away from individual customers and from the composition of the queue, which is only represented in terms of its length. The model includes one object type: ServiceDesk, and two event types: CustomerArrival and CustomerDeparture. Both the random time variable for the recurrence of customer arrival events and the random time variable for modeling the duration of services are discrete.\"/>\n <!-- Facebook Open Graph annotations -->\n <meta property=\"og:site_name\" content=\"Sim4edu\"/>\n <meta property=\"og:title\" content=\"A Service Queue Model with Utilization and Maximum Queue Length Statistics\"/>\n <meta property=\"og:locale\" content=\"en\" />\n <meta property=\"og:locale:alternate\" content=\"zh_Hans\" />\n <meta property=\"og:locale:alternate\" content=\"de\" />\n <meta property=\"og:description\"\n       content=\"A service queue model (one service and one queue) with two statistics: maximum queue length and service utilization. For simplicity, the model uses abstract (discrete) time and abstracts away from individual customers and from the composition of the queue, which is only represented in terms of its length. The model includes one object type: ServiceDesk, and two event types: CustomerArrival and CustomerDeparture. Both the random time variable for the recurrence of customer arrival events and the random time variable for modeling the duration of services are discrete.\"/>\n <meta property=\"og:url\" content=\"https://sim4edu.com/sims/1\"/>\n <meta property=\"og:image\" content=\"https://sim4edu.com/img/sim4edu.png\"/>  <!-- recommended 1200 x 630 -->\n <!-- Google annotations -->\n <script type=\"application/ld+json\">\n{\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"SoftwareApplication\",\n    \"applicationCategory\": \"https://en.wikipedia.org/wiki/Discrete-event_simulation\",\n    \"name\": \"ServiceDesk-1\",\n    \"headline\": \"A Service Queue Model with Utilization and Maximum Queue Length Statistics\",\n    \"url\": \"https://sim4edu.com/sims/1\",\n    \"keywords\": \"web-based simulation, educational simulation, simulation education, single server queue, service desk queueing system\",\n    \"description\": \"A service queue model (one service and one queue) with two statistics: maximum queue length and service utilization. For simplicity, the model uses abstract (discrete) time and abstracts away from individual customers and from the composition of the queue, which is only represented in terms of its length. The model includes one object type: ServiceDesk, and two event types: CustomerArrival and CustomerDeparture. Both the random time variable for the recurrence of customer arrival events and the random time variable for modeling the duration of services are discrete.\",\n    \"publisher\": {\n        \"@type\": \"Organization\",\n        \"name\": \"Brandenburg University of Technology\",\n        \"logo\": \"https://www.b-tu.de/fileadmin/btu-cs/images/logo/BTULogo_englisch_grau.png\"\n    },\n    \"author\": {\n        \"@type\": \"Person\",\n        \"name\": \"Gerd Wagner\",\n        \"image\": {\n            \"@type\": \"ImageObject\",\n            \"url\": \"https://ari123.com/media/img/GW.jpg\",\n            \"width\": 230,\n            \"height\": 230\n        },\n        \"url\": \"https://www.linkedin.com/in/gerdwagner/\",\n        \"sameAs\": []\n    },\n    \"datePublished\": \"2016-06-01T00:00:00.000Z\",\n    \"dateModified\": \"2017-04-19T14:35:00.000Z\",\n    \"image\": {\n        \"@type\": \"ImageObject\",\n        \"url\": \"https://sim4edu.com/img/sim4edu.svg\",\n        \"width\": 1200,\n        \"height\": 292\n    }\n}\n</script>\n\n <link rel=\"icon\" type=\"image/png\" href=\"https://sim4edu.com/img/icon-32x32.png\" sizes=\"32x32\">\n <link rel=\"icon\" type=\"image/png\" href=\"https://sim4edu.com/img/icon-16x16.png\" sizes=\"16x16\">\n\n <link rel=\"stylesheet\" type=\"text/css\" href=\"../framework/simulator-core.css\" />\n <link rel=\"stylesheet\" type=\"text/css\" href=\"../framework/chartist.css\" />\n <style id=\"page-styles\">\n  form#expost-statistics output {left: 16em;}\n  #frontMatter > h1 {font-size: 1.4em;}  /* 2em for short headings */\n </style>\n <!-- Load polyfills for supporting >=IE9 -->\n <script crossorigin=\"anonymous\"\n         src=\"https://polyfill.io/v3/polyfill.min.js?features=Array.from%2CArray.of%2CArray.prototype.find%2CArray.prototype.includes%2CDOMTokenList%2CElement.prototype.after%2CElement.prototype.before%2CElement.prototype.classList%2CElement.prototype.cloneNode%2CIntl%2CNumber.isInteger%2CObject.keys%2CObject.values%2CPromise%2CString.prototype.endsWith%2CString.prototype.includes%2CURL%2Cconsole.log%2Cfetch\"></script>\n</head>\n<body>\n<div id=\"frontMatter\">\n <div id=\"sim4eduinfo\">Created with the <i>Object Event Simulation (OES)</i> framework <b><i>OESjs</i></b> available from\n  <a href='https://sim4edu.com'>sim4edu.com</a>.</div>\n <h1>A Service Queue Model with Utilization and Maximum Queue Length Statistics<a href=\"description.html\">Read more...</a></h1>\n</div>\n<main>\n <div id=\"model-menu\">\n  <button type='button' onclick='oes.ui.showNarrative()'>Narrative</button>\n  <button type='button' onclick='oes.ui.showDescription()'>Description</button>\n  <button id='showCodeBtn' type='button' onclick='oes.ui.showCode()'>Code</button>\n </div>\n</main>\n<noscript>\n <p>Please turn on JavaScript in your browser. Otherwise you cannot run Sim4edu simulations.</p>\n</noscript>\n<script src=\"metadata.js\"></script>\n<script src=\"../framework/frontMatter.js\"></script>\n<!-- load common core JS code files -->\n<script src=\"../framework/simulator-core.js\" async=\"async\"></script>\n<script src=\"../framework/chartist.js\" async=\"async\"></script>\n<!-- load scenario.js and all files required by it, and set up the user interface -->\n<script src=\"../loadManager.js\"></script>\n</body>\n</html>\n","date":"2019-06-23T12:15:24.944Z","updated":"2019-06-18T10:50:04.036Z","path":"sims/1/index.html","title":"","comments":1,"layout":"page","_id":"cjx8x0xw30003pih5tal0m23q"},{"_content":"var sim = sim || {};\nsim.model = sim.model || {};\nsim.scenario = sim.scenario || {};\nsim.config = sim.config || {};\n\nvar oes = oes || {};\noes.ui = oes.ui || {};\noes.ui.explanation = {};\noes.ui.i18n = {transDates:{}, changeDates:{}};\n\n/*******************************************************\n Simulation Model\n********************************************************/\nsim.model.name = \"ServiceDesk-1\";\nsim.model.title = \"A Service Queue Model with Utilization and Maximum Queue Length Statistics\";\noes.ui.i18n.changeDates.title = \"2017-04-19\";\nsim.model.systemNarrative = \"The customers arriving at a service desk have to wait in a queue \" +\n    \"when the service desk is busy. Otherwise, when the queue is empty and the service desk is not busy, \" +\n    \"they are immediately served by the service clerk. Whenever a service is completed, the served \" +\n    \"customer departs and the next customer from the queue, if there is any, will be served.\";\noes.ui.i18n.changeDates.systemNarrative = \"2017-04-19\";\nsim.model.shortDescription = \"A service queue model (one service and one queue) with two statistics: \" +\n    \"maximum queue length and service utilization. For simplicity, the model uses abstract (discrete) \"+\n    \"time and abstracts away from individual customers and from the composition of the queue, \" +\n    \"which is only represented in terms of its length. The model includes one object type: \" +\n    \"<i>ServiceDesk</i>, and two event types: <i>CustomerArrival</i> and <i>CustomerDeparture</i>. The random \"+\n    \"time variable for the recurrence of customer arrival events has a discrete uniform distribution and \" +\n    \"the random time variable for modeling the duration of services has a discrete empirical distribution.\";\noes.ui.i18n.changeDates.shortDescription = \"2019-04-01\";\nsim.model.license = \"CC BY-NC\";\nsim.model.creator = \"Gerd Wagner\";\nsim.model.created = \"2016-06-01\";\nsim.model.modified = \"2017-04-19\";\n","source":"sims/1/metadata.js","raw":"var sim = sim || {};\nsim.model = sim.model || {};\nsim.scenario = sim.scenario || {};\nsim.config = sim.config || {};\n\nvar oes = oes || {};\noes.ui = oes.ui || {};\noes.ui.explanation = {};\noes.ui.i18n = {transDates:{}, changeDates:{}};\n\n/*******************************************************\n Simulation Model\n********************************************************/\nsim.model.name = \"ServiceDesk-1\";\nsim.model.title = \"A Service Queue Model with Utilization and Maximum Queue Length Statistics\";\noes.ui.i18n.changeDates.title = \"2017-04-19\";\nsim.model.systemNarrative = \"The customers arriving at a service desk have to wait in a queue \" +\n    \"when the service desk is busy. Otherwise, when the queue is empty and the service desk is not busy, \" +\n    \"they are immediately served by the service clerk. Whenever a service is completed, the served \" +\n    \"customer departs and the next customer from the queue, if there is any, will be served.\";\noes.ui.i18n.changeDates.systemNarrative = \"2017-04-19\";\nsim.model.shortDescription = \"A service queue model (one service and one queue) with two statistics: \" +\n    \"maximum queue length and service utilization. For simplicity, the model uses abstract (discrete) \"+\n    \"time and abstracts away from individual customers and from the composition of the queue, \" +\n    \"which is only represented in terms of its length. The model includes one object type: \" +\n    \"<i>ServiceDesk</i>, and two event types: <i>CustomerArrival</i> and <i>CustomerDeparture</i>. The random \"+\n    \"time variable for the recurrence of customer arrival events has a discrete uniform distribution and \" +\n    \"the random time variable for modeling the duration of services has a discrete empirical distribution.\";\noes.ui.i18n.changeDates.shortDescription = \"2019-04-01\";\nsim.model.license = \"CC BY-NC\";\nsim.model.creator = \"Gerd Wagner\";\nsim.model.created = \"2016-06-01\";\nsim.model.modified = \"2017-04-19\";\n","date":"2019-06-23T11:36:16.450Z","updated":"2019-04-09T19:07:58.781Z","path":"sims/1/metadata.js","layout":"false","title":"","comments":1,"_id":"cjx8x0xw30004pih52qlyb76o"},{"_content":"self.importScripts(\"../framework/simulation-worker-core.js\");\nself.importScripts(\"simulation.js\");\n\nif (sim.model.objectTypes) {\n  sim.model.objectTypes.forEach( function (objT) {\n    self.importScripts( objT + \".js\");\n  });\n}\nif (sim.model.eventTypes) {\n  sim.model.eventTypes.forEach( function (evtT) {\n    self.importScripts( evtT + \".js\");\n  });\n}\nif (sim.model.activityTypes) {\n  sim.model.activityTypes.forEach( function (actT) {\n    self.importScripts( actT + \".js\");\n  });\n}\n\n//=================================================================\n\nonmessage = function (e) {\n  // receive parameter/variable values changed via the UI\n  if (e.data.endTime) sim.scenario.simulationEndTime = e.data.endTime;\n  if (e.data.changedModelVarValues) {\n    Object.keys( e.data.changedModelVarValues).forEach( function (varName) {\n      sim.model.v[varName].value = e.data.changedModelVarValues[varName];\n    });\n  }\n  if (e.data.runExperiment) {\n    sim.initializeSimulator( e.data.dbName);\n    if (e.data.expReplications) sim.experiment.replications = e.data.expReplications;\n    sim.runExperiment();\n  } else {\n    sim.initializeSimulator();\n    if (e.data.createLog !== undefined) sim.config.createLog = e.data.createLog;\n    sim.runScenario( true);  // run in worker thread\n  }\n};","source":"sims/1/simulation-worker.js","raw":"self.importScripts(\"../framework/simulation-worker-core.js\");\nself.importScripts(\"simulation.js\");\n\nif (sim.model.objectTypes) {\n  sim.model.objectTypes.forEach( function (objT) {\n    self.importScripts( objT + \".js\");\n  });\n}\nif (sim.model.eventTypes) {\n  sim.model.eventTypes.forEach( function (evtT) {\n    self.importScripts( evtT + \".js\");\n  });\n}\nif (sim.model.activityTypes) {\n  sim.model.activityTypes.forEach( function (actT) {\n    self.importScripts( actT + \".js\");\n  });\n}\n\n//=================================================================\n\nonmessage = function (e) {\n  // receive parameter/variable values changed via the UI\n  if (e.data.endTime) sim.scenario.simulationEndTime = e.data.endTime;\n  if (e.data.changedModelVarValues) {\n    Object.keys( e.data.changedModelVarValues).forEach( function (varName) {\n      sim.model.v[varName].value = e.data.changedModelVarValues[varName];\n    });\n  }\n  if (e.data.runExperiment) {\n    sim.initializeSimulator( e.data.dbName);\n    if (e.data.expReplications) sim.experiment.replications = e.data.expReplications;\n    sim.runExperiment();\n  } else {\n    sim.initializeSimulator();\n    if (e.data.createLog !== undefined) sim.config.createLog = e.data.createLog;\n    sim.runScenario( true);  // run in worker thread\n  }\n};","date":"2019-06-23T11:36:16.447Z","updated":"2019-02-09T10:36:34.015Z","path":"sims/1/simulation-worker.js","layout":"false","title":"","comments":1,"_id":"cjx8x0xw40005pih5gg0jrimz"},{"_content":"<div id=\"frontMatter\">\n <div id=\"sim4eduinfo\">Created with the <i>Object Event Simulation (OES)</i> framework <b><i>OESjs</i></b> available from\n  <a href='https://sim4edu.com'>sim4edu.com</a>.</div>\n <h1>A Service Queue Model with Utilization and Maximum Queue Length Statistics<a href=\"description.html\">Read moree...</a></h1>\n</div>\n<main>\n <div id=\"model-menu\">\n  <button type='button' onclick='oes.ui.showNarrative()'>Narrative</button>\n  <button type='button' onclick='oes.ui.showDescription()'>Description</button>\n  <button id='showCodeBtn' type='button' onclick='oes.ui.showCode()'>Code</button>\n </div>\n</main>\n<noscript>\n <p>Please turn on JavaScript in your browser. Otherwise you cannot run Sim4edu simulations.</p>\n</noscript>\n<script src=\"metadata.js\"></script>\n<script src=\"../framework/frontMatter.js\"></script>\n<!-- load common core JS code files -->\n<script src=\"../framework/simulator-core.js\" async=\"async\"></script>\n<script src=\"../framework/chartist.js\" async=\"async\"></script>\n<!-- load scenario.js and all files required by it, and set up the user interface -->\n<script src=\"../loadManager.js\"></script>s","source":"sims/1/index.md","raw":"<div id=\"frontMatter\">\n <div id=\"sim4eduinfo\">Created with the <i>Object Event Simulation (OES)</i> framework <b><i>OESjs</i></b> available from\n  <a href='https://sim4edu.com'>sim4edu.com</a>.</div>\n <h1>A Service Queue Model with Utilization and Maximum Queue Length Statistics<a href=\"description.html\">Read moree...</a></h1>\n</div>\n<main>\n <div id=\"model-menu\">\n  <button type='button' onclick='oes.ui.showNarrative()'>Narrative</button>\n  <button type='button' onclick='oes.ui.showDescription()'>Description</button>\n  <button id='showCodeBtn' type='button' onclick='oes.ui.showCode()'>Code</button>\n </div>\n</main>\n<noscript>\n <p>Please turn on JavaScript in your browser. Otherwise you cannot run Sim4edu simulations.</p>\n</noscript>\n<script src=\"metadata.js\"></script>\n<script src=\"../framework/frontMatter.js\"></script>\n<!-- load common core JS code files -->\n<script src=\"../framework/simulator-core.js\" async=\"async\"></script>\n<script src=\"../framework/chartist.js\" async=\"async\"></script>\n<!-- load scenario.js and all files required by it, and set up the user interface -->\n<script src=\"../loadManager.js\"></script>s","date":"2019-06-23T12:01:02.405Z","updated":"2019-06-23T12:01:02.405Z","path":"sims/1/index.html","title":"","comments":1,"layout":"page","_id":"cjx8x0xw50006pih5btp2fbyn"},{"_content":"/*******************************************************\n * ServiceDesk-1 - An example of a discrete event simulation.\n * @copyright Copyright 2016 Gerd Wagner, BTU (Germany) + ODU (VA, USA)\n * @author Gerd Wagner\n * @license The MIT License (MIT)\n ********************************************************/\n/*******************************************************\n Simulation Scenario Parameters\n********************************************************/\nsim.scenario.simulationEndTime = 200;\nsim.scenario.randomSeed = 12345;  // optional\nsim.config.createLog = true;\n/*******************************************************\n Simulation Model\n********************************************************/\nsim.model.time = \"discrete\";  // implies using only discrete random variables\nsim.model.objectTypes = [\"ServiceDesk\"];\nsim.model.eventTypes = [\"CustomerArrival\", \"CustomerDeparture\"];\n\nsim.model.constraints = {\n  \"nonEmptyQueue-implies-DepartureEvt\": function () {\n    var departureEvtExists = sim.FEL.containsEventOfType(\"CustomerDeparture\");\n    if (sim.namedObjects[\"serviceDesk1\"].queueLength > 0) return departureEvtExists;  // there must be a departure\n    else return !departureEvtExists;  // there must not be a departure\n  }\n};\n\n/*******************************************************\n Define Initial State\n********************************************************/\n// Either declaratively:\nsim.scenario.initialState.objects = {\n  \"1\": {typeName: \"ServiceDesk\", name:\"serviceDesk1\", shortLabel: \"sd1\", queueLength: 0}\n};\nsim.scenario.initialState.events = [\n  {typeName: \"CustomerArrival\", occTime:1, serviceDesk: 1}\n];\n// Or with a procedure:\n/*\nsim.scenario.setupInitialState = function () {\n  var sD = new ServiceDesk({id: 1, queueLength: 0, isBusy: false});\n  sim.addObject( sD);\n  sim.scheduleEvent( new CustomerArrival({occTime:1, serviceDesk: sD}));\n}\n*/\n/*******************************************************\n Define Output Statistics Variables\n ********************************************************/\nsim.model.statistics = {\n  \"arrivedCustomers\": {range:\"NonNegativeInteger\", label:\"Arrived customers\"},\n  \"departedCustomers\": {range:\"NonNegativeInteger\", label:\"Departed customers\"},\n  \"totalServiceTime\": {range:\"NonNegativeInteger\"},\n  \"serviceUtilization\": {range:\"Decimal\", label:\"Service utilization\",\n      computeOnlyAtEnd: true, decimalPlaces: 1, unit: \"%\",\n      expression: function () {\n        return sim.stat.totalServiceTime / sim.time * 100\n      }\n  },\n  \"maxQueueLength\": {objectType:\"ServiceDesk\", objectIdRef: 1,\n      property:\"queueLength\", aggregationFunction:\"max\", label:\"Max. queue length\"},\n  \"averageQueueLength\": {objectType:\"ServiceDesk\", objectIdRef: 1,\n    property:\"queueLength\", aggregationFunction:\"avg\", label:\"Avg. queue length\"},\n  \"queueLength\": {objectType:\"ServiceDesk\", objectIdRef: 1,\n    property:\"queueLength\", showTimeSeries: true, label:\"Queue length\"}\n};\n/*******************************************************\n Define an observation UI\n ********************************************************/\n/*\nsim.config.observationUI.type = \"SVG\";\nsim.config.observationUI.canvas.width = 600;\nsim.config.observationUI.canvas.height = 300;\nsim.config.observationUI.fixedElements = {\n  \"desk\": {\n    shapeName: \"rect\",\n    shapeAttributes: { x: 350, y: 200, width: 50, height: 30},\n    style: \"fill:brown; stroke-width:0\"\n  }\n};\nsim.config.observationUI.objectViews = {\n  \"serviceDesk1\": [  // a view of the queue\n    { shapeName: \"rect\",  // a rectangle defined by\n      shapeAttributes: {  // left-upper corner (x,y) as well as width and height\n        x: function (sd) {return Math.max( 0, 330 - sd.queueLength * 20);},\n        width: function (sd) {return Math.min( 300, sd.queueLength * 20);},\n        y: 150, height: 80\n      },\n      style:\"fill:yellow; stroke-width:0\"\n    },\n    { shapeName: \"text\",\n      shapeAttributes: {x: 325, y: 250,\n          textContent: function (sd) {return sd.queueLength;}},\n      style:\"font-size:14px; text-anchor:middle\"\n    }\n  ]\n};\n*/","source":"sims/1/simulation.js","raw":"/*******************************************************\n * ServiceDesk-1 - An example of a discrete event simulation.\n * @copyright Copyright 2016 Gerd Wagner, BTU (Germany) + ODU (VA, USA)\n * @author Gerd Wagner\n * @license The MIT License (MIT)\n ********************************************************/\n/*******************************************************\n Simulation Scenario Parameters\n********************************************************/\nsim.scenario.simulationEndTime = 200;\nsim.scenario.randomSeed = 12345;  // optional\nsim.config.createLog = true;\n/*******************************************************\n Simulation Model\n********************************************************/\nsim.model.time = \"discrete\";  // implies using only discrete random variables\nsim.model.objectTypes = [\"ServiceDesk\"];\nsim.model.eventTypes = [\"CustomerArrival\", \"CustomerDeparture\"];\n\nsim.model.constraints = {\n  \"nonEmptyQueue-implies-DepartureEvt\": function () {\n    var departureEvtExists = sim.FEL.containsEventOfType(\"CustomerDeparture\");\n    if (sim.namedObjects[\"serviceDesk1\"].queueLength > 0) return departureEvtExists;  // there must be a departure\n    else return !departureEvtExists;  // there must not be a departure\n  }\n};\n\n/*******************************************************\n Define Initial State\n********************************************************/\n// Either declaratively:\nsim.scenario.initialState.objects = {\n  \"1\": {typeName: \"ServiceDesk\", name:\"serviceDesk1\", shortLabel: \"sd1\", queueLength: 0}\n};\nsim.scenario.initialState.events = [\n  {typeName: \"CustomerArrival\", occTime:1, serviceDesk: 1}\n];\n// Or with a procedure:\n/*\nsim.scenario.setupInitialState = function () {\n  var sD = new ServiceDesk({id: 1, queueLength: 0, isBusy: false});\n  sim.addObject( sD);\n  sim.scheduleEvent( new CustomerArrival({occTime:1, serviceDesk: sD}));\n}\n*/\n/*******************************************************\n Define Output Statistics Variables\n ********************************************************/\nsim.model.statistics = {\n  \"arrivedCustomers\": {range:\"NonNegativeInteger\", label:\"Arrived customers\"},\n  \"departedCustomers\": {range:\"NonNegativeInteger\", label:\"Departed customers\"},\n  \"totalServiceTime\": {range:\"NonNegativeInteger\"},\n  \"serviceUtilization\": {range:\"Decimal\", label:\"Service utilization\",\n      computeOnlyAtEnd: true, decimalPlaces: 1, unit: \"%\",\n      expression: function () {\n        return sim.stat.totalServiceTime / sim.time * 100\n      }\n  },\n  \"maxQueueLength\": {objectType:\"ServiceDesk\", objectIdRef: 1,\n      property:\"queueLength\", aggregationFunction:\"max\", label:\"Max. queue length\"},\n  \"averageQueueLength\": {objectType:\"ServiceDesk\", objectIdRef: 1,\n    property:\"queueLength\", aggregationFunction:\"avg\", label:\"Avg. queue length\"},\n  \"queueLength\": {objectType:\"ServiceDesk\", objectIdRef: 1,\n    property:\"queueLength\", showTimeSeries: true, label:\"Queue length\"}\n};\n/*******************************************************\n Define an observation UI\n ********************************************************/\n/*\nsim.config.observationUI.type = \"SVG\";\nsim.config.observationUI.canvas.width = 600;\nsim.config.observationUI.canvas.height = 300;\nsim.config.observationUI.fixedElements = {\n  \"desk\": {\n    shapeName: \"rect\",\n    shapeAttributes: { x: 350, y: 200, width: 50, height: 30},\n    style: \"fill:brown; stroke-width:0\"\n  }\n};\nsim.config.observationUI.objectViews = {\n  \"serviceDesk1\": [  // a view of the queue\n    { shapeName: \"rect\",  // a rectangle defined by\n      shapeAttributes: {  // left-upper corner (x,y) as well as width and height\n        x: function (sd) {return Math.max( 0, 330 - sd.queueLength * 20);},\n        width: function (sd) {return Math.min( 300, sd.queueLength * 20);},\n        y: 150, height: 80\n      },\n      style:\"fill:yellow; stroke-width:0\"\n    },\n    { shapeName: \"text\",\n      shapeAttributes: {x: 325, y: 250,\n          textContent: function (sd) {return sd.queueLength;}},\n      style:\"font-size:14px; text-anchor:middle\"\n    }\n  ]\n};\n*/","date":"2019-06-23T11:36:16.448Z","updated":"2019-02-09T10:36:34.015Z","path":"sims/1/simulation.js","layout":"false","title":"","comments":1,"_id":"cjx8x0xw50007pih5r0uwnepc"},{"title":"A Service Queue Model with Utilization and Maximum Queue Length Statistics","_content":"<div onload=\"oes.ui.setupDescription()\">\n <div id=\"frontMatter\">\n  <h1><span>A Single Service Desk Queueing System Model with Utilization and Maximum Queue Length Statistics</span>\n   <a href=\"index.html\">Back to simulation</a></h1>\n    <p><strong>Classification tags</strong>: business operations management, DES, next-event time progression</p>\n    <figure class=\"right\"><img src=\"media/img/theme-image.svg\" alt=\"\" width=\"240\" /></figure>\n    <section id=\"shortDescription\"></section>\n </div>\n  <section class=\"mbd collapsed\"><h1><span>►</span>Conceptual Model <sup class=\"expl-req\">?</sup></h1>\n   <div id=\"expl-CM\" class=\"expl\"></div>\n\n   <section><h1>Conceptual Information Model <sup class=\"expl-req\">?</sup></h1>\n     <div id=\"expl-CIM\" class=\"expl\"></div>\n     <p>The potentially relevant object types are:</p>\n<!--\n     <figure class=\"right-float\">\n       <img src=\"CIM-ObjT.svg\" width=\"450\"/>\n       <figcaption>A conceptual model describing object types.</figcaption>\n     </figure>\n-->\n     <ol>\n       <li>customers,</li>\n       <li>service desks,</li>\n       <li>service queues,</li>\n       <li>service clerks.</li>\n     </ol>\n     <p>Notice that it seems preferable (more natural) to separate the service queue from the service desk and\n       not consider the customer that is currently being served at the service desk to be part of the queue.</p>\n     <p>Conceptually, a queue is a linearly ordered collection of objects of a certain type with a First-In-First-Out\n       policy: the next object to be removed is the first object, at the front of the queue, while additional\n       objects are added at the end of the queue.</p>\n     <p>Potentially relevant types of events are:</p>\n     <ol>\n       <li>customer arrivals,</li>\n       <li>customers queuing up,</li>\n       <li>customers being notified/invited to move forward to the service desk,</li>\n       <li>service start,</li>\n       <li>service end,</li>\n       <li>customer departures.</li>\n     </ol>\n     <p>Notice that a pair of start and end events, like \"service start\" and \"service end\", indicates that there is\n      an activity that is temporally framed by these two events. It's an option to consider also activities, in addition\n      to objects and events, in a conceptual model. We will do this in our <a href=\"https://sim4edu.com/sims/3/description.html\">\n      3rd simulation model</a> of the service desk system.</p>\n     <p>Both object types and event types, together with their participation associations, can be visually described in\n       a UML class diagram, as shown below.</p>\n     <figure>\n       <img src=\"media/img/CIM.svg\" width=\"600\"/>\n       <figcaption>A conceptual information model describing object types and event types.</figcaption>\n     </figure>\n   </section>\n\n   <section>\n     <h1>Conceptual Process Model <sup class=\"expl-req\">?</sup></h1>\n     <div id=\"expl-CPM\" class=\"expl\"></div>\n     <table>\n       <caption>Event rules.</caption>\n       <thead>\n       <tr>\n         <th>ON (event type)</th><th>DO (event routine)</th><th>Rule Diagram</th>\n       </tr>\n       </thead>\n       <tbody>\n       <tr>\n         <td>customer arrival</td>\n         <td>If the service desk is busy, then the new customer queues up,\n           else the service starts.</td>\n         <td><img src=\"media/img/Arrival_CRM.svg\" width=\"250\"/></td>\n       </tr>\n       <tr>\n         <td>service start</td>\n         <td>After some time, the service ends.</td>\n         <td><img src=\"media/img/ServiceStart_CRM.svg\" width=\"250\"/></td>\n       </tr>\n       <tr>\n         <td>service end</td>\n         <td>The served customer departs. If there are still customers waiting in the queue,\n           then the next service starts.</td>\n         <td><img src=\"media/img/ServiceEnd_CRM.svg\" width=\"250\"/></td>\n       </tr>\n       </tbody>\n     </table>\n     <p>The involved types of events can be related with each other via their (possibly conditional) temporal succession,\n      as visualized in the following BPMN process diagram:</p>\n     <figure>\n       <img src=\"media/img/CPM.svg\" width=\"600\"/>\n       <figcaption>A conceptual process diagram integrating the event rule diagrams.</figcaption>\n     </figure>\n   </section>\n </section>\n\n <section class=\"mbd collapsed\"><h1><span>►</span>Simulation Design Model <sup class=\"expl-req\">?</sup></h1>\n   <div id=\"expl-DM\" class=\"expl\"></div>\n\n   <section><h1>Information Design Model <sup class=\"expl-req\">?</sup></h1>\n     <div id=\"expl-IDM\" class=\"expl\"></div>\n     <p>In the current simulation project, the purpose of the simulation model is to compute two statistics:\n       the <em>service utilization</em> and <em>the maximum queue length</em>. We may therefore abstract away from many\n       of the object types from the conceptual information model:</p>\n     <ul>\n       <li> <code>Customer</code>: we don't need any information about individual customers;</li>\n       <li> <code>ServiceQueue</code>: we don't need to know who is next, it's sufficient to know <em>the length of the queue</em>;</li>\n       <li> <code>ServiceDesk</code>: we don't need any information about the service desks, the information if\n         <em>the service desk is busy</em> or not is obtained by testing if the queue's length is greater than 0.</li>\n       <li> <code>ServiceClerk</code>: we don't need any information about service clerks.</li>\n     </ul>\n     <p>Consequently, a computational design for the purpose of computing the two statistics <em>maximum queue length</em>\n       and <em>service utilization</em> is obtained by modeling only one object type: <b><code>ServiceDesk</code></b> with\n       one (integer-valued) attribute <code>queueLength</code>, and with one random variable <code>serviceDuration()</code>\n       expressed in the form of a special kind of function.</p>\n     <p>Concerning the event types described in the conceptual information model, the goal is to keep\n       only those of them, which are really needed, in the design model. This question is closely related\n       to the question, which types of state changes and follow-up event creation have to be modeled for\n       being able to answer the research question(s).</p>\n     <p>In the case of the given two research questions, we need to keep track of changes of the queue length\n       and we need to be able to add up the service durations. For keeping track of queue length changes,\n       we need to consider all types of events that may change the queue length: <em>customer arrivals</em> and\n       <em>customer departures</em>. For being able to add up the service durations, we need to catch <em>service start</em>\n       and <em>service end events</em>.</p>\n     <p>After identifying the relevant event types, we can look for further simplification opportunities\n      by analyzing their possible temporal coincidence. Clearly, we can consider customer departures\n      to occur immediately after the corresponding service end events, without having any effects that\n      could not be merged. Therefore, we can drop service end events, and take care of their effects\n      (the cumulative service time computation) when handling the related customer departure event.</p>\n     <p>In addition, we can drop service start events, since they temporally coincide with customer\n      arrivals when the queue is empty, or otherwise (when the queue is not empty) they coincide\n      with service end (and, hence, with customer departure) events, because each service end event\n      causes a new service start event as long as the queue is not empty.</p>\n     <p>As a result of the above considerations, we get the following two types of events:</p>\n     <ul>\n       <li><b><code>CustomerArrival</code></b> with a reference property <code>serviceDesk</code> with range\n         <code>ServiceDesk</code>. As an exogenous event type, <code>CustomerArrival</code> has a\n         <code>recurrence</code> function representing a random variable for computing the time in-between\n         two subsequent event occurrences.</li>\n       <li><b><code>CustomerDeparture</code></b> with a reference property <code>serviceDesk</code> with range\n         <code>ServiceDesk</code>.</li>\n     </ul>\n     <p>Notice that, for simplicity, we consider the customer that is currently being served to be part of the queue.\n      In this way, in the simulation program, we can check if the service desk is busy by testing if the length of\n      the queue is greater than 0.</p>\n     <p>An alternative approach would be not considering the currently served customer as\n       part of the queue, but rather use a Boolean attribute <code>isBusy</code> for being able to keep track if the\n       service desk ist still busy with serving a customer.</p>\n     <p>The object types and event types described above, together with their participation associations\n       (\"service desks participate in customer arrival events and in customer departure events\"),\n       are visually described in the following UML class diagram:</p>\n     <figure>\n       <img src=\"media/img/IDM.svg\" width=\"500\"/>\n       <figcaption>An information design model describing object types and event types.</figcaption>\n     </figure>\n     <p>Notice how functions representing random variables, like <code>serviceDuration()</code> and <code>recurrence()</code>,\n       are marked with the keyword (or UML stereotype) «rv» standing for \"random variable\".</p>\n   </section>\n   <section><h1>Process Design Model <sup class=\"expl-req\">?</sup></h1>\n     <div id=\"expl-PDM\" class=\"expl\"></div>\n     <table>\n       <caption>Event rule design table.</caption>\n       <thead>\n       <tr>\n         <td>ON (event type)</td><td>DO (event routine)</td>\n       </tr>\n       </thead>\n       <tbody>\n       <tr>\n         <td>CustomerArrival( sd) @ t</td>\n         <td style=\"font-size:smaller\">\n           INCREMENT sd.queueLength<br/>\n           IF sd.queueLength = 1<br/>\n           THEN SCHEDULE CustomerDeparture( sd) @ (t + sd.serviceDuration())\n         </td>\n       </tr>\n       <tr>\n         <td>CustomerDeparture( sd) @ t</td>\n         <td style=\"font-size:smaller\">\n           DECREMENT sd.queueLength<br/>\n           IF sd.queueLength > 0<br/>\n           THEN SCHEDULE CustomerDeparture( sd) @ (t + sd.serviceDuration())\n         </td>\n       </tr>\n       </tbody>\n     </table>\n     <table>\n       <caption>From conceptual event rule models to rule design models.</caption>\n       <thead>\n        <tr><th>Conceptual rule models</th><th>Rule design models</th></tr>\n       </thead>\n       <tbody>\n        <tr>\n         <td><img src=\"media/img/Arrival_CRM.svg\" width=\"250\"/></td>\n         <td><img src=\"media/img/Arrival_RDM.svg\" width=\"450\"/></td>\n        </tr>\n        <tr>\n         <td><img src=\"media/img/ServiceStart_CRM.svg\" width=\"250\"/></td>\n          <td rowspan=\"2\"><img src=\"media/img/Departure_RDM.svg\" width=\"450\"/></td>\n        </tr>\n        <tr>\n         <td><img src=\"media/img/ServiceEnd_CRM.svg\" width=\"250\"/></td>\n        </tr>\n       </tbody>\n     </table>\n     <figure>\n       <img src=\"media/img/PDM.svg\" width=\"700\"/>\n       <figcaption>A process design model integrating both event rule design models.</figcaption>\n     </figure>\n   </section>\n </section>\n\n <section class=\"mbd collapsed\"><h1><span>►</span>See also</h1>\n  <section><h1>Other OES Models for the Same System/Problem/Domain</h1>\n   <ol>\n     <!--\n     <li><a href=\"../1/index.html\">ServiceDesk-1</a>: A service queue model\n       (one service and one queue) with two statistics: <i>maximum queue length</i> and <i>service utilization</i>.\n       The model abstracts away from individual customers and from the composition of the queue.</li>\n     -->\n     <li><a href=\"../2/index.html\">ServiceDesk-2</a>: A service queue model\n       (one service and one queue) with one statistic: the Mean Response Time, which is the average length of time\n       a customer spends in the system from arrival to departure. For recording their arrival time, individual\n       customers are represented explicitly in a <i>waitingCustomers</i> queue.</li>\n     <li><a href=\"../3/index.html\">ServiceDesk-3</a>: A service queue model where the service\n       is modeled as an activity with the service desk as its resource, for which the utilization statistics\n       is computed automatically.</li>\n     <li><a href=\"../12/index.html\">ServiceDesk-4</a>: A service queue model where the\n       service desk is modeled as a processing node of a processing network that has an entry node and\n       an exit node for arriving and departing customers. The model is based on the pre-defined\n       <i>Processing Network</i> concepts: WorkObject, Arrival, EntryNode, ProcessingNode and ExitNode,\n       such that processing objects 'flow through the system'.</li>\n     <li><a href=\"../9/index.html\">ConsecutiveServices</a>: An activity-based\n       service queue model of two consecutive service providers with customer waiting lines.</li>\n     <li><a href=\"../11/index.html\">ProcessingNetwork-1</a>: A service queue model\n       where service providers are modeled as processing nodes (with input queues) within a processing network\n       that has an entry node and an exit node for arriving and departing customers. The model is based on\n       the pre-defined <i>Processing Network</i> concepts: WorkObject, Arrival, EntryNode, ProcessingNode and ExitNode,\n       such that processing objects 'flow through the system'.</li>\n   </ol>\n  </section>\n  <section><h1>Similar Models Implemented with Other Frameworks</h1>\n   <ol>\n     <li><a href=\"http://ccl.northwestern.edu/netlogo/models/community/Queueing_Simulation_Discrete_Event\">Queueing_Simulation_Discrete_Event</a>: This NetLogo simulation uses NetLogo's tick-advance primitive to advance simulation time by non-integral amounts. However, NetLogo's standard ticks display is unable to display non-integral values, so a custom ticks display has to be programmed. Copyright 2010, Nick Bennett.</li>\n   </ol>\n  </section>\n </section>\n <p><a href=\"index.html\">Back to simulation</a></p>\n</div>","source":"sims/1/description.md","raw":"---\ntitle: A Service Queue Model with Utilization and Maximum Queue Length Statistics\n---\n<div onload=\"oes.ui.setupDescription()\">\n <div id=\"frontMatter\">\n  <h1><span>A Single Service Desk Queueing System Model with Utilization and Maximum Queue Length Statistics</span>\n   <a href=\"index.html\">Back to simulation</a></h1>\n    <p><strong>Classification tags</strong>: business operations management, DES, next-event time progression</p>\n    <figure class=\"right\"><img src=\"media/img/theme-image.svg\" alt=\"\" width=\"240\" /></figure>\n    <section id=\"shortDescription\"></section>\n </div>\n  <section class=\"mbd collapsed\"><h1><span>►</span>Conceptual Model <sup class=\"expl-req\">?</sup></h1>\n   <div id=\"expl-CM\" class=\"expl\"></div>\n\n   <section><h1>Conceptual Information Model <sup class=\"expl-req\">?</sup></h1>\n     <div id=\"expl-CIM\" class=\"expl\"></div>\n     <p>The potentially relevant object types are:</p>\n<!--\n     <figure class=\"right-float\">\n       <img src=\"CIM-ObjT.svg\" width=\"450\"/>\n       <figcaption>A conceptual model describing object types.</figcaption>\n     </figure>\n-->\n     <ol>\n       <li>customers,</li>\n       <li>service desks,</li>\n       <li>service queues,</li>\n       <li>service clerks.</li>\n     </ol>\n     <p>Notice that it seems preferable (more natural) to separate the service queue from the service desk and\n       not consider the customer that is currently being served at the service desk to be part of the queue.</p>\n     <p>Conceptually, a queue is a linearly ordered collection of objects of a certain type with a First-In-First-Out\n       policy: the next object to be removed is the first object, at the front of the queue, while additional\n       objects are added at the end of the queue.</p>\n     <p>Potentially relevant types of events are:</p>\n     <ol>\n       <li>customer arrivals,</li>\n       <li>customers queuing up,</li>\n       <li>customers being notified/invited to move forward to the service desk,</li>\n       <li>service start,</li>\n       <li>service end,</li>\n       <li>customer departures.</li>\n     </ol>\n     <p>Notice that a pair of start and end events, like \"service start\" and \"service end\", indicates that there is\n      an activity that is temporally framed by these two events. It's an option to consider also activities, in addition\n      to objects and events, in a conceptual model. We will do this in our <a href=\"https://sim4edu.com/sims/3/description.html\">\n      3rd simulation model</a> of the service desk system.</p>\n     <p>Both object types and event types, together with their participation associations, can be visually described in\n       a UML class diagram, as shown below.</p>\n     <figure>\n       <img src=\"media/img/CIM.svg\" width=\"600\"/>\n       <figcaption>A conceptual information model describing object types and event types.</figcaption>\n     </figure>\n   </section>\n\n   <section>\n     <h1>Conceptual Process Model <sup class=\"expl-req\">?</sup></h1>\n     <div id=\"expl-CPM\" class=\"expl\"></div>\n     <table>\n       <caption>Event rules.</caption>\n       <thead>\n       <tr>\n         <th>ON (event type)</th><th>DO (event routine)</th><th>Rule Diagram</th>\n       </tr>\n       </thead>\n       <tbody>\n       <tr>\n         <td>customer arrival</td>\n         <td>If the service desk is busy, then the new customer queues up,\n           else the service starts.</td>\n         <td><img src=\"media/img/Arrival_CRM.svg\" width=\"250\"/></td>\n       </tr>\n       <tr>\n         <td>service start</td>\n         <td>After some time, the service ends.</td>\n         <td><img src=\"media/img/ServiceStart_CRM.svg\" width=\"250\"/></td>\n       </tr>\n       <tr>\n         <td>service end</td>\n         <td>The served customer departs. If there are still customers waiting in the queue,\n           then the next service starts.</td>\n         <td><img src=\"media/img/ServiceEnd_CRM.svg\" width=\"250\"/></td>\n       </tr>\n       </tbody>\n     </table>\n     <p>The involved types of events can be related with each other via their (possibly conditional) temporal succession,\n      as visualized in the following BPMN process diagram:</p>\n     <figure>\n       <img src=\"media/img/CPM.svg\" width=\"600\"/>\n       <figcaption>A conceptual process diagram integrating the event rule diagrams.</figcaption>\n     </figure>\n   </section>\n </section>\n\n <section class=\"mbd collapsed\"><h1><span>►</span>Simulation Design Model <sup class=\"expl-req\">?</sup></h1>\n   <div id=\"expl-DM\" class=\"expl\"></div>\n\n   <section><h1>Information Design Model <sup class=\"expl-req\">?</sup></h1>\n     <div id=\"expl-IDM\" class=\"expl\"></div>\n     <p>In the current simulation project, the purpose of the simulation model is to compute two statistics:\n       the <em>service utilization</em> and <em>the maximum queue length</em>. We may therefore abstract away from many\n       of the object types from the conceptual information model:</p>\n     <ul>\n       <li> <code>Customer</code>: we don't need any information about individual customers;</li>\n       <li> <code>ServiceQueue</code>: we don't need to know who is next, it's sufficient to know <em>the length of the queue</em>;</li>\n       <li> <code>ServiceDesk</code>: we don't need any information about the service desks, the information if\n         <em>the service desk is busy</em> or not is obtained by testing if the queue's length is greater than 0.</li>\n       <li> <code>ServiceClerk</code>: we don't need any information about service clerks.</li>\n     </ul>\n     <p>Consequently, a computational design for the purpose of computing the two statistics <em>maximum queue length</em>\n       and <em>service utilization</em> is obtained by modeling only one object type: <b><code>ServiceDesk</code></b> with\n       one (integer-valued) attribute <code>queueLength</code>, and with one random variable <code>serviceDuration()</code>\n       expressed in the form of a special kind of function.</p>\n     <p>Concerning the event types described in the conceptual information model, the goal is to keep\n       only those of them, which are really needed, in the design model. This question is closely related\n       to the question, which types of state changes and follow-up event creation have to be modeled for\n       being able to answer the research question(s).</p>\n     <p>In the case of the given two research questions, we need to keep track of changes of the queue length\n       and we need to be able to add up the service durations. For keeping track of queue length changes,\n       we need to consider all types of events that may change the queue length: <em>customer arrivals</em> and\n       <em>customer departures</em>. For being able to add up the service durations, we need to catch <em>service start</em>\n       and <em>service end events</em>.</p>\n     <p>After identifying the relevant event types, we can look for further simplification opportunities\n      by analyzing their possible temporal coincidence. Clearly, we can consider customer departures\n      to occur immediately after the corresponding service end events, without having any effects that\n      could not be merged. Therefore, we can drop service end events, and take care of their effects\n      (the cumulative service time computation) when handling the related customer departure event.</p>\n     <p>In addition, we can drop service start events, since they temporally coincide with customer\n      arrivals when the queue is empty, or otherwise (when the queue is not empty) they coincide\n      with service end (and, hence, with customer departure) events, because each service end event\n      causes a new service start event as long as the queue is not empty.</p>\n     <p>As a result of the above considerations, we get the following two types of events:</p>\n     <ul>\n       <li><b><code>CustomerArrival</code></b> with a reference property <code>serviceDesk</code> with range\n         <code>ServiceDesk</code>. As an exogenous event type, <code>CustomerArrival</code> has a\n         <code>recurrence</code> function representing a random variable for computing the time in-between\n         two subsequent event occurrences.</li>\n       <li><b><code>CustomerDeparture</code></b> with a reference property <code>serviceDesk</code> with range\n         <code>ServiceDesk</code>.</li>\n     </ul>\n     <p>Notice that, for simplicity, we consider the customer that is currently being served to be part of the queue.\n      In this way, in the simulation program, we can check if the service desk is busy by testing if the length of\n      the queue is greater than 0.</p>\n     <p>An alternative approach would be not considering the currently served customer as\n       part of the queue, but rather use a Boolean attribute <code>isBusy</code> for being able to keep track if the\n       service desk ist still busy with serving a customer.</p>\n     <p>The object types and event types described above, together with their participation associations\n       (\"service desks participate in customer arrival events and in customer departure events\"),\n       are visually described in the following UML class diagram:</p>\n     <figure>\n       <img src=\"media/img/IDM.svg\" width=\"500\"/>\n       <figcaption>An information design model describing object types and event types.</figcaption>\n     </figure>\n     <p>Notice how functions representing random variables, like <code>serviceDuration()</code> and <code>recurrence()</code>,\n       are marked with the keyword (or UML stereotype) «rv» standing for \"random variable\".</p>\n   </section>\n   <section><h1>Process Design Model <sup class=\"expl-req\">?</sup></h1>\n     <div id=\"expl-PDM\" class=\"expl\"></div>\n     <table>\n       <caption>Event rule design table.</caption>\n       <thead>\n       <tr>\n         <td>ON (event type)</td><td>DO (event routine)</td>\n       </tr>\n       </thead>\n       <tbody>\n       <tr>\n         <td>CustomerArrival( sd) @ t</td>\n         <td style=\"font-size:smaller\">\n           INCREMENT sd.queueLength<br/>\n           IF sd.queueLength = 1<br/>\n           THEN SCHEDULE CustomerDeparture( sd) @ (t + sd.serviceDuration())\n         </td>\n       </tr>\n       <tr>\n         <td>CustomerDeparture( sd) @ t</td>\n         <td style=\"font-size:smaller\">\n           DECREMENT sd.queueLength<br/>\n           IF sd.queueLength > 0<br/>\n           THEN SCHEDULE CustomerDeparture( sd) @ (t + sd.serviceDuration())\n         </td>\n       </tr>\n       </tbody>\n     </table>\n     <table>\n       <caption>From conceptual event rule models to rule design models.</caption>\n       <thead>\n        <tr><th>Conceptual rule models</th><th>Rule design models</th></tr>\n       </thead>\n       <tbody>\n        <tr>\n         <td><img src=\"media/img/Arrival_CRM.svg\" width=\"250\"/></td>\n         <td><img src=\"media/img/Arrival_RDM.svg\" width=\"450\"/></td>\n        </tr>\n        <tr>\n         <td><img src=\"media/img/ServiceStart_CRM.svg\" width=\"250\"/></td>\n          <td rowspan=\"2\"><img src=\"media/img/Departure_RDM.svg\" width=\"450\"/></td>\n        </tr>\n        <tr>\n         <td><img src=\"media/img/ServiceEnd_CRM.svg\" width=\"250\"/></td>\n        </tr>\n       </tbody>\n     </table>\n     <figure>\n       <img src=\"media/img/PDM.svg\" width=\"700\"/>\n       <figcaption>A process design model integrating both event rule design models.</figcaption>\n     </figure>\n   </section>\n </section>\n\n <section class=\"mbd collapsed\"><h1><span>►</span>See also</h1>\n  <section><h1>Other OES Models for the Same System/Problem/Domain</h1>\n   <ol>\n     <!--\n     <li><a href=\"../1/index.html\">ServiceDesk-1</a>: A service queue model\n       (one service and one queue) with two statistics: <i>maximum queue length</i> and <i>service utilization</i>.\n       The model abstracts away from individual customers and from the composition of the queue.</li>\n     -->\n     <li><a href=\"../2/index.html\">ServiceDesk-2</a>: A service queue model\n       (one service and one queue) with one statistic: the Mean Response Time, which is the average length of time\n       a customer spends in the system from arrival to departure. For recording their arrival time, individual\n       customers are represented explicitly in a <i>waitingCustomers</i> queue.</li>\n     <li><a href=\"../3/index.html\">ServiceDesk-3</a>: A service queue model where the service\n       is modeled as an activity with the service desk as its resource, for which the utilization statistics\n       is computed automatically.</li>\n     <li><a href=\"../12/index.html\">ServiceDesk-4</a>: A service queue model where the\n       service desk is modeled as a processing node of a processing network that has an entry node and\n       an exit node for arriving and departing customers. The model is based on the pre-defined\n       <i>Processing Network</i> concepts: WorkObject, Arrival, EntryNode, ProcessingNode and ExitNode,\n       such that processing objects 'flow through the system'.</li>\n     <li><a href=\"../9/index.html\">ConsecutiveServices</a>: An activity-based\n       service queue model of two consecutive service providers with customer waiting lines.</li>\n     <li><a href=\"../11/index.html\">ProcessingNetwork-1</a>: A service queue model\n       where service providers are modeled as processing nodes (with input queues) within a processing network\n       that has an entry node and an exit node for arriving and departing customers. The model is based on\n       the pre-defined <i>Processing Network</i> concepts: WorkObject, Arrival, EntryNode, ProcessingNode and ExitNode,\n       such that processing objects 'flow through the system'.</li>\n   </ol>\n  </section>\n  <section><h1>Similar Models Implemented with Other Frameworks</h1>\n   <ol>\n     <li><a href=\"http://ccl.northwestern.edu/netlogo/models/community/Queueing_Simulation_Discrete_Event\">Queueing_Simulation_Discrete_Event</a>: This NetLogo simulation uses NetLogo's tick-advance primitive to advance simulation time by non-integral amounts. However, NetLogo's standard ticks display is unable to display non-integral values, so a custom ticks display has to be programmed. Copyright 2010, Nick Bennett.</li>\n   </ol>\n  </section>\n </section>\n <p><a href=\"index.html\">Back to simulation</a></p>\n</div>","date":"2019-06-23T12:00:31.586Z","updated":"2019-06-23T12:00:31.586Z","path":"sims/1/description.html","comments":1,"layout":"page","_id":"cjx8x0xwa0008pih52pkt059c"},{"_content":"<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en-US\" lang=\"en-US\">\n<head>\n <meta charset=\"UTF-8\" />\n <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n <title>ServiceDesk-1 Object Event Simulation Description</title>\n <meta name=\"viewport\" content=\"width=device-width, initial-scale = 1.0\" />\n <meta http-equiv=\"Content-Language\" content=\"en\"/>\n <meta name=\"description\" content=\"A service queue model (one service and one queue) with two statistics: maximum queue length and service utilization. For simplicity, the model uses abstract (discrete) time and abstracts away from individual customers and from the composition of the queue, which is only represented in terms of its length. The model includes one object type: ServiceDesk, and two event types: CustomerArrival and CustomerDeparture. Both the random time variable for the recurrence of customer arrival events and the random time variable for modeling the duration of services are discrete.\" />\n <link rel=\"stylesheet\" href=\"../framework/description.css\" />\n <script src=\"metadata.js\"></script>\n <script src=\"../framework/description.js\"></script>\n</head>\n<body onload=\"oes.ui.setupDescription()\">\n <div id=\"frontMatter\">\n  <h1><span>A Single Service Desk Queueing System Model with Utilization and Maximum Queue Length Statistics</span>\n   <a href=\"index.html\">Back to simulation</a></h1>\n    <p><strong>Classification tags</strong>: business operations management, DES, next-event time progression</p>\n    <figure class=\"right\"><img src=\"media/img/theme-image.svg\" alt=\"\" width=\"240\" /></figure>\n    <section id=\"shortDescription\"></section>\n </div>\n  <section class=\"mbd collapsed\"><h1><span>►</span>Conceptual Model <sup class=\"expl-req\">?</sup></h1>\n   <div id=\"expl-CM\" class=\"expl\"></div>\n\n   <section><h1>Conceptual Information Model <sup class=\"expl-req\">?</sup></h1>\n     <div id=\"expl-CIM\" class=\"expl\"></div>\n     <p>The potentially relevant object types are:</p>\n<!--\n     <figure class=\"right-float\">\n       <img src=\"CIM-ObjT.svg\" width=\"450\"/>\n       <figcaption>A conceptual model describing object types.</figcaption>\n     </figure>\n-->\n     <ol>\n       <li>customers,</li>\n       <li>service desks,</li>\n       <li>service queues,</li>\n       <li>service clerks.</li>\n     </ol>\n     <p>Notice that it seems preferable (more natural) to separate the service queue from the service desk and\n       not consider the customer that is currently being served at the service desk to be part of the queue.</p>\n     <p>Conceptually, a queue is a linearly ordered collection of objects of a certain type with a First-In-First-Out\n       policy: the next object to be removed is the first object, at the front of the queue, while additional\n       objects are added at the end of the queue.</p>\n     <p>Potentially relevant types of events are:</p>\n     <ol>\n       <li>customer arrivals,</li>\n       <li>customers queuing up,</li>\n       <li>customers being notified/invited to move forward to the service desk,</li>\n       <li>service start,</li>\n       <li>service end,</li>\n       <li>customer departures.</li>\n     </ol>\n     <p>Notice that a pair of start and end events, like \"service start\" and \"service end\", indicates that there is\n      an activity that is temporally framed by these two events. It's an option to consider also activities, in addition\n      to objects and events, in a conceptual model. We will do this in our <a href=\"https://sim4edu.com/sims/3/description.html\">\n      3rd simulation model</a> of the service desk system.</p>\n     <p>Both object types and event types, together with their participation associations, can be visually described in\n       a UML class diagram, as shown below.</p>\n     <figure>\n       <img src=\"media/img/CIM.svg\" width=\"600\"/>\n       <figcaption>A conceptual information model describing object types and event types.</figcaption>\n     </figure>\n   </section>\n\n   <section>\n     <h1>Conceptual Process Model <sup class=\"expl-req\">?</sup></h1>\n     <div id=\"expl-CPM\" class=\"expl\"></div>\n     <table>\n       <caption>Event rules.</caption>\n       <thead>\n       <tr>\n         <th>ON (event type)</th><th>DO (event routine)</th><th>Rule Diagram</th>\n       </tr>\n       </thead>\n       <tbody>\n       <tr>\n         <td>customer arrival</td>\n         <td>If the service desk is busy, then the new customer queues up,\n           else the service starts.</td>\n         <td><img src=\"media/img/Arrival_CRM.svg\" width=\"250\"/></td>\n       </tr>\n       <tr>\n         <td>service start</td>\n         <td>After some time, the service ends.</td>\n         <td><img src=\"media/img/ServiceStart_CRM.svg\" width=\"250\"/></td>\n       </tr>\n       <tr>\n         <td>service end</td>\n         <td>The served customer departs. If there are still customers waiting in the queue,\n           then the next service starts.</td>\n         <td><img src=\"media/img/ServiceEnd_CRM.svg\" width=\"250\"/></td>\n       </tr>\n       </tbody>\n     </table>\n     <p>The involved types of events can be related with each other via their (possibly conditional) temporal succession,\n      as visualized in the following BPMN process diagram:</p>\n     <figure>\n       <img src=\"media/img/CPM.svg\" width=\"600\"/>\n       <figcaption>A conceptual process diagram integrating the event rule diagrams.</figcaption>\n     </figure>\n   </section>\n </section>\n\n <section class=\"mbd collapsed\"><h1><span>►</span>Simulation Design Model <sup class=\"expl-req\">?</sup></h1>\n   <div id=\"expl-DM\" class=\"expl\"></div>\n\n   <section><h1>Information Design Model <sup class=\"expl-req\">?</sup></h1>\n     <div id=\"expl-IDM\" class=\"expl\"></div>\n     <p>In the current simulation project, the purpose of the simulation model is to compute two statistics:\n       the <em>service utilization</em> and <em>the maximum queue length</em>. We may therefore abstract away from many\n       of the object types from the conceptual information model:</p>\n     <ul>\n       <li> <code>Customer</code>: we don't need any information about individual customers;</li>\n       <li> <code>ServiceQueue</code>: we don't need to know who is next, it's sufficient to know <em>the length of the queue</em>;</li>\n       <li> <code>ServiceDesk</code>: we don't need any information about the service desks, the information if\n         <em>the service desk is busy</em> or not is obtained by testing if the queue's length is greater than 0.</li>\n       <li> <code>ServiceClerk</code>: we don't need any information about service clerks.</li>\n     </ul>\n     <p>Consequently, a computational design for the purpose of computing the two statistics <em>maximum queue length</em>\n       and <em>service utilization</em> is obtained by modeling only one object type: <b><code>ServiceDesk</code></b> with\n       one (integer-valued) attribute <code>queueLength</code>, and with one random variable <code>serviceDuration()</code>\n       expressed in the form of a special kind of function.</p>\n     <p>Concerning the event types described in the conceptual information model, the goal is to keep\n       only those of them, which are really needed, in the design model. This question is closely related\n       to the question, which types of state changes and follow-up event creation have to be modeled for\n       being able to answer the research question(s).</p>\n     <p>In the case of the given two research questions, we need to keep track of changes of the queue length\n       and we need to be able to add up the service durations. For keeping track of queue length changes,\n       we need to consider all types of events that may change the queue length: <em>customer arrivals</em> and\n       <em>customer departures</em>. For being able to add up the service durations, we need to catch <em>service start</em>\n       and <em>service end events</em>.</p>\n     <p>After identifying the relevant event types, we can look for further simplification opportunities\n      by analyzing their possible temporal coincidence. Clearly, we can consider customer departures\n      to occur immediately after the corresponding service end events, without having any effects that\n      could not be merged. Therefore, we can drop service end events, and take care of their effects\n      (the cumulative service time computation) when handling the related customer departure event.</p>\n     <p>In addition, we can drop service start events, since they temporally coincide with customer\n      arrivals when the queue is empty, or otherwise (when the queue is not empty) they coincide\n      with service end (and, hence, with customer departure) events, because each service end event\n      causes a new service start event as long as the queue is not empty.</p>\n     <p>As a result of the above considerations, we get the following two types of events:</p>\n     <ul>\n       <li><b><code>CustomerArrival</code></b> with a reference property <code>serviceDesk</code> with range\n         <code>ServiceDesk</code>. As an exogenous event type, <code>CustomerArrival</code> has a\n         <code>recurrence</code> function representing a random variable for computing the time in-between\n         two subsequent event occurrences.</li>\n       <li><b><code>CustomerDeparture</code></b> with a reference property <code>serviceDesk</code> with range\n         <code>ServiceDesk</code>.</li>\n     </ul>\n     <p>Notice that, for simplicity, we consider the customer that is currently being served to be part of the queue.\n      In this way, in the simulation program, we can check if the service desk is busy by testing if the length of\n      the queue is greater than 0.</p>\n     <p>An alternative approach would be not considering the currently served customer as\n       part of the queue, but rather use a Boolean attribute <code>isBusy</code> for being able to keep track if the\n       service desk ist still busy with serving a customer.</p>\n     <p>The object types and event types described above, together with their participation associations\n       (\"service desks participate in customer arrival events and in customer departure events\"),\n       are visually described in the following UML class diagram:</p>\n     <figure>\n       <img src=\"media/img/IDM.svg\" width=\"500\"/>\n       <figcaption>An information design model describing object types and event types.</figcaption>\n     </figure>\n     <p>Notice how functions representing random variables, like <code>serviceDuration()</code> and <code>recurrence()</code>,\n       are marked with the keyword (or UML stereotype) «rv» standing for \"random variable\".</p>\n   </section>\n   <section><h1>Process Design Model <sup class=\"expl-req\">?</sup></h1>\n     <div id=\"expl-PDM\" class=\"expl\"></div>\n     <table>\n       <caption>Event rule design table.</caption>\n       <thead>\n       <tr>\n         <td>ON (event type)</td><td>DO (event routine)</td>\n       </tr>\n       </thead>\n       <tbody>\n       <tr>\n         <td>CustomerArrival( sd) @ t</td>\n         <td style=\"font-size:smaller\">\n           INCREMENT sd.queueLength<br/>\n           IF sd.queueLength = 1<br/>\n           THEN SCHEDULE CustomerDeparture( sd) @ (t + sd.serviceDuration())\n         </td>\n       </tr>\n       <tr>\n         <td>CustomerDeparture( sd) @ t</td>\n         <td style=\"font-size:smaller\">\n           DECREMENT sd.queueLength<br/>\n           IF sd.queueLength > 0<br/>\n           THEN SCHEDULE CustomerDeparture( sd) @ (t + sd.serviceDuration())\n         </td>\n       </tr>\n       </tbody>\n     </table>\n     <table>\n       <caption>From conceptual event rule models to rule design models.</caption>\n       <thead>\n        <tr><th>Conceptual rule models</th><th>Rule design models</th></tr>\n       </thead>\n       <tbody>\n        <tr>\n         <td><img src=\"media/img/Arrival_CRM.svg\" width=\"250\"/></td>\n         <td><img src=\"media/img/Arrival_RDM.svg\" width=\"450\"/></td>\n        </tr>\n        <tr>\n         <td><img src=\"media/img/ServiceStart_CRM.svg\" width=\"250\"/></td>\n          <td rowspan=\"2\"><img src=\"media/img/Departure_RDM.svg\" width=\"450\"/></td>\n        </tr>\n        <tr>\n         <td><img src=\"media/img/ServiceEnd_CRM.svg\" width=\"250\"/></td>\n        </tr>\n       </tbody>\n     </table>\n     <figure>\n       <img src=\"media/img/PDM.svg\" width=\"700\"/>\n       <figcaption>A process design model integrating both event rule design models.</figcaption>\n     </figure>\n   </section>\n </section>\n\n <section class=\"mbd collapsed\"><h1><span>►</span>See also</h1>\n  <section><h1>Other OES Models for the Same System/Problem/Domain</h1>\n   <ol>\n     <!--\n     <li><a href=\"../1/index.html\">ServiceDesk-1</a>: A service queue model\n       (one service and one queue) with two statistics: <i>maximum queue length</i> and <i>service utilization</i>.\n       The model abstracts away from individual customers and from the composition of the queue.</li>\n     -->\n     <li><a href=\"../2/index.html\">ServiceDesk-2</a>: A service queue model\n       (one service and one queue) with one statistic: the Mean Response Time, which is the average length of time\n       a customer spends in the system from arrival to departure. For recording their arrival time, individual\n       customers are represented explicitly in a <i>waitingCustomers</i> queue.</li>\n     <li><a href=\"../3/index.html\">ServiceDesk-3</a>: A service queue model where the service\n       is modeled as an activity with the service desk as its resource, for which the utilization statistics\n       is computed automatically.</li>\n     <li><a href=\"../12/index.html\">ServiceDesk-4</a>: A service queue model where the\n       service desk is modeled as a processing node of a processing network that has an entry node and\n       an exit node for arriving and departing customers. The model is based on the pre-defined\n       <i>Processing Network</i> concepts: WorkObject, Arrival, EntryNode, ProcessingNode and ExitNode,\n       such that processing objects 'flow through the system'.</li>\n     <li><a href=\"../9/index.html\">ConsecutiveServices</a>: An activity-based\n       service queue model of two consecutive service providers with customer waiting lines.</li>\n     <li><a href=\"../11/index.html\">ProcessingNetwork-1</a>: A service queue model\n       where service providers are modeled as processing nodes (with input queues) within a processing network\n       that has an entry node and an exit node for arriving and departing customers. The model is based on\n       the pre-defined <i>Processing Network</i> concepts: WorkObject, Arrival, EntryNode, ProcessingNode and ExitNode,\n       such that processing objects 'flow through the system'.</li>\n   </ol>\n  </section>\n  <section><h1>Similar Models Implemented with Other Frameworks</h1>\n   <ol>\n     <li><a href=\"http://ccl.northwestern.edu/netlogo/models/community/Queueing_Simulation_Discrete_Event\">Queueing_Simulation_Discrete_Event</a>: This NetLogo simulation uses NetLogo's tick-advance primitive to advance simulation time by non-integral amounts. However, NetLogo's standard ticks display is unable to display non-integral values, so a custom ticks display has to be programmed. Copyright 2010, Nick Bennett.</li>\n   </ol>\n  </section>\n </section>\n <p><a href=\"index.html\">Back to simulation</a></p>\n</body>\n</html>\n\n","source":"sims/1/description.html","raw":"<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en-US\" lang=\"en-US\">\n<head>\n <meta charset=\"UTF-8\" />\n <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n <title>ServiceDesk-1 Object Event Simulation Description</title>\n <meta name=\"viewport\" content=\"width=device-width, initial-scale = 1.0\" />\n <meta http-equiv=\"Content-Language\" content=\"en\"/>\n <meta name=\"description\" content=\"A service queue model (one service and one queue) with two statistics: maximum queue length and service utilization. For simplicity, the model uses abstract (discrete) time and abstracts away from individual customers and from the composition of the queue, which is only represented in terms of its length. The model includes one object type: ServiceDesk, and two event types: CustomerArrival and CustomerDeparture. Both the random time variable for the recurrence of customer arrival events and the random time variable for modeling the duration of services are discrete.\" />\n <link rel=\"stylesheet\" href=\"../framework/description.css\" />\n <script src=\"metadata.js\"></script>\n <script src=\"../framework/description.js\"></script>\n</head>\n<body onload=\"oes.ui.setupDescription()\">\n <div id=\"frontMatter\">\n  <h1><span>A Single Service Desk Queueing System Model with Utilization and Maximum Queue Length Statistics</span>\n   <a href=\"index.html\">Back to simulation</a></h1>\n    <p><strong>Classification tags</strong>: business operations management, DES, next-event time progression</p>\n    <figure class=\"right\"><img src=\"media/img/theme-image.svg\" alt=\"\" width=\"240\" /></figure>\n    <section id=\"shortDescription\"></section>\n </div>\n  <section class=\"mbd collapsed\"><h1><span>►</span>Conceptual Model <sup class=\"expl-req\">?</sup></h1>\n   <div id=\"expl-CM\" class=\"expl\"></div>\n\n   <section><h1>Conceptual Information Model <sup class=\"expl-req\">?</sup></h1>\n     <div id=\"expl-CIM\" class=\"expl\"></div>\n     <p>The potentially relevant object types are:</p>\n<!--\n     <figure class=\"right-float\">\n       <img src=\"CIM-ObjT.svg\" width=\"450\"/>\n       <figcaption>A conceptual model describing object types.</figcaption>\n     </figure>\n-->\n     <ol>\n       <li>customers,</li>\n       <li>service desks,</li>\n       <li>service queues,</li>\n       <li>service clerks.</li>\n     </ol>\n     <p>Notice that it seems preferable (more natural) to separate the service queue from the service desk and\n       not consider the customer that is currently being served at the service desk to be part of the queue.</p>\n     <p>Conceptually, a queue is a linearly ordered collection of objects of a certain type with a First-In-First-Out\n       policy: the next object to be removed is the first object, at the front of the queue, while additional\n       objects are added at the end of the queue.</p>\n     <p>Potentially relevant types of events are:</p>\n     <ol>\n       <li>customer arrivals,</li>\n       <li>customers queuing up,</li>\n       <li>customers being notified/invited to move forward to the service desk,</li>\n       <li>service start,</li>\n       <li>service end,</li>\n       <li>customer departures.</li>\n     </ol>\n     <p>Notice that a pair of start and end events, like \"service start\" and \"service end\", indicates that there is\n      an activity that is temporally framed by these two events. It's an option to consider also activities, in addition\n      to objects and events, in a conceptual model. We will do this in our <a href=\"https://sim4edu.com/sims/3/description.html\">\n      3rd simulation model</a> of the service desk system.</p>\n     <p>Both object types and event types, together with their participation associations, can be visually described in\n       a UML class diagram, as shown below.</p>\n     <figure>\n       <img src=\"media/img/CIM.svg\" width=\"600\"/>\n       <figcaption>A conceptual information model describing object types and event types.</figcaption>\n     </figure>\n   </section>\n\n   <section>\n     <h1>Conceptual Process Model <sup class=\"expl-req\">?</sup></h1>\n     <div id=\"expl-CPM\" class=\"expl\"></div>\n     <table>\n       <caption>Event rules.</caption>\n       <thead>\n       <tr>\n         <th>ON (event type)</th><th>DO (event routine)</th><th>Rule Diagram</th>\n       </tr>\n       </thead>\n       <tbody>\n       <tr>\n         <td>customer arrival</td>\n         <td>If the service desk is busy, then the new customer queues up,\n           else the service starts.</td>\n         <td><img src=\"media/img/Arrival_CRM.svg\" width=\"250\"/></td>\n       </tr>\n       <tr>\n         <td>service start</td>\n         <td>After some time, the service ends.</td>\n         <td><img src=\"media/img/ServiceStart_CRM.svg\" width=\"250\"/></td>\n       </tr>\n       <tr>\n         <td>service end</td>\n         <td>The served customer departs. If there are still customers waiting in the queue,\n           then the next service starts.</td>\n         <td><img src=\"media/img/ServiceEnd_CRM.svg\" width=\"250\"/></td>\n       </tr>\n       </tbody>\n     </table>\n     <p>The involved types of events can be related with each other via their (possibly conditional) temporal succession,\n      as visualized in the following BPMN process diagram:</p>\n     <figure>\n       <img src=\"media/img/CPM.svg\" width=\"600\"/>\n       <figcaption>A conceptual process diagram integrating the event rule diagrams.</figcaption>\n     </figure>\n   </section>\n </section>\n\n <section class=\"mbd collapsed\"><h1><span>►</span>Simulation Design Model <sup class=\"expl-req\">?</sup></h1>\n   <div id=\"expl-DM\" class=\"expl\"></div>\n\n   <section><h1>Information Design Model <sup class=\"expl-req\">?</sup></h1>\n     <div id=\"expl-IDM\" class=\"expl\"></div>\n     <p>In the current simulation project, the purpose of the simulation model is to compute two statistics:\n       the <em>service utilization</em> and <em>the maximum queue length</em>. We may therefore abstract away from many\n       of the object types from the conceptual information model:</p>\n     <ul>\n       <li> <code>Customer</code>: we don't need any information about individual customers;</li>\n       <li> <code>ServiceQueue</code>: we don't need to know who is next, it's sufficient to know <em>the length of the queue</em>;</li>\n       <li> <code>ServiceDesk</code>: we don't need any information about the service desks, the information if\n         <em>the service desk is busy</em> or not is obtained by testing if the queue's length is greater than 0.</li>\n       <li> <code>ServiceClerk</code>: we don't need any information about service clerks.</li>\n     </ul>\n     <p>Consequently, a computational design for the purpose of computing the two statistics <em>maximum queue length</em>\n       and <em>service utilization</em> is obtained by modeling only one object type: <b><code>ServiceDesk</code></b> with\n       one (integer-valued) attribute <code>queueLength</code>, and with one random variable <code>serviceDuration()</code>\n       expressed in the form of a special kind of function.</p>\n     <p>Concerning the event types described in the conceptual information model, the goal is to keep\n       only those of them, which are really needed, in the design model. This question is closely related\n       to the question, which types of state changes and follow-up event creation have to be modeled for\n       being able to answer the research question(s).</p>\n     <p>In the case of the given two research questions, we need to keep track of changes of the queue length\n       and we need to be able to add up the service durations. For keeping track of queue length changes,\n       we need to consider all types of events that may change the queue length: <em>customer arrivals</em> and\n       <em>customer departures</em>. For being able to add up the service durations, we need to catch <em>service start</em>\n       and <em>service end events</em>.</p>\n     <p>After identifying the relevant event types, we can look for further simplification opportunities\n      by analyzing their possible temporal coincidence. Clearly, we can consider customer departures\n      to occur immediately after the corresponding service end events, without having any effects that\n      could not be merged. Therefore, we can drop service end events, and take care of their effects\n      (the cumulative service time computation) when handling the related customer departure event.</p>\n     <p>In addition, we can drop service start events, since they temporally coincide with customer\n      arrivals when the queue is empty, or otherwise (when the queue is not empty) they coincide\n      with service end (and, hence, with customer departure) events, because each service end event\n      causes a new service start event as long as the queue is not empty.</p>\n     <p>As a result of the above considerations, we get the following two types of events:</p>\n     <ul>\n       <li><b><code>CustomerArrival</code></b> with a reference property <code>serviceDesk</code> with range\n         <code>ServiceDesk</code>. As an exogenous event type, <code>CustomerArrival</code> has a\n         <code>recurrence</code> function representing a random variable for computing the time in-between\n         two subsequent event occurrences.</li>\n       <li><b><code>CustomerDeparture</code></b> with a reference property <code>serviceDesk</code> with range\n         <code>ServiceDesk</code>.</li>\n     </ul>\n     <p>Notice that, for simplicity, we consider the customer that is currently being served to be part of the queue.\n      In this way, in the simulation program, we can check if the service desk is busy by testing if the length of\n      the queue is greater than 0.</p>\n     <p>An alternative approach would be not considering the currently served customer as\n       part of the queue, but rather use a Boolean attribute <code>isBusy</code> for being able to keep track if the\n       service desk ist still busy with serving a customer.</p>\n     <p>The object types and event types described above, together with their participation associations\n       (\"service desks participate in customer arrival events and in customer departure events\"),\n       are visually described in the following UML class diagram:</p>\n     <figure>\n       <img src=\"media/img/IDM.svg\" width=\"500\"/>\n       <figcaption>An information design model describing object types and event types.</figcaption>\n     </figure>\n     <p>Notice how functions representing random variables, like <code>serviceDuration()</code> and <code>recurrence()</code>,\n       are marked with the keyword (or UML stereotype) «rv» standing for \"random variable\".</p>\n   </section>\n   <section><h1>Process Design Model <sup class=\"expl-req\">?</sup></h1>\n     <div id=\"expl-PDM\" class=\"expl\"></div>\n     <table>\n       <caption>Event rule design table.</caption>\n       <thead>\n       <tr>\n         <td>ON (event type)</td><td>DO (event routine)</td>\n       </tr>\n       </thead>\n       <tbody>\n       <tr>\n         <td>CustomerArrival( sd) @ t</td>\n         <td style=\"font-size:smaller\">\n           INCREMENT sd.queueLength<br/>\n           IF sd.queueLength = 1<br/>\n           THEN SCHEDULE CustomerDeparture( sd) @ (t + sd.serviceDuration())\n         </td>\n       </tr>\n       <tr>\n         <td>CustomerDeparture( sd) @ t</td>\n         <td style=\"font-size:smaller\">\n           DECREMENT sd.queueLength<br/>\n           IF sd.queueLength > 0<br/>\n           THEN SCHEDULE CustomerDeparture( sd) @ (t + sd.serviceDuration())\n         </td>\n       </tr>\n       </tbody>\n     </table>\n     <table>\n       <caption>From conceptual event rule models to rule design models.</caption>\n       <thead>\n        <tr><th>Conceptual rule models</th><th>Rule design models</th></tr>\n       </thead>\n       <tbody>\n        <tr>\n         <td><img src=\"media/img/Arrival_CRM.svg\" width=\"250\"/></td>\n         <td><img src=\"media/img/Arrival_RDM.svg\" width=\"450\"/></td>\n        </tr>\n        <tr>\n         <td><img src=\"media/img/ServiceStart_CRM.svg\" width=\"250\"/></td>\n          <td rowspan=\"2\"><img src=\"media/img/Departure_RDM.svg\" width=\"450\"/></td>\n        </tr>\n        <tr>\n         <td><img src=\"media/img/ServiceEnd_CRM.svg\" width=\"250\"/></td>\n        </tr>\n       </tbody>\n     </table>\n     <figure>\n       <img src=\"media/img/PDM.svg\" width=\"700\"/>\n       <figcaption>A process design model integrating both event rule design models.</figcaption>\n     </figure>\n   </section>\n </section>\n\n <section class=\"mbd collapsed\"><h1><span>►</span>See also</h1>\n  <section><h1>Other OES Models for the Same System/Problem/Domain</h1>\n   <ol>\n     <!--\n     <li><a href=\"../1/index.html\">ServiceDesk-1</a>: A service queue model\n       (one service and one queue) with two statistics: <i>maximum queue length</i> and <i>service utilization</i>.\n       The model abstracts away from individual customers and from the composition of the queue.</li>\n     -->\n     <li><a href=\"../2/index.html\">ServiceDesk-2</a>: A service queue model\n       (one service and one queue) with one statistic: the Mean Response Time, which is the average length of time\n       a customer spends in the system from arrival to departure. For recording their arrival time, individual\n       customers are represented explicitly in a <i>waitingCustomers</i> queue.</li>\n     <li><a href=\"../3/index.html\">ServiceDesk-3</a>: A service queue model where the service\n       is modeled as an activity with the service desk as its resource, for which the utilization statistics\n       is computed automatically.</li>\n     <li><a href=\"../12/index.html\">ServiceDesk-4</a>: A service queue model where the\n       service desk is modeled as a processing node of a processing network that has an entry node and\n       an exit node for arriving and departing customers. The model is based on the pre-defined\n       <i>Processing Network</i> concepts: WorkObject, Arrival, EntryNode, ProcessingNode and ExitNode,\n       such that processing objects 'flow through the system'.</li>\n     <li><a href=\"../9/index.html\">ConsecutiveServices</a>: An activity-based\n       service queue model of two consecutive service providers with customer waiting lines.</li>\n     <li><a href=\"../11/index.html\">ProcessingNetwork-1</a>: A service queue model\n       where service providers are modeled as processing nodes (with input queues) within a processing network\n       that has an entry node and an exit node for arriving and departing customers. The model is based on\n       the pre-defined <i>Processing Network</i> concepts: WorkObject, Arrival, EntryNode, ProcessingNode and ExitNode,\n       such that processing objects 'flow through the system'.</li>\n   </ol>\n  </section>\n  <section><h1>Similar Models Implemented with Other Frameworks</h1>\n   <ol>\n     <li><a href=\"http://ccl.northwestern.edu/netlogo/models/community/Queueing_Simulation_Discrete_Event\">Queueing_Simulation_Discrete_Event</a>: This NetLogo simulation uses NetLogo's tick-advance primitive to advance simulation time by non-integral amounts. However, NetLogo's standard ticks display is unable to display non-integral values, so a custom ticks display has to be programmed. Copyright 2010, Nick Bennett.</li>\n   </ol>\n  </section>\n </section>\n <p><a href=\"index.html\">Back to simulation</a></p>\n</body>\n</html>\n\n","date":"2019-06-23T12:15:24.936Z","updated":"2019-04-16T15:44:34.117Z","path":"sims/1/description.html","title":"","comments":1,"layout":"page","_id":"cjx8x0xwb0009pih51kz1wbbe"}],"Post":[{"title":"hellowrld","date":"2019-06-23T12:07:51.000Z","_content":"","source":"_posts/hellowrld.md","raw":"---\ntitle: hellowrld\ndate: 2019-06-23 14:07:51\ntags:\n---\n","slug":"hellowrld","published":1,"updated":"2019-06-23T12:07:51.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjx8wr3gw0001j1h58ag57a4d","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}