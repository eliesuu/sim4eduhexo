{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/sim4edu/source/img/SchellingGrid.png","path":"img/SchellingGrid.png","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/img/ant.svg","path":"img/ant.svg","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/img/forklift.svg","path":"img/forklift.svg","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/img/drive-through-blue.svg","path":"img/drive-through-blue.svg","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/img/four-consecutive-machines.svg","path":"img/four-consecutive-machines.svg","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/img/globe-icon.svg","path":"img/globe-icon.svg","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/img/icon-16x16.png","path":"img/icon-16x16.png","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/img/icon-32x32.png","path":"img/icon-32x32.png","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/img/factory.svg","path":"img/factory.svg","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/img/sim4edu.svg","path":"img/sim4edu.svg","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/404.css","path":"css/404.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/area-page.css","path":"css/area-page.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/ant.css","path":"css/ant.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/basic-styles.css","path":"css/basic-styles.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/prio-menu.css","path":"css/prio-menu.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/normalize.css","path":"css/normalize.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/media-queries.css","path":"css/media-queries.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/start-page.css","path":"css/start-page.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/js/loadManagerConfig.js","path":"js/loadManagerConfig.js","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/js/loadManager.js","path":"js/loadManager.js","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/sims/chartist.css","path":"css/sims/chartist.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/sims/description.css","path":"css/sims/description.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/sims/mq-description.css","path":"css/sims/mq-description.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/sims/mq-simulation-page.css","path":"css/sims/mq-simulation-page.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/sims/prism.css","path":"css/sims/prism.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/css/sims/simulator-core.css","path":"css/sims/simulator-core.css","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/js/1/CustomerArrival.js","path":"js/1/CustomerArrival.js","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/js/1/CustomerDeparture.js","path":"js/1/CustomerDeparture.js","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/js/1/ServiceDesk.js","path":"js/1/ServiceDesk.js","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/js/1/simulation-worker.js","path":"js/1/simulation-worker.js","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/js/1/metadata.js","path":"js/1/metadata.js","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/js/1/simulation.js","path":"js/1/simulation.js","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/js/framework/frontMatter.js","path":"js/framework/frontMatter.js","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/js/framework/description.js","path":"js/framework/description.js","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/js/framework/chartist.js","path":"js/framework/chartist.js","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/js/framework/gridDom-visualization.js","path":"js/framework/gridDom-visualization.js","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/js/framework/prism.js","path":"js/framework/prism.js","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/js/framework/oneDimSVG-visualization.js","path":"js/framework/oneDimSVG-visualization.js","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/js/framework/space-core.js","path":"js/framework/space-core.js","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/js/framework/simulation-worker-core.js","path":"js/framework/simulation-worker-core.js","modified":0,"renderable":1},{"_id":"themes/sim4edu/source/js/framework/simulator-core.js","path":"js/framework/simulator-core.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"69a869a128e7c71b4f599faa0086c38699716e2f","modified":1562491962787},{"_id":"source/index.md","hash":"d9300bfb9d9095c2878fa5b5b8518655a250c492","modified":1563443327161},{"_id":"themes/sim4edu/config.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559290815301},{"_id":"themes/sim4edu/.DS_Store","hash":"bd201452e226fb27ddcbfa7a334d05af65320839","modified":1563358787829},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1561289791016},{"_id":"source/_posts/hellowrld.md","hash":"7287e0fdbe9215ad3aed4619edee065eb53a377f","modified":1561291671193},{"_id":"source/sims/.DS_Store","hash":"04e40d87ef5cb056a06c9ad3223eb907a6c2f7d8","modified":1562491943093},{"_id":"source/sims/loadManager.js","hash":"2be2ad824b0245614c1cd3313db58e2f752d8911","modified":1555429474160},{"_id":"source/sims/loadManagerConfig.js","hash":"dda0aaab700d8f631d07fbf0e41037afb5400001","modified":1549708594110},{"_id":"source/oes/index.md","hash":"5228b3429d37d874664c9d392b0fcdd949653c59","modified":1563443330586},{"_id":"themes/sim4edu/layout/index.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559311238482},{"_id":"themes/sim4edu/layout/.DS_Store","hash":"fd8377257d02395a69a1a3284d1e8921ef1b3c64","modified":1563358787828},{"_id":"themes/sim4edu/layout/layout.ejs","hash":"e872e0e5b4434bfed272f8552c06d8b7708c3dff","modified":1562308105435},{"_id":"themes/sim4edu/layout/post.ejs","hash":"ddc5522c1c056a9ee44765ed0b0621651964b3dd","modified":1562162775703},{"_id":"themes/sim4edu/layout/page.ejs","hash":"2ee317f1029a285bad00497edea1140ceea5b548","modified":1562613268287},{"_id":"themes/sim4edu/source/.DS_Store","hash":"497827d598e8c3590b72d35b5d3c0e2430a1f215","modified":1562490425523},{"_id":"source/sims/2/CustomerArrival.js","hash":"1bc429cc6e8175942e095e408eb4b4522a9288f0","modified":1554836878779},{"_id":"source/sims/2/CustomerDeparture.js","hash":"c0e1240ce0377dffeb439c933640edfef8e10748","modified":1554836878780},{"_id":"source/sims/2/ServiceDesk.js","hash":"a3f1825d04e43e98195d7504b333d115c6c95014","modified":1554836878780},{"_id":"source/sims/2/Download.zip","hash":"94a866774fbb5cdfdf32ea784f855982fecfe79d","modified":1549708594008},{"_id":"source/sims/2/index.md","hash":"1e9049a0759dfcc1b9d9d2e78c8ac87c708dbd14","modified":1561291262405},{"_id":"source/sims/2/description.md","hash":"975bb95d847066eb972f4c82ca3da48c853df4de","modified":1561291231586},{"_id":"source/sims/2/metadata.js","hash":"8e9080bdb0d2d36674825361818bde0b571b7769","modified":1554836878781},{"_id":"source/sims/2/simulation-worker.js","hash":"ce9143b75f2195d627569671ec7759b5940f4fbe","modified":1549708594015},{"_id":"source/sims/2/simulation.js","hash":"6d747e57a4b0187cf948d8a94205e37022658f14","modified":1549708594015},{"_id":"source/sims/framework/description.css","hash":"5217dc9264c635274b8d0c11ccae353957c16141","modified":1555429474148},{"_id":"source/sims/framework/chartist.css","hash":"235d269058ae610b92b35db26e285fb1b1f6a600","modified":1549708594105},{"_id":"source/sims/framework/chartist.js","hash":"12653a9af6d351c53efbb702efcd7623e2c457da","modified":1549708594105},{"_id":"source/sims/framework/description.js","hash":"11b450309d5418725a626ce040479777939d19c1","modified":1555429474149},{"_id":"source/sims/framework/frontMatter.js","hash":"7b04e197bc9055abbd252ba8ef1f8eec6ddf707b","modified":1555429474150},{"_id":"source/sims/framework/gridDom-visualization.js","hash":"c96513d701187e75863f3e096728834418605a7f","modified":1549708594106},{"_id":"source/sims/framework/prism.css","hash":"a6a63ae36bcc123fdc65c4cd5226dd4685f060a0","modified":1549708594106},{"_id":"source/sims/framework/oneDimSVG-visualization.js","hash":"da3d8072fbb25c46e33190c28d46e48b9e5adb68","modified":1549708594106},{"_id":"source/sims/framework/prism.js","hash":"bddd301e72075526185604de120e74f5932ec423","modified":1549708594106},{"_id":"source/sims/framework/simulator-core.css","hash":"d8723c053a007e2456fffa6921adb15070a94d13","modified":1555429474154},{"_id":"source/sims/framework/space-core.js","hash":"ef77ac6527aa1fd4b576ab0c56d864ef6ab5dd4b","modified":1549708594109},{"_id":"themes/sim4edu/layout/partial/header.ejs","hash":"d657ec80e8eb859a13de87a2f98c744571e12dcf","modified":1562309320726},{"_id":"themes/sim4edu/layout/partial/head.ejs","hash":"5d723a3afa3721976e60ec56d74434ec09893516","modified":1562682241001},{"_id":"themes/sim4edu/layout/partial/footer.ejs","hash":"c9af13d3ead3d0ee466b27fb44e4d46325992e11","modified":1562316401340},{"_id":"themes/sim4edu/source/img/SchellingGrid.png","hash":"c67caafb092394722430eb8f778cd4ac0b05d75f","modified":1549708593974},{"_id":"themes/sim4edu/source/img/ant.svg","hash":"735cad67de657f4d99301eee9affd1cfc0e44d41","modified":1549708593974},{"_id":"themes/sim4edu/source/img/forklift.svg","hash":"7350284e976df8b2a5de6f17acca1b2120da0728","modified":1549708593975},{"_id":"themes/sim4edu/source/img/drive-through-blue.svg","hash":"cfb074b5088ac3d6791d8dbb19aa438f89cecdf6","modified":1555429474196},{"_id":"themes/sim4edu/source/img/four-consecutive-machines.svg","hash":"215a5a104d7cd02674c4583370d7024664381897","modified":1549708593975},{"_id":"themes/sim4edu/source/img/globe-icon.svg","hash":"3a3151388af058fb610c3b852fa7ba5627817172","modified":1554836878776},{"_id":"themes/sim4edu/source/img/icon-16x16.png","hash":"12cfecca0fe8eb39a73ace721a6092db0d772ad8","modified":1549708593976},{"_id":"themes/sim4edu/source/img/icon-32x32.png","hash":"331245709227a902470dde340c8278a3a35beb2c","modified":1549708593976},{"_id":"themes/sim4edu/source/img/factory.svg","hash":"fd8c17caf14313b42e2956ebc71f4111014f8e11","modified":1551350454658},{"_id":"themes/sim4edu/source/img/sim4edu.svg","hash":"2f265fbcec08098b2ecd7795da79a9822103fc05","modified":1554836878776},{"_id":"themes/sim4edu/source/css/.DS_Store","hash":"1e24389fa288418eb733b957e43672c70282e3d1","modified":1561295180519},{"_id":"themes/sim4edu/source/css/404.css","hash":"7b651ef33a0a3ffcfb37a83b1a3e4318f1fbfdb0","modified":1558099195978},{"_id":"themes/sim4edu/source/css/area-page.css","hash":"5f44e8de47c287a0bc4b5735d85ecdf08267a5fa","modified":1562490339020},{"_id":"themes/sim4edu/source/css/ant.css","hash":"e4eac28cfdc09816b9cbfb60474954f5d5fc7120","modified":1555429474087},{"_id":"themes/sim4edu/source/css/basic-styles.css","hash":"78f4fdb15611f54562eac494ea1b144352dc3f71","modified":1562490415693},{"_id":"themes/sim4edu/source/css/prio-menu.css","hash":"afea89d355ae0dc379e6b51756aa7b5ce5c78ead","modified":1561289623900},{"_id":"themes/sim4edu/source/css/normalize.css","hash":"14ab02667c294e38d2a37fd4d282596184cfe8ad","modified":1558072883902},{"_id":"themes/sim4edu/source/css/media-queries.css","hash":"d96191a9429a3bc2eaab931a2178d66f483e4455","modified":1562490551544},{"_id":"themes/sim4edu/source/css/start-page.css","hash":"79b5f2bc73003319066cc0c1227a627e39840d23","modified":1562490413791},{"_id":"source/sims/framework/simulation-worker-core.js","hash":"0dd9f01cbb90271f4b8a3f20d3f05826cd7e60f3","modified":1555429474153},{"_id":"source/sims/2/media/img/Arrival_RDM.svg","hash":"c64a1de5f62bda6df0220aff3e093db4c160e36c","modified":1549708594010},{"_id":"source/sims/2/media/img/CPM.svg","hash":"8c2d848411f5151bd62618264a76ed69a669e0e5","modified":1549708594011},{"_id":"source/sims/2/media/img/Departure_RDM.svg","hash":"5ec2754e81f9c973deb0aceabb0307b53fd93fe0","modified":1549708594012},{"_id":"source/sims/2/media/img/Arrival_CRM.svg","hash":"505f3f2f28be766efd364eabc2aa0e43a62d37ff","modified":1549708594009},{"_id":"source/sims/2/media/img/ServiceStart_CRM.svg","hash":"f597c456728a70fff82a2baefcd322308f56f47a","modified":1549708594014},{"_id":"source/sims/2/media/img/IDM.svg","hash":"7abc51ba37f6d56cb03f33994d7c5a7f424ebeb4","modified":1549708594012},{"_id":"source/sims/2/media/img/ServiceEnd_CRM.svg","hash":"2798fdebe54462d1d0408da44087aec2ef72905a","modified":1549708594013},{"_id":"source/sims/2/media/img/PDM.svg","hash":"572034d358dfc07c8558a0e60f3024bbe725c22d","modified":1549708594013},{"_id":"source/sims/2/media/img/theme-image.svg","hash":"e022c0469f062c1e771d6cda1d7fd6124dc00d07","modified":1549708594014},{"_id":"source/sims/2/media/img/CIM.svg","hash":"cb78a79592fe7e04d229264ecfb547ed16662f76","modified":1549708594010},{"_id":"source/sims/framework/simulator-core.js","hash":"d36e32932532277ada3ac722d376d6c4e17dd7fe","modified":1555429474159},{"_id":"source/sims/1/CustomerArrival.js","hash":"1bc429cc6e8175942e095e408eb4b4522a9288f0","modified":1554836878779},{"_id":"source/sims/1/CustomerDeparture.js","hash":"c0e1240ce0377dffeb439c933640edfef8e10748","modified":1554836878780},{"_id":"source/sims/1/ServiceDesk.js","hash":"a3f1825d04e43e98195d7504b333d115c6c95014","modified":1554836878780},{"_id":"source/sims/1/description.html","hash":"4a181d2b0ef14993d1333d117ab91129997c841e","modified":1555429474117},{"_id":"source/sims/1/index.html","hash":"660fe635f6fbf87c1ef8a2aca4a44055f1126d8b","modified":1560855004036},{"_id":"source/sims/1/description.md","hash":"f31aef499b58dfb4bd57bc641e4318057cc5b20b","modified":1563443347831},{"_id":"source/sims/1/Download.zip","hash":"94a866774fbb5cdfdf32ea784f855982fecfe79d","modified":1549708594008},{"_id":"source/sims/1/metadata.js","hash":"8e9080bdb0d2d36674825361818bde0b571b7769","modified":1554836878781},{"_id":"source/sims/1/index.md","hash":"0f241895ce47def04fc122a72abb47614cb801ac","modified":1563443351737},{"_id":"source/sims/1/simulation-worker.js","hash":"ce9143b75f2195d627569671ec7759b5940f4fbe","modified":1549708594015},{"_id":"source/sims/1/simulation.js","hash":"6d747e57a4b0187cf948d8a94205e37022658f14","modified":1549708594015},{"_id":"source/sims/1/media/img/Arrival_RDM.svg","hash":"c64a1de5f62bda6df0220aff3e093db4c160e36c","modified":1549708594010},{"_id":"source/sims/1/media/img/Arrival_CRM.svg","hash":"505f3f2f28be766efd364eabc2aa0e43a62d37ff","modified":1549708594009},{"_id":"source/sims/1/media/img/Departure_RDM.svg","hash":"5ec2754e81f9c973deb0aceabb0307b53fd93fe0","modified":1549708594012},{"_id":"source/sims/1/media/img/CPM.svg","hash":"8c2d848411f5151bd62618264a76ed69a669e0e5","modified":1549708594011},{"_id":"source/sims/1/media/img/IDM.svg","hash":"7abc51ba37f6d56cb03f33994d7c5a7f424ebeb4","modified":1549708594012},{"_id":"source/sims/1/media/img/ServiceEnd_CRM.svg","hash":"2798fdebe54462d1d0408da44087aec2ef72905a","modified":1549708594013},{"_id":"source/sims/1/media/img/PDM.svg","hash":"572034d358dfc07c8558a0e60f3024bbe725c22d","modified":1549708594013},{"_id":"source/sims/1/media/img/ServiceStart_CRM.svg","hash":"f597c456728a70fff82a2baefcd322308f56f47a","modified":1549708594014},{"_id":"source/sims/1/media/img/theme-image.svg","hash":"e022c0469f062c1e771d6cda1d7fd6124dc00d07","modified":1549708594014},{"_id":"source/sims/1/media/img/CIM.svg","hash":"cb78a79592fe7e04d229264ecfb547ed16662f76","modified":1549708594010},{"_id":"source/sims/1/.DS_Store","hash":"adeb3c1149fdf5924b1c3f805950e0ebab60b901","modified":1562246468982},{"_id":"source/sims/1/description2.md","hash":"3a9c1a7202e6c9abac511d63184d2119a3efe443","modified":1561641332103},{"_id":"themes/sim4edu/source/js/.DS_Store","hash":"b285de23d0f9083c85965e0fd38a57ee8614e68c","modified":1561641125415},{"_id":"themes/sim4edu/source/js/loadManagerConfig.js","hash":"0d8ae7b01643f06c7f8d7e8b91f8bb1e54900e75","modified":1561637193978},{"_id":"themes/sim4edu/source/js/loadManager.js","hash":"5e917ce8231a7b8ef8c538abdd4970c5312012b1","modified":1561638259023},{"_id":"themes/sim4edu/source/css/sims/chartist.css","hash":"235d269058ae610b92b35db26e285fb1b1f6a600","modified":1549708594105},{"_id":"themes/sim4edu/source/css/sims/description.css","hash":"d3eaf6854d272ded59a789baa08f61dca7490e7c","modified":1561625862662},{"_id":"themes/sim4edu/source/css/sims/mq-description.css","hash":"8738641df9f6b45e0a95f1cc41ccefbbedae1bf5","modified":1561622973021},{"_id":"themes/sim4edu/source/css/sims/mq-simulation-page.css","hash":"5f956d38fbbc80f60e372460511dba59631e851a","modified":1561638370503},{"_id":"themes/sim4edu/source/css/sims/prism.css","hash":"a6a63ae36bcc123fdc65c4cd5226dd4685f060a0","modified":1549708594106},{"_id":"themes/sim4edu/source/css/sims/simulator-core.css","hash":"d8723c053a007e2456fffa6921adb15070a94d13","modified":1555429474154},{"_id":"themes/sim4edu/source/js/1/CustomerArrival.js","hash":"1bc429cc6e8175942e095e408eb4b4522a9288f0","modified":1554836878779},{"_id":"themes/sim4edu/source/js/1/CustomerDeparture.js","hash":"c0e1240ce0377dffeb439c933640edfef8e10748","modified":1554836878780},{"_id":"themes/sim4edu/source/js/1/ServiceDesk.js","hash":"a3f1825d04e43e98195d7504b333d115c6c95014","modified":1554836878780},{"_id":"themes/sim4edu/source/js/1/simulation-worker.js","hash":"ce9143b75f2195d627569671ec7759b5940f4fbe","modified":1549708594015},{"_id":"themes/sim4edu/source/js/1/metadata.js","hash":"8e9080bdb0d2d36674825361818bde0b571b7769","modified":1554836878781},{"_id":"themes/sim4edu/source/js/1/simulation.js","hash":"6d747e57a4b0187cf948d8a94205e37022658f14","modified":1549708594015},{"_id":"themes/sim4edu/source/js/framework/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1561633908113},{"_id":"themes/sim4edu/source/js/framework/frontMatter.js","hash":"7b04e197bc9055abbd252ba8ef1f8eec6ddf707b","modified":1555429474150},{"_id":"themes/sim4edu/source/js/framework/description.js","hash":"11b450309d5418725a626ce040479777939d19c1","modified":1555429474149},{"_id":"themes/sim4edu/source/js/framework/chartist.js","hash":"12653a9af6d351c53efbb702efcd7623e2c457da","modified":1549708594105},{"_id":"themes/sim4edu/source/js/framework/gridDom-visualization.js","hash":"c96513d701187e75863f3e096728834418605a7f","modified":1549708594106},{"_id":"themes/sim4edu/source/js/framework/prism.js","hash":"bddd301e72075526185604de120e74f5932ec423","modified":1549708594106},{"_id":"themes/sim4edu/source/js/framework/oneDimSVG-visualization.js","hash":"da3d8072fbb25c46e33190c28d46e48b9e5adb68","modified":1549708594106},{"_id":"themes/sim4edu/source/js/framework/space-core.js","hash":"ef77ac6527aa1fd4b576ab0c56d864ef6ab5dd4b","modified":1549708594109},{"_id":"themes/sim4edu/source/js/framework/simulation-worker-core.js","hash":"0dd9f01cbb90271f4b8a3f20d3f05826cd7e60f3","modified":1555429474153},{"_id":"themes/sim4edu/source/js/framework/simulator-core.js","hash":"d36e32932532277ada3ac722d376d6c4e17dd7fe","modified":1561635420189},{"_id":"public/hellowrld/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562256581572},{"_id":"public/index.html","hash":"61dcc46fbd6c563a5c7dfcc1ea95902a221952af","modified":1563443360570},{"_id":"public/oes/index.html","hash":"e5a26b12f87b6accab1b9012be45024f2578af93","modified":1563443360570},{"_id":"public/sims/1/index.html","hash":"739980215319eebcb4e119872a9dd148eb91526e","modified":1563443360570},{"_id":"public/archives/index.html","hash":"61954f6335b98eb92334b902445fd5066323c1d5","modified":1562327755266},{"_id":"public/archives/2019/index.html","hash":"61954f6335b98eb92334b902445fd5066323c1d5","modified":1562327755266},{"_id":"public/archives/2019/06/index.html","hash":"61954f6335b98eb92334b902445fd5066323c1d5","modified":1562327755266},{"_id":"public/sims/1/description.html","hash":"070bbb1c0fe6ed986ce1c8131ffea0e14fe472c6","modified":1563443360570},{"_id":"public/sims/1/description2.html","hash":"d83c8c0c59f6fb8eac8d119fb08f6bd6115d100a","modified":1562309330226},{"_id":"public/img/SchellingGrid.png","hash":"c67caafb092394722430eb8f778cd4ac0b05d75f","modified":1562254213872},{"_id":"public/img/ant.svg","hash":"735cad67de657f4d99301eee9affd1cfc0e44d41","modified":1562254213872},{"_id":"public/img/forklift.svg","hash":"7350284e976df8b2a5de6f17acca1b2120da0728","modified":1562254213873},{"_id":"public/img/drive-through-blue.svg","hash":"cfb074b5088ac3d6791d8dbb19aa438f89cecdf6","modified":1562254213873},{"_id":"public/img/four-consecutive-machines.svg","hash":"215a5a104d7cd02674c4583370d7024664381897","modified":1562254213873},{"_id":"public/img/globe-icon.svg","hash":"3a3151388af058fb610c3b852fa7ba5627817172","modified":1562254213873},{"_id":"public/img/icon-16x16.png","hash":"12cfecca0fe8eb39a73ace721a6092db0d772ad8","modified":1562254213873},{"_id":"public/img/icon-32x32.png","hash":"331245709227a902470dde340c8278a3a35beb2c","modified":1562254213873},{"_id":"public/img/factory.svg","hash":"fd8c17caf14313b42e2956ebc71f4111014f8e11","modified":1562254213873},{"_id":"public/img/sim4edu.svg","hash":"2f265fbcec08098b2ecd7795da79a9822103fc05","modified":1562254213873},{"_id":"public/css/404.css","hash":"7b651ef33a0a3ffcfb37a83b1a3e4318f1fbfdb0","modified":1562254213882},{"_id":"public/css/area-page.css","hash":"5f44e8de47c287a0bc4b5735d85ecdf08267a5fa","modified":1562490341796},{"_id":"public/css/ant.css","hash":"e4eac28cfdc09816b9cbfb60474954f5d5fc7120","modified":1562254213884},{"_id":"public/css/prio-menu.css","hash":"afea89d355ae0dc379e6b51756aa7b5ce5c78ead","modified":1562254213884},{"_id":"public/css/normalize.css","hash":"14ab02667c294e38d2a37fd4d282596184cfe8ad","modified":1562254213884},{"_id":"public/css/media-queries.css","hash":"d96191a9429a3bc2eaab931a2178d66f483e4455","modified":1562490555962},{"_id":"public/css/start-page.css","hash":"79b5f2bc73003319066cc0c1227a627e39840d23","modified":1562490445222},{"_id":"public/css/basic-styles.css","hash":"78f4fdb15611f54562eac494ea1b144352dc3f71","modified":1562490445222},{"_id":"public/js/loadManagerConfig.js","hash":"0d8ae7b01643f06c7f8d7e8b91f8bb1e54900e75","modified":1562256581579},{"_id":"public/css/sims/description.css","hash":"d3eaf6854d272ded59a789baa08f61dca7490e7c","modified":1562256581579},{"_id":"public/css/sims/mq-description.css","hash":"8738641df9f6b45e0a95f1cc41ccefbbedae1bf5","modified":1562256581579},{"_id":"public/css/sims/mq-simulation-page.css","hash":"5f956d38fbbc80f60e372460511dba59631e851a","modified":1562256581579},{"_id":"public/css/sims/prism.css","hash":"a6a63ae36bcc123fdc65c4cd5226dd4685f060a0","modified":1562256581579},{"_id":"public/js/1/CustomerArrival.js","hash":"1bc429cc6e8175942e095e408eb4b4522a9288f0","modified":1562256581580},{"_id":"public/js/1/CustomerDeparture.js","hash":"c0e1240ce0377dffeb439c933640edfef8e10748","modified":1562256581580},{"_id":"public/js/1/ServiceDesk.js","hash":"a3f1825d04e43e98195d7504b333d115c6c95014","modified":1562256581580},{"_id":"public/js/1/simulation-worker.js","hash":"ce9143b75f2195d627569671ec7759b5940f4fbe","modified":1562256581580},{"_id":"public/js/1/metadata.js","hash":"8e9080bdb0d2d36674825361818bde0b571b7769","modified":1562256581580},{"_id":"public/js/1/simulation.js","hash":"6d747e57a4b0187cf948d8a94205e37022658f14","modified":1562256581580},{"_id":"public/js/framework/frontMatter.js","hash":"7b04e197bc9055abbd252ba8ef1f8eec6ddf707b","modified":1562256581580},{"_id":"public/js/framework/gridDom-visualization.js","hash":"c96513d701187e75863f3e096728834418605a7f","modified":1562256581580},{"_id":"public/js/framework/oneDimSVG-visualization.js","hash":"da3d8072fbb25c46e33190c28d46e48b9e5adb68","modified":1562256581580},{"_id":"public/js/framework/space-core.js","hash":"ef77ac6527aa1fd4b576ab0c56d864ef6ab5dd4b","modified":1562256581580},{"_id":"public/css/sims/chartist.css","hash":"235d269058ae610b92b35db26e285fb1b1f6a600","modified":1562256581582},{"_id":"public/js/framework/description.js","hash":"11b450309d5418725a626ce040479777939d19c1","modified":1562256581582},{"_id":"public/js/framework/prism.js","hash":"bddd301e72075526185604de120e74f5932ec423","modified":1562256581582},{"_id":"public/css/sims/simulator-core.css","hash":"d8723c053a007e2456fffa6921adb15070a94d13","modified":1562256581584},{"_id":"public/js/loadManager.js","hash":"5e917ce8231a7b8ef8c538abdd4970c5312012b1","modified":1562256581586},{"_id":"public/js/framework/chartist.js","hash":"12653a9af6d351c53efbb702efcd7623e2c457da","modified":1562256581587},{"_id":"public/js/framework/simulation-worker-core.js","hash":"0dd9f01cbb90271f4b8a3f20d3f05826cd7e60f3","modified":1562256581601},{"_id":"public/js/framework/simulator-core.js","hash":"d36e32932532277ada3ac722d376d6c4e17dd7fe","modified":1562256581611},{"_id":"public/sims/1/CustomerArrival.js","hash":"1bc429cc6e8175942e095e408eb4b4522a9288f0","modified":1562256433410},{"_id":"public/sims/1/ServiceDesk.js","hash":"a3f1825d04e43e98195d7504b333d115c6c95014","modified":1562256433411},{"_id":"public/sims/1/CustomerDeparture.js","hash":"c0e1240ce0377dffeb439c933640edfef8e10748","modified":1562256433410},{"_id":"public/sims/1/metadata.js","hash":"8e9080bdb0d2d36674825361818bde0b571b7769","modified":1562256433411},{"_id":"public/sims/1/simulation-worker.js","hash":"ce9143b75f2195d627569671ec7759b5940f4fbe","modified":1562256433411},{"_id":"public/sims/1/simulation.js","hash":"6d747e57a4b0187cf948d8a94205e37022658f14","modified":1562256433411},{"_id":"source/css/.DS_Store","hash":"1e24389fa288418eb733b957e43672c70282e3d1","modified":1561295180519},{"_id":"source/css/404.css","hash":"7b651ef33a0a3ffcfb37a83b1a3e4318f1fbfdb0","modified":1558099195978},{"_id":"source/css/ant.css","hash":"e4eac28cfdc09816b9cbfb60474954f5d5fc7120","modified":1555429474087},{"_id":"source/css/area-page.css","hash":"96fbfb33972cb4051a1e362f2c27bdbc1f3e3d1e","modified":1558102403737},{"_id":"source/css/basic-styles.css","hash":"706eb0b0e4fc1607c7eb1189b719361c68a265ad","modified":1558101640248},{"_id":"source/css/media-queries.css","hash":"e2edbdab2e3a4d77908a6ecc21f118ad16c422d4","modified":1561623294555},{"_id":"source/css/normalize.css","hash":"14ab02667c294e38d2a37fd4d282596184cfe8ad","modified":1558072883902},{"_id":"source/css/prio-menu.css","hash":"afea89d355ae0dc379e6b51756aa7b5ce5c78ead","modified":1561289623900},{"_id":"source/img/SchellingGrid.png","hash":"c67caafb092394722430eb8f778cd4ac0b05d75f","modified":1549708593974},{"_id":"source/css/start-page.css","hash":"9688aee262254f9a1a4ae4c95e506d5e9015db56","modified":1558086482099},{"_id":"source/img/forklift.svg","hash":"7350284e976df8b2a5de6f17acca1b2120da0728","modified":1549708593975},{"_id":"source/img/ant.svg","hash":"735cad67de657f4d99301eee9affd1cfc0e44d41","modified":1549708593974},{"_id":"source/img/globe-icon.svg","hash":"3a3151388af058fb610c3b852fa7ba5627817172","modified":1554836878776},{"_id":"source/img/drive-through-blue.svg","hash":"cfb074b5088ac3d6791d8dbb19aa438f89cecdf6","modified":1555429474196},{"_id":"source/img/factory.svg","hash":"fd8c17caf14313b42e2956ebc71f4111014f8e11","modified":1551350454658},{"_id":"source/img/icon-16x16.png","hash":"12cfecca0fe8eb39a73ace721a6092db0d772ad8","modified":1549708593976},{"_id":"source/img/icon-32x32.png","hash":"331245709227a902470dde340c8278a3a35beb2c","modified":1549708593976},{"_id":"source/img/four-consecutive-machines.svg","hash":"215a5a104d7cd02674c4583370d7024664381897","modified":1549708593975},{"_id":"source/img/sim4edu.svg","hash":"2f265fbcec08098b2ecd7795da79a9822103fc05","modified":1554836878776},{"_id":"source/js/.DS_Store","hash":"b285de23d0f9083c85965e0fd38a57ee8614e68c","modified":1561641125415},{"_id":"source/js/loadManagerConfig.js","hash":"0d8ae7b01643f06c7f8d7e8b91f8bb1e54900e75","modified":1561637193978},{"_id":"source/js/loadManager.js","hash":"5e917ce8231a7b8ef8c538abdd4970c5312012b1","modified":1561638259023},{"_id":"source/css/sims/mq-description.css","hash":"8738641df9f6b45e0a95f1cc41ccefbbedae1bf5","modified":1561622973021},{"_id":"source/css/sims/chartist.css","hash":"235d269058ae610b92b35db26e285fb1b1f6a600","modified":1549708594105},{"_id":"source/css/sims/description.css","hash":"d3eaf6854d272ded59a789baa08f61dca7490e7c","modified":1561625862662},{"_id":"source/css/sims/mq-simulation-page.css","hash":"5f956d38fbbc80f60e372460511dba59631e851a","modified":1561638370503},{"_id":"source/css/sims/prism.css","hash":"a6a63ae36bcc123fdc65c4cd5226dd4685f060a0","modified":1549708594106},{"_id":"source/css/sims/simulator-core.css","hash":"d8723c053a007e2456fffa6921adb15070a94d13","modified":1555429474154},{"_id":"source/js/1/CustomerArrival.js","hash":"1bc429cc6e8175942e095e408eb4b4522a9288f0","modified":1554836878779},{"_id":"source/js/1/CustomerDeparture.js","hash":"c0e1240ce0377dffeb439c933640edfef8e10748","modified":1554836878780},{"_id":"source/js/1/ServiceDesk.js","hash":"a3f1825d04e43e98195d7504b333d115c6c95014","modified":1554836878780},{"_id":"source/js/1/metadata.js","hash":"8e9080bdb0d2d36674825361818bde0b571b7769","modified":1554836878781},{"_id":"source/js/1/simulation-worker.js","hash":"ce9143b75f2195d627569671ec7759b5940f4fbe","modified":1549708594015},{"_id":"source/js/1/simulation.js","hash":"6d747e57a4b0187cf948d8a94205e37022658f14","modified":1549708594015},{"_id":"source/js/framework/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1561633908113},{"_id":"source/js/framework/gridDom-visualization.js","hash":"c96513d701187e75863f3e096728834418605a7f","modified":1549708594106},{"_id":"source/js/framework/description.js","hash":"11b450309d5418725a626ce040479777939d19c1","modified":1555429474149},{"_id":"source/js/framework/frontMatter.js","hash":"7b04e197bc9055abbd252ba8ef1f8eec6ddf707b","modified":1555429474150},{"_id":"source/js/framework/chartist.js","hash":"12653a9af6d351c53efbb702efcd7623e2c457da","modified":1549708594105},{"_id":"source/js/framework/prism.js","hash":"bddd301e72075526185604de120e74f5932ec423","modified":1549708594106},{"_id":"source/js/framework/oneDimSVG-visualization.js","hash":"da3d8072fbb25c46e33190c28d46e48b9e5adb68","modified":1549708594106},{"_id":"source/js/framework/space-core.js","hash":"ef77ac6527aa1fd4b576ab0c56d864ef6ab5dd4b","modified":1549708594109},{"_id":"source/js/framework/simulation-worker-core.js","hash":"0dd9f01cbb90271f4b8a3f20d3f05826cd7e60f3","modified":1555429474153},{"_id":"source/js/framework/simulator-core.js","hash":"d36e32932532277ada3ac722d376d6c4e17dd7fe","modified":1561635420189},{"_id":"themes/sim4edu/layout/partial/headerdesc.ejs","hash":"0fe56889a1e0642e2bc546159fedc9275407f62c","modified":1562259043479},{"_id":"themes/sim4edu/layout/partial/headersim.ejs","hash":"f43640d6a7dcb5e7df8c0211c3a2ad34aa9900cd","modified":1562258446188},{"_id":"source/sims/framework/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1561476333129}],"Category":[],"Data":[],"Page":[{"metatitle":"Sim4edu - Web-Based Simulation for Science and Education | sim4edu.com","metadesc":"The Simulation for Education (sim4edu.com) project website supports web-based simulation with open source technologies for science and education.","ogtitle":"Sim4edu - Web-Based Simulation for Science and Education | sim4edu.com","ogdesc":"The Simulation for Education (sim4edu.com) project website supports web-based simulation with open source technologies for science and education.","ogimg":"/img/sim4edu.png","lang":"en","_content":"<main>\n<section class=\"description\"><h1>Web-Based Simulation for Science and Education</h1>\n<div>\n     <p>The <em>Simulation for Education (Sim4edu</em>) project website supports web-based simulation\n      with open source technologies for science and education. It provides both <b><i>simulation\n       technologies</i></b> and a <b><i>library of educational simulations</i></b>. Its goal is to support various\n      styles of modeling and simulation, including <em>discrete event</em> simulation,\n      <em>NetLogo</em>-style grid space models (and <em>Cellular Automata</em> models), and\n      <em>agent</em>-based simulation.</p>\n     <p>As opposed to traditional simulation technologies, <em>web-based</em> simulations,\n      typically implemented with JavaScript, can be executed in any web browser, not just on desktop\n      computers, but also on mobile devices like tablets and smartphones. This allows sharing\n      simulations by means of simple web links and makes them easily accessible to anyone anywhere.\n     </p>\n    </div>\n   </section>\n   <section class=\"sim-category\" id=\"ad-hoc-sim\">\n    <h2>Examples of ad-hoc simulation programs</h2>\n    <p>... not based on any simulation paradigm or framework.</p>\n    <dl>\n     <dt><a href=\"http://play.elevatorsaga.com\">Elevator Saga</a></dt>\n     <dd>Learning how to code by programming an elevator.</dd>\n     <dt><a href=\"http://www.natureincode.com/code/various/ants.html\">JavaScript Ants</a></dt>\n     <dd><img src=\"img/ant.svg\" style=\"float:right; margin: 0 6px 0 1em;\" width=\"50\" id=\"ant\" alt=\"ant icon\" />A simulation about ants finding food and bringing it back to the nest. Once an ant finds food, she leaves a chemical trail behind while walking back to the nest. The chemical substance evaporates over time, and other ants simply follow the gradient of the substance until they find the food.</dd>\n     <dt><a href=\"http://www.traffic-simulation.de/\">Roundabout</a></dt>\n     <dd>Microsimulation of traffic flow.</dd>\n    </dl>\n   </section>\n   <section class=\"sim-category\" id=\"DES\">\n    <h2>Examples of Discrete Event Simulation (DES) </h2>\n    <p>... with fixed-increment time progression.</p>\n    <dl>\n     <dt><a href=\"sims/25/index.html\">Susceptible-Infected-Recovered (SIR) Disease Model</a></dt>\n     <dd>An epidemiological model about the infection dynamics of a contagious disease in a closed population.\n      See also <a href=\"https://insightmaker.com/insight/2944/SIR-Model\">a continuous SIR model</a>.</dd>\n    </dl>\n    <p>... with next-event time progression.</p>\n    <dl>\n     <dt><a href=\"sims/4/index.html\">Inventory Management</a></dt><dd><img src=\"img/forklift.svg\" style=\"float:right; margin: 4px 6px 0 1em;\" width=\"60\" alt=\"forklift icon\" />An inventory\n     management system with a continuous replenishment policy based on a reorder point.</dd>\n     <dt><a href=\"sims/10/index.html\">DriveThru</a></dt><dd><img src=\"img/drive-through-blue.svg\" alt=\"drive through icon\" style=\"float:right; margin: 0 6px 0 1em\"\n                                                                 title=\"Icon CC 3.0 BY Freepik (www.freepik.com) from www.flaticon.com\" width=\"70\" />The order processing activities of a drive through\n     restaurant are performed at three service points with queues: the <em>order taking</em> at the menu board, the <em>order preparation</em>\n     at the kitchen and the <em>order pickup</em> at the pickup window.</dd>\n     <dt><a href=\"sims/20/index.html\">Lengnick's Baseline Economy</a></dt><dd><img src=\"img/factory.svg\" alt=\"factory icon\" style=\"float:right; margin: 0 6px 0 1em;\" width=\"60\" /> <!-- /LengnickBaselineEconomy-1 -->\n     Households play the roles of em&shy;ploy&shy;ees and con&shy;sumers, while firms play the roles of employers and producers.</dd>\n    </dl>\n    <p><a href=\"des-models/index.html\">More...</a></p>\n   </section>\n   <section class=\"sim-category\" id=\"grid-space\">\n    <h2>Examples of Grid Space Models</h2>\n    <p>... with fixed-increment time progression.</p>\n    <dl>\n     <dt><a href=\"sims/16/index.html\">Gossip Model</a></dt>\n\t    <dd>A Cellular Automata model about the problem of spreading gossip.</dd>\n     <dt><a href=\"sims/6/index.html\">Schelling Segregation Model</a></dt>\n\t    <dd><img src=\"img/SchellingGrid.png\" style=\"float:right; margin: 6px 6px 0 1em;\" width=\"46\" height=\"59\" alt=\"schelling grid icon\" />\n\t     A residential area is popu&shy;lated by resi&shy;dents belonging to different groups. Periodically, all\n      residents check if they are content with their neighborhood, based on their degree of\n      tolerating neighbors of a different group. If they are not, they move to a location where they\n      are content, or leave the area if they don't find such a location.</dd>\n    </dl>\n    <p><a href=\"gridspace-models/index.html\">More...</a></p>\n   </section>\n   <section class=\"sim-category\" id=\"contin\">\n    <h2>Examples of Continuous Simulation</h2>\n    <p>... with continuous state changes driven by fixed-increment time progression.</p>\n    <dl>\n      <dt><a href=\"sims/15/index.html\">Solar System</a></dt><dd>Implemented with CSS 3D animations.</dd>\n      <dt><a href=\"https://29a.ch/sandbox/2010/galaxy/\">Galaxy</a></dt><dd>A spiral galaxy with\n      5000 stars (by Jonas Wagner, 2010-08-18).</dd>\n     <dt><a href=\"https://insightmaker.com/insight/1954/The-World3-Model\">World3</a></dt>\n     <dd>A <em>System Dynamics</em> model of the interactions between population, industrial growth, food production\n      and limits in the ecosystems of the Earth. Reconstructed with <a href=\"https://insightmaker.com/\">Insight Maker</a>.</dd>\n    </dl>\n    <p><a href=\"continuous-models/index.html\">More...</a></p>\n   </section>\n  </main>\n  <aside><h2>News...</h2>\n   <ul>\n    <li>8-Apr-2019: We are looking for <strong>volunteer translators</strong> to Spanish, Brazilian, French or any language you'd like to support. \n\t Please <a href=\"mailto:G.Wagner@b-tu.de?subject=Sim4edu%20Translation&body=Hi%20guys!%0D%0AI'd%20like%20to%20help%20with%20translating%20Sim4edu%20to%20...\">contact us</a> \n\t if you can help  with this.</li>\n    <li>3-Apr-2019: The Sim4edu website and its OESjs simulations has been internationalized: now also available in\n     Chinese and in German (soon).</li>\n    <li>8-Jan-2019: OESjs 1.3e has been released: solving issues with Processing Network simulation and adding summary statistics to experiments.</li>\n    <li>19-Sep-2018: OESjs 1.3c has been released: additional user interfaces for inspecting code, initial events and experiments.</li>\n    <li>28-July-2018: OESjs 1.3b has been released. Now supporting a user interface for setting model variables.</li>\n    <li>9-May-2018: OESjs 1.3a has been released. It allows defining simulation experiments and runs faster due to running the simulator in its own (worker) thread.</li>\n    <li>4-May-2018: The Sim4edu website has moved to Netlify</li>\n   </ul>\n</aside>","source":"index.md","raw":"---\nmetatitle: Sim4edu - Web-Based Simulation for Science and Education | sim4edu.com\nmetadesc: The Simulation for Education (sim4edu.com) project website supports web-based simulation with open source technologies for science and education.\nogtitle: Sim4edu - Web-Based Simulation for Science and Education | sim4edu.com\nogdesc: The Simulation for Education (sim4edu.com) project website supports web-based simulation with open source technologies for science and education.\nogimg: /img/sim4edu.png\nlang: en\n---\n<main>\n<section class=\"description\"><h1>Web-Based Simulation for Science and Education</h1>\n<div>\n     <p>The <em>Simulation for Education (Sim4edu</em>) project website supports web-based simulation\n      with open source technologies for science and education. It provides both <b><i>simulation\n       technologies</i></b> and a <b><i>library of educational simulations</i></b>. Its goal is to support various\n      styles of modeling and simulation, including <em>discrete event</em> simulation,\n      <em>NetLogo</em>-style grid space models (and <em>Cellular Automata</em> models), and\n      <em>agent</em>-based simulation.</p>\n     <p>As opposed to traditional simulation technologies, <em>web-based</em> simulations,\n      typically implemented with JavaScript, can be executed in any web browser, not just on desktop\n      computers, but also on mobile devices like tablets and smartphones. This allows sharing\n      simulations by means of simple web links and makes them easily accessible to anyone anywhere.\n     </p>\n    </div>\n   </section>\n   <section class=\"sim-category\" id=\"ad-hoc-sim\">\n    <h2>Examples of ad-hoc simulation programs</h2>\n    <p>... not based on any simulation paradigm or framework.</p>\n    <dl>\n     <dt><a href=\"http://play.elevatorsaga.com\">Elevator Saga</a></dt>\n     <dd>Learning how to code by programming an elevator.</dd>\n     <dt><a href=\"http://www.natureincode.com/code/various/ants.html\">JavaScript Ants</a></dt>\n     <dd><img src=\"img/ant.svg\" style=\"float:right; margin: 0 6px 0 1em;\" width=\"50\" id=\"ant\" alt=\"ant icon\" />A simulation about ants finding food and bringing it back to the nest. Once an ant finds food, she leaves a chemical trail behind while walking back to the nest. The chemical substance evaporates over time, and other ants simply follow the gradient of the substance until they find the food.</dd>\n     <dt><a href=\"http://www.traffic-simulation.de/\">Roundabout</a></dt>\n     <dd>Microsimulation of traffic flow.</dd>\n    </dl>\n   </section>\n   <section class=\"sim-category\" id=\"DES\">\n    <h2>Examples of Discrete Event Simulation (DES) </h2>\n    <p>... with fixed-increment time progression.</p>\n    <dl>\n     <dt><a href=\"sims/25/index.html\">Susceptible-Infected-Recovered (SIR) Disease Model</a></dt>\n     <dd>An epidemiological model about the infection dynamics of a contagious disease in a closed population.\n      See also <a href=\"https://insightmaker.com/insight/2944/SIR-Model\">a continuous SIR model</a>.</dd>\n    </dl>\n    <p>... with next-event time progression.</p>\n    <dl>\n     <dt><a href=\"sims/4/index.html\">Inventory Management</a></dt><dd><img src=\"img/forklift.svg\" style=\"float:right; margin: 4px 6px 0 1em;\" width=\"60\" alt=\"forklift icon\" />An inventory\n     management system with a continuous replenishment policy based on a reorder point.</dd>\n     <dt><a href=\"sims/10/index.html\">DriveThru</a></dt><dd><img src=\"img/drive-through-blue.svg\" alt=\"drive through icon\" style=\"float:right; margin: 0 6px 0 1em\"\n                                                                 title=\"Icon CC 3.0 BY Freepik (www.freepik.com) from www.flaticon.com\" width=\"70\" />The order processing activities of a drive through\n     restaurant are performed at three service points with queues: the <em>order taking</em> at the menu board, the <em>order preparation</em>\n     at the kitchen and the <em>order pickup</em> at the pickup window.</dd>\n     <dt><a href=\"sims/20/index.html\">Lengnick's Baseline Economy</a></dt><dd><img src=\"img/factory.svg\" alt=\"factory icon\" style=\"float:right; margin: 0 6px 0 1em;\" width=\"60\" /> <!-- /LengnickBaselineEconomy-1 -->\n     Households play the roles of em&shy;ploy&shy;ees and con&shy;sumers, while firms play the roles of employers and producers.</dd>\n    </dl>\n    <p><a href=\"des-models/index.html\">More...</a></p>\n   </section>\n   <section class=\"sim-category\" id=\"grid-space\">\n    <h2>Examples of Grid Space Models</h2>\n    <p>... with fixed-increment time progression.</p>\n    <dl>\n     <dt><a href=\"sims/16/index.html\">Gossip Model</a></dt>\n\t    <dd>A Cellular Automata model about the problem of spreading gossip.</dd>\n     <dt><a href=\"sims/6/index.html\">Schelling Segregation Model</a></dt>\n\t    <dd><img src=\"img/SchellingGrid.png\" style=\"float:right; margin: 6px 6px 0 1em;\" width=\"46\" height=\"59\" alt=\"schelling grid icon\" />\n\t     A residential area is popu&shy;lated by resi&shy;dents belonging to different groups. Periodically, all\n      residents check if they are content with their neighborhood, based on their degree of\n      tolerating neighbors of a different group. If they are not, they move to a location where they\n      are content, or leave the area if they don't find such a location.</dd>\n    </dl>\n    <p><a href=\"gridspace-models/index.html\">More...</a></p>\n   </section>\n   <section class=\"sim-category\" id=\"contin\">\n    <h2>Examples of Continuous Simulation</h2>\n    <p>... with continuous state changes driven by fixed-increment time progression.</p>\n    <dl>\n      <dt><a href=\"sims/15/index.html\">Solar System</a></dt><dd>Implemented with CSS 3D animations.</dd>\n      <dt><a href=\"https://29a.ch/sandbox/2010/galaxy/\">Galaxy</a></dt><dd>A spiral galaxy with\n      5000 stars (by Jonas Wagner, 2010-08-18).</dd>\n     <dt><a href=\"https://insightmaker.com/insight/1954/The-World3-Model\">World3</a></dt>\n     <dd>A <em>System Dynamics</em> model of the interactions between population, industrial growth, food production\n      and limits in the ecosystems of the Earth. Reconstructed with <a href=\"https://insightmaker.com/\">Insight Maker</a>.</dd>\n    </dl>\n    <p><a href=\"continuous-models/index.html\">More...</a></p>\n   </section>\n  </main>\n  <aside><h2>News...</h2>\n   <ul>\n    <li>8-Apr-2019: We are looking for <strong>volunteer translators</strong> to Spanish, Brazilian, French or any language you'd like to support. \n\t Please <a href=\"mailto:G.Wagner@b-tu.de?subject=Sim4edu%20Translation&body=Hi%20guys!%0D%0AI'd%20like%20to%20help%20with%20translating%20Sim4edu%20to%20...\">contact us</a> \n\t if you can help  with this.</li>\n    <li>3-Apr-2019: The Sim4edu website and its OESjs simulations has been internationalized: now also available in\n     Chinese and in German (soon).</li>\n    <li>8-Jan-2019: OESjs 1.3e has been released: solving issues with Processing Network simulation and adding summary statistics to experiments.</li>\n    <li>19-Sep-2018: OESjs 1.3c has been released: additional user interfaces for inspecting code, initial events and experiments.</li>\n    <li>28-July-2018: OESjs 1.3b has been released. Now supporting a user interface for setting model variables.</li>\n    <li>9-May-2018: OESjs 1.3a has been released. It allows defining simulation experiments and runs faster due to running the simulator in its own (worker) thread.</li>\n    <li>4-May-2018: The Sim4edu website has moved to Netlify</li>\n   </ul>\n</aside>","date":"2019-07-18T09:48:47.161Z","updated":"2019-07-18T09:48:47.161Z","path":"index.html","_id":"cjx8wr3gi0000j1h5s4snxllt","title":"","comments":1,"layout":"page","content":"<main>\n<section class=\"description\"><h1>Web-Based Simulation for Science and Education</h1>\n<div>\n     <p>The <em>Simulation for Education (Sim4edu</em>) project website supports web-based simulation\n      with open source technologies for science and education. It provides both <b><i>simulation\n       technologies</i></b> and a <b><i>library of educational simulations</i></b>. Its goal is to support various\n      styles of modeling and simulation, including <em>discrete event</em> simulation,\n      <em>NetLogo</em>-style grid space models (and <em>Cellular Automata</em> models), and\n      <em>agent</em>-based simulation.</p>\n     <p>As opposed to traditional simulation technologies, <em>web-based</em> simulations,\n      typically implemented with JavaScript, can be executed in any web browser, not just on desktop\n      computers, but also on mobile devices like tablets and smartphones. This allows sharing\n      simulations by means of simple web links and makes them easily accessible to anyone anywhere.\n     </p>\n    </div>\n   </section>\n   <section class=\"sim-category\" id=\"ad-hoc-sim\">\n    <h2>Examples of ad-hoc simulation programs</h2>\n    <p>... not based on any simulation paradigm or framework.</p>\n    <dl>\n     <dt><a href=\"http://play.elevatorsaga.com\" target=\"_blank\" rel=\"noopener\">Elevator Saga</a></dt>\n     <dd>Learning how to code by programming an elevator.</dd>\n     <dt><a href=\"http://www.natureincode.com/code/various/ants.html\" target=\"_blank\" rel=\"noopener\">JavaScript Ants</a></dt>\n     <dd><img src=\"img/ant.svg\" style=\"float:right; margin: 0 6px 0 1em;\" width=\"50\" id=\"ant\" alt=\"ant icon\">A simulation about ants finding food and bringing it back to the nest. Once an ant finds food, she leaves a chemical trail behind while walking back to the nest. The chemical substance evaporates over time, and other ants simply follow the gradient of the substance until they find the food.</dd>\n     <dt><a href=\"http://www.traffic-simulation.de/\" target=\"_blank\" rel=\"noopener\">Roundabout</a></dt>\n     <dd>Microsimulation of traffic flow.</dd>\n    </dl>\n   </section>\n   <section class=\"sim-category\" id=\"DES\">\n    <h2>Examples of Discrete Event Simulation (DES) </h2>\n    <p>... with fixed-increment time progression.</p>\n    <dl>\n     <dt><a href=\"sims/25/index.html\">Susceptible-Infected-Recovered (SIR) Disease Model</a></dt>\n     <dd>An epidemiological model about the infection dynamics of a contagious disease in a closed population.\n      See also <a href=\"https://insightmaker.com/insight/2944/SIR-Model\" target=\"_blank\" rel=\"noopener\">a continuous SIR model</a>.</dd>\n    </dl>\n    <p>... with next-event time progression.</p>\n    <dl>\n     <dt><a href=\"sims/4/index.html\">Inventory Management</a></dt><dd><img src=\"img/forklift.svg\" style=\"float:right; margin: 4px 6px 0 1em;\" width=\"60\" alt=\"forklift icon\">An inventory\n     management system with a continuous replenishment policy based on a reorder point.</dd>\n     <dt><a href=\"sims/10/index.html\">DriveThru</a></dt><dd><img src=\"img/drive-through-blue.svg\" alt=\"drive through icon\" style=\"float:right; margin: 0 6px 0 1em\" title=\"Icon CC 3.0 BY Freepik (www.freepik.com) from www.flaticon.com\" width=\"70\">The order processing activities of a drive through\n     restaurant are performed at three service points with queues: the <em>order taking</em> at the menu board, the <em>order preparation</em>\n     at the kitchen and the <em>order pickup</em> at the pickup window.</dd>\n     <dt><a href=\"sims/20/index.html\">Lengnick's Baseline Economy</a></dt><dd><img src=\"img/factory.svg\" alt=\"factory icon\" style=\"float:right; margin: 0 6px 0 1em;\" width=\"60\"> <!-- /LengnickBaselineEconomy-1 -->\n     Households play the roles of em&shy;ploy&shy;ees and con&shy;sumers, while firms play the roles of employers and producers.</dd>\n    </dl>\n    <p><a href=\"des-models/index.html\">More...</a></p>\n   </section>\n   <section class=\"sim-category\" id=\"grid-space\">\n    <h2>Examples of Grid Space Models</h2>\n    <p>... with fixed-increment time progression.</p>\n    <dl>\n     <dt><a href=\"sims/16/index.html\">Gossip Model</a></dt>\n        <dd>A Cellular Automata model about the problem of spreading gossip.</dd>\n     <dt><a href=\"sims/6/index.html\">Schelling Segregation Model</a></dt>\n        <dd><img src=\"img/SchellingGrid.png\" style=\"float:right; margin: 6px 6px 0 1em;\" width=\"46\" height=\"59\" alt=\"schelling grid icon\">\n         A residential area is popu&shy;lated by resi&shy;dents belonging to different groups. Periodically, all\n      residents check if they are content with their neighborhood, based on their degree of\n      tolerating neighbors of a different group. If they are not, they move to a location where they\n      are content, or leave the area if they don't find such a location.</dd>\n    </dl>\n    <p><a href=\"gridspace-models/index.html\">More...</a></p>\n   </section>\n   <section class=\"sim-category\" id=\"contin\">\n    <h2>Examples of Continuous Simulation</h2>\n    <p>... with continuous state changes driven by fixed-increment time progression.</p>\n    <dl>\n      <dt><a href=\"sims/15/index.html\">Solar System</a></dt><dd>Implemented with CSS 3D animations.</dd>\n      <dt><a href=\"https://29a.ch/sandbox/2010/galaxy/\" target=\"_blank\" rel=\"noopener\">Galaxy</a></dt><dd>A spiral galaxy with\n      5000 stars (by Jonas Wagner, 2010-08-18).</dd>\n     <dt><a href=\"https://insightmaker.com/insight/1954/The-World3-Model\" target=\"_blank\" rel=\"noopener\">World3</a></dt>\n     <dd>A <em>System Dynamics</em> model of the interactions between population, industrial growth, food production\n      and limits in the ecosystems of the Earth. Reconstructed with <a href=\"https://insightmaker.com/\" target=\"_blank\" rel=\"noopener\">Insight Maker</a>.</dd>\n    </dl>\n    <p><a href=\"continuous-models/index.html\">More...</a></p>\n   </section>\n  </main>\n  <aside><h2>News...</h2>\n   <ul>\n    <li>8-Apr-2019: We are looking for <strong>volunteer translators</strong> to Spanish, Brazilian, French or any language you'd like to support. \n     Please <a href=\"mailto:G.Wagner@b-tu.de?subject=Sim4edu%20Translation&body=Hi%20guys!%0D%0AI'd%20like%20to%20help%20with%20translating%20Sim4edu%20to%20...\" target=\"_blank\" rel=\"noopener\">contact us</a> \n     if you can help  with this.</li>\n    <li>3-Apr-2019: The Sim4edu website and its OESjs simulations has been internationalized: now also available in\n     Chinese and in German (soon).</li>\n    <li>8-Jan-2019: OESjs 1.3e has been released: solving issues with Processing Network simulation and adding summary statistics to experiments.</li>\n    <li>19-Sep-2018: OESjs 1.3c has been released: additional user interfaces for inspecting code, initial events and experiments.</li>\n    <li>28-July-2018: OESjs 1.3b has been released. Now supporting a user interface for setting model variables.</li>\n    <li>9-May-2018: OESjs 1.3a has been released. It allows defining simulation experiments and runs faster due to running the simulator in its own (worker) thread.</li>\n    <li>4-May-2018: The Sim4edu website has moved to Netlify</li>\n   </ul>\n</aside>","site":{"data":{}},"excerpt":"","more":"<main>\n<section class=\"description\"><h1>Web-Based Simulation for Science and Education</h1>\n<div>\n     <p>The <em>Simulation for Education (Sim4edu</em>) project website supports web-based simulation\n      with open source technologies for science and education. It provides both <b><i>simulation\n       technologies</i></b> and a <b><i>library of educational simulations</i></b>. Its goal is to support various\n      styles of modeling and simulation, including <em>discrete event</em> simulation,\n      <em>NetLogo</em>-style grid space models (and <em>Cellular Automata</em> models), and\n      <em>agent</em>-based simulation.</p>\n     <p>As opposed to traditional simulation technologies, <em>web-based</em> simulations,\n      typically implemented with JavaScript, can be executed in any web browser, not just on desktop\n      computers, but also on mobile devices like tablets and smartphones. This allows sharing\n      simulations by means of simple web links and makes them easily accessible to anyone anywhere.\n     </p>\n    </div>\n   </section>\n   <section class=\"sim-category\" id=\"ad-hoc-sim\">\n    <h2>Examples of ad-hoc simulation programs</h2>\n    <p>... not based on any simulation paradigm or framework.</p>\n    <dl>\n     <dt><a href=\"http://play.elevatorsaga.com\" target=\"_blank\" rel=\"noopener\">Elevator Saga</a></dt>\n     <dd>Learning how to code by programming an elevator.</dd>\n     <dt><a href=\"http://www.natureincode.com/code/various/ants.html\" target=\"_blank\" rel=\"noopener\">JavaScript Ants</a></dt>\n     <dd><img src=\"img/ant.svg\" style=\"float:right; margin: 0 6px 0 1em;\" width=\"50\" id=\"ant\" alt=\"ant icon\">A simulation about ants finding food and bringing it back to the nest. Once an ant finds food, she leaves a chemical trail behind while walking back to the nest. The chemical substance evaporates over time, and other ants simply follow the gradient of the substance until they find the food.</dd>\n     <dt><a href=\"http://www.traffic-simulation.de/\" target=\"_blank\" rel=\"noopener\">Roundabout</a></dt>\n     <dd>Microsimulation of traffic flow.</dd>\n    </dl>\n   </section>\n   <section class=\"sim-category\" id=\"DES\">\n    <h2>Examples of Discrete Event Simulation (DES) </h2>\n    <p>... with fixed-increment time progression.</p>\n    <dl>\n     <dt><a href=\"sims/25/index.html\">Susceptible-Infected-Recovered (SIR) Disease Model</a></dt>\n     <dd>An epidemiological model about the infection dynamics of a contagious disease in a closed population.\n      See also <a href=\"https://insightmaker.com/insight/2944/SIR-Model\" target=\"_blank\" rel=\"noopener\">a continuous SIR model</a>.</dd>\n    </dl>\n    <p>... with next-event time progression.</p>\n    <dl>\n     <dt><a href=\"sims/4/index.html\">Inventory Management</a></dt><dd><img src=\"img/forklift.svg\" style=\"float:right; margin: 4px 6px 0 1em;\" width=\"60\" alt=\"forklift icon\">An inventory\n     management system with a continuous replenishment policy based on a reorder point.</dd>\n     <dt><a href=\"sims/10/index.html\">DriveThru</a></dt><dd><img src=\"img/drive-through-blue.svg\" alt=\"drive through icon\" style=\"float:right; margin: 0 6px 0 1em\" title=\"Icon CC 3.0 BY Freepik (www.freepik.com) from www.flaticon.com\" width=\"70\">The order processing activities of a drive through\n     restaurant are performed at three service points with queues: the <em>order taking</em> at the menu board, the <em>order preparation</em>\n     at the kitchen and the <em>order pickup</em> at the pickup window.</dd>\n     <dt><a href=\"sims/20/index.html\">Lengnick's Baseline Economy</a></dt><dd><img src=\"img/factory.svg\" alt=\"factory icon\" style=\"float:right; margin: 0 6px 0 1em;\" width=\"60\"> <!-- /LengnickBaselineEconomy-1 -->\n     Households play the roles of em&shy;ploy&shy;ees and con&shy;sumers, while firms play the roles of employers and producers.</dd>\n    </dl>\n    <p><a href=\"des-models/index.html\">More...</a></p>\n   </section>\n   <section class=\"sim-category\" id=\"grid-space\">\n    <h2>Examples of Grid Space Models</h2>\n    <p>... with fixed-increment time progression.</p>\n    <dl>\n     <dt><a href=\"sims/16/index.html\">Gossip Model</a></dt>\n        <dd>A Cellular Automata model about the problem of spreading gossip.</dd>\n     <dt><a href=\"sims/6/index.html\">Schelling Segregation Model</a></dt>\n        <dd><img src=\"img/SchellingGrid.png\" style=\"float:right; margin: 6px 6px 0 1em;\" width=\"46\" height=\"59\" alt=\"schelling grid icon\">\n         A residential area is popu&shy;lated by resi&shy;dents belonging to different groups. Periodically, all\n      residents check if they are content with their neighborhood, based on their degree of\n      tolerating neighbors of a different group. If they are not, they move to a location where they\n      are content, or leave the area if they don't find such a location.</dd>\n    </dl>\n    <p><a href=\"gridspace-models/index.html\">More...</a></p>\n   </section>\n   <section class=\"sim-category\" id=\"contin\">\n    <h2>Examples of Continuous Simulation</h2>\n    <p>... with continuous state changes driven by fixed-increment time progression.</p>\n    <dl>\n      <dt><a href=\"sims/15/index.html\">Solar System</a></dt><dd>Implemented with CSS 3D animations.</dd>\n      <dt><a href=\"https://29a.ch/sandbox/2010/galaxy/\" target=\"_blank\" rel=\"noopener\">Galaxy</a></dt><dd>A spiral galaxy with\n      5000 stars (by Jonas Wagner, 2010-08-18).</dd>\n     <dt><a href=\"https://insightmaker.com/insight/1954/The-World3-Model\" target=\"_blank\" rel=\"noopener\">World3</a></dt>\n     <dd>A <em>System Dynamics</em> model of the interactions between population, industrial growth, food production\n      and limits in the ecosystems of the Earth. Reconstructed with <a href=\"https://insightmaker.com/\" target=\"_blank\" rel=\"noopener\">Insight Maker</a>.</dd>\n    </dl>\n    <p><a href=\"continuous-models/index.html\">More...</a></p>\n   </section>\n  </main>\n  <aside><h2>News...</h2>\n   <ul>\n    <li>8-Apr-2019: We are looking for <strong>volunteer translators</strong> to Spanish, Brazilian, French or any language you'd like to support. \n     Please <a href=\"mailto:G.Wagner@b-tu.de?subject=Sim4edu%20Translation&body=Hi%20guys!%0D%0AI'd%20like%20to%20help%20with%20translating%20Sim4edu%20to%20...\" target=\"_blank\" rel=\"noopener\">contact us</a> \n     if you can help  with this.</li>\n    <li>3-Apr-2019: The Sim4edu website and its OESjs simulations has been internationalized: now also available in\n     Chinese and in German (soon).</li>\n    <li>8-Jan-2019: OESjs 1.3e has been released: solving issues with Processing Network simulation and adding summary statistics to experiments.</li>\n    <li>19-Sep-2018: OESjs 1.3c has been released: additional user interfaces for inspecting code, initial events and experiments.</li>\n    <li>28-July-2018: OESjs 1.3b has been released. Now supporting a user interface for setting model variables.</li>\n    <li>9-May-2018: OESjs 1.3a has been released. It allows defining simulation experiments and runs faster due to running the simulator in its own (worker) thread.</li>\n    <li>4-May-2018: The Sim4edu website has moved to Netlify</li>\n   </ul>\n</aside>"},{"layout":"area-page","title":"Object Event Modeling And Simulation","metatitle":"Object Event Modeling And Simulation - OESjs | sim4edu.com","metadesc":"About Object Event Modeling and Simulation, a general Discrete Event Simulation approach. Sim4edu provides the OESjs simulation framework.","ogtitle":"Object Event Modeling And Simulation - OESjs simulation framework | sim4edu.com","ogdesc":"About Object Event Modeling and Simulation, a general Discrete Event Simulation approach. Sim4edu provides the OESjs simulation framework.","ogimg":"../img/sim4edu.png","lang":"en","_content":"<aside>\n<h2>Papers</h2>\n\t <dl style=\"padding-left:0\"><dt>OEM</dt>\n\t\t<dd>Gerd Wagner. <a href=\"https://articles.jsime.org/1/1/\">Information and Process Modeling for Simulation – Part I: Objects and Events</a>. <em>Journal of Simulation Engineering</em> 1:1, 2018.</dd>\n\t\t<dt>OES</dt>\n\t\t<dd>Gerd Wagner. <a href=\"https://www.informs-sim.org/wsc17papers/includes/files/056.pdf\">An Abstract State Machine Semantics For Discrete Event Simulation</a>. <em>Proceedings of the 2017 Winter Simulation Conference</em>. In: W. K. V. Chan et al (Eds.). Piscataway, NJ: IEEE.</dd>\n\t\t<dt>A/OEM&amp;S</dt>\n\t\t<dd>Gerd Wagner and Luis G. Nardin. <a href=\"https://oxygen.informatik.tu-cottbus.de/publications/wagner/WSC2018-AgentConcepts.pdf\">Adding Agent Concepts to Object Event Modeling and Simulation</a>. <em>Proceedings of the 2018 Winter Simulation Conference</em>. In: M. Rabe et al (Eds.). Piscataway, NJ: IEEE.</dd>\n\t </dl>\n\t</aside>\n<p>Object Event Modeling and Simulation (OEM&amp;S) is a general <em>Discrete Event Simulation</em> paradigm combining <em>object-oriented</em> modeling with the <em>event scheduling</em> paradigm. \nIn OEM, the state structure of a system can be modeled with UML Class Diagrams defining both object and event types, and the system's dynamics can be modeled with conceptual process models (expressed, e.g., in BPMN) and process design models (expressed, e.g., in <a href=\"../reading/DPMN.pdf\">DPMN</a>).</p>\n\n<p><em>Agent/Object Event Simulation (A/OES)</em>, is an extension of basic OES by adding the concepts of <em>agents</em>, <em>perception</em>, <em>action</em> and <em>communication</em>.</p>\n\n<p>Sim4edu currently provides the <em>OESjs</em> simulation framework, which is a JavaScript implementation of the OES paradigm, or, more precisely, of its language OESL and its abstract simulator <em>Omega-Epsilon-Sigma </em>(ΩΕΣ) that supports both <em>next-event time progression</em>, as used in discrete event simulation, and <em>fixed-increment time progression</em>, as used in <em>NetLogo</em>-based social science simulations as well as in continuous state change simulations. The next simulator/framework on the roadmap of Sim4edu implements the <em>A/OES paradigm</em> for agent-based discrete event simulation and is called <em>A-OESjs</em>.</p>\n\n<p>A real-world <em>discrete event system</em> (or <em>discrete dynamic system</em>) consists of:</p>\n\n<ul>\n\t<li>objects (of certain types) whose states may be changed by</li>\n\t<li>events (of certain types) occurring at a point in time from a discrete set of time points.</li>\n</ul>\n\n<p>This means that in order to model a discrete event system using OES, we have to</p>\n\n<ol>\n\t<li>Describe its <em><strong>object types</strong></em> and <em><strong>event types</strong></em>.</li>\n\t<li>Specify, for any event type, which <em>causal regularity</em>, responsible for <em><strong>state changes</strong></em> of objects and <em><strong>follow-up events</strong></em>, is triggered by events of that type. Causal regularities are captured by <strong><em>event rules</em></strong>.</li>\n</ol>\n\n<p>The <em><strong>OES language</strong></em> (OESL) allows defining:</p>\n\n<ol>\n\t<li><em>Object types</em> in the form of classes (of an object-oriented language like UML or JavaScript),</li>\n\t<li><em>Event types</em> in the form of classes, and their <em>event rules</em> in the form of a special&nbsp;<em>onEvent</em> method in the corresponding event class.</li>\n</ol>\n\n<p>OESL is a historic successor of <a href=\"https://oxygen.informatik.tu-cottbus.de/aors/ERSL.html\">ERSL</a>, since the OES paradigm has been developed as a continuation of an earlier R&amp;D project called <a href=\"http://oxygen.informatik.tu-cottbus.de/aor/?q=node/24\"><em>Entity-Relationship Modeling and Simulation</em></a>. Likewise, A/OESL is a historic successor of <a href=\"https://oxygen.informatik.tu-cottbus.de/aors/AORSL.html\">AORSL</a>, since the A/OES paradigm has been developed as a continuation of an earlier R&amp;D project called <a href=\"http://oxygen.informatik.tu-cottbus.de/aor/\"><em>Agent-Object-Relationship Simulation</em></a>.</p>\n\n<p>In OES, two categories of simulated events are distinguished:</p>\n\n<ol>\n\t<li><em>Exogenous events </em>occur, periodically, due to factors that are external to the simulation model. Their re-occurrence pattern is modeled in the form of a <em><strong>recurrence</strong></em> function.</li>\n\t<li><em>Caused events</em> are simulated events that are caused by other simulated events.</li>\n</ol>\n\n<p>An OES <strong><em>scenario</em></strong> consists of:</p>\n\n<ul>\n\t<li>An <em>OES model</em> defining <em>object types</em> and <em>event types</em> (with <em>event rules</em>), as well as <em>output statistics</em>. It may include a <em>space model</em> definition.</li>\n\t<li><em>Simulation parameter</em> definitions, like the length of the simulation or a seed for the random number generator.</li>\n\t<li>An <em>initial state</em> definition.</li>\n</ul>\n\n<p>An OES <strong><em>model</em></strong> may include definitions of</p>\n\n<ul>\n\t<li><em>Object types</em></li>\n\t<li><em>Event types</em> with <em>event rules</em> defining the causation of state changes and follow-up events</li>\n\t<li>A <em>time model</em>: either discrete or continuous time</li>\n\t<li>A <em>space model</em> such as a grid space or a 2D/3D continuous space</li>\n\t<li><em>Statistics variables</em></li>\n\t<li><em>Global model variables</em> and/or <em>functions</em></li>\n</ul> \n\n<p>An OES scenario simulation can be configured with</p>\n\n<ul>\n\t<li>A <em>visualization</em> definition (like a 3D visualization of a 2D space model)</li>\n\t<li>A <em>user interaction</em> definition for making simulation games</li>\n\t<li>Various <em>user interface (UI)</em> definitions, e.g. a UI for defining the initial state or a UI for defining the form of visualization</li>\n</ul>\n</main>","source":"oes/index.md","raw":"---\nlayout: area-page\ntitle: Object Event Modeling And Simulation\nmetatitle: Object Event Modeling And Simulation - OESjs | sim4edu.com\nmetadesc: About Object Event Modeling and Simulation, a general Discrete Event Simulation approach. Sim4edu provides the OESjs simulation framework.\nogtitle:  Object Event Modeling And Simulation - OESjs simulation framework | sim4edu.com\nogdesc: About Object Event Modeling and Simulation, a general Discrete Event Simulation approach. Sim4edu provides the OESjs simulation framework.\nogimg: ../img/sim4edu.png\nlang: en\n---\n<aside>\n<h2>Papers</h2>\n\t <dl style=\"padding-left:0\"><dt>OEM</dt>\n\t\t<dd>Gerd Wagner. <a href=\"https://articles.jsime.org/1/1/\">Information and Process Modeling for Simulation – Part I: Objects and Events</a>. <em>Journal of Simulation Engineering</em> 1:1, 2018.</dd>\n\t\t<dt>OES</dt>\n\t\t<dd>Gerd Wagner. <a href=\"https://www.informs-sim.org/wsc17papers/includes/files/056.pdf\">An Abstract State Machine Semantics For Discrete Event Simulation</a>. <em>Proceedings of the 2017 Winter Simulation Conference</em>. In: W. K. V. Chan et al (Eds.). Piscataway, NJ: IEEE.</dd>\n\t\t<dt>A/OEM&amp;S</dt>\n\t\t<dd>Gerd Wagner and Luis G. Nardin. <a href=\"https://oxygen.informatik.tu-cottbus.de/publications/wagner/WSC2018-AgentConcepts.pdf\">Adding Agent Concepts to Object Event Modeling and Simulation</a>. <em>Proceedings of the 2018 Winter Simulation Conference</em>. In: M. Rabe et al (Eds.). Piscataway, NJ: IEEE.</dd>\n\t </dl>\n\t</aside>\n<p>Object Event Modeling and Simulation (OEM&amp;S) is a general <em>Discrete Event Simulation</em> paradigm combining <em>object-oriented</em> modeling with the <em>event scheduling</em> paradigm. \nIn OEM, the state structure of a system can be modeled with UML Class Diagrams defining both object and event types, and the system's dynamics can be modeled with conceptual process models (expressed, e.g., in BPMN) and process design models (expressed, e.g., in <a href=\"../reading/DPMN.pdf\">DPMN</a>).</p>\n\n<p><em>Agent/Object Event Simulation (A/OES)</em>, is an extension of basic OES by adding the concepts of <em>agents</em>, <em>perception</em>, <em>action</em> and <em>communication</em>.</p>\n\n<p>Sim4edu currently provides the <em>OESjs</em> simulation framework, which is a JavaScript implementation of the OES paradigm, or, more precisely, of its language OESL and its abstract simulator <em>Omega-Epsilon-Sigma </em>(ΩΕΣ) that supports both <em>next-event time progression</em>, as used in discrete event simulation, and <em>fixed-increment time progression</em>, as used in <em>NetLogo</em>-based social science simulations as well as in continuous state change simulations. The next simulator/framework on the roadmap of Sim4edu implements the <em>A/OES paradigm</em> for agent-based discrete event simulation and is called <em>A-OESjs</em>.</p>\n\n<p>A real-world <em>discrete event system</em> (or <em>discrete dynamic system</em>) consists of:</p>\n\n<ul>\n\t<li>objects (of certain types) whose states may be changed by</li>\n\t<li>events (of certain types) occurring at a point in time from a discrete set of time points.</li>\n</ul>\n\n<p>This means that in order to model a discrete event system using OES, we have to</p>\n\n<ol>\n\t<li>Describe its <em><strong>object types</strong></em> and <em><strong>event types</strong></em>.</li>\n\t<li>Specify, for any event type, which <em>causal regularity</em>, responsible for <em><strong>state changes</strong></em> of objects and <em><strong>follow-up events</strong></em>, is triggered by events of that type. Causal regularities are captured by <strong><em>event rules</em></strong>.</li>\n</ol>\n\n<p>The <em><strong>OES language</strong></em> (OESL) allows defining:</p>\n\n<ol>\n\t<li><em>Object types</em> in the form of classes (of an object-oriented language like UML or JavaScript),</li>\n\t<li><em>Event types</em> in the form of classes, and their <em>event rules</em> in the form of a special&nbsp;<em>onEvent</em> method in the corresponding event class.</li>\n</ol>\n\n<p>OESL is a historic successor of <a href=\"https://oxygen.informatik.tu-cottbus.de/aors/ERSL.html\">ERSL</a>, since the OES paradigm has been developed as a continuation of an earlier R&amp;D project called <a href=\"http://oxygen.informatik.tu-cottbus.de/aor/?q=node/24\"><em>Entity-Relationship Modeling and Simulation</em></a>. Likewise, A/OESL is a historic successor of <a href=\"https://oxygen.informatik.tu-cottbus.de/aors/AORSL.html\">AORSL</a>, since the A/OES paradigm has been developed as a continuation of an earlier R&amp;D project called <a href=\"http://oxygen.informatik.tu-cottbus.de/aor/\"><em>Agent-Object-Relationship Simulation</em></a>.</p>\n\n<p>In OES, two categories of simulated events are distinguished:</p>\n\n<ol>\n\t<li><em>Exogenous events </em>occur, periodically, due to factors that are external to the simulation model. Their re-occurrence pattern is modeled in the form of a <em><strong>recurrence</strong></em> function.</li>\n\t<li><em>Caused events</em> are simulated events that are caused by other simulated events.</li>\n</ol>\n\n<p>An OES <strong><em>scenario</em></strong> consists of:</p>\n\n<ul>\n\t<li>An <em>OES model</em> defining <em>object types</em> and <em>event types</em> (with <em>event rules</em>), as well as <em>output statistics</em>. It may include a <em>space model</em> definition.</li>\n\t<li><em>Simulation parameter</em> definitions, like the length of the simulation or a seed for the random number generator.</li>\n\t<li>An <em>initial state</em> definition.</li>\n</ul>\n\n<p>An OES <strong><em>model</em></strong> may include definitions of</p>\n\n<ul>\n\t<li><em>Object types</em></li>\n\t<li><em>Event types</em> with <em>event rules</em> defining the causation of state changes and follow-up events</li>\n\t<li>A <em>time model</em>: either discrete or continuous time</li>\n\t<li>A <em>space model</em> such as a grid space or a 2D/3D continuous space</li>\n\t<li><em>Statistics variables</em></li>\n\t<li><em>Global model variables</em> and/or <em>functions</em></li>\n</ul> \n\n<p>An OES scenario simulation can be configured with</p>\n\n<ul>\n\t<li>A <em>visualization</em> definition (like a 3D visualization of a 2D space model)</li>\n\t<li>A <em>user interaction</em> definition for making simulation games</li>\n\t<li>Various <em>user interface (UI)</em> definitions, e.g. a UI for defining the initial state or a UI for defining the form of visualization</li>\n</ul>\n</main>","date":"2019-07-18T09:48:50.586Z","updated":"2019-07-18T09:48:50.586Z","path":"oes/index.html","_id":"cjx8wr3hd0003j1h5l5m7rl69","comments":1,"content":"<aside>\n<h2>Papers</h2>\n     <dl style=\"padding-left:0\"><dt>OEM</dt>\n        <dd>Gerd Wagner. <a href=\"https://articles.jsime.org/1/1/\" target=\"_blank\" rel=\"noopener\">Information and Process Modeling for Simulation – Part I: Objects and Events</a>. <em>Journal of Simulation Engineering</em> 1:1, 2018.</dd>\n        <dt>OES</dt>\n        <dd>Gerd Wagner. <a href=\"https://www.informs-sim.org/wsc17papers/includes/files/056.pdf\" target=\"_blank\" rel=\"noopener\">An Abstract State Machine Semantics For Discrete Event Simulation</a>. <em>Proceedings of the 2017 Winter Simulation Conference</em>. In: W. K. V. Chan et al (Eds.). Piscataway, NJ: IEEE.</dd>\n        <dt>A/OEM&amp;S</dt>\n        <dd>Gerd Wagner and Luis G. Nardin. <a href=\"https://oxygen.informatik.tu-cottbus.de/publications/wagner/WSC2018-AgentConcepts.pdf\" target=\"_blank\" rel=\"noopener\">Adding Agent Concepts to Object Event Modeling and Simulation</a>. <em>Proceedings of the 2018 Winter Simulation Conference</em>. In: M. Rabe et al (Eds.). Piscataway, NJ: IEEE.</dd>\n     </dl>\n    </aside>\n<p>Object Event Modeling and Simulation (OEM&amp;S) is a general <em>Discrete Event Simulation</em> paradigm combining <em>object-oriented</em> modeling with the <em>event scheduling</em> paradigm. \nIn OEM, the state structure of a system can be modeled with UML Class Diagrams defining both object and event types, and the system's dynamics can be modeled with conceptual process models (expressed, e.g., in BPMN) and process design models (expressed, e.g., in <a href=\"../reading/DPMN.pdf\">DPMN</a>).</p>\n\n<p><em>Agent/Object Event Simulation (A/OES)</em>, is an extension of basic OES by adding the concepts of <em>agents</em>, <em>perception</em>, <em>action</em> and <em>communication</em>.</p>\n\n<p>Sim4edu currently provides the <em>OESjs</em> simulation framework, which is a JavaScript implementation of the OES paradigm, or, more precisely, of its language OESL and its abstract simulator <em>Omega-Epsilon-Sigma </em>(ΩΕΣ) that supports both <em>next-event time progression</em>, as used in discrete event simulation, and <em>fixed-increment time progression</em>, as used in <em>NetLogo</em>-based social science simulations as well as in continuous state change simulations. The next simulator/framework on the roadmap of Sim4edu implements the <em>A/OES paradigm</em> for agent-based discrete event simulation and is called <em>A-OESjs</em>.</p>\n\n<p>A real-world <em>discrete event system</em> (or <em>discrete dynamic system</em>) consists of:</p>\n\n<ul>\n    <li>objects (of certain types) whose states may be changed by</li>\n    <li>events (of certain types) occurring at a point in time from a discrete set of time points.</li>\n</ul>\n\n<p>This means that in order to model a discrete event system using OES, we have to</p>\n\n<ol>\n    <li>Describe its <em><strong>object types</strong></em> and <em><strong>event types</strong></em>.</li>\n    <li>Specify, for any event type, which <em>causal regularity</em>, responsible for <em><strong>state changes</strong></em> of objects and <em><strong>follow-up events</strong></em>, is triggered by events of that type. Causal regularities are captured by <strong><em>event rules</em></strong>.</li>\n</ol>\n\n<p>The <em><strong>OES language</strong></em> (OESL) allows defining:</p>\n\n<ol>\n    <li><em>Object types</em> in the form of classes (of an object-oriented language like UML or JavaScript),</li>\n    <li><em>Event types</em> in the form of classes, and their <em>event rules</em> in the form of a special&nbsp;<em>onEvent</em> method in the corresponding event class.</li>\n</ol>\n\n<p>OESL is a historic successor of <a href=\"https://oxygen.informatik.tu-cottbus.de/aors/ERSL.html\" target=\"_blank\" rel=\"noopener\">ERSL</a>, since the OES paradigm has been developed as a continuation of an earlier R&amp;D project called <a href=\"http://oxygen.informatik.tu-cottbus.de/aor/?q=node/24\" target=\"_blank\" rel=\"noopener\"><em>Entity-Relationship Modeling and Simulation</em></a>. Likewise, A/OESL is a historic successor of <a href=\"https://oxygen.informatik.tu-cottbus.de/aors/AORSL.html\" target=\"_blank\" rel=\"noopener\">AORSL</a>, since the A/OES paradigm has been developed as a continuation of an earlier R&amp;D project called <a href=\"http://oxygen.informatik.tu-cottbus.de/aor/\" target=\"_blank\" rel=\"noopener\"><em>Agent-Object-Relationship Simulation</em></a>.</p>\n\n<p>In OES, two categories of simulated events are distinguished:</p>\n\n<ol>\n    <li><em>Exogenous events </em>occur, periodically, due to factors that are external to the simulation model. Their re-occurrence pattern is modeled in the form of a <em><strong>recurrence</strong></em> function.</li>\n    <li><em>Caused events</em> are simulated events that are caused by other simulated events.</li>\n</ol>\n\n<p>An OES <strong><em>scenario</em></strong> consists of:</p>\n\n<ul>\n    <li>An <em>OES model</em> defining <em>object types</em> and <em>event types</em> (with <em>event rules</em>), as well as <em>output statistics</em>. It may include a <em>space model</em> definition.</li>\n    <li><em>Simulation parameter</em> definitions, like the length of the simulation or a seed for the random number generator.</li>\n    <li>An <em>initial state</em> definition.</li>\n</ul>\n\n<p>An OES <strong><em>model</em></strong> may include definitions of</p>\n\n<ul>\n    <li><em>Object types</em></li>\n    <li><em>Event types</em> with <em>event rules</em> defining the causation of state changes and follow-up events</li>\n    <li>A <em>time model</em>: either discrete or continuous time</li>\n    <li>A <em>space model</em> such as a grid space or a 2D/3D continuous space</li>\n    <li><em>Statistics variables</em></li>\n    <li><em>Global model variables</em> and/or <em>functions</em></li>\n</ul> \n\n<p>An OES scenario simulation can be configured with</p>\n\n<ul>\n    <li>A <em>visualization</em> definition (like a 3D visualization of a 2D space model)</li>\n    <li>A <em>user interaction</em> definition for making simulation games</li>\n    <li>Various <em>user interface (UI)</em> definitions, e.g. a UI for defining the initial state or a UI for defining the form of visualization</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<aside>\n<h2>Papers</h2>\n     <dl style=\"padding-left:0\"><dt>OEM</dt>\n        <dd>Gerd Wagner. <a href=\"https://articles.jsime.org/1/1/\" target=\"_blank\" rel=\"noopener\">Information and Process Modeling for Simulation – Part I: Objects and Events</a>. <em>Journal of Simulation Engineering</em> 1:1, 2018.</dd>\n        <dt>OES</dt>\n        <dd>Gerd Wagner. <a href=\"https://www.informs-sim.org/wsc17papers/includes/files/056.pdf\" target=\"_blank\" rel=\"noopener\">An Abstract State Machine Semantics For Discrete Event Simulation</a>. <em>Proceedings of the 2017 Winter Simulation Conference</em>. In: W. K. V. Chan et al (Eds.). Piscataway, NJ: IEEE.</dd>\n        <dt>A/OEM&amp;S</dt>\n        <dd>Gerd Wagner and Luis G. Nardin. <a href=\"https://oxygen.informatik.tu-cottbus.de/publications/wagner/WSC2018-AgentConcepts.pdf\" target=\"_blank\" rel=\"noopener\">Adding Agent Concepts to Object Event Modeling and Simulation</a>. <em>Proceedings of the 2018 Winter Simulation Conference</em>. In: M. Rabe et al (Eds.). Piscataway, NJ: IEEE.</dd>\n     </dl>\n    </aside>\n<p>Object Event Modeling and Simulation (OEM&amp;S) is a general <em>Discrete Event Simulation</em> paradigm combining <em>object-oriented</em> modeling with the <em>event scheduling</em> paradigm. \nIn OEM, the state structure of a system can be modeled with UML Class Diagrams defining both object and event types, and the system's dynamics can be modeled with conceptual process models (expressed, e.g., in BPMN) and process design models (expressed, e.g., in <a href=\"../reading/DPMN.pdf\">DPMN</a>).</p>\n\n<p><em>Agent/Object Event Simulation (A/OES)</em>, is an extension of basic OES by adding the concepts of <em>agents</em>, <em>perception</em>, <em>action</em> and <em>communication</em>.</p>\n\n<p>Sim4edu currently provides the <em>OESjs</em> simulation framework, which is a JavaScript implementation of the OES paradigm, or, more precisely, of its language OESL and its abstract simulator <em>Omega-Epsilon-Sigma </em>(ΩΕΣ) that supports both <em>next-event time progression</em>, as used in discrete event simulation, and <em>fixed-increment time progression</em>, as used in <em>NetLogo</em>-based social science simulations as well as in continuous state change simulations. The next simulator/framework on the roadmap of Sim4edu implements the <em>A/OES paradigm</em> for agent-based discrete event simulation and is called <em>A-OESjs</em>.</p>\n\n<p>A real-world <em>discrete event system</em> (or <em>discrete dynamic system</em>) consists of:</p>\n\n<ul>\n    <li>objects (of certain types) whose states may be changed by</li>\n    <li>events (of certain types) occurring at a point in time from a discrete set of time points.</li>\n</ul>\n\n<p>This means that in order to model a discrete event system using OES, we have to</p>\n\n<ol>\n    <li>Describe its <em><strong>object types</strong></em> and <em><strong>event types</strong></em>.</li>\n    <li>Specify, for any event type, which <em>causal regularity</em>, responsible for <em><strong>state changes</strong></em> of objects and <em><strong>follow-up events</strong></em>, is triggered by events of that type. Causal regularities are captured by <strong><em>event rules</em></strong>.</li>\n</ol>\n\n<p>The <em><strong>OES language</strong></em> (OESL) allows defining:</p>\n\n<ol>\n    <li><em>Object types</em> in the form of classes (of an object-oriented language like UML or JavaScript),</li>\n    <li><em>Event types</em> in the form of classes, and their <em>event rules</em> in the form of a special&nbsp;<em>onEvent</em> method in the corresponding event class.</li>\n</ol>\n\n<p>OESL is a historic successor of <a href=\"https://oxygen.informatik.tu-cottbus.de/aors/ERSL.html\" target=\"_blank\" rel=\"noopener\">ERSL</a>, since the OES paradigm has been developed as a continuation of an earlier R&amp;D project called <a href=\"http://oxygen.informatik.tu-cottbus.de/aor/?q=node/24\" target=\"_blank\" rel=\"noopener\"><em>Entity-Relationship Modeling and Simulation</em></a>. Likewise, A/OESL is a historic successor of <a href=\"https://oxygen.informatik.tu-cottbus.de/aors/AORSL.html\" target=\"_blank\" rel=\"noopener\">AORSL</a>, since the A/OES paradigm has been developed as a continuation of an earlier R&amp;D project called <a href=\"http://oxygen.informatik.tu-cottbus.de/aor/\" target=\"_blank\" rel=\"noopener\"><em>Agent-Object-Relationship Simulation</em></a>.</p>\n\n<p>In OES, two categories of simulated events are distinguished:</p>\n\n<ol>\n    <li><em>Exogenous events </em>occur, periodically, due to factors that are external to the simulation model. Their re-occurrence pattern is modeled in the form of a <em><strong>recurrence</strong></em> function.</li>\n    <li><em>Caused events</em> are simulated events that are caused by other simulated events.</li>\n</ol>\n\n<p>An OES <strong><em>scenario</em></strong> consists of:</p>\n\n<ul>\n    <li>An <em>OES model</em> defining <em>object types</em> and <em>event types</em> (with <em>event rules</em>), as well as <em>output statistics</em>. It may include a <em>space model</em> definition.</li>\n    <li><em>Simulation parameter</em> definitions, like the length of the simulation or a seed for the random number generator.</li>\n    <li>An <em>initial state</em> definition.</li>\n</ul>\n\n<p>An OES <strong><em>model</em></strong> may include definitions of</p>\n\n<ul>\n    <li><em>Object types</em></li>\n    <li><em>Event types</em> with <em>event rules</em> defining the causation of state changes and follow-up events</li>\n    <li>A <em>time model</em>: either discrete or continuous time</li>\n    <li>A <em>space model</em> such as a grid space or a 2D/3D continuous space</li>\n    <li><em>Statistics variables</em></li>\n    <li><em>Global model variables</em> and/or <em>functions</em></li>\n</ul> \n\n<p>An OES scenario simulation can be configured with</p>\n\n<ul>\n    <li>A <em>visualization</em> definition (like a 3D visualization of a 2D space model)</li>\n    <li>A <em>user interaction</em> definition for making simulation games</li>\n    <li>Various <em>user interface (UI)</em> definitions, e.g. a UI for defining the initial state or a UI for defining the form of visualization</li>\n</ul>\n"},{"layout":"sims","title":"A Service Queue Model with Utilization and Maximum Queue Length Statistics","metatitle":"Service Queue Model - Utilization & Maximum Queue Length Statistics","metadesc":"A service queue model with two statistics maximum queue length and service utilization. The model uses abstract time & abstracts away from individual customers","ogtitle":"A Service Queue Model with Utilization and Maximum Queue Length Statistics","ogdesc":"A service queue model with two statistics maximum queue length and service utilization. The model uses abstract time & abstracts away from individual customers","ogimg":"../../img/sim4edu.png","lang":"en","_content":" <div id=\"model-menu\">\n  <button type='button' onclick='oes.ui.showNarrative()'>Narrative</button>\n  <button type='button' onclick='oes.ui.showDescription()'>Description</button>\n  <button id='showCodeBtn' type='button' onclick='oes.ui.showCode()'>Code</button>\n </div>\n</main>\n\n\n","source":"sims/1/index.md","raw":"---\nlayout: sims\ntitle: A Service Queue Model with Utilization and Maximum Queue Length Statistics\nmetatitle: Service Queue Model - Utilization & Maximum Queue Length Statistics\nmetadesc: A service queue model with two statistics maximum queue length and service utilization. The model uses abstract time & abstracts away from individual customers \nogtitle: A Service Queue Model with Utilization and Maximum Queue Length Statistics\nogdesc: A service queue model with two statistics maximum queue length and service utilization. The model uses abstract time & abstracts away from individual customers \nogimg: ../../img/sim4edu.png\nlang: en\n---\n <div id=\"model-menu\">\n  <button type='button' onclick='oes.ui.showNarrative()'>Narrative</button>\n  <button type='button' onclick='oes.ui.showDescription()'>Description</button>\n  <button id='showCodeBtn' type='button' onclick='oes.ui.showCode()'>Code</button>\n </div>\n</main>\n\n\n","date":"2019-07-18T09:49:11.737Z","updated":"2019-07-18T09:49:11.737Z","path":"sims/1/index.html","_id":"cjx8x0xw50006pih5btp2fbyn","comments":1,"content":" <div id=\"model-menu\">\n  <button type=\"button\" onclick=\"oes.ui.showNarrative()\">Narrative</button>\n  <button type=\"button\" onclick=\"oes.ui.showDescription()\">Description</button>\n  <button id=\"showCodeBtn\" type=\"button\" onclick=\"oes.ui.showCode()\">Code</button>\n </div>\n\n\n\n","site":{"data":{}},"excerpt":"","more":" <div id=\"model-menu\">\n  <button type=\"button\" onclick=\"oes.ui.showNarrative()\">Narrative</button>\n  <button type=\"button\" onclick=\"oes.ui.showDescription()\">Description</button>\n  <button id=\"showCodeBtn\" type=\"button\" onclick=\"oes.ui.showCode()\">Code</button>\n </div>\n\n\n\n"},{"layout":"description","title":"A Single Service Desk Queueing System Model with Utilization and Maximum Queue Length Statistics","metatitle":"Single Service Desk Queueing System Model | sim4edu.com","metadesc":"A service queue model with two statistics maximum queue length and service utilization. The model uses abstract time & abstracts away from individual customers","ogtitle":"Single Service Desk Queueing System Model | Two statistics | sim4edu.com","ogdesc":"A service queue model with two statistics maximum queue length and service utilization. The model uses abstract time & abstracts away from individual customers","ogimg":"../../img/sim4edu.png","lang":"en","_content":"  <section class=\"mbd collapsed\"><h2><span>►</span>Conceptual Model <sup class=\"expl-req\">?</sup></h2>\n   <div id=\"expl-CM\" class=\"expl\"></div>\n\n   <section><h3>Conceptual Information Model <sup class=\"expl-req\">?</sup></h3>\n     <div id=\"expl-CIM\" class=\"expl\"></div>\n     <p>The potentially relevant object types are:</p>\n<!--\n     <figure class=\"right-float\">\n       <img src=\"CIM-ObjT.svg\" width=\"450\"/>\n       <figcaption>A conceptual model describing object types.</figcaption>\n     </figure>\n-->\n     <ol>\n       <li>customers,</li>\n       <li>service desks,</li>\n       <li>service queues,</li>\n       <li>service clerks.</li>\n     </ol>\n     <p>Notice that it seems preferable (more natural) to separate the service queue from the service desk and\n       not consider the customer that is currently being served at the service desk to be part of the queue.</p>\n     <p>Conceptually, a queue is a linearly ordered collection of objects of a certain type with a First-In-First-Out\n       policy: the next object to be removed is the first object, at the front of the queue, while additional\n       objects are added at the end of the queue.</p>\n     <p>Potentially relevant types of events are:</p>\n     <ol>\n       <li>customer arrivals,</li>\n       <li>customers queuing up,</li>\n       <li>customers being notified/invited to move forward to the service desk,</li>\n       <li>service start,</li>\n       <li>service end,</li>\n       <li>customer departures.</li>\n     </ol>\n     <p>Notice that a pair of start and end events, like \"service start\" and \"service end\", indicates that there is\n      an activity that is temporally framed by these two events. It's an option to consider also activities, in addition\n      to objects and events, in a conceptual model. We will do this in our <a href=\"https://sim4edu.com/sims/3/description.html\">\n      3rd simulation model</a> of the service desk system.</p>\n     <p>Both object types and event types, together with their participation associations, can be visually described in\n       a UML class diagram, as shown below.</p>\n     <figure>\n       <img src=\"media/img/CIM.svg\" width=\"600\" alt=\"cim\"/>\n       <figcaption>A conceptual information model describing object types and event types.</figcaption>\n     </figure>\n   </section>\n\n   <section>\n     <h3>Conceptual Process Model <sup class=\"expl-req\">?</sup></h3>\n     <div id=\"expl-CPM\" class=\"expl\"></div>\n     <table>\n       <caption>Event rules.</caption>\n       <thead>\n       <tr>\n         <th>ON (event type)</th><th>DO (event routine)</th><th>Rule Diagram</th>\n       </tr>\n       </thead>\n       <tbody>\n       <tr>\n         <td>customer arrival</td>\n         <td>If the service desk is busy, then the new customer queues up,\n           else the service starts.</td>\n         <td><img src=\"media/img/Arrival_CRM.svg\" width=\"250\" alt=\"arrival crm\"/></td>\n       </tr>\n       <tr>\n         <td>service start</td>\n         <td>After some time, the service ends.</td>\n         <td><img src=\"media/img/ServiceStart_CRM.svg\" width=\"250\" alt=\"service start crm\"/></td>\n       </tr>\n       <tr>\n         <td>service end</td>\n         <td>The served customer departs. If there are still customers waiting in the queue,\n           then the next service starts.</td>\n         <td><img src=\"media/img/ServiceEnd_CRM.svg\" width=\"250\" alt=\"service end crm\"/></td>\n       </tr>\n       </tbody>\n     </table>\n     <p>The involved types of events can be related with each other via their (possibly conditional) temporal succession,\n      as visualized in the following BPMN process diagram:</p>\n     <figure>\n       <img src=\"media/img/CPM.svg\" width=\"600\" alt=\"cpm\"/>\n       <figcaption>A conceptual process diagram integrating the event rule diagrams.</figcaption>\n     </figure>\n   </section>\n </section>\n\n <section class=\"mbd collapsed\"><h2><span>►</span>Simulation Design Model <sup class=\"expl-req\">?</sup></h2>\n   <div id=\"expl-DM\" class=\"expl\"></div>\n\n   <section><h3>Information Design Model <sup class=\"expl-req\">?</sup></h3>\n     <div id=\"expl-IDM\" class=\"expl\"></div>\n     <p>In the current simulation project, the purpose of the simulation model is to compute two statistics:\n       the <em>service utilization</em> and <em>the maximum queue length</em>. We may therefore abstract away from many\n       of the object types from the conceptual information model:</p>\n     <ul>\n       <li> <code>Customer</code>: we don't need any information about individual customers;</li>\n       <li> <code>ServiceQueue</code>: we don't need to know who is next, it's sufficient to know <em>the length of the queue</em>;</li>\n       <li> <code>ServiceDesk</code>: we don't need any information about the service desks, the information if\n         <em>the service desk is busy</em> or not is obtained by testing if the queue's length is greater than 0.</li>\n       <li> <code>ServiceClerk</code>: we don't need any information about service clerks.</li>\n     </ul>\n     <p>Consequently, a computational design for the purpose of computing the two statistics <em>maximum queue length</em>\n       and <em>service utilization</em> is obtained by modeling only one object type: <b><code>ServiceDesk</code></b> with\n       one (integer-valued) attribute <code>queueLength</code>, and with one random variable <code>serviceDuration()</code>\n       expressed in the form of a special kind of function.</p>\n     <p>Concerning the event types described in the conceptual information model, the goal is to keep\n       only those of them, which are really needed, in the design model. This question is closely related\n       to the question, which types of state changes and follow-up event creation have to be modeled for\n       being able to answer the research question(s).</p>\n     <p>In the case of the given two research questions, we need to keep track of changes of the queue length\n       and we need to be able to add up the service durations. For keeping track of queue length changes,\n       we need to consider all types of events that may change the queue length: <em>customer arrivals</em> and\n       <em>customer departures</em>. For being able to add up the service durations, we need to catch <em>service start</em>\n       and <em>service end events</em>.</p>\n     <p>After identifying the relevant event types, we can look for further simplification opportunities\n      by analyzing their possible temporal coincidence. Clearly, we can consider customer departures\n      to occur immediately after the corresponding service end events, without having any effects that\n      could not be merged. Therefore, we can drop service end events, and take care of their effects\n      (the cumulative service time computation) when handling the related customer departure event.</p>\n     <p>In addition, we can drop service start events, since they temporally coincide with customer\n      arrivals when the queue is empty, or otherwise (when the queue is not empty) they coincide\n      with service end (and, hence, with customer departure) events, because each service end event\n      causes a new service start event as long as the queue is not empty.</p>\n     <p>As a result of the above considerations, we get the following two types of events:</p>\n     <ul>\n       <li><b><code>CustomerArrival</code></b> with a reference property <code>serviceDesk</code> with range\n         <code>ServiceDesk</code>. As an exogenous event type, <code>CustomerArrival</code> has a\n         <code>recurrence</code> function representing a random variable for computing the time in-between\n         two subsequent event occurrences.</li>\n       <li><b><code>CustomerDeparture</code></b> with a reference property <code>serviceDesk</code> with range\n         <code>ServiceDesk</code>.</li>\n     </ul>\n     <p>Notice that, for simplicity, we consider the customer that is currently being served to be part of the queue.\n      In this way, in the simulation program, we can check if the service desk is busy by testing if the length of\n      the queue is greater than 0.</p>\n     <p>An alternative approach would be not considering the currently served customer as\n       part of the queue, but rather use a Boolean attribute <code>isBusy</code> for being able to keep track if the\n       service desk ist still busy with serving a customer.</p>\n     <p>The object types and event types described above, together with their participation associations\n       (\"service desks participate in customer arrival events and in customer departure events\"),\n       are visually described in the following UML class diagram:</p>\n     <figure>\n       <img src=\"media/img/IDM.svg\" width=\"500\" alt=\"idm\"/>\n       <figcaption>An information design model describing object types and event types.</figcaption>\n     </figure>\n     <p>Notice how functions representing random variables, like <code>serviceDuration()</code> and <code>recurrence()</code>,\n       are marked with the keyword (or UML stereotype) «rv» standing for \"random variable\".</p>\n   </section>\n   <section><h3>Process Design Model <sup class=\"expl-req\">?</sup></h3>\n     <div id=\"expl-PDM\" class=\"expl\"></div>\n     <table>\n       <caption>Event rule design table.</caption>\n       <thead>\n       <tr>\n         <td>ON (event type)</td><td>DO (event routine)</td>\n       </tr>\n       </thead>\n       <tbody>\n       <tr>\n         <td>CustomerArrival( sd) @ t</td>\n         <td style=\"font-size:smaller\">\n           INCREMENT sd.queueLength<br/>\n           IF sd.queueLength = 1<br/>\n           THEN SCHEDULE CustomerDeparture( sd) @ (t + sd.serviceDuration())\n         </td>\n       </tr>\n       <tr>\n         <td>CustomerDeparture( sd) @ t</td>\n         <td style=\"font-size:smaller\">\n           DECREMENT sd.queueLength<br/>\n           IF sd.queueLength > 0<br/>\n           THEN SCHEDULE CustomerDeparture( sd) @ (t + sd.serviceDuration())\n         </td>\n       </tr>\n       </tbody>\n     </table>\n     <table>\n       <caption>From conceptual event rule models to rule design models.</caption>\n       <thead>\n        <tr><th>Conceptual rule models</th><th>Rule design models</th></tr>\n       </thead>\n       <tbody>\n        <tr>\n         <td><img src=\"media/img/Arrival_CRM.svg\" width=\"250\" alt=\"arrival crm\"/></td>\n         <td><img src=\"media/img/Arrival_RDM.svg\" width=\"450\" alt=\"arrival rdm\"/></td>\n        </tr>\n        <tr>\n         <td><img src=\"media/img/ServiceStart_CRM.svg\" width=\"250\"/></td>\n          <td rowspan=\"2\"><img src=\"media/img/Departure_RDM.svg\" width=\"450\" alt=\"departure rdm\"/></td>\n        </tr>\n        <tr>\n         <td><img src=\"media/img/ServiceEnd_CRM.svg\" width=\"250\" alt=\"service end crm\"/></td>\n        </tr>\n       </tbody>\n     </table>\n     <figure>\n       <img src=\"media/img/PDM.svg\" width=\"700\" alt=\"pdm\"/>\n       <figcaption>A process design model integrating both event rule design models.</figcaption>\n     </figure>\n   </section>\n </section>\n\n <section class=\"mbd collapsed\"><h2><span>►</span>See also</h2>\n  <section><h3>Other OES Models for the Same System/Problem/Domain</h3>\n   <ol>\n     <!--\n     <li><a href=\"../1/index.html\">ServiceDesk-1</a>: A service queue model\n       (one service and one queue) with two statistics: <i>maximum queue length</i> and <i>service utilization</i>.\n       The model abstracts away from individual customers and from the composition of the queue.</li>\n     -->\n     <li><a href=\"../2/index.html\">ServiceDesk-2</a>: A service queue model\n       (one service and one queue) with one statistic: the Mean Response Time, which is the average length of time\n       a customer spends in the system from arrival to departure. For recording their arrival time, individual\n       customers are represented explicitly in a <i>waitingCustomers</i> queue.</li>\n     <li><a href=\"../3/index.html\">ServiceDesk-3</a>: A service queue model where the service\n       is modeled as an activity with the service desk as its resource, for which the utilization statistics\n       is computed automatically.</li>\n     <li><a href=\"../12/index.html\">ServiceDesk-4</a>: A service queue model where the\n       service desk is modeled as a processing node of a processing network that has an entry node and\n       an exit node for arriving and departing customers. The model is based on the pre-defined\n       <i>Processing Network</i> concepts: WorkObject, Arrival, EntryNode, ProcessingNode and ExitNode,\n       such that processing objects 'flow through the system'.</li>\n     <li><a href=\"../9/index.html\">ConsecutiveServices</a>: An activity-based\n       service queue model of two consecutive service providers with customer waiting lines.</li>\n     <li><a href=\"../11/index.html\">ProcessingNetwork-1</a>: A service queue model\n       where service providers are modeled as processing nodes (with input queues) within a processing network\n       that has an entry node and an exit node for arriving and departing customers. The model is based on\n       the pre-defined <i>Processing Network</i> concepts: WorkObject, Arrival, EntryNode, ProcessingNode and ExitNode,\n       such that processing objects 'flow through the system'.</li>\n   </ol>\n  </section>\n  <section><h2>Similar Models Implemented with Other Frameworks</h2>\n   <ol>\n     <li><a href=\"http://ccl.northwestern.edu/netlogo/models/community/Queueing_Simulation_Discrete_Event\">Queueing_Simulation_Discrete_Event</a>: This NetLogo simulation uses NetLogo's tick-advance primitive to advance simulation time by non-integral amounts. However, NetLogo's standard ticks display is unable to display non-integral values, so a custom ticks display has to be programmed. Copyright 2010, Nick Bennett.</li>\n   </ol>\n  </section>\n </section>\n","source":"sims/1/description.md","raw":"---\nlayout: description\ntitle: A Single Service Desk Queueing System Model with Utilization and Maximum Queue Length Statistics\nmetatitle: Single Service Desk Queueing System Model | sim4edu.com\nmetadesc: A service queue model with two statistics maximum queue length and service utilization. The model uses abstract time & abstracts away from individual customers\nogtitle: Single Service Desk Queueing System Model | Two statistics | sim4edu.com\nogdesc: A service queue model with two statistics maximum queue length and service utilization. The model uses abstract time & abstracts away from individual customers\nogimg: ../../img/sim4edu.png\nlang: en\n---\n  <section class=\"mbd collapsed\"><h2><span>►</span>Conceptual Model <sup class=\"expl-req\">?</sup></h2>\n   <div id=\"expl-CM\" class=\"expl\"></div>\n\n   <section><h3>Conceptual Information Model <sup class=\"expl-req\">?</sup></h3>\n     <div id=\"expl-CIM\" class=\"expl\"></div>\n     <p>The potentially relevant object types are:</p>\n<!--\n     <figure class=\"right-float\">\n       <img src=\"CIM-ObjT.svg\" width=\"450\"/>\n       <figcaption>A conceptual model describing object types.</figcaption>\n     </figure>\n-->\n     <ol>\n       <li>customers,</li>\n       <li>service desks,</li>\n       <li>service queues,</li>\n       <li>service clerks.</li>\n     </ol>\n     <p>Notice that it seems preferable (more natural) to separate the service queue from the service desk and\n       not consider the customer that is currently being served at the service desk to be part of the queue.</p>\n     <p>Conceptually, a queue is a linearly ordered collection of objects of a certain type with a First-In-First-Out\n       policy: the next object to be removed is the first object, at the front of the queue, while additional\n       objects are added at the end of the queue.</p>\n     <p>Potentially relevant types of events are:</p>\n     <ol>\n       <li>customer arrivals,</li>\n       <li>customers queuing up,</li>\n       <li>customers being notified/invited to move forward to the service desk,</li>\n       <li>service start,</li>\n       <li>service end,</li>\n       <li>customer departures.</li>\n     </ol>\n     <p>Notice that a pair of start and end events, like \"service start\" and \"service end\", indicates that there is\n      an activity that is temporally framed by these two events. It's an option to consider also activities, in addition\n      to objects and events, in a conceptual model. We will do this in our <a href=\"https://sim4edu.com/sims/3/description.html\">\n      3rd simulation model</a> of the service desk system.</p>\n     <p>Both object types and event types, together with their participation associations, can be visually described in\n       a UML class diagram, as shown below.</p>\n     <figure>\n       <img src=\"media/img/CIM.svg\" width=\"600\" alt=\"cim\"/>\n       <figcaption>A conceptual information model describing object types and event types.</figcaption>\n     </figure>\n   </section>\n\n   <section>\n     <h3>Conceptual Process Model <sup class=\"expl-req\">?</sup></h3>\n     <div id=\"expl-CPM\" class=\"expl\"></div>\n     <table>\n       <caption>Event rules.</caption>\n       <thead>\n       <tr>\n         <th>ON (event type)</th><th>DO (event routine)</th><th>Rule Diagram</th>\n       </tr>\n       </thead>\n       <tbody>\n       <tr>\n         <td>customer arrival</td>\n         <td>If the service desk is busy, then the new customer queues up,\n           else the service starts.</td>\n         <td><img src=\"media/img/Arrival_CRM.svg\" width=\"250\" alt=\"arrival crm\"/></td>\n       </tr>\n       <tr>\n         <td>service start</td>\n         <td>After some time, the service ends.</td>\n         <td><img src=\"media/img/ServiceStart_CRM.svg\" width=\"250\" alt=\"service start crm\"/></td>\n       </tr>\n       <tr>\n         <td>service end</td>\n         <td>The served customer departs. If there are still customers waiting in the queue,\n           then the next service starts.</td>\n         <td><img src=\"media/img/ServiceEnd_CRM.svg\" width=\"250\" alt=\"service end crm\"/></td>\n       </tr>\n       </tbody>\n     </table>\n     <p>The involved types of events can be related with each other via their (possibly conditional) temporal succession,\n      as visualized in the following BPMN process diagram:</p>\n     <figure>\n       <img src=\"media/img/CPM.svg\" width=\"600\" alt=\"cpm\"/>\n       <figcaption>A conceptual process diagram integrating the event rule diagrams.</figcaption>\n     </figure>\n   </section>\n </section>\n\n <section class=\"mbd collapsed\"><h2><span>►</span>Simulation Design Model <sup class=\"expl-req\">?</sup></h2>\n   <div id=\"expl-DM\" class=\"expl\"></div>\n\n   <section><h3>Information Design Model <sup class=\"expl-req\">?</sup></h3>\n     <div id=\"expl-IDM\" class=\"expl\"></div>\n     <p>In the current simulation project, the purpose of the simulation model is to compute two statistics:\n       the <em>service utilization</em> and <em>the maximum queue length</em>. We may therefore abstract away from many\n       of the object types from the conceptual information model:</p>\n     <ul>\n       <li> <code>Customer</code>: we don't need any information about individual customers;</li>\n       <li> <code>ServiceQueue</code>: we don't need to know who is next, it's sufficient to know <em>the length of the queue</em>;</li>\n       <li> <code>ServiceDesk</code>: we don't need any information about the service desks, the information if\n         <em>the service desk is busy</em> or not is obtained by testing if the queue's length is greater than 0.</li>\n       <li> <code>ServiceClerk</code>: we don't need any information about service clerks.</li>\n     </ul>\n     <p>Consequently, a computational design for the purpose of computing the two statistics <em>maximum queue length</em>\n       and <em>service utilization</em> is obtained by modeling only one object type: <b><code>ServiceDesk</code></b> with\n       one (integer-valued) attribute <code>queueLength</code>, and with one random variable <code>serviceDuration()</code>\n       expressed in the form of a special kind of function.</p>\n     <p>Concerning the event types described in the conceptual information model, the goal is to keep\n       only those of them, which are really needed, in the design model. This question is closely related\n       to the question, which types of state changes and follow-up event creation have to be modeled for\n       being able to answer the research question(s).</p>\n     <p>In the case of the given two research questions, we need to keep track of changes of the queue length\n       and we need to be able to add up the service durations. For keeping track of queue length changes,\n       we need to consider all types of events that may change the queue length: <em>customer arrivals</em> and\n       <em>customer departures</em>. For being able to add up the service durations, we need to catch <em>service start</em>\n       and <em>service end events</em>.</p>\n     <p>After identifying the relevant event types, we can look for further simplification opportunities\n      by analyzing their possible temporal coincidence. Clearly, we can consider customer departures\n      to occur immediately after the corresponding service end events, without having any effects that\n      could not be merged. Therefore, we can drop service end events, and take care of their effects\n      (the cumulative service time computation) when handling the related customer departure event.</p>\n     <p>In addition, we can drop service start events, since they temporally coincide with customer\n      arrivals when the queue is empty, or otherwise (when the queue is not empty) they coincide\n      with service end (and, hence, with customer departure) events, because each service end event\n      causes a new service start event as long as the queue is not empty.</p>\n     <p>As a result of the above considerations, we get the following two types of events:</p>\n     <ul>\n       <li><b><code>CustomerArrival</code></b> with a reference property <code>serviceDesk</code> with range\n         <code>ServiceDesk</code>. As an exogenous event type, <code>CustomerArrival</code> has a\n         <code>recurrence</code> function representing a random variable for computing the time in-between\n         two subsequent event occurrences.</li>\n       <li><b><code>CustomerDeparture</code></b> with a reference property <code>serviceDesk</code> with range\n         <code>ServiceDesk</code>.</li>\n     </ul>\n     <p>Notice that, for simplicity, we consider the customer that is currently being served to be part of the queue.\n      In this way, in the simulation program, we can check if the service desk is busy by testing if the length of\n      the queue is greater than 0.</p>\n     <p>An alternative approach would be not considering the currently served customer as\n       part of the queue, but rather use a Boolean attribute <code>isBusy</code> for being able to keep track if the\n       service desk ist still busy with serving a customer.</p>\n     <p>The object types and event types described above, together with their participation associations\n       (\"service desks participate in customer arrival events and in customer departure events\"),\n       are visually described in the following UML class diagram:</p>\n     <figure>\n       <img src=\"media/img/IDM.svg\" width=\"500\" alt=\"idm\"/>\n       <figcaption>An information design model describing object types and event types.</figcaption>\n     </figure>\n     <p>Notice how functions representing random variables, like <code>serviceDuration()</code> and <code>recurrence()</code>,\n       are marked with the keyword (or UML stereotype) «rv» standing for \"random variable\".</p>\n   </section>\n   <section><h3>Process Design Model <sup class=\"expl-req\">?</sup></h3>\n     <div id=\"expl-PDM\" class=\"expl\"></div>\n     <table>\n       <caption>Event rule design table.</caption>\n       <thead>\n       <tr>\n         <td>ON (event type)</td><td>DO (event routine)</td>\n       </tr>\n       </thead>\n       <tbody>\n       <tr>\n         <td>CustomerArrival( sd) @ t</td>\n         <td style=\"font-size:smaller\">\n           INCREMENT sd.queueLength<br/>\n           IF sd.queueLength = 1<br/>\n           THEN SCHEDULE CustomerDeparture( sd) @ (t + sd.serviceDuration())\n         </td>\n       </tr>\n       <tr>\n         <td>CustomerDeparture( sd) @ t</td>\n         <td style=\"font-size:smaller\">\n           DECREMENT sd.queueLength<br/>\n           IF sd.queueLength > 0<br/>\n           THEN SCHEDULE CustomerDeparture( sd) @ (t + sd.serviceDuration())\n         </td>\n       </tr>\n       </tbody>\n     </table>\n     <table>\n       <caption>From conceptual event rule models to rule design models.</caption>\n       <thead>\n        <tr><th>Conceptual rule models</th><th>Rule design models</th></tr>\n       </thead>\n       <tbody>\n        <tr>\n         <td><img src=\"media/img/Arrival_CRM.svg\" width=\"250\" alt=\"arrival crm\"/></td>\n         <td><img src=\"media/img/Arrival_RDM.svg\" width=\"450\" alt=\"arrival rdm\"/></td>\n        </tr>\n        <tr>\n         <td><img src=\"media/img/ServiceStart_CRM.svg\" width=\"250\"/></td>\n          <td rowspan=\"2\"><img src=\"media/img/Departure_RDM.svg\" width=\"450\" alt=\"departure rdm\"/></td>\n        </tr>\n        <tr>\n         <td><img src=\"media/img/ServiceEnd_CRM.svg\" width=\"250\" alt=\"service end crm\"/></td>\n        </tr>\n       </tbody>\n     </table>\n     <figure>\n       <img src=\"media/img/PDM.svg\" width=\"700\" alt=\"pdm\"/>\n       <figcaption>A process design model integrating both event rule design models.</figcaption>\n     </figure>\n   </section>\n </section>\n\n <section class=\"mbd collapsed\"><h2><span>►</span>See also</h2>\n  <section><h3>Other OES Models for the Same System/Problem/Domain</h3>\n   <ol>\n     <!--\n     <li><a href=\"../1/index.html\">ServiceDesk-1</a>: A service queue model\n       (one service and one queue) with two statistics: <i>maximum queue length</i> and <i>service utilization</i>.\n       The model abstracts away from individual customers and from the composition of the queue.</li>\n     -->\n     <li><a href=\"../2/index.html\">ServiceDesk-2</a>: A service queue model\n       (one service and one queue) with one statistic: the Mean Response Time, which is the average length of time\n       a customer spends in the system from arrival to departure. For recording their arrival time, individual\n       customers are represented explicitly in a <i>waitingCustomers</i> queue.</li>\n     <li><a href=\"../3/index.html\">ServiceDesk-3</a>: A service queue model where the service\n       is modeled as an activity with the service desk as its resource, for which the utilization statistics\n       is computed automatically.</li>\n     <li><a href=\"../12/index.html\">ServiceDesk-4</a>: A service queue model where the\n       service desk is modeled as a processing node of a processing network that has an entry node and\n       an exit node for arriving and departing customers. The model is based on the pre-defined\n       <i>Processing Network</i> concepts: WorkObject, Arrival, EntryNode, ProcessingNode and ExitNode,\n       such that processing objects 'flow through the system'.</li>\n     <li><a href=\"../9/index.html\">ConsecutiveServices</a>: An activity-based\n       service queue model of two consecutive service providers with customer waiting lines.</li>\n     <li><a href=\"../11/index.html\">ProcessingNetwork-1</a>: A service queue model\n       where service providers are modeled as processing nodes (with input queues) within a processing network\n       that has an entry node and an exit node for arriving and departing customers. The model is based on\n       the pre-defined <i>Processing Network</i> concepts: WorkObject, Arrival, EntryNode, ProcessingNode and ExitNode,\n       such that processing objects 'flow through the system'.</li>\n   </ol>\n  </section>\n  <section><h2>Similar Models Implemented with Other Frameworks</h2>\n   <ol>\n     <li><a href=\"http://ccl.northwestern.edu/netlogo/models/community/Queueing_Simulation_Discrete_Event\">Queueing_Simulation_Discrete_Event</a>: This NetLogo simulation uses NetLogo's tick-advance primitive to advance simulation time by non-integral amounts. However, NetLogo's standard ticks display is unable to display non-integral values, so a custom ticks display has to be programmed. Copyright 2010, Nick Bennett.</li>\n   </ol>\n  </section>\n </section>\n","date":"2019-07-18T09:49:07.831Z","updated":"2019-07-18T09:49:07.831Z","path":"sims/1/description.html","_id":"cjx8x0xwa0008pih52pkt059c","comments":1,"content":"  <section class=\"mbd collapsed\"><h2><span>►</span>Conceptual Model <sup class=\"expl-req\">?</sup></h2>\n   <div id=\"expl-CM\" class=\"expl\"></div>\n\n   <section><h3>Conceptual Information Model <sup class=\"expl-req\">?</sup></h3>\n     <div id=\"expl-CIM\" class=\"expl\"></div>\n     <p>The potentially relevant object types are:</p>\n<!--\n     <figure class=\"right-float\">\n       <img src=\"CIM-ObjT.svg\" width=\"450\"/>\n       <figcaption>A conceptual model describing object types.</figcaption>\n     </figure>\n-->\n     <ol>\n       <li>customers,</li>\n       <li>service desks,</li>\n       <li>service queues,</li>\n       <li>service clerks.</li>\n     </ol>\n     <p>Notice that it seems preferable (more natural) to separate the service queue from the service desk and\n       not consider the customer that is currently being served at the service desk to be part of the queue.</p>\n     <p>Conceptually, a queue is a linearly ordered collection of objects of a certain type with a First-In-First-Out\n       policy: the next object to be removed is the first object, at the front of the queue, while additional\n       objects are added at the end of the queue.</p>\n     <p>Potentially relevant types of events are:</p>\n     <ol>\n       <li>customer arrivals,</li>\n       <li>customers queuing up,</li>\n       <li>customers being notified/invited to move forward to the service desk,</li>\n       <li>service start,</li>\n       <li>service end,</li>\n       <li>customer departures.</li>\n     </ol>\n     <p>Notice that a pair of start and end events, like \"service start\" and \"service end\", indicates that there is\n      an activity that is temporally framed by these two events. It's an option to consider also activities, in addition\n      to objects and events, in a conceptual model. We will do this in our <a href=\"https://sim4edu.com/sims/3/description.html\" target=\"_blank\" rel=\"noopener\">\n      3rd simulation model</a> of the service desk system.</p>\n     <p>Both object types and event types, together with their participation associations, can be visually described in\n       a UML class diagram, as shown below.</p>\n     <figure>\n       <img src=\"media/img/CIM.svg\" width=\"600\" alt=\"cim\">\n       <figcaption>A conceptual information model describing object types and event types.</figcaption>\n     </figure>\n   </section>\n\n   <section>\n     <h3>Conceptual Process Model <sup class=\"expl-req\">?</sup></h3>\n     <div id=\"expl-CPM\" class=\"expl\"></div>\n     <table>\n       <caption>Event rules.</caption>\n       <thead>\n       <tr>\n         <th>ON (event type)</th><th>DO (event routine)</th><th>Rule Diagram</th>\n       </tr>\n       </thead>\n       <tbody>\n       <tr>\n         <td>customer arrival</td>\n         <td>If the service desk is busy, then the new customer queues up,\n           else the service starts.</td>\n         <td><img src=\"media/img/Arrival_CRM.svg\" width=\"250\" alt=\"arrival crm\"></td>\n       </tr>\n       <tr>\n         <td>service start</td>\n         <td>After some time, the service ends.</td>\n         <td><img src=\"media/img/ServiceStart_CRM.svg\" width=\"250\" alt=\"service start crm\"></td>\n       </tr>\n       <tr>\n         <td>service end</td>\n         <td>The served customer departs. If there are still customers waiting in the queue,\n           then the next service starts.</td>\n         <td><img src=\"media/img/ServiceEnd_CRM.svg\" width=\"250\" alt=\"service end crm\"></td>\n       </tr>\n       </tbody>\n     </table>\n     <p>The involved types of events can be related with each other via their (possibly conditional) temporal succession,\n      as visualized in the following BPMN process diagram:</p>\n     <figure>\n       <img src=\"media/img/CPM.svg\" width=\"600\" alt=\"cpm\">\n       <figcaption>A conceptual process diagram integrating the event rule diagrams.</figcaption>\n     </figure>\n   </section>\n </section>\n\n <section class=\"mbd collapsed\"><h2><span>►</span>Simulation Design Model <sup class=\"expl-req\">?</sup></h2>\n   <div id=\"expl-DM\" class=\"expl\"></div>\n\n   <section><h3>Information Design Model <sup class=\"expl-req\">?</sup></h3>\n     <div id=\"expl-IDM\" class=\"expl\"></div>\n     <p>In the current simulation project, the purpose of the simulation model is to compute two statistics:\n       the <em>service utilization</em> and <em>the maximum queue length</em>. We may therefore abstract away from many\n       of the object types from the conceptual information model:</p>\n     <ul>\n       <li> <code>Customer</code>: we don't need any information about individual customers;</li>\n       <li> <code>ServiceQueue</code>: we don't need to know who is next, it's sufficient to know <em>the length of the queue</em>;</li>\n       <li> <code>ServiceDesk</code>: we don't need any information about the service desks, the information if\n         <em>the service desk is busy</em> or not is obtained by testing if the queue's length is greater than 0.</li>\n       <li> <code>ServiceClerk</code>: we don't need any information about service clerks.</li>\n     </ul>\n     <p>Consequently, a computational design for the purpose of computing the two statistics <em>maximum queue length</em>\n       and <em>service utilization</em> is obtained by modeling only one object type: <b><code>ServiceDesk</code></b> with\n       one (integer-valued) attribute <code>queueLength</code>, and with one random variable <code>serviceDuration()</code>\n       expressed in the form of a special kind of function.</p>\n     <p>Concerning the event types described in the conceptual information model, the goal is to keep\n       only those of them, which are really needed, in the design model. This question is closely related\n       to the question, which types of state changes and follow-up event creation have to be modeled for\n       being able to answer the research question(s).</p>\n     <p>In the case of the given two research questions, we need to keep track of changes of the queue length\n       and we need to be able to add up the service durations. For keeping track of queue length changes,\n       we need to consider all types of events that may change the queue length: <em>customer arrivals</em> and\n       <em>customer departures</em>. For being able to add up the service durations, we need to catch <em>service start</em>\n       and <em>service end events</em>.</p>\n     <p>After identifying the relevant event types, we can look for further simplification opportunities\n      by analyzing their possible temporal coincidence. Clearly, we can consider customer departures\n      to occur immediately after the corresponding service end events, without having any effects that\n      could not be merged. Therefore, we can drop service end events, and take care of their effects\n      (the cumulative service time computation) when handling the related customer departure event.</p>\n     <p>In addition, we can drop service start events, since they temporally coincide with customer\n      arrivals when the queue is empty, or otherwise (when the queue is not empty) they coincide\n      with service end (and, hence, with customer departure) events, because each service end event\n      causes a new service start event as long as the queue is not empty.</p>\n     <p>As a result of the above considerations, we get the following two types of events:</p>\n     <ul>\n       <li><b><code>CustomerArrival</code></b> with a reference property <code>serviceDesk</code> with range\n         <code>ServiceDesk</code>. As an exogenous event type, <code>CustomerArrival</code> has a\n         <code>recurrence</code> function representing a random variable for computing the time in-between\n         two subsequent event occurrences.</li>\n       <li><b><code>CustomerDeparture</code></b> with a reference property <code>serviceDesk</code> with range\n         <code>ServiceDesk</code>.</li>\n     </ul>\n     <p>Notice that, for simplicity, we consider the customer that is currently being served to be part of the queue.\n      In this way, in the simulation program, we can check if the service desk is busy by testing if the length of\n      the queue is greater than 0.</p>\n     <p>An alternative approach would be not considering the currently served customer as\n       part of the queue, but rather use a Boolean attribute <code>isBusy</code> for being able to keep track if the\n       service desk ist still busy with serving a customer.</p>\n     <p>The object types and event types described above, together with their participation associations\n       (\"service desks participate in customer arrival events and in customer departure events\"),\n       are visually described in the following UML class diagram:</p>\n     <figure>\n       <img src=\"media/img/IDM.svg\" width=\"500\" alt=\"idm\">\n       <figcaption>An information design model describing object types and event types.</figcaption>\n     </figure>\n     <p>Notice how functions representing random variables, like <code>serviceDuration()</code> and <code>recurrence()</code>,\n       are marked with the keyword (or UML stereotype) «rv» standing for \"random variable\".</p>\n   </section>\n   <section><h3>Process Design Model <sup class=\"expl-req\">?</sup></h3>\n     <div id=\"expl-PDM\" class=\"expl\"></div>\n     <table>\n       <caption>Event rule design table.</caption>\n       <thead>\n       <tr>\n         <td>ON (event type)</td><td>DO (event routine)</td>\n       </tr>\n       </thead>\n       <tbody>\n       <tr>\n         <td>CustomerArrival( sd) @ t</td>\n         <td style=\"font-size:smaller\">\n           INCREMENT sd.queueLength<br>\n           IF sd.queueLength = 1<br>\n           THEN SCHEDULE CustomerDeparture( sd) @ (t + sd.serviceDuration())\n         </td>\n       </tr>\n       <tr>\n         <td>CustomerDeparture( sd) @ t</td>\n         <td style=\"font-size:smaller\">\n           DECREMENT sd.queueLength<br>\n           IF sd.queueLength > 0<br>\n           THEN SCHEDULE CustomerDeparture( sd) @ (t + sd.serviceDuration())\n         </td>\n       </tr>\n       </tbody>\n     </table>\n     <table>\n       <caption>From conceptual event rule models to rule design models.</caption>\n       <thead>\n        <tr><th>Conceptual rule models</th><th>Rule design models</th></tr>\n       </thead>\n       <tbody>\n        <tr>\n         <td><img src=\"media/img/Arrival_CRM.svg\" width=\"250\" alt=\"arrival crm\"></td>\n         <td><img src=\"media/img/Arrival_RDM.svg\" width=\"450\" alt=\"arrival rdm\"></td>\n        </tr>\n        <tr>\n         <td><img src=\"media/img/ServiceStart_CRM.svg\" width=\"250\"></td>\n          <td rowspan=\"2\"><img src=\"media/img/Departure_RDM.svg\" width=\"450\" alt=\"departure rdm\"></td>\n        </tr>\n        <tr>\n         <td><img src=\"media/img/ServiceEnd_CRM.svg\" width=\"250\" alt=\"service end crm\"></td>\n        </tr>\n       </tbody>\n     </table>\n     <figure>\n       <img src=\"media/img/PDM.svg\" width=\"700\" alt=\"pdm\">\n       <figcaption>A process design model integrating both event rule design models.</figcaption>\n     </figure>\n   </section>\n </section>\n\n <section class=\"mbd collapsed\"><h2><span>►</span>See also</h2>\n  <section><h3>Other OES Models for the Same System/Problem/Domain</h3>\n   <ol>\n     <!--\n     <li><a href=\"../1/index.html\">ServiceDesk-1</a>: A service queue model\n       (one service and one queue) with two statistics: <i>maximum queue length</i> and <i>service utilization</i>.\n       The model abstracts away from individual customers and from the composition of the queue.</li>\n     -->\n     <li><a href=\"../2/index.html\">ServiceDesk-2</a>: A service queue model\n       (one service and one queue) with one statistic: the Mean Response Time, which is the average length of time\n       a customer spends in the system from arrival to departure. For recording their arrival time, individual\n       customers are represented explicitly in a <i>waitingCustomers</i> queue.</li>\n     <li><a href=\"../3/index.html\">ServiceDesk-3</a>: A service queue model where the service\n       is modeled as an activity with the service desk as its resource, for which the utilization statistics\n       is computed automatically.</li>\n     <li><a href=\"../12/index.html\">ServiceDesk-4</a>: A service queue model where the\n       service desk is modeled as a processing node of a processing network that has an entry node and\n       an exit node for arriving and departing customers. The model is based on the pre-defined\n       <i>Processing Network</i> concepts: WorkObject, Arrival, EntryNode, ProcessingNode and ExitNode,\n       such that processing objects 'flow through the system'.</li>\n     <li><a href=\"../9/index.html\">ConsecutiveServices</a>: An activity-based\n       service queue model of two consecutive service providers with customer waiting lines.</li>\n     <li><a href=\"../11/index.html\">ProcessingNetwork-1</a>: A service queue model\n       where service providers are modeled as processing nodes (with input queues) within a processing network\n       that has an entry node and an exit node for arriving and departing customers. The model is based on\n       the pre-defined <i>Processing Network</i> concepts: WorkObject, Arrival, EntryNode, ProcessingNode and ExitNode,\n       such that processing objects 'flow through the system'.</li>\n   </ol>\n  </section>\n  <section><h2>Similar Models Implemented with Other Frameworks</h2>\n   <ol>\n     <li><a href=\"http://ccl.northwestern.edu/netlogo/models/community/Queueing_Simulation_Discrete_Event\" target=\"_blank\" rel=\"noopener\">Queueing_Simulation_Discrete_Event</a>: This NetLogo simulation uses NetLogo's tick-advance primitive to advance simulation time by non-integral amounts. However, NetLogo's standard ticks display is unable to display non-integral values, so a custom ticks display has to be programmed. Copyright 2010, Nick Bennett.</li>\n   </ol>\n  </section>\n </section>\n","site":{"data":{}},"excerpt":"","more":"  <section class=\"mbd collapsed\"><h2><span>►</span>Conceptual Model <sup class=\"expl-req\">?</sup></h2>\n   <div id=\"expl-CM\" class=\"expl\"></div>\n\n   <section><h3>Conceptual Information Model <sup class=\"expl-req\">?</sup></h3>\n     <div id=\"expl-CIM\" class=\"expl\"></div>\n     <p>The potentially relevant object types are:</p>\n<!--\n     <figure class=\"right-float\">\n       <img src=\"CIM-ObjT.svg\" width=\"450\"/>\n       <figcaption>A conceptual model describing object types.</figcaption>\n     </figure>\n-->\n     <ol>\n       <li>customers,</li>\n       <li>service desks,</li>\n       <li>service queues,</li>\n       <li>service clerks.</li>\n     </ol>\n     <p>Notice that it seems preferable (more natural) to separate the service queue from the service desk and\n       not consider the customer that is currently being served at the service desk to be part of the queue.</p>\n     <p>Conceptually, a queue is a linearly ordered collection of objects of a certain type with a First-In-First-Out\n       policy: the next object to be removed is the first object, at the front of the queue, while additional\n       objects are added at the end of the queue.</p>\n     <p>Potentially relevant types of events are:</p>\n     <ol>\n       <li>customer arrivals,</li>\n       <li>customers queuing up,</li>\n       <li>customers being notified/invited to move forward to the service desk,</li>\n       <li>service start,</li>\n       <li>service end,</li>\n       <li>customer departures.</li>\n     </ol>\n     <p>Notice that a pair of start and end events, like \"service start\" and \"service end\", indicates that there is\n      an activity that is temporally framed by these two events. It's an option to consider also activities, in addition\n      to objects and events, in a conceptual model. We will do this in our <a href=\"https://sim4edu.com/sims/3/description.html\" target=\"_blank\" rel=\"noopener\">\n      3rd simulation model</a> of the service desk system.</p>\n     <p>Both object types and event types, together with their participation associations, can be visually described in\n       a UML class diagram, as shown below.</p>\n     <figure>\n       <img src=\"media/img/CIM.svg\" width=\"600\" alt=\"cim\">\n       <figcaption>A conceptual information model describing object types and event types.</figcaption>\n     </figure>\n   </section>\n\n   <section>\n     <h3>Conceptual Process Model <sup class=\"expl-req\">?</sup></h3>\n     <div id=\"expl-CPM\" class=\"expl\"></div>\n     <table>\n       <caption>Event rules.</caption>\n       <thead>\n       <tr>\n         <th>ON (event type)</th><th>DO (event routine)</th><th>Rule Diagram</th>\n       </tr>\n       </thead>\n       <tbody>\n       <tr>\n         <td>customer arrival</td>\n         <td>If the service desk is busy, then the new customer queues up,\n           else the service starts.</td>\n         <td><img src=\"media/img/Arrival_CRM.svg\" width=\"250\" alt=\"arrival crm\"></td>\n       </tr>\n       <tr>\n         <td>service start</td>\n         <td>After some time, the service ends.</td>\n         <td><img src=\"media/img/ServiceStart_CRM.svg\" width=\"250\" alt=\"service start crm\"></td>\n       </tr>\n       <tr>\n         <td>service end</td>\n         <td>The served customer departs. If there are still customers waiting in the queue,\n           then the next service starts.</td>\n         <td><img src=\"media/img/ServiceEnd_CRM.svg\" width=\"250\" alt=\"service end crm\"></td>\n       </tr>\n       </tbody>\n     </table>\n     <p>The involved types of events can be related with each other via their (possibly conditional) temporal succession,\n      as visualized in the following BPMN process diagram:</p>\n     <figure>\n       <img src=\"media/img/CPM.svg\" width=\"600\" alt=\"cpm\">\n       <figcaption>A conceptual process diagram integrating the event rule diagrams.</figcaption>\n     </figure>\n   </section>\n </section>\n\n <section class=\"mbd collapsed\"><h2><span>►</span>Simulation Design Model <sup class=\"expl-req\">?</sup></h2>\n   <div id=\"expl-DM\" class=\"expl\"></div>\n\n   <section><h3>Information Design Model <sup class=\"expl-req\">?</sup></h3>\n     <div id=\"expl-IDM\" class=\"expl\"></div>\n     <p>In the current simulation project, the purpose of the simulation model is to compute two statistics:\n       the <em>service utilization</em> and <em>the maximum queue length</em>. We may therefore abstract away from many\n       of the object types from the conceptual information model:</p>\n     <ul>\n       <li> <code>Customer</code>: we don't need any information about individual customers;</li>\n       <li> <code>ServiceQueue</code>: we don't need to know who is next, it's sufficient to know <em>the length of the queue</em>;</li>\n       <li> <code>ServiceDesk</code>: we don't need any information about the service desks, the information if\n         <em>the service desk is busy</em> or not is obtained by testing if the queue's length is greater than 0.</li>\n       <li> <code>ServiceClerk</code>: we don't need any information about service clerks.</li>\n     </ul>\n     <p>Consequently, a computational design for the purpose of computing the two statistics <em>maximum queue length</em>\n       and <em>service utilization</em> is obtained by modeling only one object type: <b><code>ServiceDesk</code></b> with\n       one (integer-valued) attribute <code>queueLength</code>, and with one random variable <code>serviceDuration()</code>\n       expressed in the form of a special kind of function.</p>\n     <p>Concerning the event types described in the conceptual information model, the goal is to keep\n       only those of them, which are really needed, in the design model. This question is closely related\n       to the question, which types of state changes and follow-up event creation have to be modeled for\n       being able to answer the research question(s).</p>\n     <p>In the case of the given two research questions, we need to keep track of changes of the queue length\n       and we need to be able to add up the service durations. For keeping track of queue length changes,\n       we need to consider all types of events that may change the queue length: <em>customer arrivals</em> and\n       <em>customer departures</em>. For being able to add up the service durations, we need to catch <em>service start</em>\n       and <em>service end events</em>.</p>\n     <p>After identifying the relevant event types, we can look for further simplification opportunities\n      by analyzing their possible temporal coincidence. Clearly, we can consider customer departures\n      to occur immediately after the corresponding service end events, without having any effects that\n      could not be merged. Therefore, we can drop service end events, and take care of their effects\n      (the cumulative service time computation) when handling the related customer departure event.</p>\n     <p>In addition, we can drop service start events, since they temporally coincide with customer\n      arrivals when the queue is empty, or otherwise (when the queue is not empty) they coincide\n      with service end (and, hence, with customer departure) events, because each service end event\n      causes a new service start event as long as the queue is not empty.</p>\n     <p>As a result of the above considerations, we get the following two types of events:</p>\n     <ul>\n       <li><b><code>CustomerArrival</code></b> with a reference property <code>serviceDesk</code> with range\n         <code>ServiceDesk</code>. As an exogenous event type, <code>CustomerArrival</code> has a\n         <code>recurrence</code> function representing a random variable for computing the time in-between\n         two subsequent event occurrences.</li>\n       <li><b><code>CustomerDeparture</code></b> with a reference property <code>serviceDesk</code> with range\n         <code>ServiceDesk</code>.</li>\n     </ul>\n     <p>Notice that, for simplicity, we consider the customer that is currently being served to be part of the queue.\n      In this way, in the simulation program, we can check if the service desk is busy by testing if the length of\n      the queue is greater than 0.</p>\n     <p>An alternative approach would be not considering the currently served customer as\n       part of the queue, but rather use a Boolean attribute <code>isBusy</code> for being able to keep track if the\n       service desk ist still busy with serving a customer.</p>\n     <p>The object types and event types described above, together with their participation associations\n       (\"service desks participate in customer arrival events and in customer departure events\"),\n       are visually described in the following UML class diagram:</p>\n     <figure>\n       <img src=\"media/img/IDM.svg\" width=\"500\" alt=\"idm\">\n       <figcaption>An information design model describing object types and event types.</figcaption>\n     </figure>\n     <p>Notice how functions representing random variables, like <code>serviceDuration()</code> and <code>recurrence()</code>,\n       are marked with the keyword (or UML stereotype) «rv» standing for \"random variable\".</p>\n   </section>\n   <section><h3>Process Design Model <sup class=\"expl-req\">?</sup></h3>\n     <div id=\"expl-PDM\" class=\"expl\"></div>\n     <table>\n       <caption>Event rule design table.</caption>\n       <thead>\n       <tr>\n         <td>ON (event type)</td><td>DO (event routine)</td>\n       </tr>\n       </thead>\n       <tbody>\n       <tr>\n         <td>CustomerArrival( sd) @ t</td>\n         <td style=\"font-size:smaller\">\n           INCREMENT sd.queueLength<br>\n           IF sd.queueLength = 1<br>\n           THEN SCHEDULE CustomerDeparture( sd) @ (t + sd.serviceDuration())\n         </td>\n       </tr>\n       <tr>\n         <td>CustomerDeparture( sd) @ t</td>\n         <td style=\"font-size:smaller\">\n           DECREMENT sd.queueLength<br>\n           IF sd.queueLength > 0<br>\n           THEN SCHEDULE CustomerDeparture( sd) @ (t + sd.serviceDuration())\n         </td>\n       </tr>\n       </tbody>\n     </table>\n     <table>\n       <caption>From conceptual event rule models to rule design models.</caption>\n       <thead>\n        <tr><th>Conceptual rule models</th><th>Rule design models</th></tr>\n       </thead>\n       <tbody>\n        <tr>\n         <td><img src=\"media/img/Arrival_CRM.svg\" width=\"250\" alt=\"arrival crm\"></td>\n         <td><img src=\"media/img/Arrival_RDM.svg\" width=\"450\" alt=\"arrival rdm\"></td>\n        </tr>\n        <tr>\n         <td><img src=\"media/img/ServiceStart_CRM.svg\" width=\"250\"></td>\n          <td rowspan=\"2\"><img src=\"media/img/Departure_RDM.svg\" width=\"450\" alt=\"departure rdm\"></td>\n        </tr>\n        <tr>\n         <td><img src=\"media/img/ServiceEnd_CRM.svg\" width=\"250\" alt=\"service end crm\"></td>\n        </tr>\n       </tbody>\n     </table>\n     <figure>\n       <img src=\"media/img/PDM.svg\" width=\"700\" alt=\"pdm\">\n       <figcaption>A process design model integrating both event rule design models.</figcaption>\n     </figure>\n   </section>\n </section>\n\n <section class=\"mbd collapsed\"><h2><span>►</span>See also</h2>\n  <section><h3>Other OES Models for the Same System/Problem/Domain</h3>\n   <ol>\n     <!--\n     <li><a href=\"../1/index.html\">ServiceDesk-1</a>: A service queue model\n       (one service and one queue) with two statistics: <i>maximum queue length</i> and <i>service utilization</i>.\n       The model abstracts away from individual customers and from the composition of the queue.</li>\n     -->\n     <li><a href=\"../2/index.html\">ServiceDesk-2</a>: A service queue model\n       (one service and one queue) with one statistic: the Mean Response Time, which is the average length of time\n       a customer spends in the system from arrival to departure. For recording their arrival time, individual\n       customers are represented explicitly in a <i>waitingCustomers</i> queue.</li>\n     <li><a href=\"../3/index.html\">ServiceDesk-3</a>: A service queue model where the service\n       is modeled as an activity with the service desk as its resource, for which the utilization statistics\n       is computed automatically.</li>\n     <li><a href=\"../12/index.html\">ServiceDesk-4</a>: A service queue model where the\n       service desk is modeled as a processing node of a processing network that has an entry node and\n       an exit node for arriving and departing customers. The model is based on the pre-defined\n       <i>Processing Network</i> concepts: WorkObject, Arrival, EntryNode, ProcessingNode and ExitNode,\n       such that processing objects 'flow through the system'.</li>\n     <li><a href=\"../9/index.html\">ConsecutiveServices</a>: An activity-based\n       service queue model of two consecutive service providers with customer waiting lines.</li>\n     <li><a href=\"../11/index.html\">ProcessingNetwork-1</a>: A service queue model\n       where service providers are modeled as processing nodes (with input queues) within a processing network\n       that has an entry node and an exit node for arriving and departing customers. The model is based on\n       the pre-defined <i>Processing Network</i> concepts: WorkObject, Arrival, EntryNode, ProcessingNode and ExitNode,\n       such that processing objects 'flow through the system'.</li>\n   </ol>\n  </section>\n  <section><h2>Similar Models Implemented with Other Frameworks</h2>\n   <ol>\n     <li><a href=\"http://ccl.northwestern.edu/netlogo/models/community/Queueing_Simulation_Discrete_Event\" target=\"_blank\" rel=\"noopener\">Queueing_Simulation_Discrete_Event</a>: This NetLogo simulation uses NetLogo's tick-advance primitive to advance simulation time by non-integral amounts. However, NetLogo's standard ticks display is unable to display non-integral values, so a custom ticks display has to be programmed. Copyright 2010, Nick Bennett.</li>\n   </ol>\n  </section>\n </section>\n"},{"_content":" /*******************************************************************************\n * The CustomerArrival event class\n *\n * @copyright Copyright 2015-2016 Gerd Wagner\n *   Chair of Internet Technology, Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Gerd Wagner\n ******************************************************************************/\nvar CustomerArrival = new cLASS({\n  Name: \"CustomerArrival\",\n  label: \"Customer arrivals\",\n  shortLabel: \"Arr\",  // for the log\n  supertypeName: \"eVENT\",\n  properties: {\n    \"serviceDesk\": {range: \"ServiceDesk\", label:\"Service desk\"}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var srvTm=0, changes = [], events = [];\n      //changes.push({object: this.serviceDesk, property: \"queueLength\", increment: 1});\n      this.serviceDesk.queueLength++;\n      sim.stat.arrivedCustomers++;\n      // if the service desk is not busy\n      if (this.serviceDesk.queueLength === 1) {\n        //changes.push({object: this.serviceDesk, property: \"isBusy\", value: true});\n        srvTm = ServiceDesk.serviceDuration();\n        events.push( new CustomerDeparture({\n          occTime: this.occTime + srvTm,\n          serviceTime: srvTm,\n          serviceDesk: this.serviceDesk\n        }));\n      }\n      //return [events, changes];\n      return events;\n    }\n  }\n});\n// Any exogenous event type needs to define a static function \"recurrence\"\nCustomerArrival.recurrence = function () {\n  return rand.uniformInt( 1, 6);\n};","source":"sims/1/CustomerArrival.js","raw":" /*******************************************************************************\n * The CustomerArrival event class\n *\n * @copyright Copyright 2015-2016 Gerd Wagner\n *   Chair of Internet Technology, Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Gerd Wagner\n ******************************************************************************/\nvar CustomerArrival = new cLASS({\n  Name: \"CustomerArrival\",\n  label: \"Customer arrivals\",\n  shortLabel: \"Arr\",  // for the log\n  supertypeName: \"eVENT\",\n  properties: {\n    \"serviceDesk\": {range: \"ServiceDesk\", label:\"Service desk\"}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var srvTm=0, changes = [], events = [];\n      //changes.push({object: this.serviceDesk, property: \"queueLength\", increment: 1});\n      this.serviceDesk.queueLength++;\n      sim.stat.arrivedCustomers++;\n      // if the service desk is not busy\n      if (this.serviceDesk.queueLength === 1) {\n        //changes.push({object: this.serviceDesk, property: \"isBusy\", value: true});\n        srvTm = ServiceDesk.serviceDuration();\n        events.push( new CustomerDeparture({\n          occTime: this.occTime + srvTm,\n          serviceTime: srvTm,\n          serviceDesk: this.serviceDesk\n        }));\n      }\n      //return [events, changes];\n      return events;\n    }\n  }\n});\n// Any exogenous event type needs to define a static function \"recurrence\"\nCustomerArrival.recurrence = function () {\n  return rand.uniformInt( 1, 6);\n};","date":"2019-07-04T16:07:08.498Z","updated":"2019-04-09T19:07:58.779Z","path":"sims/1/CustomerArrival.js","layout":"false","title":"","comments":1,"_id":"cjxov56oo00004mrxuonj3e8l","content":" /*******************************************************************************\n * The CustomerArrival event class\n *\n * @copyright Copyright 2015-2016 Gerd Wagner\n *   Chair of Internet Technology, Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Gerd Wagner\n ******************************************************************************/\nvar CustomerArrival = new cLASS({\n  Name: \"CustomerArrival\",\n  label: \"Customer arrivals\",\n  shortLabel: \"Arr\",  // for the log\n  supertypeName: \"eVENT\",\n  properties: {\n    \"serviceDesk\": {range: \"ServiceDesk\", label:\"Service desk\"}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var srvTm=0, changes = [], events = [];\n      //changes.push({object: this.serviceDesk, property: \"queueLength\", increment: 1});\n      this.serviceDesk.queueLength++;\n      sim.stat.arrivedCustomers++;\n      // if the service desk is not busy\n      if (this.serviceDesk.queueLength === 1) {\n        //changes.push({object: this.serviceDesk, property: \"isBusy\", value: true});\n        srvTm = ServiceDesk.serviceDuration();\n        events.push( new CustomerDeparture({\n          occTime: this.occTime + srvTm,\n          serviceTime: srvTm,\n          serviceDesk: this.serviceDesk\n        }));\n      }\n      //return [events, changes];\n      return events;\n    }\n  }\n});\n// Any exogenous event type needs to define a static function \"recurrence\"\nCustomerArrival.recurrence = function () {\n  return rand.uniformInt( 1, 6);\n};","site":{"data":{}},"excerpt":"","more":" /*******************************************************************************\n * The CustomerArrival event class\n *\n * @copyright Copyright 2015-2016 Gerd Wagner\n *   Chair of Internet Technology, Brandenburg University of Technology, Germany.\n * @license The MIT License (MIT)\n * @author Gerd Wagner\n ******************************************************************************/\nvar CustomerArrival = new cLASS({\n  Name: \"CustomerArrival\",\n  label: \"Customer arrivals\",\n  shortLabel: \"Arr\",  // for the log\n  supertypeName: \"eVENT\",\n  properties: {\n    \"serviceDesk\": {range: \"ServiceDesk\", label:\"Service desk\"}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var srvTm=0, changes = [], events = [];\n      //changes.push({object: this.serviceDesk, property: \"queueLength\", increment: 1});\n      this.serviceDesk.queueLength++;\n      sim.stat.arrivedCustomers++;\n      // if the service desk is not busy\n      if (this.serviceDesk.queueLength === 1) {\n        //changes.push({object: this.serviceDesk, property: \"isBusy\", value: true});\n        srvTm = ServiceDesk.serviceDuration();\n        events.push( new CustomerDeparture({\n          occTime: this.occTime + srvTm,\n          serviceTime: srvTm,\n          serviceDesk: this.serviceDesk\n        }));\n      }\n      //return [events, changes];\n      return events;\n    }\n  }\n});\n// Any exogenous event type needs to define a static function \"recurrence\"\nCustomerArrival.recurrence = function () {\n  return rand.uniformInt( 1, 6);\n};"},{"_content":"var CustomerDeparture = new cLASS({\n  Name: \"CustomerDeparture\",\n  label: \"Customer departures\",\n  shortLabel: \"Dep\",  // for the log\n  supertypeName: \"eVENT\",\n  properties: {\n    \"serviceDesk\": {range: \"ServiceDesk\", label:\"Service desk\"},\n    \"serviceTime\": {range: \"NonNegativeInteger\"}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var changes = [], events = [], srvTm=0;\n      // remove customer from queue\n      this.serviceDesk.queueLength--;\n      // if there are still customers waiting\n      if (this.serviceDesk.queueLength > 0) {\n        // start next service and schedule its end/departure\n        //changes.push({object: this.serviceDesk, property: \"queueLength\", decrement: 1});\n        srvTm = ServiceDesk.serviceDuration();\n        events.push( new CustomerDeparture({\n          occTime: this.occTime + srvTm,\n          serviceTime: srvTm,\n          serviceDesk: this.serviceDesk\n        }));\n      }\n      // update statistics\n      sim.stat.departedCustomers++;\n      sim.stat.totalServiceTime += this.serviceTime;\n\n      return events;  // return [events, changes]\n    }\n  }\n});\n","source":"sims/1/CustomerDeparture.js","raw":"var CustomerDeparture = new cLASS({\n  Name: \"CustomerDeparture\",\n  label: \"Customer departures\",\n  shortLabel: \"Dep\",  // for the log\n  supertypeName: \"eVENT\",\n  properties: {\n    \"serviceDesk\": {range: \"ServiceDesk\", label:\"Service desk\"},\n    \"serviceTime\": {range: \"NonNegativeInteger\"}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var changes = [], events = [], srvTm=0;\n      // remove customer from queue\n      this.serviceDesk.queueLength--;\n      // if there are still customers waiting\n      if (this.serviceDesk.queueLength > 0) {\n        // start next service and schedule its end/departure\n        //changes.push({object: this.serviceDesk, property: \"queueLength\", decrement: 1});\n        srvTm = ServiceDesk.serviceDuration();\n        events.push( new CustomerDeparture({\n          occTime: this.occTime + srvTm,\n          serviceTime: srvTm,\n          serviceDesk: this.serviceDesk\n        }));\n      }\n      // update statistics\n      sim.stat.departedCustomers++;\n      sim.stat.totalServiceTime += this.serviceTime;\n\n      return events;  // return [events, changes]\n    }\n  }\n});\n","date":"2019-07-04T16:07:08.499Z","updated":"2019-04-09T19:07:58.780Z","path":"sims/1/CustomerDeparture.js","layout":"false","title":"","comments":1,"_id":"cjxov56op00014mrx35gar4v9","content":"var CustomerDeparture = new cLASS({\n  Name: \"CustomerDeparture\",\n  label: \"Customer departures\",\n  shortLabel: \"Dep\",  // for the log\n  supertypeName: \"eVENT\",\n  properties: {\n    \"serviceDesk\": {range: \"ServiceDesk\", label:\"Service desk\"},\n    \"serviceTime\": {range: \"NonNegativeInteger\"}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var changes = [], events = [], srvTm=0;\n      // remove customer from queue\n      this.serviceDesk.queueLength--;\n      // if there are still customers waiting\n      if (this.serviceDesk.queueLength > 0) {\n        // start next service and schedule its end/departure\n        //changes.push({object: this.serviceDesk, property: \"queueLength\", decrement: 1});\n        srvTm = ServiceDesk.serviceDuration();\n        events.push( new CustomerDeparture({\n          occTime: this.occTime + srvTm,\n          serviceTime: srvTm,\n          serviceDesk: this.serviceDesk\n        }));\n      }\n      // update statistics\n      sim.stat.departedCustomers++;\n      sim.stat.totalServiceTime += this.serviceTime;\n\n      return events;  // return [events, changes]\n    }\n  }\n});\n","site":{"data":{}},"excerpt":"","more":"var CustomerDeparture = new cLASS({\n  Name: \"CustomerDeparture\",\n  label: \"Customer departures\",\n  shortLabel: \"Dep\",  // for the log\n  supertypeName: \"eVENT\",\n  properties: {\n    \"serviceDesk\": {range: \"ServiceDesk\", label:\"Service desk\"},\n    \"serviceTime\": {range: \"NonNegativeInteger\"}\n  },\n  methods: {\n    \"onEvent\": function () {\n      var changes = [], events = [], srvTm=0;\n      // remove customer from queue\n      this.serviceDesk.queueLength--;\n      // if there are still customers waiting\n      if (this.serviceDesk.queueLength > 0) {\n        // start next service and schedule its end/departure\n        //changes.push({object: this.serviceDesk, property: \"queueLength\", decrement: 1});\n        srvTm = ServiceDesk.serviceDuration();\n        events.push( new CustomerDeparture({\n          occTime: this.occTime + srvTm,\n          serviceTime: srvTm,\n          serviceDesk: this.serviceDesk\n        }));\n      }\n      // update statistics\n      sim.stat.departedCustomers++;\n      sim.stat.totalServiceTime += this.serviceTime;\n\n      return events;  // return [events, changes]\n    }\n  }\n});\n"},{"_content":"var ServiceDesk = new cLASS({\n  Name: \"ServiceDesk\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"queueLength\": { range: \"NonNegativeInteger\",\n        label: \"Queue length\", shortLabel: \"qLen\"}\n  }\n});\nServiceDesk.serviceDuration = function () {\n  return rand.frequency({\"2\":0.3, \"3\":0.5, \"4\":0.2});\n  /* Or, alternatively,\n  var r = rand.uniformInt( 0, 99);\n  if ( r < 30) return 2;         // probability 0.30\n  else if ( r < 80) return 3;    // probability 0.50\n  else return 4;                 // probability 0.20\n  */\n};","source":"sims/1/ServiceDesk.js","raw":"var ServiceDesk = new cLASS({\n  Name: \"ServiceDesk\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"queueLength\": { range: \"NonNegativeInteger\",\n        label: \"Queue length\", shortLabel: \"qLen\"}\n  }\n});\nServiceDesk.serviceDuration = function () {\n  return rand.frequency({\"2\":0.3, \"3\":0.5, \"4\":0.2});\n  /* Or, alternatively,\n  var r = rand.uniformInt( 0, 99);\n  if ( r < 30) return 2;         // probability 0.30\n  else if ( r < 80) return 3;    // probability 0.50\n  else return 4;                 // probability 0.20\n  */\n};","date":"2019-07-04T16:07:08.501Z","updated":"2019-04-09T19:07:58.780Z","path":"sims/1/ServiceDesk.js","layout":"false","title":"","comments":1,"_id":"cjxov56oq00024mrxtvxw9t55","content":"var ServiceDesk = new cLASS({\n  Name: \"ServiceDesk\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"queueLength\": { range: \"NonNegativeInteger\",\n        label: \"Queue length\", shortLabel: \"qLen\"}\n  }\n});\nServiceDesk.serviceDuration = function () {\n  return rand.frequency({\"2\":0.3, \"3\":0.5, \"4\":0.2});\n  /* Or, alternatively,\n  var r = rand.uniformInt( 0, 99);\n  if ( r < 30) return 2;         // probability 0.30\n  else if ( r < 80) return 3;    // probability 0.50\n  else return 4;                 // probability 0.20\n  */\n};","site":{"data":{}},"excerpt":"","more":"var ServiceDesk = new cLASS({\n  Name: \"ServiceDesk\",\n  supertypeName: \"oBJECT\",\n  properties: {\n    \"queueLength\": { range: \"NonNegativeInteger\",\n        label: \"Queue length\", shortLabel: \"qLen\"}\n  }\n});\nServiceDesk.serviceDuration = function () {\n  return rand.frequency({\"2\":0.3, \"3\":0.5, \"4\":0.2});\n  /* Or, alternatively,\n  var r = rand.uniformInt( 0, 99);\n  if ( r < 30) return 2;         // probability 0.30\n  else if ( r < 80) return 3;    // probability 0.50\n  else return 4;                 // probability 0.20\n  */\n};"},{"_content":"var sim = sim || {};\nsim.model = sim.model || {};\nsim.scenario = sim.scenario || {};\nsim.config = sim.config || {};\n\nvar oes = oes || {};\noes.ui = oes.ui || {};\noes.ui.explanation = {};\noes.ui.i18n = {transDates:{}, changeDates:{}};\n\n/*******************************************************\n Simulation Model\n********************************************************/\nsim.model.name = \"ServiceDesk-1\";\nsim.model.title = \"A Service Queue Model with Utilization and Maximum Queue Length Statistics\";\noes.ui.i18n.changeDates.title = \"2017-04-19\";\nsim.model.systemNarrative = \"The customers arriving at a service desk have to wait in a queue \" +\n    \"when the service desk is busy. Otherwise, when the queue is empty and the service desk is not busy, \" +\n    \"they are immediately served by the service clerk. Whenever a service is completed, the served \" +\n    \"customer departs and the next customer from the queue, if there is any, will be served.\";\noes.ui.i18n.changeDates.systemNarrative = \"2017-04-19\";\nsim.model.shortDescription = \"A service queue model (one service and one queue) with two statistics: \" +\n    \"maximum queue length and service utilization. For simplicity, the model uses abstract (discrete) \"+\n    \"time and abstracts away from individual customers and from the composition of the queue, \" +\n    \"which is only represented in terms of its length. The model includes one object type: \" +\n    \"<i>ServiceDesk</i>, and two event types: <i>CustomerArrival</i> and <i>CustomerDeparture</i>. The random \"+\n    \"time variable for the recurrence of customer arrival events has a discrete uniform distribution and \" +\n    \"the random time variable for modeling the duration of services has a discrete empirical distribution.\";\noes.ui.i18n.changeDates.shortDescription = \"2019-04-01\";\nsim.model.license = \"CC BY-NC\";\nsim.model.creator = \"Gerd Wagner\";\nsim.model.created = \"2016-06-01\";\nsim.model.modified = \"2017-04-19\";\n","source":"sims/1/metadata.js","raw":"var sim = sim || {};\nsim.model = sim.model || {};\nsim.scenario = sim.scenario || {};\nsim.config = sim.config || {};\n\nvar oes = oes || {};\noes.ui = oes.ui || {};\noes.ui.explanation = {};\noes.ui.i18n = {transDates:{}, changeDates:{}};\n\n/*******************************************************\n Simulation Model\n********************************************************/\nsim.model.name = \"ServiceDesk-1\";\nsim.model.title = \"A Service Queue Model with Utilization and Maximum Queue Length Statistics\";\noes.ui.i18n.changeDates.title = \"2017-04-19\";\nsim.model.systemNarrative = \"The customers arriving at a service desk have to wait in a queue \" +\n    \"when the service desk is busy. Otherwise, when the queue is empty and the service desk is not busy, \" +\n    \"they are immediately served by the service clerk. Whenever a service is completed, the served \" +\n    \"customer departs and the next customer from the queue, if there is any, will be served.\";\noes.ui.i18n.changeDates.systemNarrative = \"2017-04-19\";\nsim.model.shortDescription = \"A service queue model (one service and one queue) with two statistics: \" +\n    \"maximum queue length and service utilization. For simplicity, the model uses abstract (discrete) \"+\n    \"time and abstracts away from individual customers and from the composition of the queue, \" +\n    \"which is only represented in terms of its length. The model includes one object type: \" +\n    \"<i>ServiceDesk</i>, and two event types: <i>CustomerArrival</i> and <i>CustomerDeparture</i>. The random \"+\n    \"time variable for the recurrence of customer arrival events has a discrete uniform distribution and \" +\n    \"the random time variable for modeling the duration of services has a discrete empirical distribution.\";\noes.ui.i18n.changeDates.shortDescription = \"2019-04-01\";\nsim.model.license = \"CC BY-NC\";\nsim.model.creator = \"Gerd Wagner\";\nsim.model.created = \"2016-06-01\";\nsim.model.modified = \"2017-04-19\";\n","date":"2019-07-04T16:07:08.500Z","updated":"2019-04-09T19:07:58.781Z","path":"sims/1/metadata.js","layout":"false","title":"","comments":1,"_id":"cjxov56or00034mrx91j5ywjy","content":"var sim = sim || {};\nsim.model = sim.model || {};\nsim.scenario = sim.scenario || {};\nsim.config = sim.config || {};\n\nvar oes = oes || {};\noes.ui = oes.ui || {};\noes.ui.explanation = {};\noes.ui.i18n = {transDates:{}, changeDates:{}};\n\n/*******************************************************\n Simulation Model\n********************************************************/\nsim.model.name = \"ServiceDesk-1\";\nsim.model.title = \"A Service Queue Model with Utilization and Maximum Queue Length Statistics\";\noes.ui.i18n.changeDates.title = \"2017-04-19\";\nsim.model.systemNarrative = \"The customers arriving at a service desk have to wait in a queue \" +\n    \"when the service desk is busy. Otherwise, when the queue is empty and the service desk is not busy, \" +\n    \"they are immediately served by the service clerk. Whenever a service is completed, the served \" +\n    \"customer departs and the next customer from the queue, if there is any, will be served.\";\noes.ui.i18n.changeDates.systemNarrative = \"2017-04-19\";\nsim.model.shortDescription = \"A service queue model (one service and one queue) with two statistics: \" +\n    \"maximum queue length and service utilization. For simplicity, the model uses abstract (discrete) \"+\n    \"time and abstracts away from individual customers and from the composition of the queue, \" +\n    \"which is only represented in terms of its length. The model includes one object type: \" +\n    \"<i>ServiceDesk</i>, and two event types: <i>CustomerArrival</i> and <i>CustomerDeparture</i>. The random \"+\n    \"time variable for the recurrence of customer arrival events has a discrete uniform distribution and \" +\n    \"the random time variable for modeling the duration of services has a discrete empirical distribution.\";\noes.ui.i18n.changeDates.shortDescription = \"2019-04-01\";\nsim.model.license = \"CC BY-NC\";\nsim.model.creator = \"Gerd Wagner\";\nsim.model.created = \"2016-06-01\";\nsim.model.modified = \"2017-04-19\";\n","site":{"data":{}},"excerpt":"","more":"var sim = sim || {};\nsim.model = sim.model || {};\nsim.scenario = sim.scenario || {};\nsim.config = sim.config || {};\n\nvar oes = oes || {};\noes.ui = oes.ui || {};\noes.ui.explanation = {};\noes.ui.i18n = {transDates:{}, changeDates:{}};\n\n/*******************************************************\n Simulation Model\n********************************************************/\nsim.model.name = \"ServiceDesk-1\";\nsim.model.title = \"A Service Queue Model with Utilization and Maximum Queue Length Statistics\";\noes.ui.i18n.changeDates.title = \"2017-04-19\";\nsim.model.systemNarrative = \"The customers arriving at a service desk have to wait in a queue \" +\n    \"when the service desk is busy. Otherwise, when the queue is empty and the service desk is not busy, \" +\n    \"they are immediately served by the service clerk. Whenever a service is completed, the served \" +\n    \"customer departs and the next customer from the queue, if there is any, will be served.\";\noes.ui.i18n.changeDates.systemNarrative = \"2017-04-19\";\nsim.model.shortDescription = \"A service queue model (one service and one queue) with two statistics: \" +\n    \"maximum queue length and service utilization. For simplicity, the model uses abstract (discrete) \"+\n    \"time and abstracts away from individual customers and from the composition of the queue, \" +\n    \"which is only represented in terms of its length. The model includes one object type: \" +\n    \"<i>ServiceDesk</i>, and two event types: <i>CustomerArrival</i> and <i>CustomerDeparture</i>. The random \"+\n    \"time variable for the recurrence of customer arrival events has a discrete uniform distribution and \" +\n    \"the random time variable for modeling the duration of services has a discrete empirical distribution.\";\noes.ui.i18n.changeDates.shortDescription = \"2019-04-01\";\nsim.model.license = \"CC BY-NC\";\nsim.model.creator = \"Gerd Wagner\";\nsim.model.created = \"2016-06-01\";\nsim.model.modified = \"2017-04-19\";\n"},{"_content":"self.importScripts(\"../framework/simulation-worker-core.js\");\nself.importScripts(\"simulation.js\");\n\nif (sim.model.objectTypes) {\n  sim.model.objectTypes.forEach( function (objT) {\n    self.importScripts( objT + \".js\");\n  });\n}\nif (sim.model.eventTypes) {\n  sim.model.eventTypes.forEach( function (evtT) {\n    self.importScripts( evtT + \".js\");\n  });\n}\nif (sim.model.activityTypes) {\n  sim.model.activityTypes.forEach( function (actT) {\n    self.importScripts( actT + \".js\");\n  });\n}\n\n//=================================================================\n\nonmessage = function (e) {\n  // receive parameter/variable values changed via the UI\n  if (e.data.endTime) sim.scenario.simulationEndTime = e.data.endTime;\n  if (e.data.changedModelVarValues) {\n    Object.keys( e.data.changedModelVarValues).forEach( function (varName) {\n      sim.model.v[varName].value = e.data.changedModelVarValues[varName];\n    });\n  }\n  if (e.data.runExperiment) {\n    sim.initializeSimulator( e.data.dbName);\n    if (e.data.expReplications) sim.experiment.replications = e.data.expReplications;\n    sim.runExperiment();\n  } else {\n    sim.initializeSimulator();\n    if (e.data.createLog !== undefined) sim.config.createLog = e.data.createLog;\n    sim.runScenario( true);  // run in worker thread\n  }\n};","source":"sims/1/simulation-worker.js","raw":"self.importScripts(\"../framework/simulation-worker-core.js\");\nself.importScripts(\"simulation.js\");\n\nif (sim.model.objectTypes) {\n  sim.model.objectTypes.forEach( function (objT) {\n    self.importScripts( objT + \".js\");\n  });\n}\nif (sim.model.eventTypes) {\n  sim.model.eventTypes.forEach( function (evtT) {\n    self.importScripts( evtT + \".js\");\n  });\n}\nif (sim.model.activityTypes) {\n  sim.model.activityTypes.forEach( function (actT) {\n    self.importScripts( actT + \".js\");\n  });\n}\n\n//=================================================================\n\nonmessage = function (e) {\n  // receive parameter/variable values changed via the UI\n  if (e.data.endTime) sim.scenario.simulationEndTime = e.data.endTime;\n  if (e.data.changedModelVarValues) {\n    Object.keys( e.data.changedModelVarValues).forEach( function (varName) {\n      sim.model.v[varName].value = e.data.changedModelVarValues[varName];\n    });\n  }\n  if (e.data.runExperiment) {\n    sim.initializeSimulator( e.data.dbName);\n    if (e.data.expReplications) sim.experiment.replications = e.data.expReplications;\n    sim.runExperiment();\n  } else {\n    sim.initializeSimulator();\n    if (e.data.createLog !== undefined) sim.config.createLog = e.data.createLog;\n    sim.runScenario( true);  // run in worker thread\n  }\n};","date":"2019-07-04T16:07:08.502Z","updated":"2019-02-09T10:36:34.015Z","path":"sims/1/simulation-worker.js","layout":"false","title":"","comments":1,"_id":"cjxov56or00044mrx29idxhkb","content":"self.importScripts(\"../framework/simulation-worker-core.js\");\nself.importScripts(\"simulation.js\");\n\nif (sim.model.objectTypes) {\n  sim.model.objectTypes.forEach( function (objT) {\n    self.importScripts( objT + \".js\");\n  });\n}\nif (sim.model.eventTypes) {\n  sim.model.eventTypes.forEach( function (evtT) {\n    self.importScripts( evtT + \".js\");\n  });\n}\nif (sim.model.activityTypes) {\n  sim.model.activityTypes.forEach( function (actT) {\n    self.importScripts( actT + \".js\");\n  });\n}\n\n//=================================================================\n\nonmessage = function (e) {\n  // receive parameter/variable values changed via the UI\n  if (e.data.endTime) sim.scenario.simulationEndTime = e.data.endTime;\n  if (e.data.changedModelVarValues) {\n    Object.keys( e.data.changedModelVarValues).forEach( function (varName) {\n      sim.model.v[varName].value = e.data.changedModelVarValues[varName];\n    });\n  }\n  if (e.data.runExperiment) {\n    sim.initializeSimulator( e.data.dbName);\n    if (e.data.expReplications) sim.experiment.replications = e.data.expReplications;\n    sim.runExperiment();\n  } else {\n    sim.initializeSimulator();\n    if (e.data.createLog !== undefined) sim.config.createLog = e.data.createLog;\n    sim.runScenario( true);  // run in worker thread\n  }\n};","site":{"data":{}},"excerpt":"","more":"self.importScripts(\"../framework/simulation-worker-core.js\");\nself.importScripts(\"simulation.js\");\n\nif (sim.model.objectTypes) {\n  sim.model.objectTypes.forEach( function (objT) {\n    self.importScripts( objT + \".js\");\n  });\n}\nif (sim.model.eventTypes) {\n  sim.model.eventTypes.forEach( function (evtT) {\n    self.importScripts( evtT + \".js\");\n  });\n}\nif (sim.model.activityTypes) {\n  sim.model.activityTypes.forEach( function (actT) {\n    self.importScripts( actT + \".js\");\n  });\n}\n\n//=================================================================\n\nonmessage = function (e) {\n  // receive parameter/variable values changed via the UI\n  if (e.data.endTime) sim.scenario.simulationEndTime = e.data.endTime;\n  if (e.data.changedModelVarValues) {\n    Object.keys( e.data.changedModelVarValues).forEach( function (varName) {\n      sim.model.v[varName].value = e.data.changedModelVarValues[varName];\n    });\n  }\n  if (e.data.runExperiment) {\n    sim.initializeSimulator( e.data.dbName);\n    if (e.data.expReplications) sim.experiment.replications = e.data.expReplications;\n    sim.runExperiment();\n  } else {\n    sim.initializeSimulator();\n    if (e.data.createLog !== undefined) sim.config.createLog = e.data.createLog;\n    sim.runScenario( true);  // run in worker thread\n  }\n};"},{"_content":"/*******************************************************\n * ServiceDesk-1 - An example of a discrete event simulation.\n * @copyright Copyright 2016 Gerd Wagner, BTU (Germany) + ODU (VA, USA)\n * @author Gerd Wagner\n * @license The MIT License (MIT)\n ********************************************************/\n/*******************************************************\n Simulation Scenario Parameters\n********************************************************/\nsim.scenario.simulationEndTime = 200;\nsim.scenario.randomSeed = 12345;  // optional\nsim.config.createLog = true;\n/*******************************************************\n Simulation Model\n********************************************************/\nsim.model.time = \"discrete\";  // implies using only discrete random variables\nsim.model.objectTypes = [\"ServiceDesk\"];\nsim.model.eventTypes = [\"CustomerArrival\", \"CustomerDeparture\"];\n\nsim.model.constraints = {\n  \"nonEmptyQueue-implies-DepartureEvt\": function () {\n    var departureEvtExists = sim.FEL.containsEventOfType(\"CustomerDeparture\");\n    if (sim.namedObjects[\"serviceDesk1\"].queueLength > 0) return departureEvtExists;  // there must be a departure\n    else return !departureEvtExists;  // there must not be a departure\n  }\n};\n\n/*******************************************************\n Define Initial State\n********************************************************/\n// Either declaratively:\nsim.scenario.initialState.objects = {\n  \"1\": {typeName: \"ServiceDesk\", name:\"serviceDesk1\", shortLabel: \"sd1\", queueLength: 0}\n};\nsim.scenario.initialState.events = [\n  {typeName: \"CustomerArrival\", occTime:1, serviceDesk: 1}\n];\n// Or with a procedure:\n/*\nsim.scenario.setupInitialState = function () {\n  var sD = new ServiceDesk({id: 1, queueLength: 0, isBusy: false});\n  sim.addObject( sD);\n  sim.scheduleEvent( new CustomerArrival({occTime:1, serviceDesk: sD}));\n}\n*/\n/*******************************************************\n Define Output Statistics Variables\n ********************************************************/\nsim.model.statistics = {\n  \"arrivedCustomers\": {range:\"NonNegativeInteger\", label:\"Arrived customers\"},\n  \"departedCustomers\": {range:\"NonNegativeInteger\", label:\"Departed customers\"},\n  \"totalServiceTime\": {range:\"NonNegativeInteger\"},\n  \"serviceUtilization\": {range:\"Decimal\", label:\"Service utilization\",\n      computeOnlyAtEnd: true, decimalPlaces: 1, unit: \"%\",\n      expression: function () {\n        return sim.stat.totalServiceTime / sim.time * 100\n      }\n  },\n  \"maxQueueLength\": {objectType:\"ServiceDesk\", objectIdRef: 1,\n      property:\"queueLength\", aggregationFunction:\"max\", label:\"Max. queue length\"},\n  \"averageQueueLength\": {objectType:\"ServiceDesk\", objectIdRef: 1,\n    property:\"queueLength\", aggregationFunction:\"avg\", label:\"Avg. queue length\"},\n  \"queueLength\": {objectType:\"ServiceDesk\", objectIdRef: 1,\n    property:\"queueLength\", showTimeSeries: true, label:\"Queue length\"}\n};\n/*******************************************************\n Define an observation UI\n ********************************************************/\n/*\nsim.config.observationUI.type = \"SVG\";\nsim.config.observationUI.canvas.width = 600;\nsim.config.observationUI.canvas.height = 300;\nsim.config.observationUI.fixedElements = {\n  \"desk\": {\n    shapeName: \"rect\",\n    shapeAttributes: { x: 350, y: 200, width: 50, height: 30},\n    style: \"fill:brown; stroke-width:0\"\n  }\n};\nsim.config.observationUI.objectViews = {\n  \"serviceDesk1\": [  // a view of the queue\n    { shapeName: \"rect\",  // a rectangle defined by\n      shapeAttributes: {  // left-upper corner (x,y) as well as width and height\n        x: function (sd) {return Math.max( 0, 330 - sd.queueLength * 20);},\n        width: function (sd) {return Math.min( 300, sd.queueLength * 20);},\n        y: 150, height: 80\n      },\n      style:\"fill:yellow; stroke-width:0\"\n    },\n    { shapeName: \"text\",\n      shapeAttributes: {x: 325, y: 250,\n          textContent: function (sd) {return sd.queueLength;}},\n      style:\"font-size:14px; text-anchor:middle\"\n    }\n  ]\n};\n*/","source":"sims/1/simulation.js","raw":"/*******************************************************\n * ServiceDesk-1 - An example of a discrete event simulation.\n * @copyright Copyright 2016 Gerd Wagner, BTU (Germany) + ODU (VA, USA)\n * @author Gerd Wagner\n * @license The MIT License (MIT)\n ********************************************************/\n/*******************************************************\n Simulation Scenario Parameters\n********************************************************/\nsim.scenario.simulationEndTime = 200;\nsim.scenario.randomSeed = 12345;  // optional\nsim.config.createLog = true;\n/*******************************************************\n Simulation Model\n********************************************************/\nsim.model.time = \"discrete\";  // implies using only discrete random variables\nsim.model.objectTypes = [\"ServiceDesk\"];\nsim.model.eventTypes = [\"CustomerArrival\", \"CustomerDeparture\"];\n\nsim.model.constraints = {\n  \"nonEmptyQueue-implies-DepartureEvt\": function () {\n    var departureEvtExists = sim.FEL.containsEventOfType(\"CustomerDeparture\");\n    if (sim.namedObjects[\"serviceDesk1\"].queueLength > 0) return departureEvtExists;  // there must be a departure\n    else return !departureEvtExists;  // there must not be a departure\n  }\n};\n\n/*******************************************************\n Define Initial State\n********************************************************/\n// Either declaratively:\nsim.scenario.initialState.objects = {\n  \"1\": {typeName: \"ServiceDesk\", name:\"serviceDesk1\", shortLabel: \"sd1\", queueLength: 0}\n};\nsim.scenario.initialState.events = [\n  {typeName: \"CustomerArrival\", occTime:1, serviceDesk: 1}\n];\n// Or with a procedure:\n/*\nsim.scenario.setupInitialState = function () {\n  var sD = new ServiceDesk({id: 1, queueLength: 0, isBusy: false});\n  sim.addObject( sD);\n  sim.scheduleEvent( new CustomerArrival({occTime:1, serviceDesk: sD}));\n}\n*/\n/*******************************************************\n Define Output Statistics Variables\n ********************************************************/\nsim.model.statistics = {\n  \"arrivedCustomers\": {range:\"NonNegativeInteger\", label:\"Arrived customers\"},\n  \"departedCustomers\": {range:\"NonNegativeInteger\", label:\"Departed customers\"},\n  \"totalServiceTime\": {range:\"NonNegativeInteger\"},\n  \"serviceUtilization\": {range:\"Decimal\", label:\"Service utilization\",\n      computeOnlyAtEnd: true, decimalPlaces: 1, unit: \"%\",\n      expression: function () {\n        return sim.stat.totalServiceTime / sim.time * 100\n      }\n  },\n  \"maxQueueLength\": {objectType:\"ServiceDesk\", objectIdRef: 1,\n      property:\"queueLength\", aggregationFunction:\"max\", label:\"Max. queue length\"},\n  \"averageQueueLength\": {objectType:\"ServiceDesk\", objectIdRef: 1,\n    property:\"queueLength\", aggregationFunction:\"avg\", label:\"Avg. queue length\"},\n  \"queueLength\": {objectType:\"ServiceDesk\", objectIdRef: 1,\n    property:\"queueLength\", showTimeSeries: true, label:\"Queue length\"}\n};\n/*******************************************************\n Define an observation UI\n ********************************************************/\n/*\nsim.config.observationUI.type = \"SVG\";\nsim.config.observationUI.canvas.width = 600;\nsim.config.observationUI.canvas.height = 300;\nsim.config.observationUI.fixedElements = {\n  \"desk\": {\n    shapeName: \"rect\",\n    shapeAttributes: { x: 350, y: 200, width: 50, height: 30},\n    style: \"fill:brown; stroke-width:0\"\n  }\n};\nsim.config.observationUI.objectViews = {\n  \"serviceDesk1\": [  // a view of the queue\n    { shapeName: \"rect\",  // a rectangle defined by\n      shapeAttributes: {  // left-upper corner (x,y) as well as width and height\n        x: function (sd) {return Math.max( 0, 330 - sd.queueLength * 20);},\n        width: function (sd) {return Math.min( 300, sd.queueLength * 20);},\n        y: 150, height: 80\n      },\n      style:\"fill:yellow; stroke-width:0\"\n    },\n    { shapeName: \"text\",\n      shapeAttributes: {x: 325, y: 250,\n          textContent: function (sd) {return sd.queueLength;}},\n      style:\"font-size:14px; text-anchor:middle\"\n    }\n  ]\n};\n*/","date":"2019-07-04T16:07:08.503Z","updated":"2019-02-09T10:36:34.015Z","path":"sims/1/simulation.js","layout":"false","title":"","comments":1,"_id":"cjxov56ou00054mrx83pyq6t2","content":"/*******************************************************\n * ServiceDesk-1 - An example of a discrete event simulation.\n * @copyright Copyright 2016 Gerd Wagner, BTU (Germany) + ODU (VA, USA)\n * @author Gerd Wagner\n * @license The MIT License (MIT)\n ********************************************************/\n/*******************************************************\n Simulation Scenario Parameters\n********************************************************/\nsim.scenario.simulationEndTime = 200;\nsim.scenario.randomSeed = 12345;  // optional\nsim.config.createLog = true;\n/*******************************************************\n Simulation Model\n********************************************************/\nsim.model.time = \"discrete\";  // implies using only discrete random variables\nsim.model.objectTypes = [\"ServiceDesk\"];\nsim.model.eventTypes = [\"CustomerArrival\", \"CustomerDeparture\"];\n\nsim.model.constraints = {\n  \"nonEmptyQueue-implies-DepartureEvt\": function () {\n    var departureEvtExists = sim.FEL.containsEventOfType(\"CustomerDeparture\");\n    if (sim.namedObjects[\"serviceDesk1\"].queueLength > 0) return departureEvtExists;  // there must be a departure\n    else return !departureEvtExists;  // there must not be a departure\n  }\n};\n\n/*******************************************************\n Define Initial State\n********************************************************/\n// Either declaratively:\nsim.scenario.initialState.objects = {\n  \"1\": {typeName: \"ServiceDesk\", name:\"serviceDesk1\", shortLabel: \"sd1\", queueLength: 0}\n};\nsim.scenario.initialState.events = [\n  {typeName: \"CustomerArrival\", occTime:1, serviceDesk: 1}\n];\n// Or with a procedure:\n/*\nsim.scenario.setupInitialState = function () {\n  var sD = new ServiceDesk({id: 1, queueLength: 0, isBusy: false});\n  sim.addObject( sD);\n  sim.scheduleEvent( new CustomerArrival({occTime:1, serviceDesk: sD}));\n}\n*/\n/*******************************************************\n Define Output Statistics Variables\n ********************************************************/\nsim.model.statistics = {\n  \"arrivedCustomers\": {range:\"NonNegativeInteger\", label:\"Arrived customers\"},\n  \"departedCustomers\": {range:\"NonNegativeInteger\", label:\"Departed customers\"},\n  \"totalServiceTime\": {range:\"NonNegativeInteger\"},\n  \"serviceUtilization\": {range:\"Decimal\", label:\"Service utilization\",\n      computeOnlyAtEnd: true, decimalPlaces: 1, unit: \"%\",\n      expression: function () {\n        return sim.stat.totalServiceTime / sim.time * 100\n      }\n  },\n  \"maxQueueLength\": {objectType:\"ServiceDesk\", objectIdRef: 1,\n      property:\"queueLength\", aggregationFunction:\"max\", label:\"Max. queue length\"},\n  \"averageQueueLength\": {objectType:\"ServiceDesk\", objectIdRef: 1,\n    property:\"queueLength\", aggregationFunction:\"avg\", label:\"Avg. queue length\"},\n  \"queueLength\": {objectType:\"ServiceDesk\", objectIdRef: 1,\n    property:\"queueLength\", showTimeSeries: true, label:\"Queue length\"}\n};\n/*******************************************************\n Define an observation UI\n ********************************************************/\n/*\nsim.config.observationUI.type = \"SVG\";\nsim.config.observationUI.canvas.width = 600;\nsim.config.observationUI.canvas.height = 300;\nsim.config.observationUI.fixedElements = {\n  \"desk\": {\n    shapeName: \"rect\",\n    shapeAttributes: { x: 350, y: 200, width: 50, height: 30},\n    style: \"fill:brown; stroke-width:0\"\n  }\n};\nsim.config.observationUI.objectViews = {\n  \"serviceDesk1\": [  // a view of the queue\n    { shapeName: \"rect\",  // a rectangle defined by\n      shapeAttributes: {  // left-upper corner (x,y) as well as width and height\n        x: function (sd) {return Math.max( 0, 330 - sd.queueLength * 20);},\n        width: function (sd) {return Math.min( 300, sd.queueLength * 20);},\n        y: 150, height: 80\n      },\n      style:\"fill:yellow; stroke-width:0\"\n    },\n    { shapeName: \"text\",\n      shapeAttributes: {x: 325, y: 250,\n          textContent: function (sd) {return sd.queueLength;}},\n      style:\"font-size:14px; text-anchor:middle\"\n    }\n  ]\n};\n*/","site":{"data":{}},"excerpt":"","more":"/*******************************************************\n * ServiceDesk-1 - An example of a discrete event simulation.\n * @copyright Copyright 2016 Gerd Wagner, BTU (Germany) + ODU (VA, USA)\n * @author Gerd Wagner\n * @license The MIT License (MIT)\n ********************************************************/\n/*******************************************************\n Simulation Scenario Parameters\n********************************************************/\nsim.scenario.simulationEndTime = 200;\nsim.scenario.randomSeed = 12345;  // optional\nsim.config.createLog = true;\n/*******************************************************\n Simulation Model\n********************************************************/\nsim.model.time = \"discrete\";  // implies using only discrete random variables\nsim.model.objectTypes = [\"ServiceDesk\"];\nsim.model.eventTypes = [\"CustomerArrival\", \"CustomerDeparture\"];\n\nsim.model.constraints = {\n  \"nonEmptyQueue-implies-DepartureEvt\": function () {\n    var departureEvtExists = sim.FEL.containsEventOfType(\"CustomerDeparture\");\n    if (sim.namedObjects[\"serviceDesk1\"].queueLength > 0) return departureEvtExists;  // there must be a departure\n    else return !departureEvtExists;  // there must not be a departure\n  }\n};\n\n/*******************************************************\n Define Initial State\n********************************************************/\n// Either declaratively:\nsim.scenario.initialState.objects = {\n  \"1\": {typeName: \"ServiceDesk\", name:\"serviceDesk1\", shortLabel: \"sd1\", queueLength: 0}\n};\nsim.scenario.initialState.events = [\n  {typeName: \"CustomerArrival\", occTime:1, serviceDesk: 1}\n];\n// Or with a procedure:\n/*\nsim.scenario.setupInitialState = function () {\n  var sD = new ServiceDesk({id: 1, queueLength: 0, isBusy: false});\n  sim.addObject( sD);\n  sim.scheduleEvent( new CustomerArrival({occTime:1, serviceDesk: sD}));\n}\n*/\n/*******************************************************\n Define Output Statistics Variables\n ********************************************************/\nsim.model.statistics = {\n  \"arrivedCustomers\": {range:\"NonNegativeInteger\", label:\"Arrived customers\"},\n  \"departedCustomers\": {range:\"NonNegativeInteger\", label:\"Departed customers\"},\n  \"totalServiceTime\": {range:\"NonNegativeInteger\"},\n  \"serviceUtilization\": {range:\"Decimal\", label:\"Service utilization\",\n      computeOnlyAtEnd: true, decimalPlaces: 1, unit: \"%\",\n      expression: function () {\n        return sim.stat.totalServiceTime / sim.time * 100\n      }\n  },\n  \"maxQueueLength\": {objectType:\"ServiceDesk\", objectIdRef: 1,\n      property:\"queueLength\", aggregationFunction:\"max\", label:\"Max. queue length\"},\n  \"averageQueueLength\": {objectType:\"ServiceDesk\", objectIdRef: 1,\n    property:\"queueLength\", aggregationFunction:\"avg\", label:\"Avg. queue length\"},\n  \"queueLength\": {objectType:\"ServiceDesk\", objectIdRef: 1,\n    property:\"queueLength\", showTimeSeries: true, label:\"Queue length\"}\n};\n/*******************************************************\n Define an observation UI\n ********************************************************/\n/*\nsim.config.observationUI.type = \"SVG\";\nsim.config.observationUI.canvas.width = 600;\nsim.config.observationUI.canvas.height = 300;\nsim.config.observationUI.fixedElements = {\n  \"desk\": {\n    shapeName: \"rect\",\n    shapeAttributes: { x: 350, y: 200, width: 50, height: 30},\n    style: \"fill:brown; stroke-width:0\"\n  }\n};\nsim.config.observationUI.objectViews = {\n  \"serviceDesk1\": [  // a view of the queue\n    { shapeName: \"rect\",  // a rectangle defined by\n      shapeAttributes: {  // left-upper corner (x,y) as well as width and height\n        x: function (sd) {return Math.max( 0, 330 - sd.queueLength * 20);},\n        width: function (sd) {return Math.min( 300, sd.queueLength * 20);},\n        y: 150, height: 80\n      },\n      style:\"fill:yellow; stroke-width:0\"\n    },\n    { shapeName: \"text\",\n      shapeAttributes: {x: 325, y: 250,\n          textContent: function (sd) {return sd.queueLength;}},\n      style:\"font-size:14px; text-anchor:middle\"\n    }\n  ]\n};\n*/"}],"Post":[],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}